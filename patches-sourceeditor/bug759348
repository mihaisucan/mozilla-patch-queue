# HG changeset patch
# Parent 2582b429e8969ae9f09a99a542d090643393ffba
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1338305478 -10800

Bug 759348 - Require.jsm: add support for domains in define()

diff --git a/browser/devtools/commandline/test/browser_gcli_web.js b/browser/devtools/commandline/test/browser_gcli_web.js
--- a/browser/devtools/commandline/test/browser_gcli_web.js
+++ b/browser/devtools/commandline/test/browser_gcli_web.js
@@ -3172,16 +3172,17 @@ exports.testDomains = function(options) 
 
   if (options.isUnamdized) {
     test.log('Running unamdized, Reduced tests');
     return;
   }
 
   if (define.Domain) {
     var domain = new define.Domain();
+    domain.definedModules = define.globalDomain.definedModules;
     var requireable2 = domain.require('gclitest/requirable');
     test.is(undefined, requireable2.status);
     test.is('initial', requireable2.getStatus());
     requireable2.setStatus(999);
     test.is(999, requireable2.getStatus());
     test.is(undefined, requireable2.status);
 
     test.is('42', requireable.getStatus());
@@ -4157,14 +4158,14 @@ function test() {
       window: browser.contentDocument.defaultView
     });
     finish();
   });
 }
 
 registerCleanupFunction(function() {
   testModuleNames.forEach(function(moduleName) {
-    delete localDefine.modules[moduleName];
+    delete localDefine.globalDomain.definedModules[moduleName];
     delete localDefine.globalDomain.modules[moduleName];
   });
 
   localDefine = undefined;
 });
diff --git a/browser/devtools/shared/Console.jsm b/browser/devtools/shared/Console.jsm
--- a/browser/devtools/shared/Console.jsm
+++ b/browser/devtools/shared/Console.jsm
@@ -157,17 +157,17 @@ function log(aThing) {
 
   if (aThing === undefined) {
     return "undefined\n";
   }
 
   if (typeof aThing == "object") {
     let reply = "";
     let type = getCtorName(aThing);
-    if (type == "Error") {
+    if (type == "Error" || type == "TypeError") {
       reply += "  " + aThing.message + "\n";
       reply += logProperty("stack", aThing.stack);
     }
     else if (aThing instanceof Components.interfaces.nsIDOMNode && aThing.tagName) {
       reply += "  " + debugElement(aThing) + "\n";
     }
     else {
       let keys = Object.getOwnPropertyNames(aThing);
diff --git a/browser/devtools/shared/Require.jsm b/browser/devtools/shared/Require.jsm
--- a/browser/devtools/shared/Require.jsm
+++ b/browser/devtools/shared/Require.jsm
@@ -19,81 +19,77 @@ const EXPORTED_SYMBOLS = [ "define", "re
 
 const console = (function() {
   const tempScope = {};
   Components.utils.import("resource:///modules/devtools/Console.jsm", tempScope);
   return tempScope.console;
 })();
 
 /**
- * Define a module along with a payload.
- * @param moduleName Name for the payload
- * @param deps Ignored. For compatibility with CommonJS AMD Spec
- * @param payload Function with (require, exports, module) params
- */
-function define(moduleName, deps, payload) {
-  if (typeof moduleName != "string") {
-    console.error(this.depth + " Error: Module name is not a string.");
-    console.trace();
-    return;
-  }
-
-  if (arguments.length == 2) {
-    payload = deps;
-  }
-  else {
-    payload.deps = deps;
-  }
-
-  if (define.debugDependencies) {
-    console.log("define: " + moduleName + " -> " + payload.toString()
-        .slice(0, 40).replace(/\n/, '\\n').replace(/\r/, '\\r') + "...");
-  }
-
-  if (moduleName in define.modules) {
-    console.error(this.depth + " Error: Redefining module: " + moduleName);
-  }
-  define.modules[moduleName] = payload;
-}
-
-/**
- * The global store of un-instantiated modules
- */
-define.modules = {};
-
-/**
- * Should we console.log on module definition/instantiation/requirement?
- */
-define.debugDependencies = false;
-
-
-/**
  * Self executing function in which Domain is defined, and attached to define
  */
 var Syntax = {
   COMMON_JS: 'commonjs',
   AMD: 'amd'
 };
 
 /**
  * We invoke require() in the context of a Domain so we can have multiple
  * sets of modules running separate from each other.
  * This contrasts with JSMs which are singletons, Domains allows us to
  * optionally load a CommonJS module twice with separate data each time.
  * Perhaps you want 2 command lines with a different set of commands in each,
  * for example.
  */
 function Domain() {
+  /**
+   * The store of instantiated modules
+   */
   this.modules = {};
+
+  /**
+   * The store of un-instantiated modules
+   */
+  this.definedModules = {};
+
   this.syntax = Syntax.COMMON_JS;
+  this.debugDependencies = false;
+  this.depth = "";
+}
 
-  if (define.debugDependencies) {
-    this.depth = "";
+/**
+ * Define a module along with a payload.
+ * @param moduleName Name for the payload
+ * @param deps Ignored. For compatibility with CommonJS AMD Spec
+ * @param payload Function with (require, exports, module) params
+ */
+Domain.prototype.define = function(moduleName, deps, payload) {
+  if (typeof moduleName != "string") {
+    console.error(this.depth + " Error: Module name is not a string.");
+    console.trace();
+    return;
   }
-}
+
+  if (arguments.length == 2) {
+    payload = deps;
+  }
+  else {
+    payload.deps = deps;
+  }
+
+  if (this.debugDependencies) {
+    console.log("define: " + moduleName + " -> " + payload.toString()
+        .slice(0, 40).replace(/\n/, '\\n').replace(/\r/, '\\r') + "...");
+  }
+
+  if (moduleName in this.definedModules) {
+    console.error(this.depth + " Error: Redefining module: " + moduleName);
+  }
+  this.definedModules[moduleName] = payload;
+};
 
 /**
  * Lookup module names and resolve them by calling the definition function if
  * needed.
  * There are 2 ways to call this, either with an array of dependencies and a
  * callback to call when the dependencies are found (which can happen
  * asynchronously in an in-page context) or with a single string an no
  * callback where the dependency is resolved synchronously and returned.
@@ -129,35 +125,35 @@ Domain.prototype.require = function(conf
  * Lookup module names and resolve them by calling the definition function if
  * needed.
  * @param moduleName A name for the payload to lookup
  * @return The module specified by aModuleName or null if not found
  */
 Domain.prototype.lookup = function(moduleName) {
   if (moduleName in this.modules) {
     var module = this.modules[moduleName];
-    if (define.debugDependencies) {
+    if (this.debugDependencies) {
       console.log(this.depth + " Using module: " + moduleName);
     }
     return module;
   }
 
-  if (!(moduleName in define.modules)) {
+  if (!(moduleName in this.definedModules)) {
     console.error(this.depth + " Missing module: " + moduleName);
     return null;
   }
 
-  var module = define.modules[moduleName];
+  var module = this.definedModules[moduleName];
 
-  if (define.debugDependencies) {
+  if (this.debugDependencies) {
     console.log(this.depth + " Compiling module: " + moduleName);
   }
 
   if (typeof module == "function") {
-    if (define.debugDependencies) {
+    if (this.debugDependencies) {
       this.depth += ".";
     }
 
     var exports;
     try {
       if (this.syntax === Syntax.COMMON_JS) {
         exports = {};
         module(this.require.bind(this), exports, { id: moduleName, uri: "" });
@@ -170,32 +166,40 @@ Domain.prototype.lookup = function(modul
       }
     }
     catch (ex) {
       console.error("Error using module: " + moduleName, ex);
       throw ex;
     }
     module = exports;
 
-    if (define.debugDependencies) {
+    if (this.debugDependencies) {
       this.depth = this.depth.slice(0, -1);
     }
   }
 
   // cache the resulting module object for next time
   this.modules[moduleName] = module;
 
   return module;
 };
 
+var globalDomain = new Domain();
+
+/**
+ * Expose a default define function which is the define of the global
+ * sandbox to make it easy to use.
+ */
+const define = globalDomain.define.bind(globalDomain);
+
 /**
  * Expose the Domain constructor and a global domain (on the define function
  * to avoid exporting more than we need. This is a common pattern with
  * require systems)
  */
 define.Domain = Domain;
-define.globalDomain = new Domain();
+define.globalDomain = globalDomain;
 
 /**
  * Expose a default require function which is the require of the global
  * sandbox to make it easy to use.
  */
 const require = define.globalDomain.require.bind(define.globalDomain);
diff --git a/browser/devtools/shared/test/browser_require_basic.js b/browser/devtools/shared/test/browser_require_basic.js
--- a/browser/devtools/shared/test/browser_require_basic.js
+++ b/browser/devtools/shared/test/browser_require_basic.js
@@ -41,21 +41,21 @@ function setup() {
   });
 
   define('gclitest/recurse', [], function(require, exports, module) {
     require('gclitest/recurse');
   });
 }
 
 function shutdown() {
-  delete define.modules['gclitest/requirable'];
+  delete define.globalDomain.definedModules['gclitest/requirable'];
   delete define.globalDomain.modules['gclitest/requirable'];
-  delete define.modules['gclitest/unrequirable'];
+  delete define.globalDomain.definedModules['gclitest/unrequirable'];
   delete define.globalDomain.modules['gclitest/unrequirable'];
-  delete define.modules['gclitest/recurse'];
+  delete define.globalDomain.definedModules['gclitest/recurse'];
   delete define.globalDomain.modules['gclitest/recurse'];
 
   define = undefined;
   require = undefined;
 
   finish();
 }
 
@@ -75,16 +75,17 @@ function testDomains() {
   requireable.setStatus(null);
   is(null, requireable.getStatus(), 'requirable.getStatus changed to null');
   is(requireable.status, undefined, 'requirable still has no status');
   requireable.setStatus('42');
   is('42', requireable.getStatus(), 'requirable.getStatus changed to 42');
   is(requireable.status, undefined, 'requirable *still* has no status');
 
   let domain = new define.Domain();
+  domain.definedModules = define.globalDomain.definedModules;
   let requireable2 = domain.require('gclitest/requirable');
   is(requireable2.status, undefined, 'requirable2 has no status');
   is('initial', requireable2.getStatus(), 'requirable2.getStatus is initial');
   requireable2.setStatus(999);
   is(999, requireable2.getStatus(), 'requirable2.getStatus changed to 999');
   is(requireable2.status, undefined, 'requirable2 still has no status');
 
   is('42', requireable.getStatus(), 'status 42');
