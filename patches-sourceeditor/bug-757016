# HG changeset patch
# Parent a408e38a1cc9b22bf8f8529e6b80865225139dc3
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1343304564 -10800

Bug 757016 - API for changing editor styling after initialization

diff --git a/browser/devtools/sourceeditor/source-editor-orion.jsm b/browser/devtools/sourceeditor/source-editor-orion.jsm
--- a/browser/devtools/sourceeditor/source-editor-orion.jsm
+++ b/browser/devtools/sourceeditor/source-editor-orion.jsm
@@ -23,16 +23,19 @@ XPCOMUtils.defineLazyGetter(this, "orion
   return Services.strings.createBundle(ORION_L10N);
 });
 
 const ORION_SCRIPT = "chrome://browser/content/orion.js";
 const ORION_IFRAME = "data:text/html;charset=utf8,<!DOCTYPE html>" +
   "<html style='height:100%' dir='ltr'>" +
   "<head><meta charset='utf8'></head>" +
   "<body style='height:100%;margin:0;overflow:hidden'>" +
+  "<div id='editorTheme'></div>" +
+  "<div id='editorStyles'></div>" +
+  "<style id='fontSizePref' type='text/css'></style>" +
   "<div id='editor' style='height:100%'></div>" +
   "</body></html>";
 
 const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
 
 /**
  * Maximum allowed vertical offset for the line index when you call
  * SourceEditor.setCaretPosition().
@@ -237,16 +240,18 @@ SourceEditor.prototype = {
   _mode: null,
   _expandTab: null,
   _tabSize: null,
   _iframeWindow: null,
   _eventTarget: null,
   _eventListenersQueue: null,
   _contextMenu: null,
   _dirty: false,
+  _fontSize: 0,
+  _theme: null,
 
   /**
    * The Source Editor user interface manager.
    * @type object
    *       An instance of the SourceEditorUI.
    */
   ui: null,
 
@@ -277,35 +282,21 @@ SourceEditor.prototype = {
 
     this._config = {};
     for (let key in SourceEditor.DEFAULTS) {
       this._config[key] = key in aConfig ?
                           aConfig[key] :
                           SourceEditor.DEFAULTS[key];
     }
 
-    let theme = this._config.theme;
-    let stylesheets = theme in ORION_THEMES ? ORION_THEMES[theme] : theme;
-    if (!Array.isArray(stylesheets)) {
-      stylesheets = [stylesheets];
-    }
-
-    let links = [];
-    stylesheets.forEach(function(aStyle) {
-      links.push("<link rel='stylesheet' href='" + aStyle +
-                 "' type='text/css'>");
-    });
-
-    let src = ORION_IFRAME.replace("</head>", links.join("\n") + "</head>");
-
     let doc = aElement.ownerDocument;
     this._iframe = doc.createElementNS(XUL_NS, "iframe");
     this._iframe.flex = 1;
     this._iframe.addEventListener("load", this._onIframeLoad, true);
-    this._iframe.setAttribute("src", src);
+    this._iframe.setAttribute("src", ORION_IFRAME);
 
     aElement.appendChild(this._iframe);
     this.parentElement = aElement;
 
     this._onReadyCallback = aCallback;
     this.ui.init();
   },
 
@@ -319,23 +310,23 @@ SourceEditor.prototype = {
 
     this._iframeWindow = this._iframe.contentWindow.wrappedJSObject;
     let window = this._iframeWindow;
 
     if (gOrionModules) {
       unregisterModules(gOrionModules);
     }
 
-    // Setup the font size.
-    this._fontSize = Services.prefs.getIntPref(SourceEditor.PREFS.FONT_SIZE);
-    let fontSize = this._fontSize ? this._fontSize + "px" : "-moz-use-system-font";
-    let style = window.document.createElement("style");
-    style.id = "fontSizePref";
-    style.textContent = ".textviewContainer { font-size: " + fontSize + "; }";
-    window.document.head.appendChild(style);
+    if (this._config.theme) {
+      this.setTheme(this._config.theme);
+    }
+    if (this._config.customStyles) {
+      this.setStylesheets(this._config.customStyles);
+    }
+    this.fontSize = Services.prefs.getIntPref(SourceEditor.PREFS.FONT_SIZE);
 
     let domain = new define.Domain();
     domain.syntax = "amd";
 
     window.require = domain.require.bind(domain);
     window.define = define;
 
     let onScriptLoad = function _onScriptLoad() {
@@ -548,16 +539,106 @@ SourceEditor.prototype = {
     this.ui.onReady();
     if (this._onReadyCallback) {
       this._onReadyCallback(this);
       this._onReadyCallback = null;
     }
   },
 
   /**
+   * Get the current theme used by the editor.
+   *
+   * @return string
+   *         Current editor theme name.
+   */
+  getTheme: function SE_getTheme()
+  {
+    return this._theme;
+  },
+
+  /**
+   * Change the editor theme.
+   *
+   * @param string [aTheme]
+   *        One of the known themes you want to switch to (pick one of
+   *        the SourceEditor.THEMES). If the argument is falsy, then the current
+   *        theme styling is removed.
+   * @see SourceEditor.THEMES in source-editor.jsm
+   * @see SourceEditor.DEFAULTS.theme in source-editor.jsm
+   */
+  setTheme: function SE_setTheme(aTheme)
+  {
+    if (aTheme && !(aTheme in ORION_THEMES)) {
+      // Do not change anything if the requested theme is unknown.
+      return;
+    }
+
+    let document = this._iframeWindow.document;
+    let container = document.querySelector("#editorTheme");
+    container.innerHTML = "";
+
+    let stylesheets = aTheme ? ORION_THEMES[aTheme] : [];
+    if (!Array.isArray(stylesheets)) {
+      stylesheets = [stylesheets];
+    }
+
+    stylesheets.forEach(function(aStyle) {
+      let link = document.createElement("link");
+      link.rel = "stylesheet";
+      link.type = "text/css";
+      link.href = aStyle;
+      container.appendChild(link);
+    }, this);
+
+    if (this._view) {
+      this._view.update(true);
+    }
+
+    this._theme = aTheme;
+  },
+
+  /**
+   * Add custom stylesheets to the editor view.
+   *
+   * @param array [aStylesheets]
+   *        An array that holds URLs to custom stylesheets you want to load in
+   *        the editor view. These can be data URIs as well. If the string is
+   *        not an URI, then a raw <style> element is used. Any existing custom
+   *        stylesheets are replaced with the new ones you provide.
+   *        If the array is empty or if the argument is falsy, then the current
+   *        custom stylesheets are only removed.
+   * @see SourceEditor.DEFAULTS.theme in source-editor.jsm
+   */
+  setStylesheets: function SE_setStylesheets(aStylesheets)
+  {
+    let document = this._iframeWindow.document;
+    let container = document.querySelector("#editorStyles");
+    container.innerHTML = "";
+
+    (aStylesheets || []).forEach(function(aStyle) {
+      let elem;
+      if (/^[a-z]+:\/\/[^\n\r]+$/.test(aStyle) || /^data:.+/.test(aStyle)) {
+        elem = document.createElement("link");
+        elem.rel = "stylesheet";
+        elem.type = "text/css";
+        elem.href = aStyle;
+      } else {
+        elem = document.createElement("style");
+        elem.type = "text/css";
+        elem.textContent = aStyle;
+      }
+      container.appendChild(elem);
+    }, this);
+
+    if (this._view) {
+      this._view.update(true);
+    }
+  },
+
+  /**
    * The "tab" editor action implementation. This adds support for expanded tabs
    * to spaces, and support for the indentation of multiple lines at once.
    * @private
    */
   _doTab: function SE__doTab()
   {
     if (this.readOnly) {
       return false;
@@ -2202,17 +2283,19 @@ SourceEditor.prototype = {
    * @type number
    */
   set fontSize(aValue) {
     let size = aValue ? aValue + "px" : "-moz-use-system-font";
     let window = this._iframeWindow;
     let style = window.document.getElementById("fontSizePref");
     style.textContent = ".textviewContainer { font-size: " + size + "; }";
     Services.prefs.setIntPref(SourceEditor.PREFS.FONT_SIZE, aValue);
-    this._view.update(true);
+    if (this._view) {
+      this._view.update(true);
+    }
     this._fontSize = aValue;
   },
 
   /**
    * Increase the editor font size.
    * @private
    */
   _increaseFontSize: function SE__increaseFontSize()
diff --git a/browser/devtools/sourceeditor/source-editor.jsm b/browser/devtools/sourceeditor/source-editor.jsm
--- a/browser/devtools/sourceeditor/source-editor.jsm
+++ b/browser/devtools/sourceeditor/source-editor.jsm
@@ -88,24 +88,35 @@ SourceEditor.DEFAULTS = {
    *
    * @see SourceEditor.MODES
    * @type string
    */
   mode: SourceEditor.MODES.TEXT,
 
   /**
    * The syntax highlighting theme you want. You can use one of the predefined
-   * themes, or you can point to your CSS file.
+   * themes, or no theme at all. In that case, you might want to use the
+   * customStyles option.
    *
    * @see SourceEditor.THEMES.
+   * @see SourceEditor.setTheme()
    * @type string
    */
   theme: SourceEditor.THEMES.MOZILLA,
 
   /**
+   * Any custom stylesheets you want to apply on top of the editor theme. The
+   * array can hold URLs to stylesheets, data URIs and even raw CSS.
+   *
+   * @see SourceEditor.setStylesheets()
+   * @type array
+   */
+  customStyles: null,
+
+  /**
    * How many steps should the undo stack hold.
    * @type number
    */
   undoLimit: 200,
 
   /**
    * Define how many spaces to use for a tab character. This value is overridden
    * by a user preference, see SourceEditor.PREFS.TAB_SIZE.
diff --git a/browser/devtools/sourceeditor/test/Makefile.in b/browser/devtools/sourceeditor/test/Makefile.in
--- a/browser/devtools/sourceeditor/test/Makefile.in
+++ b/browser/devtools/sourceeditor/test/Makefile.in
@@ -27,11 +27,12 @@ MOCHITEST_BROWSER_FILES = \
 		browser_bug725618_moveLines_shortcut.js \
 		browser_bug700893_dirty_state.js \
 		browser_vertical_align.js \
 		browser_bug725430_comment_uncomment.js \
 		browser_bug731721_debugger_stepping.js \
 		browser_bug729960_block_bracket_jump.js \
 		browser_bug725392_mouse_coords_char_offset.js \
 		browser_bug760825_font_size.js \
+		browser_bug757016_style_api.js \
 		head.js \
 
 include $(topsrcdir)/config/rules.mk
diff --git a/browser/devtools/sourceeditor/test/browser_bug757016_style_api.js b/browser/devtools/sourceeditor/test/browser_bug757016_style_api.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/sourceeditor/test/browser_bug757016_style_api.js
@@ -0,0 +1,59 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+function test()
+{
+  waitForExplicitFinish();
+
+  function editorLoaded(editor, testWin)
+  {
+    editor.setText("test for bug 757016: style API");
+
+    is(editor.getTheme(), editor.DEFAULTS.theme, "default theme is in use");
+
+    let editorWindow = editor.editorElement.contentWindow;
+    let content = editorWindow.document.querySelector(".textviewContent");
+
+    let bgr = editorWindow.getComputedStyle(content, null).backgroundColor;
+    ok(bgr, "background-color value found");
+
+    editor.setTheme();
+
+    ok(!editor.getTheme(), "no theme is in use");
+    let newBgr = editorWindow.getComputedStyle(content, null).backgroundColor;
+    isnot(newBgr, bgr, "setTheme(): background-color value changed");
+
+    editor.setTheme(editor.DEFAULTS.theme);
+
+    is(editor.getTheme(), editor.DEFAULTS.theme, "default theme is used again");
+    newBgr = editorWindow.getComputedStyle(content, null).backgroundColor;
+    is(newBgr, bgr,
+       "setTheme(): background-color changed back to the initial value");
+
+    editor.setStylesheets([".textviewContent { background-color: red }"]);
+    newBgr = editorWindow.getComputedStyle(content, null).backgroundColor;
+    isnot(newBgr, bgr, "setStylesheets(): background-color value changed");
+
+    editor.setStylesheets();
+    newBgr = editorWindow.getComputedStyle(content, null).backgroundColor;
+    is(newBgr, bgr, "setStylesheets(): background-color value has been reset");
+
+    editor.setTheme();
+    newBgr = editorWindow.getComputedStyle(content, null).backgroundColor;
+    isnot(newBgr, bgr, "setTheme(): background-color value changed");
+
+    editor.setStylesheets(["chrome://browser/skin/devtools/orion.css"]);
+    newBgr = editorWindow.getComputedStyle(content, null).backgroundColor;
+    is(newBgr, bgr, "setStylesheets(): background-color value has changed");
+
+    editor.destroy();
+    testWin.close();
+
+    waitForFocus(finish, window);
+  }
+
+  openSourceEditorWindow(editorLoaded);
+}
