# HG changeset patch
# Parent d8ab067b4f008c3671ea2e1ac1cbe73c061c8732
# Date 1342554788 -10800
# User Mihai Sucan <mihai.sucan@gmail.com>

Bug 725392 - Source Editor: add a method to convert mouse coordinates to character offsets

diff --git a/browser/devtools/sourceeditor/source-editor-orion.jsm b/browser/devtools/sourceeditor/source-editor-orion.jsm
--- a/browser/devtools/sourceeditor/source-editor-orion.jsm
+++ b/browser/devtools/sourceeditor/source-editor-orion.jsm
@@ -2017,16 +2017,64 @@ SourceEditor.prototype = {
       breakpoints.push({line: this._model.getLineAtOffset(annotation.start),
                         condition: annotation.breakpointCondition});
     }, this);
 
     return breakpoints;
   },
 
   /**
+   * Convert the given rectangle from one coordinate space to another.
+   *
+   * Known coordinate spaces:
+   * - "document" - gives the coordinates relative to the entire document.
+   * - "view" - gives the coordinates relative to the editor viewport.
+   *
+   * @param object aRect
+   *         The rectangle to convert. Object properties: x, y, width and height.
+   * @param string aFrom
+   *         The source coordinate space.
+   * @param string aTo
+   *         The destination coordinate space.
+   * @return object aRect
+   *         Returns the rectangle with changed coordinates.
+   */
+  convertCoordinates: function SE_convertCoordinates(aRect, aFrom, aTo)
+  {
+    return this._view.convert(aRect, aFrom, aTo);
+  },
+
+  /**
+   * Get the character offset nearest to the given pixel location.
+   *
+   * @param number aX
+   * @param number aY
+   * @return number
+   *         Returns the character offset at the given location.
+   */
+  getOffsetAtLocation: function SE_getOffsetAtLocation(aX, aY)
+  {
+    return this._view.getOffsetAtLocation(aX, aY);
+  },
+
+  /**
+   * Get the pixel location, relative to the document, at the given character
+   * offset.
+   *
+   * @param number aOffset
+   * @return object
+   *         The pixel location relative to the document being edited. Two
+   *         properties are included: x and y.
+   */
+  getLocationAtOffset: function SE_getLocationAtOffset(aOffset)
+  {
+    return this._view.getLocationAtOffset(aOffset);
+  },
+
+  /**
    * Destroy/uninitialize the editor.
    */
   destroy: function SE_destroy()
   {
     if (this._config.highlightCurrentLine || Services.appinfo.OS == "Linux") {
       this.removeEventListener(SourceEditor.EVENTS.SELECTION,
                                this._onOrionSelection);
     }
diff --git a/browser/devtools/sourceeditor/test/Makefile.in b/browser/devtools/sourceeditor/test/Makefile.in
--- a/browser/devtools/sourceeditor/test/Makefile.in
+++ b/browser/devtools/sourceeditor/test/Makefile.in
@@ -25,11 +25,12 @@ MOCHITEST_BROWSER_FILES = \
 		browser_bug707987_debugger_breakpoints.js \
 		browser_bug712982_line_ruler_click.js \
 		browser_bug725618_moveLines_shortcut.js \
 		browser_bug700893_dirty_state.js \
 		browser_bug729480_line_vertical_align.js \
 		browser_bug725430_comment_uncomment.js \
 		browser_bug731721_debugger_stepping.js \
 		browser_bug729960_block_bracket_jump.js \
+		browser_bug725392_mouse_coords_char_offset.js \
 		head.js \
 
 include $(topsrcdir)/config/rules.mk
diff --git a/browser/devtools/sourceeditor/test/browser_bug725392_mouse_coords_char_offset.js b/browser/devtools/sourceeditor/test/browser_bug725392_mouse_coords_char_offset.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/sourceeditor/test/browser_bug725392_mouse_coords_char_offset.js
@@ -0,0 +1,160 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+function test()
+{
+  let testWin;
+  let editor;
+  let mousePos = { x: 36, y: 4 };
+  let expectedOffset = 5;
+  let maxDiff = 5;
+
+  waitForExplicitFinish();
+
+  function editorLoaded(aEditor, aWindow)
+  {
+    editor = aEditor;
+    testWin = aWindow;
+
+    let text = fillEditor(editor, 3);
+    editor.setText(text);
+    editor.setCaretOffset(0);
+
+    doMouseMove(testPage1);
+  }
+
+  function doMouseMove(aCallback)
+  {
+    function mouseEventHandler(aEvent)
+    {
+      editor.removeEventListener(editor.EVENTS.MOUSE_OUT, mouseEventHandler);
+      editor.removeEventListener(editor.EVENTS.MOUSE_OVER, mouseEventHandler);
+      editor.removeEventListener(editor.EVENTS.MOUSE_MOVE, mouseEventHandler);
+
+      executeSoon(aCallback.bind(null, aEvent));
+    }
+
+    editor.addEventListener(editor.EVENTS.MOUSE_MOVE, mouseEventHandler);
+    editor.addEventListener(editor.EVENTS.MOUSE_OUT, mouseEventHandler);
+    editor.addEventListener(editor.EVENTS.MOUSE_OVER, mouseEventHandler);
+
+    let target = editor.editorElement;
+    let targetWin = testWin;
+
+    EventUtils.synthesizeMouse(target, mousePos.x, mousePos.y,
+                               {type: "mousemove"}, targetWin);
+    EventUtils.synthesizeMouse(target, mousePos.x, mousePos.y,
+                               {type: "mouseout"}, targetWin);
+    EventUtils.synthesizeMouse(target, mousePos.x, mousePos.y,
+                               {type: "mouseover"}, targetWin);
+  }
+
+  function checkValue(aValue, aExpectedValue)
+  {
+    let result = Math.abs(aValue - aExpectedValue) <= maxDiff;
+    if (!result) {
+      info("checkValue() given " + aValue + " expected " + aExpectedValue);
+    }
+    return result;
+  }
+
+  function testPage1(aEvent)
+  {
+    let {event: { clientX: clientX, clientY: clientY }, x: x, y: y} = aEvent;
+
+    info("testPage1 " + aEvent.type +
+         " clientX " + clientX + " clientY " + clientY +
+         " x " + x + " y " + y);
+
+    // x and y are in document coordinates.
+    // clientX and clientY are in view coordinates.
+    // since we are scrolled at the top, both are expected to be approximately
+    // the same.
+    ok(checkValue(x, mousePos.x), "x is in range");
+    ok(checkValue(y, mousePos.y), "y is in range");
+
+    ok(checkValue(clientX, mousePos.x), "clientX is in range");
+    ok(checkValue(clientY, mousePos.y), "clientY is in range");
+
+    // we give document-relative coordinates here.
+    let offset = editor.getOffsetAtLocation(x, y);
+    is(offset, expectedOffset, "character offset is correct");
+
+    let rect = {x: x, y: y};
+    let viewCoords = editor.convertCoordinates(rect, "document", "view");
+    ok(checkValue(viewCoords.x, clientX), "viewCoords.x is in range");
+    ok(checkValue(viewCoords.y, clientY), "viewCoords.y is in range");
+
+    rect = {x: clientX, y: clientY};
+    let docCoords = editor.convertCoordinates(rect, "view", "document");
+    ok(checkValue(docCoords.x, x), "docCoords.x is in range");
+    ok(checkValue(docCoords.y, y), "docCoords.y is in range");
+
+    // we are given document-relative coordinates.
+    let offsetPos = editor.getLocationAtOffset(expectedOffset);
+    ok(checkValue(offsetPos.x, x), "offsetPos.x is in range");
+    ok(checkValue(offsetPos.y, y), "offsetPos.y is in range");
+
+    // Scroll the view and test again.
+    let topIndex = Math.round(editor.getLineCount() / 2);
+    editor.setTopIndex(topIndex);
+    expectedOffset += editor.getLineStart(topIndex);
+
+    executeSoon(doMouseMove.bind(null, testPage2));
+  }
+
+  function testPage2(aEvent)
+  {
+    let {event: { clientX: clientX, clientY: clientY }, x: x, y: y} = aEvent;
+
+    info("testPage2 " + aEvent.type +
+         " clientX " + clientX + " clientY " + clientY +
+         " x " + x + " y " + y);
+
+    // after page scroll document coordinates need to be different from view
+    // coordinates.
+    ok(checkValue(x, mousePos.x), "x is not different from clientX");
+    ok(!checkValue(y, mousePos.y), "y is different from clientY");
+
+    ok(checkValue(clientX, mousePos.x), "clientX is in range");
+    ok(checkValue(clientY, mousePos.y), "clientY is in range");
+
+    // we give document-relative coordinates here.
+    let offset = editor.getOffsetAtLocation(x, y);
+    is(offset, expectedOffset, "character offset is correct");
+
+    let rect = {x: x, y: y};
+    let viewCoords = editor.convertCoordinates(rect, "document", "view");
+    ok(checkValue(viewCoords.x, clientX), "viewCoords.x is in range");
+    ok(checkValue(viewCoords.y, clientY), "viewCoords.y is in range");
+
+    rect = {x: clientX, y: clientY};
+    let docCoords = editor.convertCoordinates(rect, "view", "document");
+    ok(checkValue(docCoords.x, x), "docCoords.x is in range");
+    ok(checkValue(docCoords.y, y), "docCoords.y is in range");
+
+    // we are given document-relative coordinates.
+    let offsetPos = editor.getLocationAtOffset(expectedOffset);
+    ok(checkValue(offsetPos.x, x), "offsetPos.x is in range");
+    ok(checkValue(offsetPos.y, y), "offsetPos.y is in range");
+
+    executeSoon(testEnd);
+  }
+
+  function testEnd()
+  {
+    if (editor) {
+      editor.destroy();
+    }
+    if (testWin) {
+      testWin.close();
+    }
+
+    waitForFocus(finish, window);
+  }
+
+  openSourceEditorWindow(editorLoaded);
+}
diff --git a/browser/devtools/sourceeditor/test/head.js b/browser/devtools/sourceeditor/test/head.js
--- a/browser/devtools/sourceeditor/test/head.js
+++ b/browser/devtools/sourceeditor/test/head.js
@@ -108,8 +108,75 @@ function waitForSelection(aExpectedStrin
 }
 
 waitForSelection._polls = 0;
 waitForSelection.__monotonicCounter = 0;
 waitForSelection.__defineGetter__("_monotonicCounter", function () {
   return waitForSelection.__monotonicCounter++;
 });
 
+/**
+ * Open a new window with a source editor inside.
+ *
+ * @param function aCallback
+ *        The function you want invoked once the editor is loaded. The function
+ *        is given two arguments: editor instance and the window object.
+ * @param object [aOptions]
+ *        The options object to pass to the SourceEditor.init() method.
+ */
+function openSourceEditorWindow(aCallback, aOptions) {
+  const windowUrl = "data:text/xml,<?xml version='1.0'?>" +
+    "<window xmlns='http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul'" +
+    " title='Test for Source Editor' width='600' height='500'><box flex='1'/></window>";
+  const windowFeatures = "chrome,titlebar,toolbar,centerscreen,resizable,dialog=no";
+
+  let editor = null;
+  let testWin = Services.ww.openWindow(null, windowUrl, "_blank",
+                                       windowFeatures, null);
+  testWin.addEventListener("load", function onWindowLoad() {
+    testWin.removeEventListener("load", onWindowLoad, false);
+    waitForFocus(initEditor, testWin);
+  }, false);
+
+  function initEditor()
+  {
+    let tempScope = {};
+    Cu.import("resource:///modules/source-editor.jsm", tempScope);
+
+    let box = testWin.document.querySelector("box");
+    editor = new tempScope.SourceEditor();
+    editor.init(box, aOptions || {}, editorLoaded);
+  }
+
+  function editorLoaded()
+  {
+    editor.focus();
+    waitForFocus(aCallback.bind(null, editor, testWin), testWin);
+  }
+}
+
+/**
+ * Get text needed to fill the editor view.
+ *
+ * @param object aEditor
+ *        The SourceEditor instance you work with.
+ * @param number aPages
+ *        The number of pages you want filled with lines.
+ * @return string
+ *         The string you can insert into the editor so you fill the desired
+ *         number of pages.
+ */
+function fillEditor(aEditor, aPages) {
+  let view = aEditor._view;
+  let model = aEditor._model;
+
+  let lineHeight = view.getLineHeight();
+  let editorHeight = view.getClientArea().height;
+  let linesPerPage = Math.floor(editorHeight / lineHeight);
+  let totalLines = aPages * linesPerPage;
+
+  let text = "";
+  for (let i = 0; i < totalLines; i++) {
+    text += "l" + i + " lorem ipsum dolor sit amet. lipsum foobaris bazbaz,\n";
+  }
+
+  return text;
+}
