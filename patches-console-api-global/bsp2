# HG changeset patch
# Parent 22c80812280d980b386b02d4c3e18047d556b006
# User Gabor Krizsanits <gkrizsanits@mozilla.com>
bsp2

diff --git a/js/xpconnect/src/XPCRuntimeService.cpp b/js/xpconnect/src/XPCRuntimeService.cpp
--- a/js/xpconnect/src/XPCRuntimeService.cpp
+++ b/js/xpconnect/src/XPCRuntimeService.cpp
@@ -24,24 +24,26 @@ NS_INTERFACE_MAP_END_THREADSAFE
 NS_IMPL_THREADSAFE_ADDREF(BackstagePass)
 NS_IMPL_THREADSAFE_RELEASE(BackstagePass)
 
 // The nsIXPCScriptable map declaration that will generate stubs for us...
 #define XPC_MAP_CLASSNAME           BackstagePass
 #define XPC_MAP_QUOTED_CLASSNAME   "BackstagePass"
 #define                             XPC_MAP_WANT_NEWRESOLVE
 #define                             XPC_MAP_WANT_FINALIZE
+#define                             XPC_MAP_WANT_PRECREATE
 
 #define XPC_MAP_FLAGS       nsIXPCScriptable::USE_JSSTUB_FOR_ADDPROPERTY   |  \
                             nsIXPCScriptable::USE_JSSTUB_FOR_DELPROPERTY   |  \
                             nsIXPCScriptable::USE_JSSTUB_FOR_SETPROPERTY   |  \
                             nsIXPCScriptable::DONT_ENUM_STATIC_PROPS       |  \
                             nsIXPCScriptable::DONT_ENUM_QUERY_INTERFACE    |  \
                             nsIXPCScriptable::IS_GLOBAL_OBJECT             |  \
-                            nsIXPCScriptable::DONT_REFLECT_INTERFACE_NAMES
+                            nsIXPCScriptable::DONT_REFLECT_INTERFACE_NAMES |  \
+                            nsIXPCScriptable::WANT_PRECREATE
 #include "xpc_map_end.h" /* This will #undef the above */
 
 /* bool newResolve (in nsIXPConnectWrappedNative wrapper, in JSContextPtr cx, in JSObjectPtr obj, in jsval id, in uint32_t flags, out JSObjectPtr objp); */
 NS_IMETHODIMP
 BackstagePass::NewResolve(nsIXPConnectWrappedNative *wrapper,
                           JSContext * cx, JSObject * obj_,
                           jsid id_, uint32_t flags,
                           JSObject * *objp_, bool *_retval)
@@ -63,16 +65,30 @@ BackstagePass::NewResolve(nsIXPConnectWr
     }
 
     JS::RootedObject objp(cx, *objp_);
     *_retval = !!ResolveWorkerClasses(cx, obj, id, flags, &objp);
     *objp_ = objp;
     return NS_OK;
 }
 
+NS_IMETHODIMP
+BackstagePass::PreCreate(nsISupports *nativeObj, JSContext *cx,
+                         JSObject *globalObj, JSObject **parentObj)
+{
+
+  nsCOMPtr<nsIGlobalObject> global(do_QueryInterface(nativeObj));
+  NS_ASSERTION(global, "nativeObj not a global object!");
+
+  JSObject *jsglobal = global->GetGlobalJSObject();
+  if (jsglobal)
+      *parentObj = jsglobal;
+  return NS_OK;
+}
+
 /***************************************************************************/
 /* void getInterfaces (out uint32_t count, [array, size_is (count), retval]
                        out nsIIDPtr array); */
 NS_IMETHODIMP
 BackstagePass::GetInterfaces(uint32_t *aCount, nsIID * **aArray)
 {
     const uint32_t count = 2;
     *aCount = count;
@@ -103,17 +119,17 @@ oom:
     return NS_ERROR_OUT_OF_MEMORY;
 }
 
 /* nsISupports getHelperForLanguage (in uint32_t language); */
 NS_IMETHODIMP
 BackstagePass::GetHelperForLanguage(uint32_t language,
                                     nsISupports **retval)
 {
-    *retval = nullptr;
+    *retval = static_cast<nsIGlobalObject*>(this);
     return NS_OK;
 }
 
 /* readonly attribute string contractID; */
 NS_IMETHODIMP
 BackstagePass::GetContractID(char * *aContractID)
 {
     *aContractID = nullptr;
