# HG changeset patch
# User Victor Porof <vporof@mozilla.com>
# Date 1361403216 -7200
# Node ID cf3e354d848773211df48c65215bd71f2d8b5bd7
# Parent  9e4ff6873a968c6ff27fd4278660a1ad8c495092
Bug 812083 - Implement a SideMenuWidget (add a tree view to the remote debugger's script selector), r=past

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -1071,6 +1071,6 @@ pref("devtools.debugger.ui.win-y", 0);
 pref("devtools.debugger.ui.win-width", 900);
 pref("devtools.debugger.ui.win-height", 400);
-pref("devtools.debugger.ui.stackframes-width", 200);
-pref("devtools.debugger.ui.variables-width", 300);
+pref("devtools.debugger.ui.panes-sources-width", 200);
+pref("devtools.debugger.ui.panes-instruments-width", 300);
 pref("devtools.debugger.ui.pause-on-exceptions", false);
 pref("devtools.debugger.ui.panes-visible-on-startup", false);
diff --git a/browser/devtools/debugger/debugger-controller.js b/browser/devtools/debugger/debugger-controller.js
--- a/browser/devtools/debugger/debugger-controller.js
+++ b/browser/devtools/debugger/debugger-controller.js
@@ -35,5 +35,7 @@ Cu.import("resource:///modules/source-ed
 Cu.import("resource:///modules/devtools/LayoutHelpers.jsm");
 Cu.import("resource:///modules/devtools/BreadcrumbsWidget.jsm");
+Cu.import("resource:///modules/devtools/SideMenuWidget.jsm");
 Cu.import("resource:///modules/devtools/VariablesView.jsm");
+Cu.import("resource:///modules/devtools/ViewHelpers.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this,
@@ -49,4 +51,5 @@ let DebuggerController = {
   initialize: function DC_initialize() {
     dumpn("Initializing the DebuggerController");
+
     this._startupDebugger = this._startupDebugger.bind(this);
     this._shutdownDebugger = this._shutdownDebugger.bind(this);
@@ -54,5 +57,5 @@ let DebuggerController = {
     this._onTabDetached = this._onTabDetached.bind(this);
 
-    window.addEventListener("load", this._startupDebugger, true);
+    window.addEventListener("DOMContentLoaded", this._startupDebugger, true);
     window.addEventListener("unload", this._shutdownDebugger, true);
   },
@@ -66,10 +69,10 @@ let DebuggerController = {
     }
     this._isInitialized = true;
-    window.removeEventListener("load", this._startupDebugger, true);
+    window.removeEventListener("DOMContentLoaded", this._startupDebugger, true);
 
     DebuggerView.initialize(function() {
       DebuggerView._isInitialized = true;
 
-      window.dispatchEvent("Debugger:Loaded");
+      window.dispatchEvent(document, "Debugger:Loaded");
       this._connect();
     }.bind(this));
@@ -93,5 +96,5 @@ let DebuggerController = {
 
       this._disconnect();
-      window.dispatchEvent("Debugger:Unloaded");
+      window.dispatchEvent(document, "Debugger:Unloaded");
       window._isChromeDebugger && this._quitApp();
     }.bind(this));
@@ -164,5 +167,5 @@ let DebuggerController = {
   _connect: function DC__connect() {
     function callback() {
-      window.dispatchEvent("Debugger:Connected");
+      window.dispatchEvent(document, "Debugger:Connected");
     }
 
@@ -344,18 +347,4 @@ let DebuggerController = {
     }
     Services.startup.quit(Ci.nsIAppStartup.eAttemptQuit);
-  },
-
-  /**
-   * Convenience method, dispatching a custom event.
-   *
-   * @param string aType
-   *        The name of the event.
-   * @param any aDetail
-   *        The data passed when initializing the event.
-   */
-  dispatchEvent: function DC_dispatchEvent(aType, aDetail) {
-    let evt = document.createEvent("CustomEvent");
-    evt.initCustomEvent(aType, true, false, aDetail);
-    document.documentElement.dispatchEvent(evt);
   }
 };
@@ -379,5 +368,4 @@ ThreadState.prototype = {
     this.activeThread.addListener("paused", this._update);
     this.activeThread.addListener("resumed", this._update);
-    this.activeThread.addListener("detached", this._update);
     this.activeThread.pauseOnExceptions(Prefs.pauseOnExceptions);
     this._handleTabNavigation();
@@ -394,5 +382,4 @@ ThreadState.prototype = {
     this.activeThread.removeListener("paused", this._update);
     this.activeThread.removeListener("resumed", this._update);
-    this.activeThread.removeListener("detached", this._update);
   },
 
@@ -405,5 +392,5 @@ ThreadState.prototype = {
     }
     dumpn("Handling tab navigation in the ThreadState");
-    this._update(this.activeThread.state);
+    this._update();
   },
 
@@ -414,6 +401,5 @@ ThreadState.prototype = {
     DebuggerView.Toolbar.toggleResumeButtonState(this.activeThread.state);
 
-    if (DebuggerController._target &&
-        (aEvent == "paused" || aEvent == "resumed")) {
+    if (DebuggerController._target && (aEvent == "paused" || aEvent == "resumed")) {
       DebuggerController._target.emit("thread-" + aEvent);
     }
@@ -588,5 +574,5 @@ StackFrames.prototype = {
 
     // Make sure the debugger view panes are visible.
-    DebuggerView.showPanesSoon();
+    DebuggerView.showInstrumentsPane();
 
     // Make sure all the previous stackframes are removed before re-adding them.
@@ -629,8 +615,8 @@ StackFrames.prototype = {
     }
     DebuggerView.StackFrames.empty();
+    DebuggerView.Sources.unhighlightBreakpoint();
+    DebuggerView.WatchExpressions.toggleContents(true);
     DebuggerView.Variables.empty(0);
-    DebuggerView.Breakpoints.unhighlightBreakpoint();
-    DebuggerView.WatchExpressions.toggleContents(true);
-    window.dispatchEvent("Debugger:AfterFramesCleared");
+    window.dispatchEvent(document, "Debugger:AfterFramesCleared");
   },
 
@@ -660,5 +646,5 @@ StackFrames.prototype = {
     DebuggerView.StackFrames.highlightFrame(aDepth);
     // Highlight the breakpoint at the specified url and line if it exists.
-    DebuggerView.Breakpoints.highlightBreakpoint(url, line);
+    DebuggerView.Sources.highlightBreakpoint(url, line);
     // Don't display the watch expressions textbox inputs in the pane.
     DebuggerView.WatchExpressions.toggleContents(false);
@@ -707,5 +693,5 @@ StackFrames.prototype = {
 
     // Signal that variables have been fetched.
-    window.dispatchEvent("Debugger:FetchedVariables");
+    window.dispatchEvent(document, "Debugger:FetchedVariables");
     DebuggerView.Variables.commitHierarchy();
   },
@@ -788,5 +774,5 @@ StackFrames.prototype = {
 
       // Signal that watch expressions have been fetched.
-      window.dispatchEvent("Debugger:FetchedWatchExpressions");
+      window.dispatchEvent(document, "Debugger:FetchedWatchExpressions");
       DebuggerView.Variables.commitHierarchy();
     }.bind(this));
@@ -816,5 +802,5 @@ StackFrames.prototype = {
 
           // Signal that variables have been fetched.
-          window.dispatchEvent("Debugger:FetchedVariables");
+          window.dispatchEvent(document, "Debugger:FetchedVariables");
           DebuggerView.Variables.commitHierarchy();
         }.bind(this));
@@ -943,5 +929,5 @@ StackFrames.prototype = {
 
       // Signal that properties have been fetched.
-      window.dispatchEvent("Debugger:FetchedProperties");
+      window.dispatchEvent(document, "Debugger:FetchedProperties");
       DebuggerView.Variables.commitHierarchy();
     }.bind(this));
@@ -957,7 +943,8 @@ StackFrames.prototype = {
     let depth = aFrame.depth;
     let { url, line } = aFrame.where;
+    let frameLocation = SourceUtils.convertToUnicode(window.unescape(url));
     let frameTitle = StackFrameUtils.getFrameTitle(aFrame);
 
-    DebuggerView.StackFrames.addFrame(frameTitle, url, line, depth);
+    DebuggerView.StackFrames.addFrame(frameTitle, frameLocation, line, depth);
   },
 
@@ -1083,19 +1070,22 @@ SourceScripts.prototype = {
 
   /**
+   * Handler for the debugger client's unsolicited newGlobal notification.
+   */
+  _onNewGlobal: function SS__onNewGlobal(aNotification, aPacket) {
+    // TODO: bug 806775, update the globals list using aPacket.hostAnnotations
+    // from bug 801084.
+  },
+
+  /**
    * Handler for the debugger client's unsolicited newScript notification.
    */
   _onNewSource: function SS__onNewSource(aNotification, aPacket) {
     // Ignore bogus scripts, e.g. generated from 'clientEvaluate' packets.
-    if (NEW_SOURCE_IGNORED_URLS.indexOf(aPacket.url) != -1) {
+    if (NEW_SOURCE_IGNORED_URLS.indexOf(aPacket.source.url) != -1) {
       return;
     }
 
     // Add the source in the debugger view sources container.
-    this._addSource({
-      url: aPacket.source.url,
-      source: aPacket.source
-    }, {
-      staged: false
-    });
+    DebuggerView.Sources.addSource(aPacket.source, { staged: false });
 
     let container = DebuggerView.Sources;
@@ -1103,5 +1093,5 @@ SourceScripts.prototype = {
 
     // Select this source if it's the preferred one.
-    if (aPacket.url == preferredValue) {
+    if (aPacket.source.url == preferredValue) {
       container.selectedValue = preferredValue;
     }
@@ -1124,13 +1114,5 @@ SourceScripts.prototype = {
 
     // Signal that a new script has been added.
-    window.dispatchEvent("Debugger:AfterNewScript");
-  },
-
-  /**
-   * Handler for the debugger client's unsolicited newGlobal notification.
-   */
-  _onNewGlobal: function SS__onNewGlobal(aNotification, aPacket) {
-    // TODO: bug 806775, update the globals list using aPacket.hostAnnotations
-    // from bug 801084.
+    window.dispatchEvent(document, "Debugger:AfterNewSource");
   },
 
@@ -1140,5 +1122,5 @@ SourceScripts.prototype = {
   _onSourcesAdded: function SS__onSourcesAdded(aResponse) {
     if (aResponse.error) {
-      Cu.reportError(new Error("Error getting sources: " + aResponse.error));
+      Cu.reportError("Error getting sources: " + aResponse.error);
       return;
     }
@@ -1150,10 +1132,5 @@ SourceScripts.prototype = {
         continue;
       }
-      this._addSource({
-        url: source.url,
-        source: source
-      }, {
-        staged: true
-      });
+      DebuggerView.Sources.addSource(source, { staged: true });
     }
 
@@ -1179,25 +1156,5 @@ SourceScripts.prototype = {
 
     // Signal that scripts have been added.
-    window.dispatchEvent("Debugger:AfterSourcesAdded");
-  },
-
-  /**
-   * Add the specified source to the debugger view sources list.
-   *
-   * @param object aSource
-   *        The source object coming from the active thread.
-   * @param object aOptions [optional]
-   *        Additional options for adding the source. Supported options:
-   *        - forced: force the source to be immediately added
-   */
-  _addSource: function SS__addSource(aSource, aOptions = {}) {
-    let url = aSource.url;
-    let staged = aOptions.staged;
-
-    DebuggerView.Sources.push([SourceUtils.getSourceLabel(url), url], {
-      staged: staged, /* stage the item to be appended later? */
-      tooltip: url,
-      attachment: aSource
-    });
+    window.dispatchEvent(document, "Debugger:AfterSourcesAdded");
   },
 
@@ -1215,5 +1172,5 @@ SourceScripts.prototype = {
     // If already loaded, return the source text immediately.
     if (aSource.loaded) {
-      aCallback(aSource.source.url, aSource.text);
+      aCallback(aSource.url, aSource.text);
       return;
     }
@@ -1226,15 +1183,14 @@ SourceScripts.prototype = {
 
     // Get the source text from the active thread.
-    this.activeThread.source(aSource.source).source(function(aResponse) {
+    this.activeThread.source(aSource).source(function(aResponse) {
       window.clearTimeout(fetchTimeout);
 
       if (aResponse.error) {
-        Cu.reportError("Error loading " + aSource.source.url + "\n" + aResponse.error);
-        aCallback(aSource.source.url, "");
-        return;
+        Cu.reportError("Error loading: " + aSource.url + "\n" + aResponse.error);
+        return void aCallback(aSource.url, "");
       }
       aSource.loaded = true;
       aSource.text = aResponse.source;
-      aCallback(aSource.source.url, aResponse.source);
+      aCallback(aSource.url, aResponse.source);
     });
   }
@@ -1444,8 +1400,7 @@ Breakpoints.prototype = {
       aBreakpointClient.conditionalExpression = aFlags.conditionalExpression;
 
-      // Preserve some information about the breakpoint's source url and line
-      // to display in the breakpoints pane.
-      aBreakpointClient.lineText = DebuggerView.getEditorLine(line - 1);
-      aBreakpointClient.lineInfo = SourceUtils.getSourceLabel(url) + ":" + line;
+      // Preserve information about the breakpoint's line text, to display it in
+      // the sources pane without requiring fetching the source.
+      aBreakpointClient.lineText = DebuggerView.getEditorLine(line - 1).trim();
 
       // Show the breakpoint in the editor and breakpoints pane.
@@ -1513,14 +1468,15 @@ Breakpoints.prototype = {
     // Update the breakpoints pane if required.
     if (!aFlags.noPaneUpdate) {
-      let { lineText, lineInfo, actor } = aBreakpointClient;
-      let conditionalFlag = aBreakpointClient.conditionalExpression !== undefined;
-      let openPopupFlag = aFlags.openPopup;
-
-      DebuggerView.Breakpoints.addBreakpoint(
-        url, line, actor, lineInfo, lineText, conditionalFlag, openPopupFlag);
+      DebuggerView.Sources.addBreakpoint({
+        sourceLocation: url,
+        lineNumber: line,
+        lineText: aBreakpointClient.lineText,
+        actor: aBreakpointClient.actor,
+        openPopupFlag: aFlags.openPopup
+      });
     }
     // Highlight the breakpoint in the pane if required.
     if (!aFlags.noPaneHighlight) {
-      DebuggerView.Breakpoints.highlightBreakpoint(url, line);
+      DebuggerView.Sources.highlightBreakpoint(url, line, aFlags);
     }
   },
@@ -1548,5 +1504,5 @@ Breakpoints.prototype = {
     // Update the breakpoints pane if required.
     if (!aFlags.noPaneUpdate) {
-      DebuggerView.Breakpoints.removeBreakpoint(url, line);
+      DebuggerView.Sources.removeBreakpoint(url, line);
     }
   },
@@ -1656,6 +1612,6 @@ Prefs.map("Int", "windowY", "devtools.de
 Prefs.map("Int", "windowWidth", "devtools.debugger.ui.win-width");
 Prefs.map("Int", "windowHeight", "devtools.debugger.ui.win-height");
-Prefs.map("Int", "stackframesWidth", "devtools.debugger.ui.stackframes-width");
-Prefs.map("Int", "variablesWidth", "devtools.debugger.ui.variables-width");
+Prefs.map("Int", "sourcesWidth", "devtools.debugger.ui.panes-sources-width");
+Prefs.map("Int", "instrumentsWidth", "devtools.debugger.ui.panes-instruments-width");
 Prefs.map("Bool", "pauseOnExceptions", "devtools.debugger.ui.pause-on-exceptions");
 Prefs.map("Bool", "panesVisibleOnStartup", "devtools.debugger.ui.panes-visible-on-startup");
@@ -1702,4 +1658,13 @@ DebuggerController.Breakpoints = new Bre
  */
 Object.defineProperties(window, {
+  "create": {
+    get: function() ViewHelpers.create,
+  },
+  "dispatchEvent": {
+    get: function() ViewHelpers.dispatchEvent,
+  },
+  "editor": {
+    get: function() DebuggerView.editor
+  },
   "gClient": {
     get: function() DebuggerController.client
@@ -1725,10 +1690,4 @@ Object.defineProperties(window, {
   "gCallStackPageSize": {
     get: function() CALL_STACK_PAGE_SIZE,
-  },
-  "dispatchEvent": {
-    get: function() DebuggerController.dispatchEvent,
-  },
-  "editor": {
-    get: function() DebuggerView.editor
   }
 });
diff --git a/browser/devtools/debugger/debugger-panes.js b/browser/devtools/debugger/debugger-panes.js
--- a/browser/devtools/debugger/debugger-panes.js
+++ b/browser/devtools/debugger/debugger-panes.js
@@ -7,10 +7,10 @@
 
 /**
- * Functions handling the breakpoints UI.
+ * Functions handling the sources UI.
  */
-function BreakpointsView() {
-  dumpn("BreakpointsView was instantiated");
-  MenuContainer.call(this);
-  this._createItemView = this._createItemView.bind(this);
+function SourcesView() {
+  dumpn("SourcesView was instantiated");
+
+  this._breakpointsCache = new Map(); // Can't use a WeakMap because keys are strings.
   this._onBreakpointRemoved = this._onBreakpointRemoved.bind(this);
   this._onEditorLoad = this._onEditorLoad.bind(this);
@@ -18,40 +18,46 @@ function BreakpointsView() {
   this._onEditorSelection = this._onEditorSelection.bind(this);
   this._onEditorContextMenu = this._onEditorContextMenu.bind(this);
-  this._onEditorContextMenuPopupHidden = this._onEditorContextMenuPopupHidden.bind(this);
+  this._onSourceMouseDown = this._onSourceMouseDown.bind(this);
+  this._onSourceSelect = this._onSourceSelect.bind(this);
+  this._onSourceClick = this._onSourceClick.bind(this);
   this._onBreakpointClick = this._onBreakpointClick.bind(this);
-  this._onCheckboxClick = this._onCheckboxClick.bind(this);
+  this._onBreakpointCheckboxClick = this._onBreakpointCheckboxClick.bind(this);
   this._onConditionalPopupShowing = this._onConditionalPopupShowing.bind(this);
   this._onConditionalPopupShown = this._onConditionalPopupShown.bind(this);
   this._onConditionalPopupHiding = this._onConditionalPopupHiding.bind(this);
+  this._onConditionalTextboxInput = this._onConditionalTextboxInput.bind(this);
   this._onConditionalTextboxKeyPress = this._onConditionalTextboxKeyPress.bind(this);
 }
 
-create({ constructor: BreakpointsView, proto: MenuContainer.prototype }, {
+create({ constructor: SourcesView, proto: MenuContainer.prototype }, {
   /**
    * Initialization function, called when the debugger is started.
    */
-  initialize: function DVB_initialize() {
-    dumpn("Initializing the BreakpointsView");
-    this.node = new StackList(document.getElementById("breakpoints"));
+  initialize: function DVS_initialize() {
+    dumpn("Initializing the SourcesView");
+
+    this.node = new SideMenuWidget(document.getElementById("sources"));
+    this.emptyText = L10N.getStr("noSourcesText");
+    this.unavailableText = L10N.getStr("noMatchingSourcesText");
+
     this._commandset = document.getElementById("debuggerCommands");
     this._popupset = document.getElementById("debuggerPopupset");
     this._cmPopup = document.getElementById("sourceEditorContextMenu");
     this._cbPanel = document.getElementById("conditional-breakpoint-panel");
-    this._cbTextbox = document.getElementById("conditional-breakpoint-textbox");
-
-    this.node.emptyText = L10N.getStr("emptyBreakpointsText");
-    this.node.itemFactory = this._createItemView;
-    this.node.uniquenessQualifier = 2;
+    this._cbTextbox = document.getElementById("conditional-breakpoint-panel-textbox");
 
     window.addEventListener("Debugger:EditorLoaded", this._onEditorLoad, false);
     window.addEventListener("Debugger:EditorUnloaded", this._onEditorUnload, false);
-    this.node.addEventListener("click", this._onBreakpointClick, false);
-    this._cmPopup.addEventListener("popuphidden", this._onEditorContextMenuPopupHidden, false);
+    this.node.addEventListener("mousedown", this._onSourceMouseDown, false);
+    this.node.addEventListener("select", this._onSourceSelect, false);
+    this.node.addEventListener("click", this._onSourceClick, false);
     this._cbPanel.addEventListener("popupshowing", this._onConditionalPopupShowing, false);
     this._cbPanel.addEventListener("popupshown", this._onConditionalPopupShown, false);
     this._cbPanel.addEventListener("popuphiding", this._onConditionalPopupHiding, false);
+    this._cbTextbox.addEventListener("input", this._onConditionalTextboxInput, false);
     this._cbTextbox.addEventListener("keypress", this._onConditionalTextboxKeyPress, false);
 
-    this._cache = new Map();
+    // Show an empty label by default.
+    this.empty();
   },
 
@@ -59,74 +65,114 @@ create({ constructor: BreakpointsView, p
    * Destruction function, called when the debugger is closed.
    */
-  destroy: function DVB_destroy() {
-    dumpn("Destroying the BreakpointsView");
+  destroy: function DVS_destroy() {
+    dumpn("Destroying the SourcesView");
+
     window.removeEventListener("Debugger:EditorLoaded", this._onEditorLoad, false);
     window.removeEventListener("Debugger:EditorUnloaded", this._onEditorUnload, false);
-    this.node.removeEventListener("click", this._onBreakpointClick, false);
-    this._cmPopup.removeEventListener("popuphidden", this._onEditorContextMenuPopupHidden, false);
+    this.node.removeEventListener("mousedown", this._onSourceMouseDown, false);
+    this.node.removeEventListener("select", this._onSourceSelect, false);
+    this.node.removeEventListener("click", this._onSourceClick, false);
     this._cbPanel.removeEventListener("popupshowing", this._onConditionalPopupShowing, false);
-    this._cbPanel.removeEventListener("popupshown", this._onConditionalPopupShown, false);
+    this._cbPanel.removeEventListener("popupshowing", this._onConditionalPopupShown, false);
     this._cbPanel.removeEventListener("popuphiding", this._onConditionalPopupHiding, false);
+    this._cbTextbox.removeEventListener("input", this._onConditionalTextboxInput, false);
     this._cbTextbox.removeEventListener("keypress", this._onConditionalTextboxKeyPress, false);
-
-    this._cbPanel.hidePopup();
   },
 
   /**
-   * Adds a breakpoint in this breakpoints container.
-   *
+   * Sets the preferred location to be selected in this sources container.
    * @param string aSourceLocation
-   *        The breakpoint source location specified by the debugger controller.
-   * @param number aLineNumber
-   *        The breakpoint line number specified by the debugger controller.
-   * @param string aActor
-   *        A breakpoint identifier specified by the debugger controller.
-   * @param string aLineInfo
-   *        Line information (parent source etc.) to be displayed in the list.
-   * @param string aLineText
-   *        Line text to be displayed in the list.
-   * @param boolean aConditionalFlag [optional]
-   *        A flag specifying if this is a conditional breakpoint.
-   * @param boolean aOpenPopupFlag [optional]
-   *        A flag specifying if the expression popup should be shown.
    */
-  addBreakpoint: function DVB_addBreakpoint(aSourceLocation, aLineNumber,
-                                            aActor, aLineInfo, aLineText,
-                                            aConditionalFlag, aOpenPopupFlag) {
-    // Append a breakpoint item to this container.
-    let breakpointItem = this.push([aLineInfo.trim(), aLineText.trim()], {
-      attachment: {
-        enabled: true,
-        sourceLocation: aSourceLocation,
-        lineNumber: aLineNumber,
-        isConditional: aConditionalFlag
-      }
-    });
+  set preferredSource(aSourceLocation) {
+    this._preferredValue = aSourceLocation;
 
-    // Check if breakpoint was already appended.
-    if (!breakpointItem) {
-      this.enableBreakpoint(aSourceLocation, aLineNumber, { id: aActor });
-      return;
-    }
-
-    let element = breakpointItem.target;
-    element.id = "breakpoint-" + aActor;
-    element.className = "dbg-breakpoint list-item";
-    element.infoNode.className = "dbg-breakpoint-info plain";
-    element.textNode.className = "dbg-breakpoint-text plain";
-    element.setAttribute("contextmenu", this._createContextMenu(element));
-
-    breakpointItem.finalize = this._onBreakpointRemoved;
-    this._cache.set(this._key(aSourceLocation, aLineNumber), breakpointItem);
-
-    // If this is a conditional breakpoint, display the panes and a panel
-    // to input the corresponding conditional expression.
-    if (aConditionalFlag && aOpenPopupFlag) {
-      this.highlightBreakpoint(aSourceLocation, aLineNumber, { openPopup: true });
+    // Selects the element with the specified value in this sources container,
+    // if already inserted.
+    if (this.containsValue(aSourceLocation)) {
+      this.selectedValue = aSourceLocation;
     }
   },
 
   /**
-   * Removes a breakpoint from this breakpoints container.
+   * Adds a source to this sources container.
+   *
+   * @param object aSource
+   *        The source object coming from the active thread.
+   * @param object aOptions [optional]
+   *        Additional options for adding the source. Supported options:
+   *        - forced: force the source to be immediately added
+   */
+  addSource: function DVS_addSource(aSource, aOptions = {}) {
+    let url = aSource.url;
+    let label = SourceUtils.getSourceLabel(url);
+    let group = SourceUtils.getSourceGroup(url);
+
+    // Append a source item to this container.
+    let sourceItem = this.push([label, url, group], {
+      staged: aOptions.staged, /* stage the item to be appended later? */
+      attachment: {
+        source: aSource
+      }
+    });
+  },
+
+  /**
+   * Adds a breakpoint to this sources container.
+   *
+   * @param object aOptions
+   *        Several options or flags supported by this operation:
+   *          - string sourceLocation
+   *            The breakpoint's source location.
+   *          - number lineNumber
+   *            The breakpoint's line number to be displayed.
+   *          - string lineText
+   *            The breakpoint's line text to be displayed.
+   *          - string actor
+   *            A breakpoint identifier specified by the debugger controller.
+   *          - boolean openPopupFlag [optional]
+   *            A flag specifying if the expression popup should be shown.
+   */
+  addBreakpoint: function DVS_addBreakpoint(aOptions) {
+    let { sourceLocation: url, lineNumber: line } = aOptions;
+
+    // Make sure we're not duplicating anything. If a breakpoint at the
+    // specified source location and line number already exists, just enable it.
+    if (this.getBreakpoint(url, line)) {
+      this.enableBreakpoint(url, line, { id: aOptions.actor });
+      return;
+    }
+
+    // Get the source item to which the breakpoint should be attached.
+    let sourceItem = this.getItemByValue(url);
+
+    // Create the element node and menu popup for the breakpoint item.
+    let breakpointView = this._createBreakpointView.call(this, aOptions);
+    let contextMenu = this._createContextMenu.call(this, aOptions);
+
+    // Append a breakpoint child item to the corresponding source item.
+    let breakpointItem = sourceItem.append(breakpointView.container, {
+      attachment: Object.create(aOptions, {
+        view: { value: breakpointView },
+        popup: { value: contextMenu }
+      }),
+      attributes: [
+        ["contextmenu", contextMenu.menupopupId]
+      ],
+      // Make sure that when the breakpoint item is removed, the corresponding
+      // menupopup and commandset are also destroyed.
+      finalize: this._onBreakpointRemoved
+    });
+
+    this._breakpointsCache.set(this._getBreakpointKey(url, line), breakpointItem);
+
+    // If this is a conditional breakpoint, display a panel to input the
+    // corresponding conditional expression.
+    if (aOptions.openPopupFlag) {
+      this.highlightBreakpoint(url, line, { openPopup: true });
+    }
+  },
+
+  /**
+   * Removes a breakpoint from this sources container.
    *
    * @param string aSourceLocation
@@ -135,10 +181,30 @@ create({ constructor: BreakpointsView, p
    *        The breakpoint line number.
    */
-  removeBreakpoint: function DVB_removeBreakpoint(aSourceLocation, aLineNumber) {
+  removeBreakpoint: function DVS_removeBreakpoint(aSourceLocation, aLineNumber) {
     let breakpointItem = this.getBreakpoint(aSourceLocation, aLineNumber);
-    if (breakpointItem) {
-      this.remove(breakpointItem);
-      this._cache.delete(this._key(aSourceLocation, aLineNumber));
+    let sourceItem = this.getItemByValue(aSourceLocation);
+
+    if (sourceItem && breakpointItem) {
+      sourceItem.remove(breakpointItem);
     }
+
+    if (this._selectedBreakpoint == breakpointItem) {
+      this._selectedBreakpoint = null;
+    }
+  },
+
+  /**
+   * Returns the breakpoint at the specified source location and line number.
+   *
+   * @param string aSourceLocation
+   *        The breakpoint source location.
+   * @param number aLineNumber
+   *        The breakpoint line number.
+   * @return MenuItem
+   *         The corresponding breakpoint item if found, null otherwise.
+   */
+  getBreakpoint: function DVS_getBreakpoint(aSourceLocation, aLineNumber) {
+    let breakpointKey = this._getBreakpointKey(aSourceLocation, aLineNumber);
+    return this._breakpointsCache.get(breakpointKey);
   },
 
@@ -155,5 +221,5 @@ create({ constructor: BreakpointsView, p
    *                    this is usually necessary when the checked state will
    *                    be updated automatically (e.g: on a checkbox click).
-   *          - callback: function to invoke once the breakpoint is disabled
+   *          - callback: function to invoke once the breakpoint is enabled
    *          - id: a new id to be applied to the corresponding element node
    * @return boolean
@@ -161,28 +227,31 @@ create({ constructor: BreakpointsView, p
    */
   enableBreakpoint:
-  function DVB_enableBreakpoint(aSourceLocation, aLineNumber, aOptions = {}) {
+  function DVS_enableBreakpoint(aSourceLocation, aLineNumber, aOptions = {}) {
     let breakpointItem = this.getBreakpoint(aSourceLocation, aLineNumber);
-    if (breakpointItem) {
-      // Set a new id to the corresponding breakpoint element if required.
-      if (aOptions.id) {
-        breakpointItem.target.id = "breakpoint-" + aOptions.id;
-      }
+    if (!breakpointItem) {
+      return false;
+    }
 
-      // Update the checkbox state if necessary.
-      if (!aOptions.silent) {
-        breakpointItem.target.checkbox.setAttribute("checked", "true");
-      }
+    // Set a new id to the corresponding breakpoint element if required.
+    if (aOptions.id) {
+      breakpointItem.attachment.view.container.id = "breakpoint-" + aOptions.id;
+    }
 
-      let { sourceLocation: url, lineNumber: line } = breakpointItem.attachment;
-      let breakpointLocation = { url: url, line: line };
-      DebuggerController.Breakpoints.addBreakpoint(breakpointLocation, aOptions.callback, {
-        noPaneUpdate: true
-      });
+    // Update the checkbox state if necessary.
+    if (!aOptions.silent) {
+      breakpointItem.attachment.view.checkbox.setAttribute("checked", "true");
+    }
 
-      // Breakpoint is now enabled.
-      breakpointItem.attachment.enabled = true;
-      return true;
-    }
-    return false;
+    let { sourceLocation: url, lineNumber: line } = breakpointItem.attachment;
+    let breakpointLocation = { url: url, line: line };
+    DebuggerController.Breakpoints.addBreakpoint(breakpointLocation, aOptions.callback, {
+      noPaneUpdate: true,
+      noPaneHighlight: true,
+      conditionalExpression: breakpointItem.attachment.conditionalExpression
+    });
+
+    // Breakpoint is now enabled.
+    breakpointItem.attachment.disabled = false;
+    return true;
   },
 
@@ -204,27 +273,31 @@ create({ constructor: BreakpointsView, p
    */
   disableBreakpoint:
-  function DVB_disableBreakpoint(aSourceLocation, aLineNumber, aOptions = {}) {
+  function DVS_disableBreakpoint(aSourceLocation, aLineNumber, aOptions = {}) {
     let breakpointItem = this.getBreakpoint(aSourceLocation, aLineNumber);
-    if (breakpointItem) {
-      // Update the checkbox state if necessary.
-      if (!aOptions.silent) {
-        breakpointItem.target.checkbox.removeAttribute("checked");
-      }
+    if (!breakpointItem) {
+      return false;
+    }
 
-      let { sourceLocation: url, lineNumber: line } = breakpointItem.attachment;
-      let breakpointClient = DebuggerController.Breakpoints.getBreakpoint(url, line);
-      DebuggerController.Breakpoints.removeBreakpoint(breakpointClient, aOptions.callback, {
-        noPaneUpdate: true
-      });
+    // Update the checkbox state if necessary.
+    if (!aOptions.silent) {
+      breakpointItem.attachment.view.checkbox.removeAttribute("checked");
+    }
 
-      // Breakpoint is now disabled.
-      breakpointItem.attachment.enabled = false;
-      return true;
-    }
-    return false;
+    let { sourceLocation: url, lineNumber: line } = breakpointItem.attachment;
+    let breakpointClient = DebuggerController.Breakpoints.getBreakpoint(url, line);
+    DebuggerController.Breakpoints.removeBreakpoint(breakpointClient, aOptions.callback, {
+      noPaneUpdate: true
+    });
+
+    // Remember the conditional expression for when the breakpoint is enabled.
+    breakpointItem.attachment.conditionalExpression = breakpointClient.conditionalExpression;
+
+    // Breakpoint is now disabled.
+    breakpointItem.attachment.disabled = true;
+    return true;
   },
 
   /**
-   * Highlights a breakpoint in this breakpoints container.
+   * Highlights a breakpoint in this sources container.
    *
    * @param string aSourceLocation
@@ -238,64 +311,40 @@ create({ constructor: BreakpointsView, p
    */
   highlightBreakpoint:
-  function DVB_highlightBreakpoint(aSourceLocation, aLineNumber, aFlags = {}) {
+  function DVS_highlightBreakpoint(aSourceLocation, aLineNumber, aFlags = {}) {
     let breakpointItem = this.getBreakpoint(aSourceLocation, aLineNumber);
-    if (breakpointItem) {
-      // Update the editor source location and line number if necessary.
-      if (aFlags.updateEditor) {
-        DebuggerView.updateEditor(aSourceLocation, aLineNumber, { noDebug: true });
-      }
+    if (!breakpointItem) {
+      return;
+    }
 
-      // If the breakpoint requires a new conditional expression, display
-      // the panes and the panel to input the corresponding expression.
-      if (aFlags.openPopup && breakpointItem.attachment.isConditional) {
-        let { sourceLocation: url, lineNumber: line } = breakpointItem.attachment;
-        let breakpointClient = DebuggerController.Breakpoints.getBreakpoint(url, line);
+    // Breakpoint is now selected.
+    this._selectBreakpoint(breakpointItem);
 
-        // The conditional expression popup can only be shown with visible panes.
-        DebuggerView.showPanesSoon(function() {
-          // Verify if the breakpoint wasn't removed before the panes were shown.
-          if (this.getBreakpoint(aSourceLocation, aLineNumber)) {
-            this._cbTextbox.value = breakpointClient.conditionalExpression || "";
-            this._cbPanel.openPopup(breakpointItem.target,
-              BREAKPOINT_CONDITIONAL_POPUP_POSITION,
-              BREAKPOINT_CONDITIONAL_POPUP_OFFSET);
-          }
-        }.bind(this));
-      } else {
-        this._cbPanel.hidePopup();
-      }
+    // Update the editor source location and line number if necessary.
+    if (aFlags.updateEditor) {
+      DebuggerView.updateEditor(aSourceLocation, aLineNumber, { noDebug: true });
+    }
 
-      // Breakpoint is now highlighted.
-      this.selectedItem = breakpointItem;
-    }
-    // Can't find a breakpoint at the requested source location and line number.
-    else {
-      this.selectedItem = null;
-      this._cbPanel.hidePopup();
+    // If the breakpoint requires a new conditional expression, display
+    // the panel to input the corresponding expression.
+    if (aFlags.openPopup) {
+      this._openConditionalPopup();
+    } else {
+      this._hideConditionalPopup();
     }
   },
 
   /**
-   * Unhighlights the current breakpoint in this breakpoints container.
+   * Unhighlights the current breakpoint in this sources container.
    */
-  unhighlightBreakpoint: function DVB_highlightBreakpoint() {
-    this.highlightBreakpoint(null);
+  unhighlightBreakpoint: function DVS_unhighlightBreakpoint() {
+    this._unselectBreakpoint();
+    this._hideConditionalPopup();
   },
 
   /**
-   * Checks whether a breakpoint with the specified source location and
-   * line number exists in this container, and returns the corresponding item
-   * if true, null otherwise.
-   *
-   * @param string aSourceLocation
-   *        The breakpoint source location.
-   * @param number aLineNumber
-   *        The breakpoint line number.
+   * Gets the currently selected breakpoint item.
    * @return object
-   *         The corresponding item.
    */
-  getBreakpoint: function DVB_getBreakpoint(aSourceLocation, aLineNumber) {
-    return this._cache.get(this._key(aSourceLocation, aLineNumber));
-  },
+  get selectedBreakpoint() this._selectedBreakpoint,
 
   /**
@@ -304,7 +353,7 @@ create({ constructor: BreakpointsView, p
    */
   get selectedClient() {
-    let selectedItem = this.selectedItem;
-    if (selectedItem) {
-      let { sourceLocation: url, lineNumber: line } = selectedItem.attachment;
+    let breakpointItem = this._selectedBreakpoint;
+    if (breakpointItem) {
+      let { sourceLocation: url, lineNumber: line } = breakpointItem.attachment;
       return DebuggerController.Breakpoints.getBreakpoint(url, line);
     }
@@ -313,45 +362,109 @@ create({ constructor: BreakpointsView, p
 
   /**
-   * Customization function for creating an item's UI.
+   * Marks a breakpoint as selected in this sources container.
    *
-   * @param nsIDOMNode aElementNode
-   *        The element associated with the displayed item.
-   * @param string aInfo
-   *        The breakpoint's line info.
-   * @param string aText
-   *        The breakpoint's line text.
+   * @param MenuItem aItem
+   *        The breakpoint item to select.
    */
-  _createItemView: function DVB__createItemView(aElementNode, aInfo, aText) {
+  _selectBreakpoint: function DVS__selectBreakpoint(aItem) {
+    if (this._selectedBreakpoint == aItem) {
+      return;
+    }
+    this._unselectBreakpoint();
+    this._selectedBreakpoint = aItem;
+    this._selectedBreakpoint.markSelected();
+
+    // Ensure the currently selected breakpoint is visible.
+    this.node.ensureElementIsVisible(aItem.target);
+  },
+
+  /**
+   * Marks the current breakpoint as unselected in this sources container.
+   */
+  _unselectBreakpoint: function DVS__unselectBreakpoint() {
+    if (this._selectedBreakpoint) {
+      this._selectedBreakpoint.markDeselected();
+      this._selectedBreakpoint = null;
+    }
+  },
+
+  /**
+   * Opens a conditional breakpoint's expression input popup.
+   */
+  _openConditionalPopup: function DVS__openConditionalPopup() {
+    let selectedBreakpoint = this.selectedBreakpoint;
+    let selectedClient = this.selectedClient;
+
+    if (selectedClient.conditionalExpression === undefined) {
+      this._cbTextbox.value = selectedClient.conditionalExpression = "";
+    } else {
+      this._cbTextbox.value = selectedClient.conditionalExpression;
+    }
+
+    this._cbPanel.hidden = false;
+    this._cbPanel.openPopup(this.selectedBreakpoint.attachment.view.lineNumber,
+      BREAKPOINT_CONDITIONAL_POPUP_POSITION,
+      BREAKPOINT_CONDITIONAL_POPUP_OFFSET_X,
+      BREAKPOINT_CONDITIONAL_POPUP_OFFSET_Y);
+  },
+
+  /**
+   * Hides a conditional breakpoint's expression input popup.
+   */
+  _hideConditionalPopup: function DVS__hideConditionalPopup() {
+    this._cbPanel.hidden = true;
+    this._cbPanel.hidePopup();
+  },
+
+  /**
+   * Customization function for creating a breakpoint item's UI.
+   *
+   * @param object aOptions
+   *        Additional options or flags supported by this operation:
+   *          - number lineNumber
+   *            The line number specified by the debugger controller.
+   *          - string lineText
+   *            The line text to be displayed.
+   * @return object
+   *         An object containing the breakpoint container, checkbox,
+   *         line number and line text nodes.
+   */
+  _createBreakpointView: function DVS_createBreakpointView(aOptions) {
+    let { lineNumber, lineText } = aOptions;
+
     let checkbox = document.createElement("checkbox");
     checkbox.setAttribute("checked", "true");
-    checkbox.addEventListener("click", this._onCheckboxClick, false);
 
-    let lineInfo = document.createElement("label");
-    lineInfo.setAttribute("value", aInfo);
-    lineInfo.setAttribute("crop", "end");
+    let lineNumberNode = document.createElement("label");
+    lineNumberNode.className = "plain dbg-breakpoint-line";
+    lineNumberNode.setAttribute("value", lineNumber);
 
-    let lineText = document.createElement("label");
-    lineText.setAttribute("value", aText);
-    lineText.setAttribute("crop", "end");
-    lineText.setAttribute("tooltiptext",
-      aText.substr(0, BREAKPOINT_LINE_TOOLTIP_MAX_LENGTH));
+    let lineTextNode = document.createElement("label");
+    lineTextNode.className = "plain dbg-breakpoint-text";
+    lineTextNode.setAttribute("value", lineText);
+    lineTextNode.setAttribute("crop", "end");
+    lineTextNode.setAttribute("flex", "1");
+    lineTextNode.setAttribute("tooltiptext",
+      lineText.substr(0, BREAKPOINT_LINE_TOOLTIP_MAX_LENGTH));
 
-    let state = document.createElement("vbox");
-    state.className = "state";
-    state.setAttribute("pack", "center");
-    state.appendChild(checkbox);
+    let container = document.createElement("hbox");
+    container.id = "breakpoint-" + aOptions.actor;
+    container.className = "dbg-breakpoint side-menu-widget-item-other";
+    container.setAttribute("align", "center");
+    container.setAttribute("flex", "1");
 
-    let content = document.createElement("vbox");
-    content.className = "content";
-    content.setAttribute("flex", "1");
-    content.appendChild(lineInfo);
-    content.appendChild(lineText);
+    container.addEventListener("click", this._onBreakpointClick, false);
+    checkbox.addEventListener("click", this._onBreakpointCheckboxClick, false);
 
-    aElementNode.appendChild(state);
-    aElementNode.appendChild(content);
+    container.appendChild(checkbox);
+    container.appendChild(lineNumberNode);
+    container.appendChild(lineTextNode);
 
-    aElementNode.checkbox = checkbox;
-    aElementNode.infoNode = lineInfo;
-    aElementNode.textNode = lineText;
+    return {
+      container: container,
+      checkbox: checkbox,
+      lineNumber: lineNumberNode,
+      lineText: lineTextNode
+    };
   },
 
@@ -359,23 +472,25 @@ create({ constructor: BreakpointsView, p
    * Creates a context menu for a breakpoint element.
    *
-   * @param nsIDOMNode aElementNode
-   *        The element associated with the displayed breakpoint item.
-   * @return string
-   *         The newly created menupopup id.
+   * @param aOptions
+   *        Additional options or flags supported by this operation:
+   *          - string actor
+   *            A breakpoint identifier specified by the debugger controller.
+   * @return object
+   *         An object containing the breakpoint commandset and menu popup ids.
    */
-  _createContextMenu: function DVB__createContextMenu(aElementNode) {
-    let breakpointId = aElementNode.id;
-    let commandsetId = "breakpointCommandset-" + breakpointId;
-    let menupopupId = "breakpointMenupopup-" + breakpointId;
+  _createContextMenu: function DVS__createContextMenu(aOptions) {
+    let commandsetId = "bp-cSet-" + aOptions.actor;
+    let menupopupId = "bp-mPop-" + aOptions.actor;
 
     let commandset = document.createElement("commandset");
     let menupopup = document.createElement("menupopup");
-    commandset.setAttribute("id", commandsetId);
-    menupopup.setAttribute("id", menupopupId);
+    commandset.id = commandsetId;
+    menupopup.id = menupopupId;
 
-    createMenuItem.call(this, "deleteAll");
+    createMenuItem.call(this, "enableSelf", true);
+    createMenuItem.call(this, "disableSelf");
+    createMenuItem.call(this, "deleteSelf");
     createMenuSeparator();
-    createMenuItem.call(this, "enableAll");
-    createMenuItem.call(this, "disableAll");
+    createMenuItem.call(this, "setConditional");
     createMenuSeparator();
     createMenuItem.call(this, "enableOthers");
@@ -383,16 +498,16 @@ create({ constructor: BreakpointsView, p
     createMenuItem.call(this, "deleteOthers");
     createMenuSeparator();
-    createMenuItem.call(this, "setConditional");
+    createMenuItem.call(this, "enableAll");
+    createMenuItem.call(this, "disableAll");
     createMenuSeparator();
-    createMenuItem.call(this, "enableSelf", true);
-    createMenuItem.call(this, "disableSelf");
-    createMenuItem.call(this, "deleteSelf");
+    createMenuItem.call(this, "deleteAll");
 
     this._popupset.appendChild(menupopup);
     this._commandset.appendChild(commandset);
 
-    aElementNode.commandset = commandset;
-    aElementNode.menupopup = menupopup;
-    return menupopupId;
+    return {
+      commandsetId: commandsetId,
+      menupopupId: menupopupId
+    };
 
     /**
@@ -409,16 +524,17 @@ create({ constructor: BreakpointsView, p
       let command = document.createElement("command");
 
-      let prefix = "bp-cMenu-"; // breakpoints context menu
-      let commandId = prefix + aName + "-" + breakpointId + "-command";
-      let menuitemId = prefix + aName + "-" + breakpointId + "-menuitem";
+      let prefix = "bp-cMenu-"; // "breakpoints context menu"
+      let commandId = prefix + aName + "-" + aOptions.actor + "-command";
+      let menuitemId = prefix + aName + "-" + aOptions.actor + "-menuitem";
 
       let label = L10N.getStr("breakpointMenuItem." + aName);
       let func = this["_on" + aName.charAt(0).toUpperCase() + aName.slice(1)];
 
-      command.setAttribute("id", commandId);
+      command.id = commandId;
       command.setAttribute("label", label);
-      command.addEventListener("command", func.bind(this, aElementNode), false);
+      command.addEventListener("command", func.bind(this, aOptions), false);
 
-      menuitem.setAttribute("id", menuitemId);
+      menuitem.id = menuitemId;
+      menuitem.setAttribute("command", commandId);
       menuitem.setAttribute("command", commandId);
       menuitem.setAttribute("hidden", aHiddenFlag);
@@ -426,5 +542,4 @@ create({ constructor: BreakpointsView, p
       commandset.appendChild(command);
       menupopup.appendChild(menuitem);
-      aElementNode[aName] = { menuitem: menuitem, command: command };
     }
 
@@ -440,13 +555,15 @@ create({ constructor: BreakpointsView, p
 
   /**
-   * Destroys a context menu for a breakpoint.
+   * Destroys the context menu for a breakpoint.
    *
-   * @param nsIDOMNode aElementNode
-   *        The element associated with the displayed breakpoint item.
+   * @param object aContextMenu
+   *        An object containing the breakpoint commandset and menu popup ids.
    */
-  _destroyContextMenu: function DVB__destroyContextMenu(aElementNode) {
-    let commandset = aElementNode.commandset;
-    let menupopup = aElementNode.menupopup;
+  _destroyContextMenu: function DVS__destroyContextMenu(aContextMenu) {
+    dumpn("Destroying context menu: " +
+      aContextMenu.commandsetId + " & " + aContextMenu.menupopupId);
 
+    let commandset = document.getElementById(aContextMenu.commandsetId);
+    let menupopup = document.getElementById(aContextMenu.menupopupId);
     commandset.parentNode.removeChild(commandset);
     menupopup.parentNode.removeChild(menupopup);
@@ -455,7 +572,14 @@ create({ constructor: BreakpointsView, p
   /**
    * Function called each time a breakpoint item is removed.
+   *
+   * @param MenuItem aItem
+   *        The corresponding menu item.
    */
-  _onBreakpointRemoved: function DVB__onBreakpointRemoved(aItem) {
-    this._destroyContextMenu(aItem.target);
+  _onBreakpointRemoved: function DVS__onBreakpointRemoved(aItem) {
+    dumpn("Finalizing breakpoint item: " + aItem);
+
+    let { sourceLocation: url, lineNumber: line, popup } = aItem.attachment;
+    this._destroyContextMenu(popup);
+    this._breakpointsCache.delete(this._getBreakpointKey(url, line));
   },
 
@@ -463,5 +587,5 @@ create({ constructor: BreakpointsView, p
    * The load listener for the source editor.
    */
-  _onEditorLoad: function DVB__onEditorLoad({ detail: editor }) {
+  _onEditorLoad: function DVS__onEditorLoad({ detail: editor }) {
     editor.addEventListener("Selection", this._onEditorSelection, false);
     editor.addEventListener("ContextMenu", this._onEditorContextMenu, false);
@@ -471,5 +595,5 @@ create({ constructor: BreakpointsView, p
    * The unload listener for the source editor.
    */
-  _onEditorUnload: function DVB__onEditorUnload({ detail: editor }) {
+  _onEditorUnload: function DVS__onEditorUnload({ detail: editor }) {
     editor.removeEventListener("Selection", this._onEditorSelection, false);
     editor.removeEventListener("ContextMenu", this._onEditorContextMenu, false);
@@ -479,8 +603,8 @@ create({ constructor: BreakpointsView, p
    * The selection listener for the source editor.
    */
-  _onEditorSelection: function DVB__onEditorSelection(e) {
+  _onEditorSelection: function DVS__onEditorSelection(e) {
     let { start, end } = e.newValue;
 
-    let sourceLocation = DebuggerView.Sources.selectedValue;
+    let sourceLocation = this.selectedValue;
     let lineStart = DebuggerView.editor.getLineAtOffset(start) + 1;
     let lineEnd = DebuggerView.editor.getLineAtOffset(end) + 1;
@@ -496,5 +620,5 @@ create({ constructor: BreakpointsView, p
    * The context menu listener for the source editor.
    */
-  _onEditorContextMenu: function DVB__onEditorContextMenu({ x, y }) {
+  _onEditorContextMenu: function DVS__onEditorContextMenu({ x, y }) {
     let offset = DebuggerView.editor.getOffsetAtLocation(x, y);
     let line = DebuggerView.editor.getLineAtOffset(offset);
@@ -503,8 +627,105 @@ create({ constructor: BreakpointsView, p
 
   /**
-   * The context menu popup hidden listener for the source editor.
+   * The mouse down listener for the sources container.
    */
-  _onEditorContextMenuPopupHidden: function DVB__onEditorContextMenuPopupHidden() {
-    this._editorContextMenuLineNumber = -1;
+  _onSourceMouseDown: function DVS__onSourceMouseDown(e) {
+    let item = this.getItemForElement(e.target);
+    if (item) {
+      // The container is not empty and we clicked on an actual item.
+      this.selectedItem = item;
+    }
+  },
+
+  /**
+   * The select listener for the sources container.
+   */
+  _onSourceSelect: function DVS__onSourceSelect() {
+    if (!this.refresh()) {
+      return;
+    }
+
+    let selectedSource = this.selectedItem.attachment.source;
+    if (DebuggerView.editorSource != selectedSource) {
+      DebuggerView.editorSource = selectedSource;
+    }
+  },
+
+  /**
+   * The click listener for the sources container.
+   */
+  _onSourceClick: function DVS__onSourceClick() {
+    // Use this container as a filtering target.
+    DebuggerView.Filtering.target = this;
+  },
+
+  /**
+   * The click listener for a breakpoint container.
+   */
+  _onBreakpointClick: function DVS__onBreakpointClick(e) {
+    let sourceItem = this.getItemForElement(e.target);
+    let breakpointItem = this.getItemForElement.call(sourceItem, e.target);
+    let { sourceLocation: url, lineNumber: line } = breakpointItem.attachment;
+    let breakpointClient = DebuggerController.Breakpoints.getBreakpoint(url, line);
+    let conditionalExpression = (breakpointClient || {}).conditionalExpression;
+
+    this.highlightBreakpoint(url, line, {
+      updateEditor: true,
+      openPopup: conditionalExpression !== undefined && e.button == 0
+    });
+  },
+
+  /**
+   * The click listener for a breakpoint checkbox.
+   */
+  _onBreakpointCheckboxClick: function DVS__onBreakpointCheckboxClick(e) {
+    let sourceItem = this.getItemForElement(e.target);
+    let breakpointItem = this.getItemForElement.call(sourceItem, e.target);
+    let { sourceLocation: url, lineNumber: line, disabled } = breakpointItem.attachment;
+
+    this[disabled ? "enableBreakpoint" : "disableBreakpoint"](url, line, {
+      silent: true
+    });
+
+    // Don't update the editor location (propagate into DVS__onBreakpointClick).
+    e.preventDefault();
+    e.stopPropagation();
+  },
+
+  /**
+   * The popup showing listener for the breakpoints conditional expression panel.
+   */
+  _onConditionalPopupShowing: function DVS__onConditionalPopupShowing() {
+    this._conditionalPopupVisible = true;
+  },
+
+  /**
+   * The popup shown listener for the breakpoints conditional expression panel.
+   */
+  _onConditionalPopupShown: function DVS__onConditionalPopupShown() {
+    this._cbTextbox.focus();
+    this._cbTextbox.select();
+  },
+
+  /**
+   * The popup hiding listener for the breakpoints conditional expression panel.
+   */
+  _onConditionalPopupHiding: function DVS__onConditionalPopupHiding() {
+    this._conditionalPopupVisible = false;
+  },
+
+  /**
+   * The input listener for the breakpoints conditional expression textbox.
+   */
+  _onConditionalTextboxInput: function DVS__onConditionalTextboxInput() {
+    this.selectedClient.conditionalExpression = this._cbTextbox.value;
+  },
+
+  /**
+   * The keypress listener for the breakpoints conditional expression textbox.
+   */
+  _onConditionalTextboxKeyPress: function DVS__onConditionalTextboxKeyPress(e) {
+    if (e.keyCode == e.DOM_VK_RETURN || e.keyCode == e.DOM_VK_ENTER) {
+      this._hideConditionalPopup();
+    }
   },
 
@@ -527,7 +748,6 @@ create({ constructor: BreakpointsView, p
     // If a breakpoint already existed, remove it now.
     if (breakpointItem) {
-      let breakpointClient = DebuggerController.Breakpoints.getBreakpoint(url, line)
+      let breakpointClient = DebuggerController.Breakpoints.getBreakpoint(url, line);
       DebuggerController.Breakpoints.removeBreakpoint(breakpointClient);
-      DebuggerView.Breakpoints.unhighlightBreakpoint();
     }
     // No breakpoint existed at the required location, add one now.
@@ -556,6 +776,5 @@ create({ constructor: BreakpointsView, p
     // If a breakpoint already existed or wasn't a conditional, morph it now.
     if (breakpointItem) {
-      breakpointItem.attachment.isConditional = true;
-      this.selectedClient.conditionalExpression = "";
+      let breakpointClient = DebuggerController.Breakpoints.getBreakpoint(url, line);
       this.highlightBreakpoint(url, line, { openPopup: true });
     }
@@ -570,79 +789,12 @@ create({ constructor: BreakpointsView, p
 
   /**
-   * The popup showing listener for the breakpoints conditional expression panel.
-   */
-  _onConditionalPopupShowing: function DVB__onConditionalPopupShowing() {
-    this._popupShown = true;
-  },
-
-  /**
-   * The popup shown listener for the breakpoints conditional expression panel.
-   */
-  _onConditionalPopupShown: function DVB__onConditionalPopupShown() {
-    this._cbTextbox.focus();
-    this._cbTextbox.select();
-  },
-
-  /**
-   * The popup hiding listener for the breakpoints conditional expression panel.
-   */
-  _onConditionalPopupHiding: function DVB__onConditionalPopupHiding() {
-    this._popupShown = false;
-    this.selectedClient.conditionalExpression = this._cbTextbox.value;
-  },
-
-  /**
-   * The keypress listener for the breakpoints conditional expression textbox.
-   */
-  _onConditionalTextboxKeyPress: function DVB__onConditionalTextboxKeyPress(e) {
-    if (e.keyCode == e.DOM_VK_RETURN || e.keyCode == e.DOM_VK_ENTER) {
-      this._cbPanel.hidePopup();
-    }
-  },
-
-  /**
-   * The click listener for the breakpoints container.
-   */
-  _onBreakpointClick: function DVB__onBreakpointClick(e) {
-    let breakpointItem = this.getItemForElement(e.target);
-    if (!breakpointItem) {
-      // The container is empty or we didn't click on an actual item.
-      return;
-    }
-    let { sourceLocation: url, lineNumber: line } = breakpointItem.attachment;
-    this.highlightBreakpoint(url, line, { updateEditor: true, openPopup: e.button == 0 });
-  },
-
-  /**
-   * The click listener for a breakpoint checkbox.
-   */
-  _onCheckboxClick: function DVB__onCheckboxClick(e) {
-    let breakpointItem = this.getItemForElement(e.target);
-    if (!breakpointItem) {
-      // The container is empty or we didn't click on an actual item.
-      return;
-    }
-    let { sourceLocation: url, lineNumber: line, enabled } = breakpointItem.attachment;
-    this[enabled ? "disableBreakpoint" : "enableBreakpoint"](url, line, { silent: true });
-
-    // Don't update the editor location.
-    e.preventDefault();
-    e.stopPropagation();
-  },
-
-  /**
    * Listener handling the "setConditional" menuitem command.
    *
-   * @param object aTarget
-   *        The corresponding breakpoint element node.
+   * @param object aDetails
+   *        The breakpoint details (sourceLocation, lineNumber etc.).
    */
-  _onSetConditional: function DVB__onSetConditional(aTarget) {
-    if (!aTarget) {
-      return;
-    }
-    let breakpointItem = this.getItemForElement(aTarget);
-    let { sourceLocation: url, lineNumber: line } = breakpointItem.attachment;
-
-    breakpointItem.attachment.isConditional = true;
+  _onSetConditional: function DVS__onSetConditional(aDetails) {
+    let { sourceLocation: url, lineNumber: line, actor } = aDetails;
+    let breakpointItem = this.getBreakpoint(url, line);
     this.highlightBreakpoint(url, line, { openPopup: true });
   },
@@ -651,17 +803,16 @@ create({ constructor: BreakpointsView, p
    * Listener handling the "enableSelf" menuitem command.
    *
-   * @param object aTarget
-   *        The corresponding breakpoint element node.
+   * @param object aDetails
+   *        The breakpoint details (sourceLocation, lineNumber etc.).
    */
-  _onEnableSelf: function DVB__onEnableSelf(aTarget) {
-    if (!aTarget) {
-      return;
-    }
-    let breakpointItem = this.getItemForElement(aTarget);
-    let { sourceLocation: url, lineNumber: line } = breakpointItem.attachment;
+  _onEnableSelf: function DVS__onEnableSelf(aDetails) {
+    let { sourceLocation: url, lineNumber: line, actor } = aDetails;
 
     if (this.enableBreakpoint(url, line)) {
-      aTarget.enableSelf.menuitem.setAttribute("hidden", "true");
-      aTarget.disableSelf.menuitem.removeAttribute("hidden");
+      let prefix = "bp-cMenu-"; // "breakpoints context menu"
+      let enableSelfId = prefix + "enableSelf-" + actor + "-menuitem";
+      let disableSelfId = prefix + "disableSelf-" + actor + "-menuitem";
+      document.getElementById(enableSelfId).setAttribute("hidden", "true");
+      document.getElementById(disableSelfId).removeAttribute("hidden");
     }
   },
@@ -670,17 +821,16 @@ create({ constructor: BreakpointsView, p
    * Listener handling the "disableSelf" menuitem command.
    *
-   * @param object aTarget
-   *        The corresponding breakpoint element node.
+   * @param object aDetails
+   *        The breakpoint details (sourceLocation, lineNumber etc.).
    */
-  _onDisableSelf: function DVB__onDisableSelf(aTarget) {
-    if (!aTarget) {
-      return;
-    }
-    let breakpointItem = this.getItemForElement(aTarget);
-    let { sourceLocation: url, lineNumber: line } = breakpointItem.attachment;
+  _onDisableSelf: function DVS__onDisableSelf(aDetails) {
+    let { sourceLocation: url, lineNumber: line, actor } = aDetails;
 
     if (this.disableBreakpoint(url, line)) {
-      aTarget.enableSelf.menuitem.removeAttribute("hidden");
-      aTarget.disableSelf.menuitem.setAttribute("hidden", "true");
+      let prefix = "bp-cMenu-"; // "breakpoints context menu"
+      let enableSelfId = prefix + "enableSelf-" + actor + "-menuitem";
+      let disableSelfId = prefix + "disableSelf-" + actor + "-menuitem";
+      document.getElementById(enableSelfId).removeAttribute("hidden");
+      document.getElementById(disableSelfId).setAttribute("hidden", "true");
     }
   },
@@ -689,13 +839,9 @@ create({ constructor: BreakpointsView, p
    * Listener handling the "deleteSelf" menuitem command.
    *
-   * @param object aTarget
-   *        The corresponding breakpoint element node.
+   * @param object aDetails
+   *        The breakpoint details (sourceLocation, lineNumber etc.).
    */
-  _onDeleteSelf: function DVB__onDeleteSelf(aTarget) {
-    if (!aTarget) {
-      return;
-    }
-    let breakpointItem = this.getItemForElement(aTarget);
-    let { sourceLocation: url, lineNumber: line } = breakpointItem.attachment;
+  _onDeleteSelf: function DVS__onDeleteSelf(aDetails) {
+    let { sourceLocation: url, lineNumber: line } = aDetails;
     let breakpointClient = DebuggerController.Breakpoints.getBreakpoint(url, line);
 
@@ -707,11 +853,11 @@ create({ constructor: BreakpointsView, p
    * Listener handling the "enableOthers" menuitem command.
    *
-   * @param object aTarget
-   *        The corresponding breakpoint element node.
+   * @param object aDetails
+   *        The breakpoint details (sourceLocation, lineNumber etc.).
    */
-  _onEnableOthers: function DVB__onEnableOthers(aTarget) {
-    for (let item in this) {
-      if (item.target != aTarget) {
-        this._onEnableSelf(item.target);
+  _onEnableOthers: function DVS__onEnableOthers(aDetails) {
+    for (let [, item] of this._breakpointsCache) {
+      if (item.attachment.actor != aDetails.actor) {
+        this._onEnableSelf(item.attachment);
       }
     }
@@ -721,11 +867,11 @@ create({ constructor: BreakpointsView, p
    * Listener handling the "disableOthers" menuitem command.
    *
-   * @param object aTarget
-   *        The corresponding breakpoint element node.
+   * @param object aDetails
+   *        The breakpoint details (sourceLocation, lineNumber etc.).
    */
-  _onDisableOthers: function DVB__onDisableOthers(aTarget) {
-    for (let item in this) {
-      if (item.target != aTarget) {
-        this._onDisableSelf(item.target);
+  _onDisableOthers: function DVS__onDisableOthers(aDetails) {
+    for (let [, item] of this._breakpointsCache) {
+      if (item.attachment.actor != aDetails.actor) {
+        this._onDisableSelf(item.attachment);
       }
     }
@@ -735,11 +881,11 @@ create({ constructor: BreakpointsView, p
    * Listener handling the "deleteOthers" menuitem command.
    *
-   * @param object aTarget
-   *        The corresponding breakpoint element node.
+   * @param object aDetails
+   *        The breakpoint details (sourceLocation, lineNumber etc.).
    */
-  _onDeleteOthers: function DVB__onDeleteOthers(aTarget) {
-    for (let item in this) {
-      if (item.target != aTarget) {
-        this._onDeleteSelf(item.target);
+  _onDeleteOthers: function DVS__onDeleteOthers(aDetails) {
+    for (let [, item] of this._breakpointsCache) {
+      if (item.attachment.actor != aDetails.actor) {
+        this._onDeleteSelf(item.attachment);
       }
     }
@@ -749,10 +895,10 @@ create({ constructor: BreakpointsView, p
    * Listener handling the "enableAll" menuitem command.
    *
-   * @param object aTarget
-   *        The corresponding breakpoint element node.
+   * @param object aDetails
+   *        The breakpoint details (sourceLocation, lineNumber etc.).
    */
-  _onEnableAll: function DVB__onEnableAll(aTarget) {
-    this._onEnableOthers(aTarget);
-    this._onEnableSelf(aTarget);
+  _onEnableAll: function DVS__onEnableAll(aDetails) {
+    this._onEnableOthers(aDetails);
+    this._onEnableSelf(aDetails);
   },
 
@@ -760,10 +906,10 @@ create({ constructor: BreakpointsView, p
    * Listener handling the "disableAll" menuitem command.
    *
-   * @param object aTarget
-   *        The corresponding breakpoint element node.
+   * @param object aDetails
+   *        The breakpoint details (sourceLocation, lineNumber etc.).
    */
-  _onDisableAll: function DVB__onDisableAll(aTarget) {
-    this._onDisableOthers(aTarget);
-    this._onDisableSelf(aTarget);
+  _onDisableAll: function DVS__onDisableAll(aDetails) {
+    this._onDisableOthers(aDetails);
+    this._onDisableSelf(aDetails);
   },
 
@@ -771,36 +917,305 @@ create({ constructor: BreakpointsView, p
    * Listener handling the "deleteAll" menuitem command.
    *
-   * @param object aTarget
-   *        The corresponding breakpoint element node.
+   * @param object aDetails
+   *        The breakpoint details (sourceLocation, lineNumber etc.).
    */
-  _onDeleteAll: function DVB__onDeleteAll(aTarget) {
-    this._onDeleteOthers(aTarget);
-    this._onDeleteSelf(aTarget);
+  _onDeleteAll: function DVS__onDeleteAll(aDetails) {
+    this._onDeleteOthers(aDetails);
+    this._onDeleteSelf(aDetails);
   },
 
   /**
-   * Gets an identifier for a breakpoint item in the current cache.
+   * Gets an identifier for a breakpoint's details in the current cache.
+   *
+   * @param string aSourceLocation
+   *        The breakpoint source location.
+   * @param number aLineNumber
+   *        The breakpoint line number.
    * @return string
+   *         The breakpoint identifier.
    */
-  _key: function DVB__key(aSourceLocation, aLineNumber) {
-    return aSourceLocation + aLineNumber;
+  _getBreakpointKey: function DVS__getBreakpointKey(aSourceLocation, aLineNumber) {
+    return [aSourceLocation, aLineNumber].join();
   },
 
+  _breakpointsCache: null,
+  _commandset: null,
   _popupset: null,
-  _commandset: null,
   _cmPopup: null,
   _cbPanel: null,
   _cbTextbox: null,
-  _popupShown: false,
-  _cache: null,
-  _editorContextMenuLineNumber: -1
+  _selectedBreakpoint: null,
+  _editorContextMenuLineNumber: -1,
+  _conditionalPopupVisible: false
 });
 
 /**
+ * Utility functions for handling sources.
+ */
+let SourceUtils = {
+  _labelsCache: new Map(),
+  _groupsCache: new Map(),
+
+  /**
+   * Clears the labels cache, populated by methods like
+   * SourceUtils.getSourceLabel or Source Utils.getSourceGroup.
+   * This should be done every time the content location changes.
+   */
+  clearCache: function SU_clearCache() {
+    this._labelsCache = new Map();
+    this._groupsCache = new Map();
+  },
+
+  /**
+   * Gets a unique, simplified label from a source url.
+   *
+   * @param string aUrl
+   *        The source url.
+   * @param number aLength [optional]
+   *        The expected source url length.
+   * @param number aSection [optional]
+   *        The section to trim. Supported values: "start", "center", "end"
+   * @return string
+   *         The simplified label.
+   */
+  getSourceLabel: function SU_getSourceLabel(aUrl, aLength, aSection) {
+    aLength = aLength || SOURCE_URL_DEFAULT_MAX_LENGTH;
+    aSection = aSection || "end";
+    let id = [aUrl, aLength, aSection].join();
+    let cachedLabel = this._labelsCache.get(id);
+    if (cachedLabel) {
+      return cachedLabel;
+    }
+
+    let sourceLabel = this.trimUrlLength(this.trimUrl(aUrl), aLength, aSection);
+    let unicodeLabel = this.convertToUnicode(window.unescape(sourceLabel));
+    this._labelsCache.set(id, unicodeLabel);
+    return unicodeLabel;
+  },
+
+  /**
+   * Gets as much information as possible about the hostname and directory paths
+   * of an url to create a short url group identifier.
+   *
+   * @param string aUrl
+   *        The source url.
+   * @return string
+   *         The simplified group.
+   */
+  getSourceGroup: function SU_getSourceGroup(aUrl) {
+    let cachedGroup = this._groupsCache.get(aUrl);
+    if (cachedGroup) {
+      return cachedGroup;
+    }
+
+    try {
+      // Use an nsIURL to parse all the url path parts.
+      var uri = Services.io.newURI(aUrl, null, null).QueryInterface(Ci.nsIURL);
+    } catch (e) {
+      // This doesn't look like a url, or nsIURL can't handle it.
+      return "";
+    }
+
+    let { scheme, hostPort, directory, fileName } = uri;
+    let lastDir = directory.split("/").reverse()[1];
+    let group = [];
+
+    // Only show interesting schemes, http is implicit.
+    if (scheme != "http") {
+      group.push(scheme);
+    }
+    // Hostnames don't always exist for files or some resource urls.
+    // e.g. file://foo/bar.js or resource:///foo/bar.js don't have a host.
+    if (hostPort) {
+      // If the hostname is a dot-separated identifier, show the first 2 parts.
+      group.push(hostPort.split(".").slice(0, 2).join("."));
+    }
+    // Append the last directory if the path leads to an actual file.
+    // e.g. http://foo.org/bar/ should only show "foo.org", not "foo.org bar"
+    if (fileName) {
+      group.push(lastDir);
+    }
+
+    let groupLabel = group.join(" ");
+    let unicodeLabel = this.convertToUnicode(window.unescape(groupLabel));
+    this._groupsCache.set(aUrl, unicodeLabel)
+    return unicodeLabel;
+  },
+
+  /**
+   * Trims the url by shortening it if it exceeds a certain length, adding an
+   * ellipsis at the end.
+   *
+   * @param string aUrl
+   *        The source url.
+   * @param number aLength [optional]
+   *        The expected source url length.
+   * @param number aSection [optional]
+   *        The section to trim. Supported values: "start", "center", "end"
+   * @return string
+   *         The shortened url.
+   */
+  trimUrlLength: function SU_trimUrlLength(aUrl, aLength, aSection) {
+    aLength = aLength || SOURCE_URL_DEFAULT_MAX_LENGTH;
+    aSection = aSection || "end";
+
+    if (aUrl.length > aLength) {
+      switch (aSection) {
+        case "start":
+          return L10N.ellipsis + aUrl.slice(-aLength);
+          break;
+        case "center":
+          return aUrl.substr(0, aLength / 2 - 1) + L10N.ellipsis + aUrl.slice(-aLength / 2 + 1);
+          break;
+        case "end":
+          return aUrl.substr(0, aLength) + L10N.ellipsis;
+          break;
+      }
+    }
+    return aUrl;
+  },
+
+  /**
+   * Trims the query part or reference identifier of a url string, if necessary.
+   *
+   * @param string aUrl
+   *        The source url.
+   * @return string
+   *         The shortened url.
+   */
+  trimUrlQuery: function SU_trimUrlQuery(aUrl) {
+    let length = aUrl.length;
+    let q1 = aUrl.indexOf('?');
+    let q2 = aUrl.indexOf('&');
+    let q3 = aUrl.indexOf('#');
+    let q = Math.min(q1 != -1 ? q1 : length,
+                     q2 != -1 ? q2 : length,
+                     q3 != -1 ? q3 : length);
+
+    return aUrl.slice(0, q);
+  },
+
+  /**
+   * Trims as much as possible from a url, while keeping the label unique
+   * in the sources container.
+   *
+   * @param string | nsIURL aUrl
+   *        The source url.
+   * @param string aLabel [optional]
+   *        The resulting label at each step.
+   * @param number aSeq [optional]
+   *        The current iteration step.
+   * @return string
+   *         The resulting label at the final step.
+   */
+  trimUrl: function SU_trimUrl(aUrl, aLabel, aSeq) {
+    if (!(aUrl instanceof Ci.nsIURL)) {
+      try {
+        // Use an nsIURL to parse all the url path parts.
+        aUrl = Services.io.newURI(aUrl, null, null).QueryInterface(Ci.nsIURL);
+      } catch (e) {
+        // This doesn't look like a url, or nsIURL can't handle it.
+        return aUrl;
+      }
+    }
+    if (!aSeq) {
+      let name = aUrl.fileName;
+      if (name) {
+        // This is a regular file url, get only the file name (contains the
+        // base name and extension if available).
+
+        // If this url contains an invalid query, unfortunately nsIURL thinks
+        // it's part of the file extension. It must be removed.
+        aLabel = aUrl.fileName.replace(/\&.*/, "");
+      } else {
+        // This is not a file url, hence there is no base name, nor extension.
+        // Proceed using other available information.
+        aLabel = "";
+      }
+      aSeq = 1;
+    }
+
+    // If we have a label and it doesn't only contain a query...
+    if (aLabel && aLabel.indexOf("?") != 0) {
+      // A page may contain multiple requests to the same url but with different
+      // queries. It is *not* redundant to show each one.
+      if (!DebuggerView.Sources.containsLabel(aLabel)) {
+        return aLabel;
+      }
+    }
+
+    // Append the url query.
+    if (aSeq == 1) {
+      let query = aUrl.query;
+      if (query) {
+        return this.trimUrl(aUrl, aLabel + "?" + query, aSeq + 1);
+      }
+      aSeq++;
+    }
+    // Append the url reference.
+    if (aSeq == 2) {
+      let ref = aUrl.ref;
+      if (ref) {
+        return this.trimUrl(aUrl, aLabel + "#" + aUrl.ref, aSeq + 1);
+      }
+      aSeq++;
+    }
+    // Prepend the url directory.
+    if (aSeq == 3) {
+      let dir = aUrl.directory;
+      if (dir) {
+        return this.trimUrl(aUrl, dir.replace(/^\//, "") + aLabel, aSeq + 1);
+      }
+      aSeq++;
+    }
+    // Prepend the hostname and port number.
+    if (aSeq == 4) {
+      let host = aUrl.hostPort;
+      if (host) {
+        return this.trimUrl(aUrl, host + "/" + aLabel, aSeq + 1);
+      }
+      aSeq++;
+    }
+    // Use the whole url spec but ignoring the reference.
+    if (aSeq == 5) {
+      return this.trimUrl(aUrl, aUrl.specIgnoringRef, aSeq + 1);
+    }
+    // Give up.
+    return aUrl.spec;
+  },
+
+  /**
+   * Convert a given string, encoded in a given character set, to unicode.
+   *
+   * @param string aString
+   *        A string.
+   * @param string aCharset [optional]
+   *        A character set.
+   * @return string
+   *         A unicode string.
+   */
+  convertToUnicode: function SU_convertToUnicode(aString, aCharset) {
+    // Decoding primitives.
+    let converter = Cc["@mozilla.org/intl/scriptableunicodeconverter"]
+        .createInstance(Ci.nsIScriptableUnicodeConverter);
+
+    try {
+      if (aCharset) {
+        converter.charset = aCharset;
+      }
+      return converter.ConvertToUnicode(aString);
+    } catch(e) {
+      return aString;
+    }
+  }
+};
+
+/**
  * Functions handling the watch expressions UI.
  */
 function WatchExpressionsView() {
   dumpn("WatchExpressionsView was instantiated");
-  MenuContainer.call(this);
+
+  this._cache = []; // Array instead of a map because indices are important.
   this.switchExpression = this.switchExpression.bind(this);
   this.deleteExpression = this.deleteExpression.bind(this);
@@ -818,13 +1233,12 @@ create({ constructor: WatchExpressionsVi
   initialize: function DVWE_initialize() {
     dumpn("Initializing the WatchExpressionsView");
-    this.node = new StackList(document.getElementById("expressions"));
+
+    this.node = new ListWidget(document.getElementById("expressions"));
     this._variables = document.getElementById("variables");
 
-    this.node.setAttribute("context", "debuggerWatchExpressionsContextMenu");
     this.node.permaText = L10N.getStr("addWatchExpressionText");
     this.node.itemFactory = this._createItemView;
+    this.node.setAttribute("context", "debuggerWatchExpressionsContextMenu");
     this.node.addEventListener("click", this._onClick, false);
-
-    this._cache = [];
   },
 
@@ -834,4 +1248,5 @@ create({ constructor: WatchExpressionsVi
   destroy: function DVWE_destroy() {
     dumpn("Destroying the WatchExpressionsView");
+
     this.node.removeEventListener("click", this._onClick, false);
   },
@@ -845,29 +1260,20 @@ create({ constructor: WatchExpressionsVi
   addExpression: function DVWE_addExpression(aExpression = "") {
     // Watch expressions are UI elements which benefit from visible panes.
-    DebuggerView.showPanesSoon();
+    DebuggerView.showInstrumentsPane();
 
     // Append a watch expression item to this container.
     let expressionItem = this.push([, aExpression], {
-      index: FIRST, /* specifies on which position should the item be appended */
+      index: 0, /* specifies on which position should the item be appended */
       relaxed: true, /* this container should allow dupes & degenerates */
       attachment: {
+        initialExpression: aExpression,
         currentExpression: "",
-        initialExpression: aExpression,
         id: this._generateId()
       }
     });
 
-    let element = expressionItem.target;
-    element.id = "expression-" + expressionItem.attachment.id;
-    element.className = "dbg-expression list-item";
-    element.arrowNode.className = "dbg-expression-arrow";
-    element.inputNode.className = "dbg-expression-input plain";
-    element.closeNode.className = "dbg-expression-delete plain devtools-closebutton";
-
-    // Automatically focus the new watch expression input and
-    // scroll the variables view to top.
-    element.inputNode.value = aExpression;
-    element.inputNode.select();
-    element.inputNode.focus();
+    // Automatically focus the new watch expression input.
+    expressionItem.attachment.inputNode.select();
+    expressionItem.attachment.inputNode.focus();
     this._variables.scrollTop = 0;
 
@@ -888,4 +1294,6 @@ create({ constructor: WatchExpressionsVi
   /**
    * Changes the watch expression corresponding to the specified variable item.
+   * This function is called whenever a watch expression's code is edited in
+   * the variables view container.
    *
    * @param Variable aVar
@@ -898,5 +1306,5 @@ create({ constructor: WatchExpressionsVi
       [i for (i of this._cache) if (i.attachment.currentExpression == aVar.name)][0];
 
-    // Remove the watch expression if it's going to be a duplicate.
+    // Remove the watch expression if it's going to be empty or a duplicate.
     if (!aExpression || this.getExpressions().indexOf(aExpression) != -1) {
       this.deleteExpression(aVar);
@@ -906,5 +1314,5 @@ create({ constructor: WatchExpressionsVi
     // Save the watch expression code string.
     expressionItem.attachment.currentExpression = aExpression;
-    expressionItem.target.inputNode.value = aExpression;
+    expressionItem.attachment.inputNode.value = aExpression;
 
     // Synchronize with the controller's watch expressions store.
@@ -914,4 +1322,6 @@ create({ constructor: WatchExpressionsVi
   /**
    * Removes the watch expression corresponding to the specified variable item.
+   * This function is called whenever a watch expression's value is edited in
+   * the variables view container.
    *
    * @param Variable aVar
@@ -956,14 +1366,18 @@ create({ constructor: WatchExpressionsVi
    * @param nsIDOMNode aElementNode
    *        The element associated with the displayed item.
-   * @param string aExpression
-   *        The initial watch expression text.
+   * @param any aAttachment
+   *        Some attached primitive/object.
    */
-  _createItemView: function DVWE__createItemView(aElementNode, aExpression) {
+  _createItemView: function DVWE__createItemView(aElementNode, aAttachment) {
     let arrowNode = document.createElement("box");
+    arrowNode.className = "dbg-expression-arrow";
+
     let inputNode = document.createElement("textbox");
+    inputNode.className = "plain dbg-expression-input";
+    inputNode.setAttribute("value", aAttachment.initialExpression);
+    inputNode.setAttribute("flex", "1");
+
     let closeNode = document.createElement("toolbarbutton");
-
-    inputNode.setAttribute("value", aExpression);
-    inputNode.setAttribute("flex", "1");
+    closeNode.className = "plain variables-view-delete";
 
     closeNode.addEventListener("click", this._onClose, false);
@@ -971,10 +1385,14 @@ create({ constructor: WatchExpressionsVi
     inputNode.addEventListener("keypress", this._onKeyPress, false);
 
+    aElementNode.id = "expression-" + aAttachment.id;
+    aElementNode.className = "dbg-expression title";
+
     aElementNode.appendChild(arrowNode);
     aElementNode.appendChild(inputNode);
     aElementNode.appendChild(closeNode);
-    aElementNode.arrowNode = arrowNode;
-    aElementNode.inputNode = inputNode;
-    aElementNode.closeNode = closeNode;
+
+    aAttachment.arrowNode = arrowNode;
+    aAttachment.inputNode = inputNode;
+    aAttachment.closeNode = closeNode;
   },
 
@@ -995,5 +1413,5 @@ create({ constructor: WatchExpressionsVi
     // Empty the view of all the watch expressions and clear the cache.
     this.empty();
-    this._cache = [];
+    this._cache.length = 0;
 
     // Synchronize with the controller's watch expressions store.
@@ -1026,4 +1444,5 @@ create({ constructor: WatchExpressionsVi
     DebuggerController.StackFrames.syncWatchExpressions();
 
+    // Prevent clicking the expression element itself.
     e.preventDefault();
     e.stopPropagation();
@@ -1088,5 +1507,6 @@ create({ constructor: WatchExpressionsVi
 function GlobalSearchView() {
   dumpn("GlobalSearchView was instantiated");
-  MenuContainer.call(this);
+
+  this._cache = new Map();
   this._startSearch = this._startSearch.bind(this);
   this._onFetchSourceFinished = this._onFetchSourceFinished.bind(this);
@@ -1106,12 +1526,11 @@ create({ constructor: GlobalSearchView, 
   initialize: function DVGS_initialize() {
     dumpn("Initializing the GlobalSearchView");
-    this.node = new StackList(document.getElementById("globalsearch"));
-    this._splitter = document.getElementById("globalsearch-splitter");
+
+    this.node = new ListWidget(document.getElementById("globalsearch"));
+    this._splitter = document.querySelector("#globalsearch + .devtools-horizontal-splitter");
 
     this.node.emptyText = L10N.getStr("noMatchingStringsText");
     this.node.itemFactory = this._createItemView;
     this.node.addEventListener("scroll", this._onScroll, false);
-
-    this._cache = new Map();
   },
 
@@ -1121,4 +1540,5 @@ create({ constructor: GlobalSearchView, 
   destroy: function DVGS_destroy() {
     dumpn("Destroying the GlobalSearchView");
+
     this.node.removeEventListener("scroll", this._onScroll, false);
   },
@@ -1128,5 +1548,7 @@ create({ constructor: GlobalSearchView, 
    * @return boolean
    */
-  get hidden() this.node.getAttribute("hidden") == "true",
+  get hidden()
+    this.node.getAttribute("hidden") == "true" ||
+    this._splitter.getAttribute("hidden") == "true",
 
   /**
@@ -1140,10 +1562,10 @@ create({ constructor: GlobalSearchView, 
 
   /**
-   * Removes all items from this container and hides it.
+   * Hides and removes all items from this search container.
    */
   clearView: function DVGS_clearView() {
     this.hidden = true;
     this.empty();
-    window.dispatchEvent("Debugger:GlobalSearch:ViewCleared");
+    window.dispatchEvent(document, "Debugger:GlobalSearch:ViewCleared");
   },
 
@@ -1153,5 +1575,5 @@ create({ constructor: GlobalSearchView, 
   clearCache: function DVGS_clearCache() {
     this._cache = new Map();
-    window.dispatchEvent("Debugger:GlobalSearch:CacheCleared");
+    window.dispatchEvent(document, "Debugger:GlobalSearch:CacheCleared");
   },
 
@@ -1266,5 +1688,5 @@ create({ constructor: GlobalSearchView, 
       }
       let sourceItem = DebuggerView.Sources.getItemByValue(location);
-      let sourceObject = sourceItem.attachment;
+      let sourceObject = sourceItem.attachment.source;
       DebuggerController.SourceScripts.getText(sourceObject, onFetch, onTimeout);
     }
@@ -1326,5 +1748,5 @@ create({ constructor: GlobalSearchView, 
     if (!token) {
       this.clearView();
-      window.dispatchEvent("Debugger:GlobalSearch:TokenEmpty");
+      window.dispatchEvent(document, "Debugger:GlobalSearch:TokenEmpty");
       return;
     }
@@ -1392,7 +1814,7 @@ create({ constructor: GlobalSearchView, 
       this._currentlyFocusedMatch = -1;
       this._createGlobalResultsUI(globalResults);
-      window.dispatchEvent("Debugger:GlobalSearch:MatchFound");
+      window.dispatchEvent(document, "Debugger:GlobalSearch:MatchFound");
     } else {
-      window.dispatchEvent("Debugger:GlobalSearch:MatchNotFound");
+      window.dispatchEvent(document, "Debugger:GlobalSearch:MatchNotFound");
     }
   },
@@ -1434,5 +1856,5 @@ create({ constructor: GlobalSearchView, 
     // Append a source results item to this container.
     let sourceResultsItem = this.push([aLocation, aSourceResults.matchCount], {
-      index: LAST, /* specifies on which position should the item be appended */
+      index: -1, /* specifies on which position should the item be appended */
       relaxed: true, /* this container should allow dupes & degenerates */
       attachment: {
@@ -1448,13 +1870,13 @@ create({ constructor: GlobalSearchView, 
    * @param nsIDOMNode aElementNode
    *        The element associated with the displayed item.
+   * @param any aAttachment
+   *        Some attached primitive/object.
    * @param string aLocation
    *        The source result's location.
    * @param string aMatchCount
    *        The source result's match count.
-   * @param any aAttachment [optional]
-   *        Some attached primitive/object.
    */
   _createItemView:
-  function DVGS__createItemView(aElementNode, aLocation, aMatchCount, aAttachment) {
+  function DVGS__createItemView(aElementNode, aAttachment, aLocation, aMatchCount) {
     let { sourceResults, expandFlag } = aAttachment;
 
@@ -1539,5 +1961,5 @@ create({ constructor: GlobalSearchView, 
 
   /**
-   * Scrolls a match into view.
+   * Scrolls a match into view if not already visible.
    *
    * @param nsIDOMNode aMatch
@@ -1545,18 +1967,6 @@ create({ constructor: GlobalSearchView, 
    */
   _scrollMatchIntoViewIfNeeded:  function DVGS__scrollMatchIntoViewIfNeeded(aMatch) {
-    let { top, height } = aMatch.getBoundingClientRect();
-    let { clientHeight } = this.node._parent;
-
-    let style = window.getComputedStyle(aMatch);
-    let topBorderSize = window.parseInt(style.getPropertyValue("border-top-width"));
-    let bottomBorderSize = window.parseInt(style.getPropertyValue("border-bottom-width"));
-
-    let marginY = top - (height + topBorderSize + bottomBorderSize) * 2;
-    if (marginY <= 0) {
-      this.node._parent.scrollTop += marginY;
-    }
-    if (marginY + height > clientHeight) {
-      this.node._parent.scrollTop += height - (clientHeight - marginY);
-    }
+    let boxObject = this.node._parent.boxObject.QueryInterface(Ci.nsIScrollBoxObject);
+    boxObject.ensureElementIsVisible(aMatch);
   },
 
@@ -1575,4 +1985,5 @@ create({ constructor: GlobalSearchView, 
       aMatch.setAttribute("focused", "");
     }}, 0);
+    aMatch.setAttribute("focusing", "");
   },
 
@@ -1647,15 +2058,8 @@ SourceResults.prototype = {
   /**
    * Expands the element, showing all the added details.
-   *
-   * @param boolean aSkipAnimationFlag
-   *        Pass true to not show an opening animation.
    */
-  expand: function SR_expand(aSkipAnimationFlag) {
-    this._target.resultsContainer.setAttribute("open", "");
+  expand: function SR_expand() {
+    this._target.resultsContainer.removeAttribute("hidden")
     this._target.arrow.setAttribute("open", "");
-
-    if (!aSkipAnimationFlag) {
-      this._target.resultsContainer.setAttribute("animated", "");
-    }
   },
 
@@ -1664,6 +2068,5 @@ SourceResults.prototype = {
    */
   collapse: function SR_collapse() {
-    this._target.resultsContainer.removeAttribute("animated");
-    this._target.resultsContainer.removeAttribute("open");
+    this._target.resultsContainer.setAttribute("hidden", "true");
     this._target.arrow.removeAttribute("open");
   },
@@ -1688,5 +2091,7 @@ SourceResults.prototype = {
    * @return boolean
    */
-  get expanded() this._target.resultsContainer.hasAttribute("open"),
+  get expanded()
+    this._target.resultsContainer.getAttribute("hidden") != "true" &&
+    this._target.arrow.hasAttribute("open"),
 
   /**
@@ -1732,9 +2137,9 @@ SourceResults.prototype = {
 
     let locationNode = document.createElement("label");
-    locationNode.className = "plain location";
+    locationNode.className = "plain dbg-results-header-location";
     locationNode.setAttribute("value", SourceUtils.trimUrlLength(aLocation));
 
     let matchCountNode = document.createElement("label");
-    matchCountNode.className = "plain match-count";
+    matchCountNode.className = "plain dbg-results-header-match-count";
     matchCountNode.setAttribute("value", "(" + aMatchCount + ")");
 
@@ -1749,4 +2154,5 @@ SourceResults.prototype = {
     let resultsContainer = document.createElement("vbox");
     resultsContainer.className = "dbg-results-container";
+    resultsContainer.setAttribute("hidden", "true");
 
     for (let [lineNumber, lineResults] of this._store) {
@@ -1839,7 +2245,7 @@ LineResults.prototype = {
     let firstMatch = null;
 
-    lineNumberNode.className = "plain line-number";
+    lineNumberNode.className = "plain dbg-results-line-number";
     lineNumberNode.setAttribute("value", aLineNumber + 1);
-    lineContentsNode.className = "line-contents";
+    lineContentsNode.className = "light list-widget-item dbg-results-line-contents";
     lineContentsNode.setAttribute("flex", "1");
 
@@ -1850,5 +2256,5 @@ LineResults.prototype = {
 
       let label = document.createElement("label");
-      label.className = "plain string";
+      label.className = "plain dbg-results-line-contents-string";
       label.setAttribute("value", lineString);
       label.setAttribute("match", match);
@@ -1906,5 +2312,5 @@ LineResults.prototype = {
   _ellipsis: (function() {
     let label = document.createElement("label");
-    label.className = "plain string";
+    label.className = "plain dbg-results-line-contents-string";
     label.setAttribute("value", L10N.ellipsis);
     return label;
@@ -1998,6 +2404,5 @@ LineResults.size = function DVGS_size() 
  * Preliminary setup for the DebuggerView object.
  */
-DebuggerView.StackFrames = new StackFramesView();
-DebuggerView.Breakpoints = new BreakpointsView();
+DebuggerView.Sources = new SourcesView();
 DebuggerView.WatchExpressions = new WatchExpressionsView();
 DebuggerView.GlobalSearch = new GlobalSearchView();
diff --git a/browser/devtools/debugger/debugger-toolbar.js b/browser/devtools/debugger/debugger-toolbar.js
--- a/browser/devtools/debugger/debugger-toolbar.js
+++ b/browser/devtools/debugger/debugger-toolbar.js
@@ -12,4 +12,5 @@
 function ToolbarView() {
   dumpn("ToolbarView was instantiated");
+
   this._onTogglePanesPressed = this._onTogglePanesPressed.bind(this);
   this._onResumePressed = this._onResumePressed.bind(this);
@@ -25,5 +26,6 @@ ToolbarView.prototype = {
   initialize: function DVT_initialize() {
     dumpn("Initializing the ToolbarView");
-    this._togglePanesButton = document.getElementById("toggle-panes");
+
+    this._instrumentsPaneToggleButton = document.getElementById("instruments-pane-toggle");
     this._resumeButton = document.getElementById("resume");
     this._stepOverButton = document.getElementById("step-over");
@@ -31,5 +33,4 @@ ToolbarView.prototype = {
     this._stepOutButton = document.getElementById("step-out");
     this._chromeGlobals = document.getElementById("chrome-globals");
-    this._sources = document.getElementById("sources");
 
     let resumeKey = LayoutHelpers.prettyKey(document.getElementById("resumeKey"), true);
@@ -43,5 +44,5 @@ ToolbarView.prototype = {
     this._stepOutTooltip = L10N.getFormatStr("stepOutTooltip", [stepOutKey]);
 
-    this._togglePanesButton.addEventListener("mousedown", this._onTogglePanesPressed, false);
+    this._instrumentsPaneToggleButton.addEventListener("mousedown", this._onTogglePanesPressed, false);
     this._resumeButton.addEventListener("mousedown", this._onResumePressed, false);
     this._stepOverButton.addEventListener("mousedown", this._onStepOverPressed, false);
@@ -62,5 +63,6 @@ ToolbarView.prototype = {
   destroy: function DVT_destroy() {
     dumpn("Destroying the ToolbarView");
-    this._togglePanesButton.removeEventListener("mousedown", this._onTogglePanesPressed, false);
+
+    this._instrumentsPaneToggleButton.removeEventListener("mousedown", this._onTogglePanesPressed, false);
     this._resumeButton.removeEventListener("mousedown", this._onResumePressed, false);
     this._stepOverButton.removeEventListener("mousedown", this._onStepOverPressed, false);
@@ -99,19 +101,9 @@ ToolbarView.prototype = {
 
   /**
-   * Sets the sources container hidden or visible. It's visible by default.
-   *
-   * @param boolean aVisibleFlag
-   *        Specifies the intended visibility.
-   */
-  toggleSourcesContainer: function DVT_toggleSourcesContainer(aVisibleFlag) {
-    this._sources.setAttribute("hidden", !aVisibleFlag);
-  },
-
-  /**
    * Listener handling the toggle button click event.
    */
   _onTogglePanesPressed: function DVT__onTogglePanesPressed() {
-    DebuggerView.togglePanes({
-      visible: DebuggerView.panesHidden,
+    DebuggerView.toggleInstrumentsPane({
+      visible: DebuggerView.instrumentsPaneHidden,
       animated: true,
       delayed: true
@@ -157,5 +149,5 @@ ToolbarView.prototype = {
   },
 
-  _togglePanesButton: null,
+  _instrumentsPaneToggleButton: null,
   _resumeButton: null,
   _stepOverButton: null,
@@ -163,5 +155,4 @@ ToolbarView.prototype = {
   _stepOutButton: null,
   _chromeGlobals: null,
-  _sources: null,
   _resumeTooltip: "",
   _pauseTooltip: "",
@@ -176,4 +167,5 @@ ToolbarView.prototype = {
 function OptionsView() {
   dumpn("OptionsView was instantiated");
+
   this._togglePauseOnExceptions = this._togglePauseOnExceptions.bind(this);
   this._toggleShowPanesOnStartup = this._toggleShowPanesOnStartup.bind(this);
@@ -188,4 +180,5 @@ OptionsView.prototype = {
   initialize: function DVO_initialize() {
     dumpn("Initializing the OptionsView");
+
     this._button = document.getElementById("debugger-options");
     this._pauseOnExceptionsItem = document.getElementById("pause-on-exceptions");
@@ -266,5 +259,5 @@ OptionsView.prototype = {
 function ChromeGlobalsView() {
   dumpn("ChromeGlobalsView was instantiated");
-  MenuContainer.call(this);
+
   this._onSelect = this._onSelect.bind(this);
   this._onClick = this._onClick.bind(this);
@@ -277,11 +270,13 @@ create({ constructor: ChromeGlobalsView,
   initialize: function DVCG_initialize() {
     dumpn("Initializing the ChromeGlobalsView");
+
     this.node = document.getElementById("chrome-globals");
-    this._emptyLabel = L10N.getStr("noGlobalsText");
-    this._unavailableLabel = L10N.getStr("noMatchingGlobalsText");
+    this.emptyText = L10N.getStr("noGlobalsText");
+    this.unavailableText = L10N.getStr("noMatchingGlobalsText");
 
     this.node.addEventListener("select", this._onSelect, false);
     this.node.addEventListener("click", this._onClick, false);
 
+    // Show an empty label by default.
     this.empty();
   },
@@ -292,4 +287,5 @@ create({ constructor: ChromeGlobalsView,
   destroy: function DVT_destroy() {
     dumpn("Destroying the ChromeGlobalsView");
+
     this.node.removeEventListener("select", this._onSelect, false);
     this.node.removeEventListener("click", this._onClick, false);
@@ -303,5 +299,5 @@ create({ constructor: ChromeGlobalsView,
       return;
     }
-    // TODO: Do something useful for chrome debugging.
+    // TODO: bug 806775, do something useful for chrome debugging.
   },
 
@@ -310,4 +306,5 @@ create({ constructor: ChromeGlobalsView,
    */
   _onClick: function DVCG__onClick() {
+    // Use this container as a filtering target.
     DebuggerView.Filtering.target = this;
   }
@@ -315,263 +312,10 @@ create({ constructor: ChromeGlobalsView,
 
 /**
- * Functions handling the sources UI.
- */
-function SourcesView() {
-  dumpn("SourcesView was instantiated");
-  MenuContainer.call(this);
-  this._onSelect = this._onSelect.bind(this);
-  this._onClick = this._onClick.bind(this);
-}
-
-create({ constructor: SourcesView, proto: MenuContainer.prototype }, {
-  /**
-   * Initialization function, called when the debugger is started.
-   */
-  initialize: function DVS_initialize() {
-    dumpn("Initializing the SourcesView");
-    this.node = document.getElementById("sources");
-    this._emptyLabel = L10N.getStr("noScriptsText");
-    this._unavailableLabel = L10N.getStr("noMatchingScriptsText");
-
-    this.node.addEventListener("select", this._onSelect, false);
-    this.node.addEventListener("click", this._onClick, false);
-
-    this.empty();
-  },
-
-  /**
-   * Destruction function, called when the debugger is closed.
-   */
-  destroy: function DVS_destroy() {
-    dumpn("Destroying the SourcesView");
-    this.node.removeEventListener("select", this._onSelect, false);
-    this.node.removeEventListener("click", this._onClick, false);
-  },
-
-  /**
-   * Sets the preferred source url to be displayed in this container.
-   * @param string aValue
-   */
-  set preferredSource(aValue) {
-    this._preferredValue = aValue;
-
-    // Selects the element with the specified value in this container,
-    // if already inserted.
-    if (this.containsValue(aValue)) {
-      this.selectedValue = aValue;
-    }
-  },
-
-  /**
-   * The select listener for the sources container.
-   */
-  _onSelect: function DVS__onSelect() {
-    if (!this.refresh()) {
-      return;
-    }
-    DebuggerView.setEditorSource(this.selectedItem.attachment);
-  },
-
-  /**
-   * The click listener for the sources container.
-   */
-  _onClick: function DVS__onClick() {
-    DebuggerView.Filtering.target = this;
-  }
-});
-
-/**
- * Utility functions for handling sources.
- */
-let SourceUtils = {
-  _labelsCache: new Map(),
-
-  /**
-   * Clears the labels cache, populated by SourceUtils.getSourceLabel.
-   * This should be done every time the content location changes.
-   */
-  clearLabelsCache: function SU_clearLabelsCache() {
-    this._labelsCache = new Map();
-  },
-
-  /**
-   * Gets a unique, simplified label from a source url.
-   *
-   * @param string aUrl
-   *        The source url.
-   * @param number aLength [optional]
-   *        The expected source url length.
-   * @param number aSection [optional]
-   *        The section to trim. Supported values: "start", "center", "end"
-   * @return string
-   *         The simplified label.
-   */
-  getSourceLabel: function SU_getSourceLabel(aUrl, aLength, aSection) {
-    let id = [aUrl, aLength, aSection].join();
-    aLength = aLength || SOURCE_URL_DEFAULT_MAX_LENGTH;
-    aSection = aSection || "end";
-
-    if (this._labelsCache.has(id)) {
-      return this._labelsCache.get(id);
-    }
-    let sourceLabel = this.trimUrlLength(this.trimUrl(aUrl), aLength, aSection);
-    this._labelsCache.set(id, sourceLabel);
-    return sourceLabel;
-  },
-
-  /**
-   * Trims the url by shortening it if it exceeds a certain length, adding an
-   * ellipsis at the end.
-   *
-   * @param string aUrl
-   *        The source url.
-   * @param number aLength [optional]
-   *        The expected source url length.
-   * @param number aSection [optional]
-   *        The section to trim. Supported values: "start", "center", "end"
-   * @return string
-   *         The shortened url.
-   */
-  trimUrlLength: function SU_trimUrlLength(aUrl, aLength, aSection) {
-    aLength = aLength || SOURCE_URL_DEFAULT_MAX_LENGTH;
-    aSection = aSection || "end";
-
-    if (aUrl.length > aLength) {
-      switch (aSection) {
-        case "start":
-          return L10N.ellipsis + aUrl.slice(-aLength);
-          break;
-        case "center":
-          return aUrl.substr(0, aLength / 2 - 1) + L10N.ellipsis + aUrl.slice(-aLength / 2 + 1);
-          break;
-        case "end":
-          return aUrl.substr(0, aLength) + L10N.ellipsis;
-          break;
-      }
-    }
-    return aUrl;
-  },
-
-  /**
-   * Trims the query part or reference identifier of a url string, if necessary.
-   *
-   * @param string aUrl
-   *        The source url.
-   * @return string
-   *         The shortened url.
-   */
-  trimUrlQuery: function SU_trimUrlQuery(aUrl) {
-    let length = aUrl.length;
-    let q1 = aUrl.indexOf('?');
-    let q2 = aUrl.indexOf('&');
-    let q3 = aUrl.indexOf('#');
-    let q = Math.min(q1 != -1 ? q1 : length,
-                     q2 != -1 ? q2 : length,
-                     q3 != -1 ? q3 : length);
-
-    return aUrl.slice(0, q);
-  },
-
-  /**
-   * Trims as much as possible from a url, while keeping the result unique
-   * in the sources container.
-   *
-   * @param string | nsIURL aUrl
-   *        The script url.
-   * @param string aLabel [optional]
-   *        The resulting label at each step.
-   * @param number aSeq [optional]
-   *        The current iteration step.
-   * @return string
-   *         The resulting label at the final step.
-   */
-  trimUrl: function SU_trimUrl(aUrl, aLabel, aSeq) {
-    if (!(aUrl instanceof Ci.nsIURL)) {
-      try {
-        // Use an nsIURL to parse all the url path parts.
-        aUrl = Services.io.newURI(aUrl, null, null).QueryInterface(Ci.nsIURL);
-      } catch (e) {
-        // This doesn't look like a url, or nsIURL can't handle it.
-        return aUrl;
-      }
-    }
-    if (!aSeq) {
-      let name = aUrl.fileName;
-      if (name) {
-        // This is a regular file url, get only the file name (contains the
-        // base name and extension if available).
-
-        // If this url contains an invalid query, unfortunately nsIURL thinks
-        // it's part of the file extension. It must be removed.
-        aLabel = aUrl.fileName.replace(/\&.*/, "");
-      } else {
-        // This is not a file url, hence there is no base name, nor extension.
-        // Proceed using other available information.
-        aLabel = "";
-      }
-      aSeq = 1;
-    }
-
-    // If we have a label and it doesn't start with a query...
-    if (aLabel && aLabel.indexOf("?") != 0) {
-      if (DebuggerView.Sources.containsTrimmedValue(aUrl.spec, SourceUtils.trimUrlQuery)) {
-        // A page may contain multiple requests to the same url but with different
-        // queries. It would be redundant to show each one.
-        return aLabel;
-      }
-      if (!DebuggerView.Sources.containsLabel(aLabel)) {
-        // We found the shortest unique label for the url.
-        return aLabel;
-      }
-    }
-
-    // Append the url query.
-    if (aSeq == 1) {
-      let query = aUrl.query;
-      if (query) {
-        return this.trimUrl(aUrl, aLabel + "?" + query, aSeq + 1);
-      }
-      aSeq++;
-    }
-    // Append the url reference.
-    if (aSeq == 2) {
-      let ref = aUrl.ref;
-      if (ref) {
-        return this.trimUrl(aUrl, aLabel + "#" + aUrl.ref, aSeq + 1);
-      }
-      aSeq++;
-    }
-    // Prepend the url directory.
-    if (aSeq == 3) {
-      let dir = aUrl.directory;
-      if (dir) {
-        return this.trimUrl(aUrl, dir.replace(/^\//, "") + aLabel, aSeq + 1);
-      }
-      aSeq++;
-    }
-    // Prepend the hostname and port number.
-    if (aSeq == 4) {
-      let host = aUrl.hostPort;
-      if (host) {
-        return this.trimUrl(aUrl, host + "/" + aLabel, aSeq + 1);
-      }
-      aSeq++;
-    }
-    // Use the whole url spec but ignoring the reference.
-    if (aSeq == 5) {
-      return this.trimUrl(aUrl, aUrl.specIgnoringRef, aSeq + 1);
-    }
-    // Give up.
-    return aUrl.spec;
-  }
-};
-
-/**
  * Functions handling the stackframes UI.
  */
 function StackFramesView() {
   dumpn("StackFramesView was instantiated");
-  MenuContainer.call(this);
-  this._createItemView = this._createItemView.bind(this);
+
+  this._framesCache = new Map(); // Can't use a WeakMap because keys are numbers.
   this._onStackframeRemoved = this._onStackframeRemoved.bind(this);
   this._onClick = this._onClick.bind(this);
@@ -590,6 +334,6 @@ create({ constructor: StackFramesView, p
     let commandset = this._commandset = document.createElement("commandset");
     let menupopup = this._menupopup = document.createElement("menupopup");
-    commandset.setAttribute("id", "stackframesCommandset");
-    menupopup.setAttribute("id", "stackframesMenupopup");
+    commandset.id = "stackframesCommandset";
+    menupopup.id = "stackframesMenupopup";
 
     document.getElementById("debuggerPopupset").appendChild(menupopup);
@@ -597,10 +341,7 @@ create({ constructor: StackFramesView, p
 
     this.node = new BreadcrumbsWidget(document.getElementById("stackframes"));
-    this.decorateWidgetMethods("parentNode");
-    this.node.addEventListener("click", this._onClick, false);
+    this.node.addEventListener("mousedown", this._onClick, false);
     this.node.addEventListener("scroll", this._onScroll, true);
     window.addEventListener("resize", this._onScroll, true);
-
-    this._cache = new Map();
   },
 
@@ -610,5 +351,6 @@ create({ constructor: StackFramesView, p
   destroy: function DVSF_destroy() {
     dumpn("Destroying the StackFramesView");
-    this.node.removeEventListener("click", this._onClick, false);
+
+    this.node.removeEventListener("mousedown", this._onClick, false);
     this.node.removeEventListener("scroll", this._onScroll, true);
     window.removeEventListener("resize", this._onScroll, true);
@@ -627,28 +369,27 @@ create({ constructor: StackFramesView, p
    *        The frame depth specified by the debugger.
    */
-  addFrame:
-  function DVSF_addFrame(aFrameTitle, aSourceLocation, aLineNumber, aDepth) {
-    // Create the fragment node and menu popup for the stackframe item.
-    let stackframeFragment = this._createItemView.apply(this, arguments);
-    let stackframePopup = this._createMenuItem.apply(this, arguments);
+  addFrame: function DVSF_addFrame(aFrameTitle, aSourceLocation, aLineNumber, aDepth) {
+    // Create the element node and menu entry for the stack frame item.
+    let frameView = this._createFrameView.apply(this, arguments);
+    let menuEntry = this._createMenuEntry.apply(this, arguments);
 
-    // Append a stackframe item to this container.
-    let stackframeItem = this.push(stackframeFragment, {
-      index: FIRST, /* specifies on which position should the item be appended */
+    // Append a stack frame item to this container.
+    let stackframeItem = this.push(frameView, {
+      index: 0, /* specifies on which position should the item be appended */
       relaxed: true, /* this container should allow dupes & degenerates */
       attachment: {
-        popup: stackframePopup,
+        popup: menuEntry,
         depth: aDepth
-      }
+      },
+      attributes: [
+        ["contextmenu", "stackframesMenupopup"],
+        ["tooltiptext", aSourceLocation]
+      ],
+      // Make sure that when the stack frame item is removed, the corresponding
+      // menuitem and command are also destroyed.
+      finalize: this._onStackframeRemoved
     });
 
-    let element = stackframeItem.target;
-    element.id = "stackframe-" + aDepth;
-    element.classList.add("dbg-stackframe");
-    element.setAttribute("tooltiptext", aSourceLocation + ":" + aLineNumber);
-    element.setAttribute("contextmenu", "stackframesMenupopup");
-
-    stackframeItem.finalize = this._onStackframeRemoved;
-    this._cache.set(aDepth, stackframeItem);
+    this._framesCache.set(aDepth, stackframeItem);
   },
 
@@ -660,8 +401,7 @@ create({ constructor: StackFramesView, p
    */
   highlightFrame: function DVSF_highlightFrame(aDepth) {
-    let cache = this._cache;
-    let selectedItem = this.selectedItem = cache.get(aDepth);
+    let selectedItem = this.selectedItem = this._framesCache.get(aDepth);
 
-    for (let [, item] of cache) {
+    for (let item in this) {
       if (item != selectedItem) {
         item.attachment.popup.menuitem.removeAttribute("checked");
@@ -686,10 +426,11 @@ create({ constructor: StackFramesView, p
    * @param string aLineNumber
    *        The line number to be displayed in the list.
+   * @param number aDepth
+   *        The frame depth specified by the debugger.
+   * @return nsIDOMNode
+   *         The stack frame view.
    */
-  _createItemView:
-  function DVSF__createItemView(aFrameTitle, aSourceLocation, aLineNumber) {
-    let frameTitleNode = document.createElement("label");
-    let frameDetailsNode = document.createElement("label");
-
+  _createFrameView:
+  function DVSF__createFrameView(aFrameTitle, aSourceLocation, aLineNumber, aDepth) {
     let frameDetails = SourceUtils.getSourceLabel(aSourceLocation,
       STACK_FRAMES_SOURCE_URL_MAX_LENGTH,
@@ -697,15 +438,20 @@ create({ constructor: StackFramesView, p
       SEARCH_LINE_FLAG + aLineNumber;
 
-    frameTitleNode.className = "plain dbg-stackframe-title inspector-breadcrumbs-tag";
+    let frameTitleNode = document.createElement("label");
+    frameTitleNode.className = "plain dbg-stackframe-title breadcrumbs-widget-item-tag";
     frameTitleNode.setAttribute("value", aFrameTitle);
 
-    frameDetailsNode.className = "plain dbg-stackframe-details inspector-breadcrumbs-id";
-    frameDetailsNode.setAttribute("value", " " + frameDetails);
+    let frameDetailsNode = document.createElement("label");
+    frameDetailsNode.className = "plain dbg-stackframe-details breadcrumbs-widget-item-id";
+    frameDetailsNode.setAttribute("value", frameDetails);
 
-    let fragment = document.createDocumentFragment();
-    fragment.appendChild(frameTitleNode);
-    fragment.appendChild(frameDetailsNode);
+    let container = document.createElement("hbox");
+    container.id = "stackframe-" + aDepth;
+    container.className = "dbg-stackframe";
 
-    return fragment;
+    container.appendChild(frameTitleNode);
+    container.appendChild(frameDetailsNode);
+
+    return container;
   },
 
@@ -721,10 +467,9 @@ create({ constructor: StackFramesView, p
    * @param number aDepth
    *        The frame depth specified by the debugger.
+   * @return object
+   *         An object containing the stack frame command and menu item.
    */
-  _createMenuItem:
-  function DVSF__createMenuItem(aFrameTitle, aSourceLocation, aLineNumber, aDepth) {
-    let menuitem = document.createElement("menuitem");
-    let command = document.createElement("command");
-
+  _createMenuEntry:
+  function DVSF__createMenuEntry(aFrameTitle, aSourceLocation, aLineNumber, aDepth) {
     let frameDescription = SourceUtils.getSourceLabel(aSourceLocation,
       STACK_FRAMES_POPUP_SOURCE_URL_MAX_LENGTH,
@@ -732,16 +477,18 @@ create({ constructor: StackFramesView, p
       SEARCH_LINE_FLAG + aLineNumber;
 
-    let prefix = "sf-cMenu-"; // stackframes context menu
+    let prefix = "sf-cMenu-"; // "stackframes context menu"
     let commandId = prefix + aDepth + "-" + "-command";
     let menuitemId = prefix + aDepth + "-" + "-menuitem";
 
+    let command = document.createElement("command");
     command.id = commandId;
     command.addEventListener("command", this._selectFrame.bind(this, aDepth), false);
 
+    let menuitem = document.createElement("menuitem");
     menuitem.id = menuitemId;
     menuitem.className = "dbg-stackframe-menuitem";
     menuitem.setAttribute("type", "checkbox");
     menuitem.setAttribute("command", commandId);
-    menuitem.setAttribute("tooltiptext", aSourceLocation + ":" + aLineNumber);
+    menuitem.setAttribute("tooltiptext", aSourceLocation);
 
     let labelNode = document.createElement("label");
@@ -767,13 +514,15 @@ create({ constructor: StackFramesView, p
 
   /**
-   * Destroys a context menu item for a stackframe.
+   * Destroys a context menu item for a stack frame.
    *
-   * @param object aPopup
-   *        The popup associated with the displayed stackframe item.
+   * @param object aMenuEntry
+   *        An object containing the stack frame command and menu item.
    */
-  _destroyMenuItem: function DVSF__destroyMenuItem(aPopup) {
-    let command = aPopup.command;
-    let menuitem = aPopup.menuitem;
+  _destroyMenuEntry: function DVSF__destroyMenuEntry(aMenuEntry) {
+    dumpn("Destroying context menu: " +
+      aMenuEntry.command.id + " & " + aMenuEntry.menuitem.id);
 
+    let command = aMenuEntry.command;
+    let menuitem = aMenuEntry.menuitem;
     command.parentNode.removeChild(command);
     menuitem.parentNode.removeChild(menuitem);
@@ -781,8 +530,15 @@ create({ constructor: StackFramesView, p
 
   /**
-   * Function called each time a stackframe item is removed.
+   * Function called each time a stack frame item is removed.
+   *
+   * @param MenuItem aItem
+   *        The corresponding menu item.
    */
   _onStackframeRemoved: function DVSF__onStackframeRemoved(aItem) {
-    this._destroyMenuItem(aItem.attachment.popup);
+    dumpn("Finalizing stackframe item: " + aItem);
+
+    let { popup, depth } = aItem.attachment;
+    this._destroyMenuEntry(popup);
+    this._framesCache.delete(depth);
   },
 
@@ -843,8 +599,8 @@ create({ constructor: StackFramesView, p
   },
 
+  _framesCache: null,
   _commandset: null,
   _menupopup: null,
-  _cache: null,
-  _scrollTimeout: null,
+  _scrollTimeout: null
 });
 
@@ -855,5 +611,5 @@ let StackFrameUtils = {
   /**
    * Create a textual representation for the specified stack frame
-   * to display in the stack frame container.
+   * to display in the stackframes container.
    *
    * @param object aFrame
@@ -902,5 +658,5 @@ let StackFrameUtils = {
     }
     return label;
-  },
+  }
 };
 
@@ -910,4 +666,5 @@ let StackFrameUtils = {
 function FilterView() {
   dumpn("FilterView was instantiated");
+
   this._onClick = this._onClick.bind(this);
   this._onSearch = this._onSearch.bind(this);
@@ -922,6 +679,7 @@ FilterView.prototype = {
   initialize: function DVF_initialize() {
     dumpn("Initializing the FilterView");
+
     this._searchbox = document.getElementById("searchbox");
-    this._searchboxPanel = document.getElementById("searchbox-panel");
+    this._searchboxHelpPanel = document.getElementById("searchbox-help-panel");
     this._globalOperatorButton = document.getElementById("global-operator-button");
     this._globalOperatorLabel = document.getElementById("global-operator-label");
@@ -972,4 +730,5 @@ FilterView.prototype = {
   destroy: function DVF_destroy() {
     dumpn("Destroying the FilterView");
+
     this._searchbox.removeEventListener("click", this._onClick, false);
     this._searchbox.removeEventListener("select", this._onSearch, false);
@@ -1070,5 +829,5 @@ FilterView.prototype = {
   clearSearch: function DVF_clearSearch() {
     this._searchbox.value = "";
-    this._searchboxPanel.hidePopup();
+    this._searchboxHelpPanel.hidePopup();
   },
 
@@ -1085,4 +844,6 @@ FilterView.prototype = {
     }
 
+    // This is the target container to be currently filtered. Clicking on a
+    // container generally means it should become a target.
     let view = this._target;
 
@@ -1127,4 +888,11 @@ FilterView.prototype = {
     DebuggerView.FilteredSources.syncFileSearch();
 
+    // Hide all the groups with no visible children.
+    view.node.hideEmptyGroups();
+
+    // Ensure the currently selected item is visible.
+    view.node.ensureSelectionIsVisible(true);
+
+    // Remember the previously searched file to avoid redundant filtering.
     this._prevSearchedFile = aFile;
   },
@@ -1146,4 +914,6 @@ FilterView.prototype = {
       this._target.refresh();
     }
+
+    // Remember the previously searched line to avoid redundant filtering.
     this._prevSearchedLine = aLine;
   },
@@ -1169,4 +939,6 @@ FilterView.prototype = {
       this._target.refresh();
     }
+
+    // Remember the previously searched token to avoid redundant filtering.
     this._prevSearchedToken = aToken;
   },
@@ -1176,5 +948,5 @@ FilterView.prototype = {
    */
   _onClick: function DVF__onClick() {
-    this._searchboxPanel.openPopup(this._searchbox);
+    this._searchboxHelpPanel.openPopup(this._searchbox);
   },
 
@@ -1183,5 +955,5 @@ FilterView.prototype = {
    */
   _onSearch: function DVF__onScriptsSearch() {
-    this._searchboxPanel.hidePopup();
+    this._searchboxHelpPanel.hidePopup();
     let [file, line, token, isGlobal, isVariable] = this.searchboxInfo;
 
@@ -1327,5 +1099,5 @@ FilterView.prototype = {
     DebuggerView.GlobalSearch.clearView();
     DebuggerView.Variables.performSearch(null);
-    this._searchboxPanel.hidePopup();
+    this._searchboxHelpPanel.hidePopup();
   },
 
@@ -1346,5 +1118,5 @@ FilterView.prototype = {
   _doFileSearch: function DVF__doFileSearch() {
     this._doSearch();
-    this._searchboxPanel.openPopup(this._searchbox);
+    this._searchboxHelpPanel.openPopup(this._searchbox);
   },
 
@@ -1354,5 +1126,5 @@ FilterView.prototype = {
   _doGlobalSearch: function DVF__doGlobalSearch() {
     this._doSearch(SEARCH_GLOBAL_FLAG);
-    this._searchboxPanel.hidePopup();
+    this._searchboxHelpPanel.hidePopup();
   },
 
@@ -1362,5 +1134,5 @@ FilterView.prototype = {
   _doTokenSearch: function DVF__doTokenSearch() {
     this._doSearch(SEARCH_TOKEN_FLAG);
-    this._searchboxPanel.hidePopup();
+    this._searchboxHelpPanel.hidePopup();
   },
 
@@ -1370,5 +1142,5 @@ FilterView.prototype = {
   _doLineSearch: function DVF__doLineSearch() {
     this._doSearch(SEARCH_LINE_FLAG);
-    this._searchboxPanel.hidePopup();
+    this._searchboxHelpPanel.hidePopup();
   },
 
@@ -1379,5 +1151,5 @@ FilterView.prototype = {
     DebuggerView.Variables.performSearch("");
     this._doSearch(SEARCH_VARIABLE_FLAG);
-    this._searchboxPanel.hidePopup();
+    this._searchboxHelpPanel.hidePopup();
   },
 
@@ -1386,10 +1158,10 @@ FilterView.prototype = {
    */
   _doVariablesFocus: function DVG__doVariablesFocus() {
-    DebuggerView.showPanesSoon();
+    DebuggerView.showInstrumentsPane();
     DebuggerView.Variables.focusFirstVisibleNode();
   },
 
   _searchbox: null,
-  _searchboxPanel: null,
+  _searchboxHelpPanel: null,
   _globalOperatorButton: null,
   _globalOperatorLabel: null,
@@ -1415,5 +1187,6 @@ FilterView.prototype = {
  */
 function FilteredSourcesView() {
-  MenuContainer.call(this);
+  dumpn("FilteredSourcesView was instantiated");
+
   this._onClick = this._onClick.bind(this);
 }
@@ -1426,13 +1199,6 @@ create({ constructor: FilteredSourcesVie
     dumpn("Initializing the FilteredSourcesView");
 
-    let panel = this._panel = document.createElement("panel");
-    panel.id = "filtered-sources-panel";
-    panel.setAttribute("noautofocus", "true");
-    panel.setAttribute("level", "top");
-    panel.setAttribute("position", FILTERED_SOURCES_POPUP_POSITION);
-    document.documentElement.appendChild(panel);
-
+    this.node = new ListWidget(document.getElementById("filtered-sources-panel"));
     this._searchbox = document.getElementById("searchbox");
-    this.node = new StackList(panel);
 
     this.node.itemFactory = this._createItemView;
@@ -1446,5 +1212,5 @@ create({ constructor: FilteredSourcesVie
   destroy: function DVFS_destroy() {
     dumpn("Destroying the FilteredSourcesView");
-    document.documentElement.removeChild(this._panel);
+
     this.node.removeEventListener("click", this._onClick, false);
   },
@@ -1484,5 +1250,4 @@ create({ constructor: FilteredSourcesVie
       let trimmedLabel = SourceUtils.trimUrlLength(item.label);
       let trimmedValue = SourceUtils.trimUrlLength(item.value);
-
       let locationItem = this.push([trimmedLabel, trimmedValue], {
         relaxed: true, /* this container should allow dupes & degenerates */
@@ -1492,9 +1257,4 @@ create({ constructor: FilteredSourcesVie
         }
       });
-
-      let element = locationItem.target;
-      element.className = "dbg-source-item list-item";
-      element.labelNode.className = "dbg-source-item-name plain";
-      element.valueNode.className = "dbg-source-item-details plain";
     }
 
@@ -1532,4 +1292,5 @@ create({ constructor: FilteredSourcesVie
     if (locationItem) {
       this._updateSelection(locationItem);
+      DebuggerView.Filtering.clearSearch();
     }
   },
@@ -1549,4 +1310,8 @@ create({ constructor: FilteredSourcesVie
    * Customization function for creating an item's UI.
    *
+   * @param nsIDOMNode aElementNode
+   *        The element associated with the displayed item.
+   * @param any aAttachment
+   *        Some attached primitive/object.
    * @param string aLabel
    *        The item's label.
@@ -1554,19 +1319,19 @@ create({ constructor: FilteredSourcesVie
    *        The item's value.
    */
-  _createItemView: function DVFS__createItemView(aElementNode, aLabel, aValue) {
+  _createItemView:
+  function DVFS__createItemView(aElementNode, aAttachment, aLabel, aValue) {
     let labelNode = document.createElement("label");
+    labelNode.className = "plain dbg-source-item-name";
+    labelNode.setAttribute("value", aLabel);
+
     let valueNode = document.createElement("label");
+    valueNode.setAttribute("value", aValue);
+    valueNode.className = "plain dbg-source-item-details";
 
-    labelNode.setAttribute("value", aLabel);
-    valueNode.setAttribute("value", aValue);
-
+    aElementNode.className = "light dbg-source-item";
     aElementNode.appendChild(labelNode);
     aElementNode.appendChild(valueNode);
-
-    aElementNode.labelNode = labelNode;
-    aElementNode.valueNode = valueNode;
   },
 
-  _panel: null,
   _searchbox: null
 });
@@ -1577,6 +1342,6 @@ create({ constructor: FilteredSourcesVie
 DebuggerView.Toolbar = new ToolbarView();
 DebuggerView.Options = new OptionsView();
-DebuggerView.ChromeGlobals = new ChromeGlobalsView();
-DebuggerView.Sources = new SourcesView();
 DebuggerView.Filtering = new FilterView();
 DebuggerView.FilteredSources = new FilteredSourcesView();
+DebuggerView.ChromeGlobals = new ChromeGlobalsView();
+DebuggerView.StackFrames = new StackFramesView();
diff --git a/browser/devtools/debugger/debugger-view.js b/browser/devtools/debugger/debugger-view.js
--- a/browser/devtools/debugger/debugger-view.js
+++ b/browser/devtools/debugger/debugger-view.js
@@ -15,7 +15,7 @@ const STACK_FRAMES_SCROLL_DELAY = 100; /
 const PANES_APPEARANCE_DELAY = 50; // ms
 const BREAKPOINT_LINE_TOOLTIP_MAX_LENGTH = 1000; // chars
-const BREAKPOINT_CONDITIONAL_POPUP_POSITION = "after_start";
-const BREAKPOINT_CONDITIONAL_POPUP_OFFSET = 50; // px
-const FILTERED_SOURCES_POPUP_POSITION = "before_start";
+const BREAKPOINT_CONDITIONAL_POPUP_POSITION = "before_start";
+const BREAKPOINT_CONDITIONAL_POPUP_OFFSET_X = 7; // px
+const BREAKPOINT_CONDITIONAL_POPUP_OFFSET_Y = -3; // px
 const FILTERED_SOURCES_MAX_RESULTS = 10;
 const GLOBAL_SEARCH_EXPAND_MAX_RESULTS = 50;
@@ -45,10 +45,9 @@ let DebuggerView = {
     this.Toolbar.initialize();
     this.Options.initialize();
-    this.ChromeGlobals.initialize();
-    this.Sources.initialize();
     this.Filtering.initialize();
     this.FilteredSources.initialize();
+    this.ChromeGlobals.initialize();
     this.StackFrames.initialize();
-    this.Breakpoints.initialize();
+    this.Sources.initialize();
     this.WatchExpressions.initialize();
     this.GlobalSearch.initialize();
@@ -76,10 +75,9 @@ let DebuggerView = {
     this.Toolbar.destroy();
     this.Options.destroy();
-    this.ChromeGlobals.destroy();
-    this.Sources.destroy();
     this.Filtering.destroy();
     this.FilteredSources.destroy();
+    this.ChromeGlobals.destroy();
     this.StackFrames.destroy();
-    this.Breakpoints.destroy();
+    this.Sources.destroy();
     this.WatchExpressions.destroy();
     this.GlobalSearch.destroy();
@@ -132,14 +130,14 @@ let DebuggerView = {
     dumpn("Initializing the DebuggerView panes");
 
-    this._togglePanesButton = document.getElementById("toggle-panes");
-    this._stackframesAndBreakpoints = document.getElementById("stackframes+breakpoints");
-    this._variablesAndExpressions = document.getElementById("variables+expressions");
+    this._sourcesPane = document.getElementById("sources-pane");
+    this._instrumentsPane = document.getElementById("instruments-pane");
+    this._instrumentsPaneToggleButton = document.getElementById("instruments-pane-toggle");
 
-    this._stackframesAndBreakpoints.setAttribute("width", Prefs.stackframesWidth);
-    this._variablesAndExpressions.setAttribute("width", Prefs.variablesWidth);
-    this.togglePanes({
-      visible: Prefs.panesVisibleOnStartup,
-      animated: false
-    });
+    this._collapsePaneString = L10N.getStr("collapsePanes");
+    this._expandPaneString = L10N.getStr("expandPanes");
+
+    this._sourcesPane.setAttribute("width", Prefs.sourcesWidth);
+    this._instrumentsPane.setAttribute("width", Prefs.instrumentsWidth);
+    this.toggleInstrumentsPane({ visible: Prefs.panesVisibleOnStartup });
   },
 
@@ -150,10 +148,10 @@ let DebuggerView = {
     dumpn("Destroying the DebuggerView panes");
 
-    Prefs.stackframesWidth = this._stackframesAndBreakpoints.getAttribute("width");
-    Prefs.variablesWidth = this._variablesAndExpressions.getAttribute("width");
+    Prefs.sourcesWidth = this._sourcesPane.getAttribute("width");
+    Prefs.instrumentsWidth = this._instrumentsPane.getAttribute("width");
 
-    this._togglePanesButton = null;
-    this._stackframesAndBreakpoints = null;
-    this._variablesAndExpressions = null;
+    this._sourcesPane = null;
+    this._instrumentsPane = null;
+    this._instrumentsPaneToggleButton = null;
   },
 
@@ -178,4 +176,5 @@ let DebuggerView = {
     this.editor = new SourceEditor();
     this.editor.init(placeholder, config, function() {
+      this._loadingText = L10N.getStr("loadingText");
       this._onEditorLoad();
       aCallback();
@@ -191,5 +190,5 @@ let DebuggerView = {
 
     DebuggerController.Breakpoints.initialize();
-    window.dispatchEvent("Debugger:EditorLoaded", this.editor);
+    window.dispatchEvent(document, "Debugger:EditorLoaded", this.editor);
     this.editor.focus();
   },
@@ -203,27 +202,19 @@ let DebuggerView = {
 
     DebuggerController.Breakpoints.destroy();
-    window.dispatchEvent("Debugger:EditorUnloaded", this.editor);
-    this.editor = null;
+    window.dispatchEvent(document, "Debugger:EditorUnloaded", this.editor);
   },
 
   /**
    * Sets the proper editor mode (JS or HTML) according to the specified
-   * content type, or by determining the type from the url.
+   * content type, or by determining the type from the url or text content.
    *
    * @param string aUrl
-   *        The script url.
+   *        The source url.
    * @param string aContentType [optional]
-   *        The script content type.
+   *        The source content type.
    * @param string aTextContent [optional]
-   *        The script text content.
+   *        The source text content.
    */
-  setEditorMode:
-  function DV_setEditorMode(aUrl, aContentType = "", aTextContent = "") {
-    if (!this.editor) {
-      return;
-    }
-    dumpn("Setting the DebuggerView editor mode: " + aUrl +
-          ", content type: " + aContentType);
-
+  setEditorMode: function DV_setEditorMode(aUrl, aContentType = "", aTextContent = "") {
     if (aContentType) {
       if (/javascript/.test(aContentType)) {
@@ -247,68 +238,74 @@ let DebuggerView = {
 
   /**
-   * Load the editor with the specified source text.
+   * Sets the currently displayed source text in the editor.
+   *
+   * To update the source editor's current caret and debug location based on
+   * a requested url and line, use the DebuggerView.updateEditor method.
    *
    * @param object aSource
    *        The source object coming from the active thread.
-   * @param object aOptions [optional]
-   *        Additional options for showing the source. Supported options:
-   *        - caretLine: place the caret position at the given line number
-   *        - debugLine: place the debug location at the given line number
-   *        - callback: function called when the source is shown
    */
-  setEditorSource: function DV_setEditorSource(aSource, aOptions = {}) {
-    if (!this.editor) {
+  set editorSource(aSource) {
+    if (!this._isInitialized || this._isDestroyed || this._editorSource == aSource) {
       return;
     }
 
-    dumpn("Setting the DebuggerView editor source: " + aSource.source.url +
-          ", loaded: " + aSource.loaded +
-          ", options: " + aOptions.toSource());
+    dumpn("Setting the DebuggerView editor source: " + aSource.url +
+          ", loaded: " + aSource.loaded);
+
+    this.editor.setMode(SourceEditor.MODES.TEXT);
+    this.editor.setText(L10N.getStr("loadingText"));
+    this.editor.resetUndo();
+    this._editorSource = aSource;
 
     // If the source is not loaded, display a placeholder text.
     if (!aSource.loaded) {
-      this.editor.setMode(SourceEditor.MODES.TEXT);
-      this.editor.setText(L10N.getStr("loadingText"));
-      this.editor.resetUndo();
-
-      // Get the source text from the active thread.
-      DebuggerController.SourceScripts.getText(aSource, function(aUrl, aText) {
-        this.setEditorSource(aSource, aOptions);
-      }.bind(this));
+      DebuggerController.SourceScripts.getText(aSource, set.bind(this, aSource));
     }
     // If the source is already loaded, display it immediately.
     else {
+      set.call(this, aSource);
+    }
+
+    // Updates the source editor's displayed text.
+    // @param object aSource
+    function set(aSource) {
+      // Avoid setting an unexpected source. This may happen when fast switching
+      // between sources that haven't been fetched yet.
       if (this._editorSource != aSource) {
-        // Avoid setting the editor mode for very large files.
-        if (aSource.text.length < SOURCE_SYNTAX_HIGHLIGHT_MAX_FILE_SIZE) {
-          this.setEditorMode(aSource.source.url, aSource.contentType, aSource.text);
-        } else {
-          this.editor.setMode(SourceEditor.MODES.TEXT);
-        }
-        this.editor.setText(aSource.text);
-        this.editor.resetUndo();
+        return;
       }
-      this._editorSource = aSource;
+
+      // Avoid setting the editor mode for very large files.
+      if (aSource.text.length < SOURCE_SYNTAX_HIGHLIGHT_MAX_FILE_SIZE) {
+        this.setEditorMode(aSource.url, aSource.contentType, aSource.text);
+      } else {
+        this.editor.setMode(SourceEditor.MODES.TEXT);
+      }
+      this.editor.setText(aSource.text);
+      this.editor.resetUndo();
+
+      // Update the editor's current caret and debug locations given by the
+      // currently active frame in the stack, if there's one available.
       this.updateEditor();
 
-      DebuggerView.Sources.selectedValue = aSource.source.url;
+      // Synchronize any other components with the currently displayed source.
+      DebuggerView.Sources.selectedValue = aSource.url;
       DebuggerController.Breakpoints.updateEditorBreakpoints();
 
-      // Handle any additional options for showing the source.
-      if (aOptions.caretLine) {
-        editor.setCaretPosition(aOptions.caretLine - 1);
-      }
-      if (aOptions.debugLine) {
-        editor.setDebugLocation(aOptions.debugLine - 1);
-      }
-      if (aOptions.callback) {
-        aOptions.callback(aSource);
-      }
       // Notify that we've shown a source file.
-      window.dispatchEvent("Debugger:SourceShown", aSource);
+      window.dispatchEvent(document, "Debugger:SourceShown", aSource);
     }
   },
 
   /**
+   * Gets the currently displayed source text in the editor.
+   *
+   * @return object
+   *         The source object coming from the active thread.
+   */
+  get editorSource() this._editorSource,
+
+  /**
    * Update the source editor's current caret and debug location based on
    * a requested url and line. If unspecified, they default to the location
@@ -320,5 +317,8 @@ let DebuggerView = {
    *        The target line number in the source.
    * @param object aFlags [optional]
-   *        An object containing some of the following boolean properties:
+   *        Additional options for showing the source. Supported options:
+   *          - charOffset: character offset for the caret or debug location
+   *          - lineOffset: line offset for the caret or debug location
+   *          - columnOffset: column offset for the caret or debug location
    *          - noSwitch: don't switch to the source if not currently selected
    *          - noCaret: don't set the caret location at the specified line
@@ -326,5 +326,5 @@ let DebuggerView = {
    */
   updateEditor: function DV_updateEditor(aUrl, aLine, aFlags = {}) {
-    if (!this.editor) {
+    if (!this._isInitialized || this._isDestroyed) {
       return;
     }
@@ -347,24 +347,33 @@ let DebuggerView = {
     // If the currently displayed source is the requested one, update.
     if (this.Sources.selectedValue == aUrl) {
-      updateLine(aLine);
+      set(aLine);
     }
     // If the requested source exists, display it and update.
     else if (this.Sources.containsValue(aUrl) && !aFlags.noSwitch) {
       this.Sources.selectedValue = aUrl;
-      updateLine(aLine);
+      set(aLine);
     }
     // Dumb request, invalidate the caret position and debug location.
     else {
-      updateLine(0);
+      set(0);
     }
 
     // Updates the source editor's caret position and debug location.
     // @param number a Line
-    function updateLine(aLine) {
+    function set(aLine) {
+      let editor = DebuggerView.editor;
+
+      // Handle any additional options for showing the source.
+      if (aFlags.charOffset) {
+        aLine += editor.getLineAtOffset(aFlags.charOffset);
+      }
+      if (aFlags.lineOffset) {
+        aLine += aFlags.lineOffset;
+      }
       if (!aFlags.noCaret) {
-        DebuggerView.editor.setCaretPosition(aLine - 1);
+        editor.setCaretPosition(aLine - 1);
       }
       if (!aFlags.noDebug) {
-        DebuggerView.editor.setDebugLocation(aLine - 1);
+        editor.setDebugLocation(aLine - 1);
       }
     }
@@ -388,12 +397,12 @@ let DebuggerView = {
 
   /**
-   * Gets the visibility state of the panes.
+   * Gets the visibility state of the instruments pane.
    * @return boolean
    */
-  get panesHidden()
-    this._togglePanesButton.hasAttribute("panesHidden"),
+  get instrumentsPaneHidden()
+    this._instrumentsPaneToggleButton.hasAttribute("toggled"),
 
   /**
-   * Sets all the panes hidden or visible.
+   * Sets the instruments pane hidden or visible.
    *
    * @param object aFlags [optional]
@@ -402,27 +411,26 @@ let DebuggerView = {
    *        - animated: true to display an animation on toggle
    *        - delayed: true to wait a few cycles before toggle
-   *        - callback: a function to invoke when the panes toggle finishes
+   *        - callback: a function to invoke when the toggle finishes
    */
-  togglePanes: function DV__togglePanes(aFlags = {}) {
+  toggleInstrumentsPane: function DV__toggleInstrumentsPane(aFlags = {}) {
     // Avoid useless toggles.
-    if (aFlags.visible == !this.panesHidden) {
+    if (aFlags.visible == !this.instrumentsPaneHidden) {
       if (aFlags.callback) aFlags.callback();
       return;
     }
 
-    // Computes and sets the panes margins in order to hide or show them.
+    // Computes and sets the pane margins in order to hide or show it.
     function set() {
       if (aFlags.visible) {
-        this._stackframesAndBreakpoints.style.marginLeft = "0";
-        this._variablesAndExpressions.style.marginRight = "0";
-        this._togglePanesButton.removeAttribute("panesHidden");
-        this._togglePanesButton.setAttribute("tooltiptext", L10N.getStr("collapsePanes"));
+        this._instrumentsPane.style.marginLeft = "0";
+        this._instrumentsPane.style.marginRight = "0";
+        this._instrumentsPaneToggleButton.removeAttribute("toggled");
+        this._instrumentsPaneToggleButton.setAttribute("tooltiptext", this._collapsePaneString);
       } else {
-        let marginL = ~~(this._stackframesAndBreakpoints.getAttribute("width")) + 1;
-        let marginR = ~~(this._variablesAndExpressions.getAttribute("width")) + 1;
-        this._stackframesAndBreakpoints.style.marginLeft = -marginL + "px";
-        this._variablesAndExpressions.style.marginRight = -marginR + "px";
-        this._togglePanesButton.setAttribute("panesHidden", "true");
-        this._togglePanesButton.setAttribute("tooltiptext", L10N.getStr("expandPanes"));
+        let margin = ~~(this._instrumentsPane.getAttribute("width")) + 1;
+        this._instrumentsPane.style.marginLeft = -margin + "px";
+        this._instrumentsPane.style.marginRight = -margin + "px";
+        this._instrumentsPaneToggleButton.setAttribute("toggled", "true");
+        this._instrumentsPaneToggleButton.setAttribute("tooltiptext", this._expandPaneString);
       }
 
@@ -445,9 +453,7 @@ let DebuggerView = {
 
     if (aFlags.animated) {
-      this._stackframesAndBreakpoints.setAttribute("animated", "");
-      this._variablesAndExpressions.setAttribute("animated", "");
+      this._instrumentsPane.setAttribute("animated", "");
     } else {
-      this._stackframesAndBreakpoints.removeAttribute("animated");
-      this._variablesAndExpressions.removeAttribute("animated");
+      this._instrumentsPane.removeAttribute("animated");
     }
 
@@ -460,19 +466,16 @@ let DebuggerView = {
 
   /**
-   * Sets all the panes visible after a short period of time.
+   * Sets the instruments pane visible after a short period of time.
    *
    * @param function aCallback
-   *        A function to invoke when the panes toggle finishes.
+   *        A function to invoke when the toggle finishes.
    */
-  showPanesSoon: function DV__showPanesSoon(aCallback) {
-    // Try to keep animations as smooth as possible, so wait a few cycles.
-    window.setTimeout(function() {
-      DebuggerView.togglePanes({
-        visible: true,
-        animated: true,
-        delayed: true,
-        callback: aCallback
-      });
-    }, PANES_APPEARANCE_DELAY);
+  showInstrumentsPane: function DV__showInstrumentsPane(aCallback) {
+    DebuggerView.toggleInstrumentsPane({
+      visible: true,
+      animated: true,
+      delayed: true,
+      callback: aCallback
+    });
   },
 
@@ -483,14 +486,12 @@ let DebuggerView = {
     dumpn("Handling tab navigation in the DebuggerView");
 
-    this.ChromeGlobals.empty();
-    this.Sources.empty();
     this.Filtering.clearSearch();
     this.GlobalSearch.clearView();
     this.GlobalSearch.clearCache();
+    this.ChromeGlobals.empty();
     this.StackFrames.empty();
-    this.Breakpoints.empty();
-    this.Breakpoints.unhighlightBreakpoint();
+    this.Sources.empty();
     this.Variables.empty();
-    SourceUtils.clearLabelsCache();
+    SourceUtils.clearCache();
 
     if (this.editor) {
@@ -503,16 +504,20 @@ let DebuggerView = {
   Toolbar: null,
   Options: null,
+  Filtering: null,
+  FilteredSources: null,
   ChromeGlobals: null,
+  StackFrames: null,
   Sources: null,
-  Filtering: null,
-  StackFrames: null,
-  Breakpoints: null,
+  WatchExpressions: null,
   GlobalSearch: null,
   Variables: null,
   _editor: null,
   _editorSource: null,
-  _togglePanesButton: null,
-  _stackframesAndBreakpoints: null,
-  _variablesAndExpressions: null,
+  _loadingText: "",
+  _sourcesPane: null,
+  _instrumentsPane: null,
+  _instrumentsPaneToggleButton: null,
+  _collapsePaneString: "",
+  _expandPaneString: "",
   _isInitialized: false,
   _isDestroyed: false
@@ -520,688 +525,6 @@ let DebuggerView = {
 
 /**
- * A generic item used to describe elements present in views like the
- * ChromeGlobals, Sources, Stackframes, Breakpoints etc.
- *
- * @param string aLabel
- *        The label displayed in the container.
- * @param string aValue
- *        The actual internal value of the item.
- * @param string aDescription [optional]
- *        An optional description of the item.
- * @param any aAttachment [optional]
- *        Some attached primitive/object.
- */
-function MenuItem(aLabel, aValue, aDescription, aAttachment) {
-  this._label = aLabel + "";
-  this._value = aValue + "";
-  this._description = aDescription + "";
-  this.attachment = aAttachment;
-}
-
-MenuItem.prototype = {
-  /**
-   * Gets the label set for this item.
-   * @return string
-   */
-  get label() this._label,
-
-  /**
-   * Gets the value set for this item.
-   * @return string
-   */
-  get value() this._value,
-
-  /**
-   * Gets the description set for this item.
-   * @return string
-   */
-  get description() this._description,
-
-  /**
-   * Gets the element associated with this item.
-   * @return nsIDOMNode
-   */
-  get target() this._target,
-
-  _label: "",
-  _value: "",
-  _description: "",
-  _target: null,
-  finalize: null,
-  attachment: null
-};
-
-/**
- * A generic items container, used for displaying views like the
- * ChromeGlobals, Sources, Stackframes, Breakpoints etc.
- * Iterable via "for (let item in menuContainer) { }".
- *
- * Language:
- *   - An "item" is an instance (or compatible iterface) of a MenuItem.
- *   - An "element" or "node" is a nsIDOMNode.
- *
- * The container node or widget supplied to all instances of this constructor
- * can either be a <menulist> element, or any other object interfacing the
- * following methods:
- *   - function:nsIDOMNode insertItemAt(aIndex:number, aLabel:string, aValue:string)
- *   - function:nsIDOMNode getItemAtIndex(aIndex:number)
- *   - function removeChild(aChild:nsIDOMNode)
- *   - function removeAllItems()
- *   - get:nsIDOMNode selectedItem()
- *   - set selectedItem(aChild:nsIDOMNode)
- *   - function getAttribute(aName:string)
- *   - function setAttribute(aName:string, aValue:string)
- *   - function removeAttribute(aName:string)
- *   - function addEventListener(aName:string, aCallback:function, aBubbleFlag:boolean)
- *   - function removeEventListener(aName:string, aCallback:function, aBubbleFlag:boolean)
- */
-function MenuContainer() {}
-const FIRST = 0;
-const LAST = -1;
-
-MenuContainer.prototype = {
-  /**
-   * Sets the element node or widget associated with this displayed container.
-   * @param nsIDOMNode | object aWidget
-   */
-  set node(aWidget) {
-    this._container = aWidget;
-    this._stagedItems = [];
-    this._itemsByLabel = new Map();
-    this._itemsByValue = new Map();
-    this._itemsByElement = new Map();
-  },
-
-  /**
-   * Gets the element node or widget associated with this displayed container.
-   * @return nsIDOMNode | object
-   */
-  get node() this._container,
-
-  /**
-   * Prepares an item to be added to this container. This allows for a large
-   * number of items to be batched up before being alphabetically sorted and
-   * added in this menu.
-   *
-   * If the "staged" flag is not set to true, the item will be immediately
-   * inserted at the correct position in this container, so that all the items
-   * remain sorted. This can (possibly) be much slower than batching up
-   * multiple items.
-   *
-   * By default, this container assumes that all the items should be displayed
-   * sorted by their label. This can be overridden with the "index" flag,
-   * specifying on which position should the item be appended.
-   *
-   * Furthermore, this container makes sure that all the items are unique
-   * (two items with the same label or value are not allowed) and non-degenerate
-   * (items with "undefined" or "null" labels/values). This can, as well, be
-   * overridden via the "relaxed" flag.
-   *
-   * @param nsIDOMNode | object aContents
-   *        An nsIDOMNode, or an array containing the following properties:
-   *          - label: the label displayed in the container
-   *          - value: the actual internal value of the item
-   *          - description: an optional description of the item
-   * @param object aOptions [optional]
-   *        Additional options or flags supported by this operation:
-   *          - staged: true to stage the item to be appended later
-   *          - index: specifies on which position should the item be appended
-   *          - relaxed: true if this container should allow dupes & degenerates
-   *          - tooltip: an optional tooltip for the item
-   *          - attachment: some attached primitive/object
-   * @return MenuItem
-   *         The item associated with the displayed element if an unstaged push,
-   *         undefined if the item was staged for a later commit.
-   */
-  push: function DVMC_push(aContents, aOptions = {}) {
-    if (aContents instanceof Node || aContents instanceof Element) {
-      aOptions.nsIDOMNode = aContents;
-      aContents = [];
-    }
-
-    let [label, value, description] = aContents;
-    let item = new MenuItem(label, value, description || "", aOptions.attachment);
-
-    // Batch the item to be added later.
-    if (aOptions.staged) {
-      this._stagedItems.push({ item: item, options: aOptions });
-    }
-    // Find the target position in this container and insert the item there.
-    else if (!("index" in aOptions)) {
-      return this._insertItemAt(this._findExpectedIndex(label), item, aOptions);
-    }
-    // Insert the item at the specified index. If negative or out of bounds,
-    // the item will be simply appended.
-    else {
-      return this._insertItemAt(aOptions.index, item, aOptions);
-    }
-  },
-
-  /**
-   * Flushes all the prepared items into this container.
-   *
-   * @param object aOptions [optional]
-   *        Additional options or flags supported by this operation:
-   *          - sorted: true to sort all the items before adding them
-   */
-  commit: function DVMC_commit(aOptions = {}) {
-    let stagedItems = this._stagedItems;
-
-    // By default, sort the items before adding them to this container.
-    if (aOptions.sorted) {
-      stagedItems.sort(function(a, b) a.item.label.toLowerCase() >
-                                      b.item.label.toLowerCase());
-    }
-    // Append the prepared items to this container.
-    for (let { item, options } of stagedItems) {
-      this._insertItemAt(LAST, item, options);
-    }
-    // Recreate the temporary items list for ulterior pushes.
-    this._stagedItems = [];
-  },
-
-  /**
-   * Updates this container to reflect the information provided by the
-   * currently selected item.
-   *
-   * @return boolean
-   *         True if a selected item was available, false otherwise.
-   */
-  refresh: function DVMC_refresh() {
-    let selectedValue = this.selectedValue;
-    if (!selectedValue) {
-      return false;
-    }
-
-    let entangledLabel = this.getItemByValue(selectedValue).label;
-
-    this._container.setAttribute("label", entangledLabel);
-    this._container.setAttribute("tooltiptext", selectedValue);
-    return true;
-  },
-
-  /**
-   * Immediately removes the specified item from this container.
-   *
-   * @param MenuItem aItem
-   *        The item associated with the element to remove.
-   */
-  remove: function DVMC__remove(aItem) {
-    if (!aItem) {
-      return;
-    }
-    this._container.removeChild(aItem.target);
-    this._untangleItem(aItem);
-  },
-
-  /**
-   * Removes all items from this container.
-   */
-  empty: function DVMC_empty() {
-    this._preferredValue = this.selectedValue;
-    this._container.selectedItem = null;
-    this._container.removeAllItems();
-    this._container.setAttribute("label", this._emptyLabel);
-    this._container.removeAttribute("tooltiptext");
-
-    for (let [, item] of this._itemsByElement) {
-      this._untangleItem(item);
-    }
-
-    this._itemsByLabel = new Map();
-    this._itemsByValue = new Map();
-    this._itemsByElement = new Map();
-    this._stagedItems = [];
-  },
-
-  /**
-   * Does not remove any item in this container. Instead, it overrides the
-   * current label to signal that it is unavailable and removes the tooltip.
-   */
-  setUnavailable: function DVMC_setUnavailable() {
-    this._container.setAttribute("label", this._unavailableLabel);
-    this._container.removeAttribute("tooltiptext");
-  },
-
-  /**
-   * The label string automatically added to this container when there are
-   * no child nodes present.
-   */
-  _emptyLabel: "",
-
-  /**
-   * The label string added to this container when it is marked as unavailable.
-   */
-  _unavailableLabel: "",
-
-  /**
-   * Toggles all the items in this container hidden or visible.
-   *
-   * @param boolean aVisibleFlag
-   *        Specifies the intended visibility.
-   */
-  toggleContents: function DVMC_toggleContents(aVisibleFlag) {
-    for (let [, item] of this._itemsByElement) {
-      item.target.hidden = !aVisibleFlag;
-    }
-  },
-
-  /**
-   * Checks whether an item with the specified label is among the elements
-   * shown in this container.
-   *
-   * @param string aLabel
-   *        The item's label.
-   * @return boolean
-   *         True if the label is known, false otherwise.
-   */
-  containsLabel: function DVMC_containsLabel(aLabel) {
-    return this._itemsByLabel.has(aLabel) ||
-           this._stagedItems.some(function({item}) item.label == aLabel);
-  },
-
-  /**
-   * Checks whether an item with the specified value is among the elements
-   * shown in this container.
-   *
-   * @param string aValue
-   *        The item's value.
-   * @return boolean
-   *         True if the value is known, false otherwise.
-   */
-  containsValue: function DVMC_containsValue(aValue) {
-    return this._itemsByValue.has(aValue) ||
-           this._stagedItems.some(function({item}) item.value == aValue);
-  },
-
-  /**
-   * Checks whether an item with the specified trimmed value is among the
-   * elements shown in this container.
-   *
-   * @param string aValue
-   *        The item's value.
-   * @param function aTrim
-   *        The custom trimming function.
-   * @return boolean
-   *         True if the trimmed value is known, false otherwise.
-   */
-  containsTrimmedValue: function DVMC_containsTrimmedValue(aValue, aTrim) {
-    let trimmedValue = aTrim(aValue);
-
-    for (let [value] of this._itemsByValue) {
-      if (aTrim(value) == trimmedValue) {
-        return true;
-      }
-    }
-    return this._stagedItems.some(function({item}) aTrim(item.value) == trimmedValue);
-  },
-
-  /**
-   * Gets the preferred selected value to be displayed in this container.
-   * @return string
-   */
-  get preferredValue() this._preferredValue,
-
-  /**
-   * Retrieves the selected element's index in this container.
-   * @return number
-   */
-  get selectedIndex()
-    this._container.selectedItem ?
-    this.indexOfItem(this.selectedItem) : -1,
-
-  /**
-   * Retrieves the item associated with the selected element.
-   * @return MenuItem
-   */
-  get selectedItem()
-    this._container.selectedItem ?
-    this._itemsByElement.get(this._container.selectedItem) : null,
-
-  /**
-   * Retrieves the label of the selected element.
-   * @return string
-   */
-  get selectedLabel()
-    this._container.selectedItem ?
-    this._itemsByElement.get(this._container.selectedItem).label : null,
-
-  /**
-   * Retrieves the value of the selected element.
-   * @return string
-   */
-  get selectedValue()
-    this._container.selectedItem ?
-    this._itemsByElement.get(this._container.selectedItem).value : null,
-
-  /**
-   * Selects the element at the specified index in this container.
-   * @param number aIndex
-   */
-  set selectedIndex(aIndex)
-    this._container.selectedItem = this._container.getItemAtIndex(aIndex),
-
-  /**
-   * Selects the element with the entangled item in this container.
-   * @param MenuItem aItem
-   */
-  set selectedItem(aItem)
-    this._container.selectedItem = aItem ? aItem.target : null,
-
-  /**
-   * Selects the element with the specified label in this container.
-   * @param string aLabel
-   */
-  set selectedLabel(aLabel) {
-    let item = this._itemsByLabel.get(aLabel);
-    if (item) {
-      this._container.selectedItem = item.target;
-    }
-  },
-
-  /**
-   * Selects the element with the specified value in this container.
-   * @param string aValue
-   */
-  set selectedValue(aValue) {
-    let item = this._itemsByValue.get(aValue);
-    if (item) {
-      this._container.selectedItem = item.target;
-    }
-  },
-
-  /**
-   * Gets the item in the container having the specified index.
-   *
-   * @param number aIndex
-   *        The index used to identify the element.
-   * @return MenuItem
-   *         The matched item, or null if nothing is found.
-   */
-  getItemAtIndex: function DVMC_getItemAtIndex(aIndex) {
-    return this.getItemForElement(this._container.getItemAtIndex(aIndex));
-  },
-
-  /**
-   * Gets the item in the container having the specified label.
-   *
-   * @param string aLabel
-   *        The label used to identify the element.
-   * @return MenuItem
-   *         The matched item, or null if nothing is found.
-   */
-  getItemByLabel: function DVMC_getItemByLabel(aLabel) {
-    return this._itemsByLabel.get(aLabel);
-  },
-
-  /**
-   * Gets the item in the container having the specified value.
-   *
-   * @param string aValue
-   *        The value used to identify the element.
-   * @return MenuItem
-   *         The matched item, or null if nothing is found.
-   */
-  getItemByValue: function DVMC_getItemByValue(aValue) {
-    return this._itemsByValue.get(aValue);
-  },
-
-  /**
-   * Gets the item in the container associated with the specified element.
-   *
-   * @param nsIDOMNode aElement
-   *        The element used to identify the item.
-   * @return MenuItem
-   *         The matched item, or null if nothing is found.
-   */
-  getItemForElement: function DVMC_getItemForElement(aElement) {
-    while (aElement) {
-      let item = this._itemsByElement.get(aElement);
-      if (item) {
-        return item;
-      }
-      aElement = aElement.parentNode;
-    }
-    return null;
-  },
-
-  /**
-   * Finds the index of an item in the container.
-   *
-   * @param MenuItem
-   *        The element item get the index for.
-   * @return number
-   *         The index of the matched item, or -1 if nothing is found.
-   */
-  indexOfItem: function indexOfItem({target}) {
-    let itemCount = this._itemsByElement.size;
-
-    for (let i = 0; i < itemCount; i++) {
-      if (this._container.getItemAtIndex(i) == target) {
-        return i;
-      }
-    }
-    return -1;
-  },
-
-  /**
-   * Returns the list of labels in this container.
-   * @return array
-   */
-  get labels() {
-    let labels = [];
-    for (let [label] of this._itemsByLabel) {
-      labels.push(label);
-    }
-    return labels;
-  },
-
-  /**
-   * Returns the list of values in this container.
-   * @return array
-   */
-  get values() {
-    let values = [];
-    for (let [value] of this._itemsByValue) {
-      values.push(value);
-    }
-    return values;
-  },
-
-  /**
-   * Gets the total number of items in this container.
-   * @return number
-   */
-  get itemCount() this._itemsByElement.size,
-
-  /**
-   * Returns a list of all the visible (non-hidden) items in this container.
-   * @return array
-   */
-  get visibleItems() {
-    let items = [];
-    for (let [element, item] of this._itemsByElement) {
-      if (!element.hidden) {
-        items.push(item);
-      }
-    }
-    return items;
-  },
-
-  /**
-   * Specifies the required conditions for an item to be considered unique.
-   * Possible values:
-   *   - 1: label AND value are different from all other items
-   *   - 2: label OR value are different from all other items
-   *   - 3: only label is required to be different
-   *   - 4: only value is required to be different
-   */
-  uniquenessQualifier: 1,
-
-  /**
-   * Checks if an item is unique in this container.
-   *
-   * @param MenuItem aItem
-   *        An object containing a label and a value property.
-   * @return boolean
-   *         True if the element is unique, false otherwise.
-   */
-  isUnique: function DVMC_isUnique(aItem) {
-    switch (this.uniquenessQualifier) {
-      case 1:
-        return !this._itemsByLabel.has(aItem.label) &&
-               !this._itemsByValue.has(aItem.value);
-      case 2:
-        return !this._itemsByLabel.has(aItem.label) ||
-               !this._itemsByValue.has(aItem.value);
-      case 3:
-        return !this._itemsByLabel.has(aItem.label);
-      case 4:
-        return !this._itemsByValue.has(aItem.value);
-    }
-    return false;
-  },
-
-  /**
-   * Checks if an item's label and value are eligible for this container.
-   *
-   * @param MenuItem aItem
-   *        An object containing a label and a value property.
-   * @return boolean
-   *         True if the element is eligible, false otherwise.
-   */
-  isEligible: function DVMC_isEligible(aItem) {
-    return this.isUnique(aItem) &&
-           aItem.label != "undefined" && aItem.label != "null" &&
-           aItem.value != "undefined" && aItem.value != "null";
-  },
-
-  /**
-   * Finds the expected item index in this container based on its label.
-   *
-   * @param string aLabel
-   *        The label used to identify the element.
-   * @return number
-   *         The expected item index.
-   */
-  _findExpectedIndex: function DVMC__findExpectedIndex(aLabel) {
-    let container = this._container;
-    let itemCount = this.itemCount;
-
-    for (let i = 0; i < itemCount; i++) {
-      if (this.getItemAtIndex(i).label > aLabel) {
-        return i;
-      }
-    }
-    return itemCount;
-  },
-
-  /**
-   * Immediately inserts an item in this container at the specified index.
-   *
-   * @param number aIndex
-   *        The position in the container intended for this item.
-   * @param MenuItem aItem
-   *        An object containing a label and a value property.
-   * @param object aOptions [optional]
-   *        Additional options or flags supported by this operation:
-   *          - relaxed: true if this container should allow dupes & degenerates
-   *          - tooltip: an optional tooltip for the item
-   * @return MenuItem
-   *         The item associated with the displayed element, null if rejected.
-   */
-  _insertItemAt: function DVMC__insertItemAt(aIndex, aItem, aOptions) {
-    if (!aOptions.relaxed && !this.isEligible(aItem)) {
-      return null;
-    }
-
-    this._entangleItem(aItem, this._container.insertItemAt(aIndex,
-      aOptions.nsIDOMNode || aItem.label,
-      aItem.value,
-      aItem.description,
-      aOptions.attachment));
-
-    // Handle any additional options after entangling the item.
-    if (aOptions.tooltip) {
-      aItem._target.setAttribute("tooltiptext", aOptions.tooltip);
-    }
-
-    // Return the item associated with the displayed element.
-    return aItem;
-  },
-
-  /**
-   * Entangles an item (model) with a displayed node element (view).
-   *
-   * @param MenuItem aItem
-   *        The item describing the element.
-   * @param nsIDOMNode aElement
-   *        The element displaying the item.
-   */
-  _entangleItem: function DVMC__entangleItem(aItem, aElement) {
-    this._itemsByLabel.set(aItem.label, aItem);
-    this._itemsByValue.set(aItem.value, aItem);
-    this._itemsByElement.set(aElement, aItem);
-
-    aItem._target = aElement;
-  },
-
-  /**
-   * Untangles an item (model) from a displayed node element (view).
-   *
-   * @param MenuItem aItem
-   *        The item describing the element.
-   */
-  _untangleItem: function DVMC__untangleItem(aItem) {
-    if (aItem.finalize instanceof Function) {
-      aItem.finalize(aItem);
-    }
-
-    this._itemsByLabel.delete(aItem.label);
-    this._itemsByValue.delete(aItem.value);
-    this._itemsByElement.delete(aItem.target);
-
-    aItem._target = null;
-  },
-
-  /**
-   * Helper decorating some of the DOM methods of a widget (not element node)
-   * associated with this menu container, to satisfy the required interface.
-   * @see MenuContainer constructor
-   *
-   * @param string aTarget
-   *        The name of a nsIDOMNode property in the widget.
-   */
-  decorateWidgetMethods: function DVMC_decorateWidgetMethods(aTarget) {
-    let widget = this.node;
-    let targetNode = widget[aTarget];
-
-    widget.getAttribute = targetNode.getAttribute.bind(targetNode);
-    widget.setAttribute = targetNode.setAttribute.bind(targetNode);
-    widget.removeAttribute = targetNode.removeAttribute.bind(targetNode);
-    widget.addEventListener = targetNode.addEventListener.bind(targetNode);
-    widget.removeEventListener = targetNode.removeEventListener.bind(targetNode);
-  },
-
-  /**
-   * A generator-iterator over all the items in this container.
-   */
-  __iterator__: function DVMC_iterator() {
-    for (let [, item] of this._itemsByElement) {
-      yield item;
-    }
-  },
-
-  _container: null,
-  _stagedItems: null,
-  _itemsByLabel: null,
-  _itemsByValue: null,
-  _itemsByElement: null,
-  _preferredValue: null
-};
-
-/**
  * A stacked list of items, compatible with MenuContainer instances, used for
- * displaying views like the StackFrames, Breakpoints etc.
+ * displaying views like the watch expressions, filtering or search results etc.
  *
  * You should never need to access these methods directly, use the wrapper
@@ -1209,13 +532,13 @@ MenuContainer.prototype = {
  *
  * Custom methods introduced by this view, not necessary for a MenuContainer:
- * set emptyText(aValue:string)
- * set permaText(aValue:string)
- * set itemType(aType:string)
- * set itemFactory(aCallback:function)
+ *   - set emptyText(aValue:string)
+ *   - set permaText(aValue:string)
+ *   - set itemType(aType:string)
+ *   - set itemFactory(aCallback:function)
  *
  * @param nsIDOMNode aAssociatedNode
  *        The element associated with the displayed container.
  */
-function StackList(aAssociatedNode) {
+function ListWidget(aAssociatedNode) {
   this._parent = aAssociatedNode;
 
@@ -1226,8 +549,27 @@ function StackList(aAssociatedNode) {
   // Delegate some of the associated node's methods to satisfy the interface
   // required by MenuContainer instances.
-  MenuContainer.prototype.decorateWidgetMethods.call({ node: this }, "_parent");
+  ViewHelpers.delegateWidgetAttributeMethods(this, aAssociatedNode);
+  ViewHelpers.delegateWidgetEventMethods(this, aAssociatedNode);
 }
 
-StackList.prototype = {
+ListWidget.prototype = {
+  /**
+   * Overrides an item's element type (e.g. "vbox" or "hbox") in this container.
+   * @param string aType
+   */
+  itemType: "hbox",
+
+  /**
+   * Customization function for creating an item's UI in this container.
+   *
+   * @param nsIDOMNode aElementNode
+   *        The element associated with the displayed item.
+   * @param string aLabel
+   *        The item's label.
+   * @param string aValue
+   *        The item's value.
+   */
+  itemFactory: null,
+
   /**
    * Immediately inserts an item in this container at the specified index.
@@ -1252,7 +594,8 @@ StackList.prototype = {
 
     let element = document.createElement(this.itemType);
-    this.itemFactory(element, aLabel, aValue, aAttachment);
+    this.itemFactory(element, aAttachment, aLabel, aValue, aDescription);
     this._removeEmptyNotice();
 
+    element.classList.add("list-widget-item");
     return list.insertBefore(element, childNodes[aIndex]);
   },
@@ -1356,22 +699,4 @@ StackList.prototype = {
 
   /**
-   * Overrides an item's element type (e.g. "vbox" or "hbox") in this container.
-   * @param string aType
-   */
-  itemType: "hbox",
-
-  /**
-   * Customization function for creating an item's UI in this container.
-   *
-   * @param nsIDOMNode aElementNode
-   *        The element associated with the displayed item.
-   * @param string aLabel
-   *        The item's label.
-   * @param string aValue
-   *        The item's value.
-   */
-  itemFactory: null,
-
-  /**
    * Creates and appends a label displayed permanently in this container's header.
    */
@@ -1382,5 +707,5 @@ StackList.prototype = {
 
     let label = document.createElement("label");
-    label.className = "empty list-item";
+    label.className = "empty list-widget-item";
     label.setAttribute("value", this._permaTextValue);
 
@@ -1398,5 +723,5 @@ StackList.prototype = {
 
     let label = document.createElement("label");
-    label.className = "empty list-item";
+    label.className = "empty list-widget-item";
     label.setAttribute("value", this._emptyTextValue);
 
diff --git a/browser/devtools/debugger/debugger.css b/browser/devtools/debugger/debugger.css
--- a/browser/devtools/debugger/debugger.css
+++ b/browser/devtools/debugger/debugger.css
@@ -5,7 +5,5 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-/**
- * Sources searching
- */
+/* Sources search view */
 
 #globalsearch {
@@ -14,25 +12,5 @@
 }
 
-.dbg-results-container:not([open]) {
-  display: none;
-}
-
-/**
- * Breakpoints view
- */
-
-#breakpoints {
-  overflow-x: hidden;
-  overflow-y: auto;
-}
-
-.dbg-breakpoint > .state,
-.dbg-breakpoint > .content {
-  overflow: hidden;
-}
-
-/**
- * Watch expressions view
- */
+/* Watch expressions view */
 
 #expressions {
@@ -41,38 +19,5 @@
 }
 
-/**
- * Variables view
- */
-
-#variables {
-  overflow-x: hidden;
-  overflow-y: auto;
-}
-
-/**
- * Scope, variable and property elements
- */
-
-.details:not([open]) {
-  display: none;
-}
-
-.scope,
-.variable,
-.property {
-  -moz-user-focus: normal;
-}
-
-.scope[non-header] > .title,
-.variable[non-header] > .title,
-.variable[non-match] > .title,
-.property[non-header] > .title,
-.property[non-match] > .title {
-  display: none;
-}
-
-/**
- * Toolbar
- */
+/* Toolbar */
 
 .devtools-toolbarbutton:not([label]) > .toolbarbutton-text {
diff --git a/browser/devtools/debugger/debugger.xul b/browser/devtools/debugger/debugger.xul
--- a/browser/devtools/debugger/debugger.xul
+++ b/browser/devtools/debugger/debugger.xul
@@ -4,10 +4,11 @@
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
 <?xml-stylesheet href="chrome://browser/skin/" type="text/css"?>
+<?xml-stylesheet href="chrome://browser/content/devtools/widgets.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/content/debugger.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/devtools/common.css" type="text/css"?>
+<?xml-stylesheet href="chrome://browser/skin/devtools/widgets.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/devtools/debugger.css" type="text/css"?>
-<?xml-stylesheet href="chrome://browser/skin/devtools/inspector.css" type="text/css"?>
 <!DOCTYPE window [
-<!ENTITY % debuggerDTD SYSTEM "chrome://browser/locale/devtools/debugger.dtd">
+  <!ENTITY % debuggerDTD SYSTEM "chrome://browser/locale/devtools/debugger.dtd">
   %debuggerDTD;
 ]>
@@ -16,5 +17,4 @@
 
 <window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
-
   <script type="text/javascript" src="chrome://global/content/globalOverlay.js"/>
   <script type="text/javascript" src="debugger-controller.js"/>
@@ -48,7 +48,7 @@
              oncommand="DebuggerView.Filtering._doVariablesFocus()"/>
     <command id="addBreakpointCommand"
-             oncommand="DebuggerView.Breakpoints._onCmdAddBreakpoint()"/>
+             oncommand="DebuggerView.Sources._onCmdAddBreakpoint()"/>
     <command id="addConditionalBreakpointCommand"
-             oncommand="DebuggerView.Breakpoints._onCmdAddConditionalBreakpoint()"/>
+             oncommand="DebuggerView.Sources._onCmdAddConditionalBreakpoint()"/>
     <command id="addWatchExpressionCommand"
              oncommand="DebuggerView.WatchExpressions._onCmdAddExpression()"/>
@@ -118,5 +118,4 @@
                 command="variablesFocusCommand"/>
     </menupopup>
-
     <menupopup id="debuggerWatchExpressionsContextMenu">
       <menuitem id="add-watch-expression"
@@ -131,5 +130,4 @@
                 command="removeAllWatchExpressionsCommand"/>
     </menupopup>
-
     <menupopup id="debuggerPrefsContextMenu"
                position="before_end"
@@ -216,5 +214,5 @@
 
   <vbox id="body" flex="1">
-    <toolbar id="dbg-toolbar" class="devtools-toolbar">
+    <toolbar class="devtools-toolbar">
       <hbox id="debugger-controls">
         <toolbarbutton id="resume"
@@ -234,11 +232,8 @@
                 class="devtools-menulist"
                 sizetopopup="none" hidden="true"/>
-      <menulist id="sources"
-                class="devtools-menulist"
-                sizetopopup="none"/>
       <vbox id="stackframes" flex="1"/>
       <textbox id="searchbox"
                class="devtools-searchinput" type="search"/>
-      <toolbarbutton id="toggle-panes"
+      <toolbarbutton id="instruments-pane-toggle"
                      class="devtools-toolbarbutton"
                      tooltiptext="&debuggerUI.panesButton.tooltip;"
@@ -247,60 +242,18 @@
                      class="devtools-option-toolbarbutton"
                      tooltiptext="&debuggerUI.optsButton.tooltip;"
-                     popup="debuggerPrefsContextMenu"/>
+                     popup="debuggerPrefsContextMenu"
+                     tabindex="0"/>
     </toolbar>
-
-    <panel id="searchbox-panel"
-           level="top"
-           type="arrow"
-           noautofocus="true"
-           position="before_start">
-      <vbox>
-        <label class="description" value="&debuggerUI.searchPanelTitle;"/>
-        <hbox align="center">
-          <button id="global-operator-button" class="operator"
-                  command="globalSearchCommand"/>
-          <label id="global-operator-label" class="plain operator"/>
-        </hbox>
-        <hbox align="center">
-          <button id="token-operator-button" class="operator"
-                  command="tokenSearchCommand"/>
-          <label id="token-operator-label" class="plain operator"/>
-        </hbox>
-        <hbox align="center">
-          <button id="line-operator-button" class="operator"
-                  command="lineSearchCommand"/>
-          <label id="line-operator-label" class="plain operator"/>
-        </hbox>
-        <hbox align="center">
-          <button id="variable-operator-button" class="operator"
-                  command="variableSearchCommand"/>
-          <label id="variable-operator-label" class="plain operator"/>
-        </hbox>
-      </vbox>
-    </panel>
-
-    <panel id="conditional-breakpoint-panel"
-           level="top"
-           type="arrow"
-           noautofocus="true"
-           position="after_start">
-      <vbox>
-        <label class="description" value="&debuggerUI.condBreakPanelTitle;"/>
-        <textbox id="conditional-breakpoint-textbox"/>
-      </vbox>
-    </panel>
-
-    <vbox id="dbg-content" flex="1">
-      <vbox id="globalsearch" hidden="true"/>
-      <splitter id="globalsearch-splitter"
-                class="devtools-horizontal-splitter" hidden="true"/>
+    <vbox flex="1">
+      <scrollbox id="globalsearch" orient="vertical" hidden="true"/>
+      <splitter class="devtools-horizontal-splitter" hidden="true"/>
       <hbox flex="1">
-        <vbox id="stackframes+breakpoints">
-          <vbox id="breakpoints" flex="1"/>
+        <vbox id="sources-pane">
+          <vbox id="sources" flex="1"/>
         </vbox>
         <splitter class="devtools-side-splitter"/>
         <vbox id="editor" flex="1"/>
         <splitter class="devtools-side-splitter"/>
-        <vbox id="variables+expressions">
+        <vbox id="instruments-pane">
           <vbox id="expressions"/>
           <splitter class="devtools-horizontal-splitter"/>
@@ -309,5 +262,62 @@
       </hbox>
     </vbox>
+  </vbox>
 
-  </vbox>
+  <panel id="searchbox-help-panel"
+         level="top"
+         type="arrow"
+         noautofocus="true"
+         position="before_start">
+    <vbox>
+      <label id="searchbox-panel-description"
+             value="&debuggerUI.searchPanelTitle;"/>
+      <hbox align="center">
+        <button id="global-operator-button"
+                class="searchbox-panel-operator-button"
+                command="globalSearchCommand"/>
+        <label id="global-operator-label"
+               class="plain searchbox-panel-operator-label"/>
+      </hbox>
+      <hbox align="center">
+        <button id="token-operator-button"
+                class="searchbox-panel-operator-button"
+                command="tokenSearchCommand"/>
+        <label id="token-operator-label"
+               class="plain searchbox-panel-operator-label"/>
+      </hbox>
+      <hbox align="center">
+        <button id="line-operator-button"
+                class="searchbox-panel-operator-button"
+                command="lineSearchCommand"/>
+        <label id="line-operator-label"
+               class="plain searchbox-panel-operator-label"/>
+      </hbox>
+      <hbox align="center">
+        <button id="variable-operator-button"
+                class="searchbox-panel-operator-button"
+                 command="variableSearchCommand"/>
+        <label id="variable-operator-label"
+               class="plain searchbox-panel-operator-label"/>
+      </hbox>
+    </vbox>
+  </panel>
+
+  <panel id="filtered-sources-panel"
+         level="top"
+         noautofocus="true"
+         position="before_start">
+  </panel>
+
+  <panel id="conditional-breakpoint-panel"
+         hidden="true"
+         level="top"
+         type="arrow"
+         noautofocus="true">
+    <vbox>
+      <label id="conditional-breakpoint-panel-description"
+             value="&debuggerUI.condBreakPanelTitle;"/>
+      <textbox id="conditional-breakpoint-panel-textbox"/>
+    </vbox>
+  </panel>
+
 </window>
diff --git a/browser/devtools/debugger/test/Makefile.in b/browser/devtools/debugger/test/Makefile.in
--- a/browser/devtools/debugger/test/Makefile.in
+++ b/browser/devtools/debugger/test/Makefile.in
@@ -13,5 +13,7 @@ include $(DEPTH)/config/autoconf.mk
 MOCHITEST_BROWSER_TESTS = \
 	browser_dbg_aaa_run_first_leaktest.js \
+	browser_dbg_clean-exit.js \
 	browser_dbg_createChrome.js \
+	$(browser_dbg_createRemote.js disabled for intermittent failures, bug 753225) \
 	$(browser_dbg_debugger-tab-switch.js disabled until issues 106, 40 are fixed) \
 	$(browser_dbg_debugger-tab-switch-window.js disabled until issues 106, 40 are fixed) \
@@ -21,5 +23,4 @@ MOCHITEST_BROWSER_TESTS = \
 	browser_dbg_tabactor-02.js \
 	browser_dbg_globalactor-01.js \
-	testactors.js \
 	browser_dbg_nav-01.js \
 	browser_dbg_propertyview-01.js \
@@ -61,5 +62,5 @@ MOCHITEST_BROWSER_TESTS = \
 	browser_dbg_location-changes-new.js \
 	browser_dbg_location-changes-blank.js \
-	browser_dbg_script-switching.js \
+	browser_dbg_scripts-switching.js \
 	browser_dbg_scripts-sorting.js \
 	browser_dbg_scripts-searching-01.js \
@@ -76,6 +77,6 @@ MOCHITEST_BROWSER_TESTS = \
 	browser_dbg_pause-warning.js \
 	browser_dbg_update-editor-mode.js \
-	$(filter temporarily-disabled-due-to-oranges--bug-726609, browser_dbg_select-line.js) \
-	browser_dbg_clean-exit.js \
+	browser_dbg_select-line.js \
+	browser_dbg_breakpoint-new-script.js \
 	browser_dbg_bug723069_editor-breakpoints.js \
 	browser_dbg_bug723071_editor-breakpoints-pane.js \
@@ -85,19 +86,18 @@ MOCHITEST_BROWSER_TESTS = \
 	browser_dbg_bug727429_watch-expressions-02.js \
 	browser_dbg_bug731394_editor-contextmenu.js \
+	browser_dbg_bug737803_editor_actual_location.js \
 	browser_dbg_bug786070_hide_nonenums.js \
 	browser_dbg_displayName.js \
-	browser_dbg_iframes.js \
 	browser_dbg_pause-exceptions.js \
 	browser_dbg_multiple-windows.js \
+	browser_dbg_iframes.js \
 	browser_dbg_bfcache.js \
-	browser_dbg_breakpoint-new-script.js \
-	browser_dbg_bug737803_editor_actual_location.js \
 	browser_dbg_progress-listener-bug.js \
 	browser_dbg_chrome-debugging.js \
-	$(filter disabled-for-intermittent-failures--bug-753225, browser_dbg_createRemote.js) \
 	head.js \
 	$(NULL)
 
 MOCHITEST_BROWSER_PAGES = \
+	testactors.js \
 	browser_dbg_tab1.html \
 	browser_dbg_tab2.html \
diff --git a/browser/devtools/debugger/test/browser_dbg_bfcache.js b/browser/devtools/debugger/test/browser_dbg_bfcache.js
--- a/browser/devtools/debugger/test/browser_dbg_bfcache.js
+++ b/browser/devtools/debugger/test/browser_dbg_bfcache.js
@@ -13,5 +13,5 @@ var gTab = null;
 var gDebuggee = null;
 var gDebugger = null;
-var gScripts = null;
+var gSources = null;
 
 function test()
@@ -120,21 +120,20 @@ function testForward()
 
 function validateFirstPage() {
-  gScripts = gDebugger.DebuggerView.Sources._container;
+  gSources = gDebugger.DebuggerView.Sources;
 
-  is(gScripts.itemCount, 2, "Found the expected number of scripts.");
+  is(gSources.itemCount, 2,
+    "Found the expected number of scripts.");
 
-  let label1 = "test-script-switching-01.js";
-  let label2 = "test-script-switching-02.js";
-
-  ok(gDebugger.DebuggerView.Sources.containsLabel(label1),
+  ok(gDebugger.DebuggerView.Sources.containsLabel("test-script-switching-01.js"),
      "Found the first script label.");
-  ok(gDebugger.DebuggerView.Sources.containsLabel(label2),
+  ok(gDebugger.DebuggerView.Sources.containsLabel("test-script-switching-02.js"),
      "Found the second script label.");
 }
 
 function validateSecondPage() {
-  gScripts = gDebugger.DebuggerView.Sources._container;
+  gSources = gDebugger.DebuggerView.Sources;
 
-  is(gScripts.itemCount, 1, "Found the expected number of scripts.");
+  is(gSources.itemCount, 1,
+    "Found the expected number of scripts.");
 
   ok(gDebugger.DebuggerView.Sources.containsLabel("browser_dbg_stack.html"),
@@ -148,4 +147,4 @@ registerCleanupFunction(function() {
   gDebuggee = null;
   gDebugger = null;
-  gScripts = null;
+  gSources = null;
 });
diff --git a/browser/devtools/debugger/test/browser_dbg_breakpoint-new-script.js b/browser/devtools/debugger/test/browser_dbg_breakpoint-new-script.js
--- a/browser/devtools/debugger/test/browser_dbg_breakpoint-new-script.js
+++ b/browser/devtools/debugger/test/browser_dbg_breakpoint-new-script.js
@@ -27,7 +27,7 @@ function test()
 function testAddBreakpoint()
 {
-  gDebugger.addEventListener("Debugger:FetchedVariables", function test() {
-    gDebugger.removeEventListener("Debugger:FetchedVariables", test, false);
-    executeSoon(function() {
+  gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
+    Services.tm.currentThread.dispatch({ run: function() {
+
       var frames = gDebugger.DebuggerView.StackFrames._container._list;
 
@@ -38,10 +38,9 @@ function testAddBreakpoint()
          "Should have one frame.");
 
-      let location = { url: TAB_URL, line: 9 };
-      gPane.addBreakpoint(location, function (aResponse, bpClient) {
+      gPane.addBreakpoint({ url: TAB_URL, line: 9 }, function (aResponse, bpClient) {
         testResume();
       });
-    });
-  }, false);
+    }}, 0);
+  });
 
   gDebuggee.runDebuggerStatement();
@@ -50,4 +49,7 @@ function testAddBreakpoint()
 function testResume()
 {
+  is(gDebugger.DebuggerController.activeThread.state, "paused",
+    "The breakpoint wasn't hit yet.");
+
   let thread = gDebugger.DebuggerController.activeThread;
   thread.addOneTimeListener("resumed", function() {
@@ -58,5 +60,4 @@ function testResume()
     EventUtils.sendMouseEvent({ type: "click" },
       content.document.querySelector("button"));
-
   });
 
@@ -69,8 +70,4 @@ function testBreakpointHit()
     "The breakpoint was hit.");
 
-  resumeAndFinish();
-}
-
-function resumeAndFinish() {
   let thread = gDebugger.DebuggerController.activeThread;
   thread.addOneTimeListener("paused", function test(aEvent, aPacket) {
@@ -82,5 +79,4 @@ function resumeAndFinish() {
     isnot(aPacket.why.type, "breakpoint", "No ghost breakpoint was hit.");
     thread.resume();
-
   });
 
diff --git a/browser/devtools/debugger/test/browser_dbg_bug723069_editor-breakpoints.js b/browser/devtools/debugger/test/browser_dbg_bug723069_editor-breakpoints.js
--- a/browser/devtools/debugger/test/browser_dbg_bug723069_editor-breakpoints.js
+++ b/browser/devtools/debugger/test/browser_dbg_bug723069_editor-breakpoints.js
@@ -13,14 +13,10 @@ let gTab = null;
 let gDebuggee = null;
 let gDebugger = null;
+let gEditor = null;
 let gSources = null;
-let gEditor = null;
 let gBreakpoints = null;
 
 function test()
 {
-  let tempScope = {};
-  Cu.import("resource:///modules/source-editor.jsm", tempScope);
-  let SourceEditor = tempScope.SourceEditor;
-
   let scriptShown = false;
   let framesAdded = false;
@@ -37,6 +33,5 @@ function test()
       gPane = toolbox.getCurrentPanel();
       gDebugger = gPane.panelWin;
-      gDebugger.addEventListener("Debugger:AfterSourcesAdded",
-                                 onAfterSourcesAdded);
+      gDebugger.addEventListener("Debugger:AfterSourcesAdded", onAfterSourcesAdded);
     });
   });
@@ -45,7 +40,5 @@ function test()
   {
     info("scripts added");
-    gDebugger.removeEventListener("Debugger:AfterSourcesAdded",
-                                  onAfterSourcesAdded);
-
+    gDebugger.removeEventListener("Debugger:AfterSourcesAdded",onAfterSourcesAdded);
     gDebugger.addEventListener("Debugger:SourceShown", onSourceShown);
 
@@ -82,28 +75,26 @@ function test()
   {
     gSources = gDebugger.DebuggerView.Sources;
+    gEditor = gDebugger.editor;
+    gBreakpoints = gPane.getAllBreakpoints();
 
     is(gDebugger.DebuggerController.activeThread.state, "paused",
       "Should only be getting stack frames while paused.");
 
-    is(gSources._container.itemCount, 2, "Found the expected number of scripts.");
-
-    gEditor = gDebugger.editor;
+    is(gSources.itemCount, 2,
+      "Found the expected number of scripts.");
 
     isnot(gEditor.getText().indexOf("debugger"), -1,
-          "The correct script was loaded initially.");
+      "The correct script was loaded initially.");
+
     isnot(gSources.selectedValue, gSources.values[0],
-          "the correct script is selected");
+      "The correct script is selected");
 
-    gBreakpoints = gPane.getAllBreakpoints();
     is(Object.keys(gBreakpoints), 0, "no breakpoints");
     ok(!gPane.getBreakpoint("foo", 3), "getBreakpoint('foo', 3) returns falsey");
-
     is(gEditor.getBreakpoints().length, 0, "no breakpoints in the editor");
 
-    gEditor.addEventListener(SourceEditor.EVENTS.BREAKPOINT_CHANGE,
-                             onEditorBreakpointAddFirst);
-    let location = {url: gSources.selectedValue, line: 6};
+    gEditor.addEventListener(SourceEditor.EVENTS.BREAKPOINT_CHANGE, onEditorBreakpointAddFirst);
     executeSoon(function() {
-      gPane.addBreakpoint(location, onBreakpointAddFirst);
+      gPane.addBreakpoint({url: gSources.selectedValue, line: 6}, onBreakpointAddFirst);
     });
   }
@@ -115,6 +106,5 @@ function test()
   function onEditorBreakpointAddFirst(aEvent)
   {
-    gEditor.removeEventListener(SourceEditor.EVENTS.BREAKPOINT_CHANGE,
-                                onEditorBreakpointAddFirst);
+    gEditor.removeEventListener(SourceEditor.EVENTS.BREAKPOINT_CHANGE, onEditorBreakpointAddFirst);
     editorBreakpointChanges++;
 
@@ -125,5 +115,5 @@ function test()
 
     is(gEditor.getBreakpoints().length, 1,
-       "editor.getBreakpoints().length is correct");
+      "editor.getBreakpoints().length is correct");
   }
 
@@ -141,13 +131,12 @@ function test()
     executeSoon(function() {
       ok(aBreakpointClient.actor in gBreakpoints,
-         "breakpoint1 client found in the list of debugger breakpoints");
+        "breakpoint1 client found in the list of debugger breakpoints");
       is(Object.keys(gBreakpoints).length, 1,
-         "the list of debugger breakpoints holds only one breakpoint");
+        "the list of debugger breakpoints holds only one breakpoint");
       is(gPane.getBreakpoint(gSources.selectedValue, 6), aBreakpointClient,
-         "getBreakpoint returns the correct breakpoint");
+        "getBreakpoint returns the correct breakpoint");
 
       info("remove the first breakpoint");
-      gEditor.addEventListener(SourceEditor.EVENTS.BREAKPOINT_CHANGE,
-                               onEditorBreakpointRemoveFirst);
+      gEditor.addEventListener(SourceEditor.EVENTS.BREAKPOINT_CHANGE, onEditorBreakpointRemoveFirst);
       gPane.removeBreakpoint(aBreakpointClient, onBreakpointRemoveFirst);
     });
@@ -167,6 +156,5 @@ function test()
   function onEditorBreakpointRemoveFirst(aEvent)
   {
-    gEditor.removeEventListener(SourceEditor.EVENTS.BREAKPOINT_CHANGE,
-                                onEditorBreakpointRemoveFirst);
+    gEditor.removeEventListener(SourceEditor.EVENTS.BREAKPOINT_CHANGE, onEditorBreakpointRemoveFirst);
     editorBreakpointChanges++;
 
@@ -176,5 +164,6 @@ function test()
     is(aEvent.removed[0].line, 5, "editor breakpoint line is correct");
 
-    is(gEditor.getBreakpoints().length, 0, "editor.getBreakpoints().length is correct");
+    is(gEditor.getBreakpoints().length, 0,
+      "editor.getBreakpoints().length is correct");
   }
 
@@ -185,22 +174,17 @@ function test()
     is(Object.keys(gBreakpoints).length, 0, "no breakpoints in the debugger");
     ok(!gPane.getBreakpoint(gSources.selectedValue, 6),
-       "getBreakpoint(selectedScript, 6) returns no breakpoint");
+      "getBreakpoint(selectedScript, 6) returns no breakpoint");
+    isnot(gSources.values[0], gSources.selectedValue,
+      "first script location is not the currently selected script");
 
-    let script0 = gSources.values[0];
-    isnot(script0, gSources.selectedValue,
-          "first script location is not the currently selected script");
-
-    let location = {url: script0, line: 5};
-    gEditor.addEventListener(SourceEditor.EVENTS.BREAKPOINT_CHANGE,
-                             onEditorBreakpointAddBackgroundTrap);
-    gPane.addBreakpoint(location, onBreakpointAddBackground);
+    gEditor.addEventListener(SourceEditor.EVENTS.BREAKPOINT_CHANGE, onEditorBreakpointAddBackgroundTrap);
+    gPane.addBreakpoint({url: gSources.values[0], line: 5}, onBreakpointAddBackground);
   }
 
   function onEditorBreakpointAddBackgroundTrap(aEvent)
   {
-    // trap listener: no breakpoint must be added to the editor when a breakpoint
-    // is added to a script that is not currently selected.
-    gEditor.removeEventListener(SourceEditor.EVENTS.BREAKPOINT_CHANGE,
-                                onEditorBreakpointAddBackgroundTrap);
+    // Trap listener: no breakpoint must be added to the editor when a
+    // breakpoint is added to a script that is not currently selected.
+    gEditor.removeEventListener(SourceEditor.EVENTS.BREAKPOINT_CHANGE, onEditorBreakpointAddBackgroundTrap);
     editorBreakpointChanges++;
     ok(false, "breakpoint2 must not be added to the editor");
@@ -214,27 +198,22 @@ function test()
     ok(!aResponseError, "breakpoint2 added without errors");
     is(aBreakpointClient.location.url, gSources.values[0],
-       "breakpoint2 client url is correct");
+      "breakpoint2 client url is correct");
     is(aBreakpointClient.location.line, 5,
-       "breakpoint2 client line is correct");
+      "breakpoint2 client line is correct");
 
     executeSoon(function() {
       ok(aBreakpointClient.actor in gBreakpoints,
-         "breakpoint2 client found in the list of debugger breakpoints");
+        "breakpoint2 client found in the list of debugger breakpoints");
       is(Object.keys(gBreakpoints).length, 1, "one breakpoint in the debugger");
       is(gPane.getBreakpoint(gSources.values[0], 5), aBreakpointClient,
-         "getBreakpoint(locations[0], 5) returns the correct breakpoint");
+        "getBreakpoint(locations[0], 5) returns the correct breakpoint");
 
       // remove the trap listener
-      gEditor.removeEventListener(SourceEditor.EVENTS.BREAKPOINT_CHANGE,
-                                  onEditorBreakpointAddBackgroundTrap);
-
-      gEditor.addEventListener(SourceEditor.EVENTS.BREAKPOINT_CHANGE,
-                               onEditorBreakpointAddSwitch);
-      gEditor.addEventListener(SourceEditor.EVENTS.TEXT_CHANGED,
-                               onEditorTextChanged);
+      gEditor.removeEventListener(SourceEditor.EVENTS.BREAKPOINT_CHANGE, onEditorBreakpointAddBackgroundTrap);
 
       info("switch to the second script");
-
-      gSources._container.selectedIndex = 0;
+      gEditor.addEventListener(SourceEditor.EVENTS.BREAKPOINT_CHANGE, onEditorBreakpointAddSwitch);
+      gEditor.addEventListener(SourceEditor.EVENTS.TEXT_CHANGED, onEditorTextChanged);
+      gSources.selectedIndex = 0;
     });
   }
@@ -242,6 +221,5 @@ function test()
   function onEditorBreakpointAddSwitch(aEvent)
   {
-    gEditor.removeEventListener(SourceEditor.EVENTS.BREAKPOINT_CHANGE,
-                                onEditorBreakpointAddSwitch);
+    gEditor.removeEventListener(SourceEditor.EVENTS.BREAKPOINT_CHANGE, onEditorBreakpointAddSwitch);
     editorBreakpointChanges++;
 
@@ -257,18 +235,20 @@ function test()
   function onEditorTextChanged()
   {
-    gEditor.removeEventListener(SourceEditor.EVENTS.TEXT_CHANGED,
-                                onEditorTextChanged);
+    // Wait for the actual text to be shown.
+    if (gDebugger.editor.getText() == gDebugger.L10N.getStr("loadingText")) {
+      return;
+    }
+    // The requested source text has been shown, remove the event listener.
+    gEditor.removeEventListener(SourceEditor.EVENTS.TEXT_CHANGED, onEditorTextChanged);
 
     is(gEditor.getText().indexOf("debugger"), -1,
-       "The second script is no longer displayed.");
+      "The second script is no longer displayed.");
 
     isnot(gEditor.getText().indexOf("firstCall"), -1,
-          "The first script is displayed.");
+      "The first script is displayed.");
 
     executeSoon(function() {
       info("remove the second breakpoint using the mouse");
-
-      gEditor.addEventListener(SourceEditor.EVENTS.BREAKPOINT_CHANGE,
-                               onEditorBreakpointRemoveSecond);
+      gEditor.addEventListener(SourceEditor.EVENTS.BREAKPOINT_CHANGE, onEditorBreakpointRemoveSecond);
 
       let iframe = gEditor.editorElement;
@@ -283,6 +263,5 @@ function test()
   function onEditorBreakpointRemoveSecond(aEvent)
   {
-    gEditor.removeEventListener(SourceEditor.EVENTS.BREAKPOINT_CHANGE,
-                                onEditorBreakpointRemoveSecond);
+    gEditor.removeEventListener(SourceEditor.EVENTS.BREAKPOINT_CHANGE, onEditorBreakpointRemoveSecond);
     editorBreakpointChanges++;
 
@@ -292,5 +271,6 @@ function test()
     is(aEvent.removed[0].line, 4, "editor breakpoint line is correct");
 
-    is(gEditor.getBreakpoints().length, 0, "editor.getBreakpoints().length is correct");
+    is(gEditor.getBreakpoints().length, 0,
+      "editor.getBreakpoints().length is correct");
 
     executeSoon(function() {
@@ -306,5 +286,5 @@ function test()
     is(Object.keys(gBreakpoints).length, 0, "no breakpoint in the debugger");
     ok(!gPane.getBreakpoint(gSources.values[0], 5),
-       "getBreakpoint(locations[0], 5) returns no breakpoint");
+      "getBreakpoint(locations[0], 5) returns no breakpoint");
   }
 
@@ -318,6 +298,6 @@ function test()
     gDebuggee = null;
     gDebugger = null;
+    gEditor = null;
     gSources = null;
-    gEditor = null;
     gBreakpoints = null;
   });
diff --git a/browser/devtools/debugger/test/browser_dbg_bug723071_editor-breakpoints-pane.js b/browser/devtools/debugger/test/browser_dbg_bug723071_editor-breakpoints-pane.js
--- a/browser/devtools/debugger/test/browser_dbg_bug723071_editor-breakpoints-pane.js
+++ b/browser/devtools/debugger/test/browser_dbg_bug723071_editor-breakpoints-pane.js
@@ -13,7 +13,7 @@ let gTab = null;
 let gDebuggee = null;
 let gDebugger = null;
-let gScripts = null;
+let gEditor = null;
+let gSources = null;
 let gBreakpoints = null;
-let gBreakpointsContainer = null;
 let gBreakpointsParent = null;
 let gBreakpointsList = null;
@@ -66,33 +66,33 @@ function test()
   function performTest()
   {
-    gScripts = gDebugger.DebuggerView.Sources;
+    gEditor = gDebugger.editor;
+    gSources = gDebugger.DebuggerView.Sources;
+    gBreakpoints = gPane.getAllBreakpoints();
 
     is(gDebugger.DebuggerController.activeThread.state, "paused",
       "Should only be getting stack frames while paused.");
 
-    is(gScripts._container.itemCount, 2, "Found the expected number of scripts.");
+    is(gSources.itemCount, 2,
+      "Found the expected number of scripts.");
 
-    let editor = gDebugger.editor;
+    isnot(gEditor.getText().indexOf("debugger"), -1,
+      "The correct script was loaded initially.");
 
-    isnot(editor.getText().indexOf("debugger"), -1,
-          "The correct script was loaded initially.");
-    isnot(gScripts.selectedValue, gScripts.values[0],
-          "the correct script is selected");
+    isnot(gSources.selectedValue, gSources.values[0],
+      "The correct script is selected");
 
-    gBreakpoints = gPane.getAllBreakpoints();
-    is(Object.keys(gBreakpoints), 0, "no breakpoints");
+    is(Object.keys(gBreakpoints).length, 0, "no breakpoints");
     ok(!gPane.getBreakpoint("chocolate", 3), "getBreakpoint('chocolate', 3) returns falsey");
+    is(gEditor.getBreakpoints().length, 0, "no breakpoints in the editor");
 
-    is(editor.getBreakpoints().length, 0, "no breakpoints in the editor");
+    gBreakpointsParent = gSources._container._parent;
+    gBreakpointsList = gSources._container._list;
 
-    gBreakpointsContainer = gDebugger.DebuggerView.Breakpoints;
-    gBreakpointsParent = gBreakpointsContainer._container._parent;
-    gBreakpointsList = gBreakpointsContainer._container._list;
-
-    is(gBreakpointsParent.querySelectorAll(".list-item.empty").length, 1,
-      "The breakpoints pane should be empty, but showing a " +
-      "'no breakpoints' information message.");
-    is(gBreakpointsList.childNodes.length, 0,
-       "Found junk in the breakpoints container.");
+    is(gBreakpointsParent.childNodes.length, 1, // one sources list
+      "Found junk in the breakpoints container.");
+    is(gBreakpointsList.childNodes.length, 1, // one sources group
+      "Found junk in the breakpoints container.");
+    is(gBreakpointsList.querySelectorAll(".dbg-breakpoint").length, 0,
+      "No breakpoints should be visible at this point.");
 
     addBreakpoints(function() {
@@ -104,7 +104,10 @@ function test()
         "Shouldn't have removed anything so far.");
 
-      is(gBreakpointsList.childNodes.length,
-         gBreakpointsParent.querySelectorAll(".dbg-breakpoint").length,
-         "Found junk in the breakpoints container.");
+      is(gBreakpointsParent.childNodes.length, 1, // one sources list
+        "Found junk in the breakpoints container.");
+      is(gBreakpointsList.childNodes.length, 1, // one sources group
+        "Found junk in the breakpoints container.");
+      is(gBreakpointsList.querySelectorAll(".dbg-breakpoint").length, 3,
+        "3 breakpoints should be visible at this point.");
 
       disableBreakpoints(function() {
@@ -116,7 +119,11 @@ function test()
           "Shouldn't have removed anything so far.");
 
-        is(gBreakpointsList.childNodes.length, breakpointsAdded,
+        is(gBreakpointsParent.childNodes.length, 1, // one sources list
+          "Found junk in the breakpoints container.");
+        is(gBreakpointsList.childNodes.length, 1, // one sources group
+          "Found junk in the breakpoints container.");
+        is(gBreakpointsList.querySelectorAll(".dbg-breakpoint").length, breakpointsAdded,
           "Should have the same number of breakpoints in the pane.");
-        is(gBreakpointsList.childNodes.length, breakpointsDisabled,
+        is(gBreakpointsList.querySelectorAll(".dbg-breakpoint").length, breakpointsDisabled,
           "Should have the same number of disabled breakpoints.");
 
@@ -129,10 +136,11 @@ function test()
             "Shouldn't have removed anything so far.");
 
-          is(gBreakpointsList.childNodes.length, breakpointsAdded,
+          is(gBreakpointsParent.childNodes.length, 1, // one sources list
+            "Found junk in the breakpoints container.");
+          is(gBreakpointsList.childNodes.length, 1, // one sources group
+            "Found junk in the breakpoints container.");
+          is(gBreakpointsList.querySelectorAll(".dbg-breakpoint").length, breakpointsAdded,
             "Since half of the breakpoints already existed, but disabled, " +
             "only half of the added breakpoints are actually in the pane.");
-          is(gBreakpointsList.childNodes.length,
-             gBreakpointsParent.querySelectorAll(".dbg-breakpoint").length,
-             "Found junk in the breakpoints container.");
 
           removeBreakpoints(function() {
@@ -140,9 +148,10 @@ function test()
               "Should have 3 removed breakpoints.");
 
-            is(gBreakpointsParent.querySelectorAll(".list-item.empty").length, 1,
-              "The breakpoints pane should be empty, but showing a " +
-              "'no breakpoints' information message.");
-            is(gBreakpointsList.childNodes.length, 0,
+            is(gBreakpointsParent.childNodes.length, 1, // one sources list
                "Found junk in the breakpoints container.");
+            is(gBreakpointsList.childNodes.length, 1, // one sources group
+               "Found junk in the breakpoints container.");
+            is(gBreakpointsList.querySelectorAll(".dbg-breakpoint").length, 0,
+               "No breakpoints should be visible at this point.");
 
             executeSoon(function() {
@@ -165,15 +174,15 @@ function test()
       {
         line = 6;
-        gPane.addBreakpoint({url: gScripts.selectedValue, line: line},
+        gPane.addBreakpoint({url: gSources.selectedValue, line: line},
           function(cl, err) {
           onBreakpointAdd.call({ increment: increment, line: line }, cl, err);
 
           line = 7;
-          gPane.addBreakpoint({url: gScripts.selectedValue, line: line},
+          gPane.addBreakpoint({url: gSources.selectedValue, line: line},
             function(cl, err) {
             onBreakpointAdd.call({ increment: increment, line: line }, cl, err);
 
             line = 9;
-            gPane.addBreakpoint({url: gScripts.selectedValue, line: line},
+            gPane.addBreakpoint({url: gSources.selectedValue, line: line},
               function(cl, err) {
               onBreakpointAdd.call({ increment: increment, line: line }, cl, err);
@@ -190,6 +199,7 @@ function test()
     function disableBreakpoints(callback)
     {
-      let nodes = Array.slice(gBreakpointsList.childNodes);
+      let nodes = Array.slice(gBreakpointsList.querySelectorAll(".dbg-breakpoint"));
       info("Nodes to disable: " + breakpointsAdded);
+
       is(nodes.length, breakpointsAdded,
         "The number of nodes to disable is incorrect.");
@@ -198,8 +208,10 @@ function test()
         info("Disabling breakpoint: " + bkp.id);
 
-        let item = gBreakpointsContainer.getItemForElement(bkp);
-        let { sourceLocation: url, lineNumber: line } = item.attachment;
+        let sourceItem = gSources.getItemForElement(bkp);
+        let breakpointItem = gSources.getItemForElement.call(sourceItem, bkp);
+        let { sourceLocation: url, lineNumber: line } = breakpointItem.attachment;
+        info("Found data: " + breakpointItem.attachment.toSource());
 
-        gDebugger.DebuggerView.Breakpoints.disableBreakpoint(url, line, { callback: function() {
+        gSources.disableBreakpoint(url, line, { callback: function() {
           if (++breakpointsDisabled !== breakpointsAdded) {
             return;
@@ -214,6 +226,7 @@ function test()
     function removeBreakpoints(callback)
     {
-      let nodes = Array.slice(gBreakpointsList.childNodes);
+      let nodes = Array.slice(gBreakpointsList.querySelectorAll(".dbg-breakpoint"));
       info("Nodes to remove: " + breakpointsAdded);
+
       is(nodes.length, breakpointsAdded,
         "The number of nodes to remove is incorrect.");
@@ -222,8 +235,9 @@ function test()
         info("Removing breakpoint: " + bkp.id);
 
-        let item = gBreakpointsContainer.getItemForElement(bkp);
-        let { sourceLocation: url, lineNumber: line } = item.attachment;
+        let sourceItem = gSources.getItemForElement(bkp);
+        let breakpointItem = gSources.getItemForElement.call(sourceItem, bkp);
+        let { sourceLocation: url, lineNumber: line } = breakpointItem.attachment;
+        info("Found data: " + breakpointItem.attachment.toSource());
 
-        gDebugger.DebuggerView.Breakpoints.removeBreakpoint(url, line);
         gPane.removeBreakpoint(gPane.getBreakpoint(url, line), function() {
           if (++breakpointsRemoved !== breakpointsAdded) {
@@ -243,11 +257,11 @@ function test()
       }
 
-      is(gBreakpointsList.childNodes.length, breakpointsAdded, this.increment
-        ? "Should have added a breakpoint in the pane."
-        : "Should have the same number of breakpoints in the pane.");
+      is(gBreakpointsList.querySelectorAll(".dbg-breakpoint").length, breakpointsAdded,
+        this.increment ? "Should have added a breakpoint in the pane."
+                       : "Should have the same number of breakpoints in the pane.");
 
       let id = "breakpoint-" + aBreakpointClient.actor;
       let bkp = gDebugger.document.getElementById(id);
-      let info = bkp.getElementsByClassName("dbg-breakpoint-info")[0];
+      let line = bkp.getElementsByClassName("dbg-breakpoint-line")[0];
       let text = bkp.getElementsByClassName("dbg-breakpoint-text")[0];
       let check = bkp.querySelector("checkbox");
@@ -255,26 +269,16 @@ function test()
       is(bkp.id, id,
         "Breakpoint element " + id + " found successfully.");
-      is(info.getAttribute("value"), getExpectedBreakpointInfo(this.line),
+      is(line.getAttribute("value"), this.line,
         "The expected information wasn't found in the breakpoint element.");
-      is(text.getAttribute("value"), getExpectedLineText(this.line).trim(),
+      is(text.getAttribute("value"), gDebugger.DebuggerView.getEditorLine(this.line - 1).trim(),
         "The expected line text wasn't found in the breakpoint element.");
       is(check.getAttribute("checked"), "true",
         "The breakpoint enable checkbox is checked as expected.");
     }
-
-    function getExpectedBreakpointInfo(line) {
-      let url = gDebugger.DebuggerView.Sources.selectedValue;
-      let label = gDebugger.SourceUtils.getSourceLabel(url);
-      return label + ":" + line;
-    }
-
-    function getExpectedLineText(line) {
-      return gDebugger.DebuggerView.getEditorLine(line - 1);
-    }
   }
 
   function finalCheck() {
     is(Object.keys(gBreakpoints).length, 0, "no breakpoint in the debugger");
-    ok(!gPane.getBreakpoint(gScripts.values[0], 5),
+    ok(!gPane.getBreakpoint(gSources.values[0], 5),
        "getBreakpoint(locations[0], 5) returns no breakpoint");
   }
@@ -289,7 +293,7 @@ function test()
     gDebuggee = null;
     gDebugger = null;
-    gScripts = null;
+    gEditor = null;
+    gSources = null;
     gBreakpoints = null;
-    gBreakpointsContainer = null;
     gBreakpointsParent = null;
     gBreakpointsList = null;
diff --git a/browser/devtools/debugger/test/browser_dbg_bug727429_watch-expressions-01.js b/browser/devtools/debugger/test/browser_dbg_bug727429_watch-expressions-01.js
--- a/browser/devtools/debugger/test/browser_dbg_bug727429_watch-expressions-01.js
+++ b/browser/devtools/debugger/test/browser_dbg_bug727429_watch-expressions-01.js
@@ -23,5 +23,5 @@ function test()
     gWatch = gDebugger.DebuggerView.WatchExpressions;
 
-    gDebugger.DebuggerView.togglePanes({ visible: true, animated: false });
+    gDebugger.DebuggerView.toggleInstrumentsPane({ visible: true, animated: false });
     performTest();
   });
@@ -70,5 +70,5 @@ function test()
 
     EventUtils.sendMouseEvent({ type: "click" },
-      gWatch.getItemAtIndex(0).target.closeNode,
+      gWatch.getItemAtIndex(0).attachment.closeNode,
       gDebugger);
 
@@ -82,5 +82,5 @@ function test()
 
     EventUtils.sendMouseEvent({ type: "click" },
-      gWatch.getItemAtIndex(0).target.closeNode,
+      gWatch.getItemAtIndex(0).attachment.closeNode,
       gDebugger);
 
@@ -92,5 +92,5 @@ function test()
 
     EventUtils.sendMouseEvent({ type: "click" },
-      gWatch.getItemAtIndex(0).target.closeNode,
+      gWatch.getItemAtIndex(0).attachment.closeNode,
       gDebugger);
 
@@ -170,9 +170,9 @@ function test()
       "The correct watch expression element was accessed (3)");
 
-    is(element.arrowNode.hidden, false,
+    is(gWatch.getItemForElement(element).attachment.arrowNode.hidden, false,
       "The arrow node should be visible");
-    is(element.closeNode.hidden, false,
+    is(gWatch.getItemForElement(element).attachment.closeNode.hidden, false,
       "The close button should be visible");
-    is(element.inputNode.getAttribute("focused"), "true",
+    is(gWatch.getItemForElement(element).attachment.inputNode.getAttribute("focused"), "true",
       "The textbox input should be focused");
 
diff --git a/browser/devtools/debugger/test/browser_dbg_bug727429_watch-expressions-02.js b/browser/devtools/debugger/test/browser_dbg_bug727429_watch-expressions-02.js
--- a/browser/devtools/debugger/test/browser_dbg_bug727429_watch-expressions-02.js
+++ b/browser/devtools/debugger/test/browser_dbg_bug727429_watch-expressions-02.js
@@ -25,5 +25,5 @@ function test()
     gVars = gDebugger.DebuggerView.Variables;
 
-    gDebugger.DebuggerView.togglePanes({ visible: true, animated: false });
+    gDebugger.DebuggerView.toggleInstrumentsPane({ visible: true, animated: false });
     addExpressions();
     performTest();
diff --git a/browser/devtools/debugger/test/browser_dbg_bug731394_editor-contextmenu.js b/browser/devtools/debugger/test/browser_dbg_bug731394_editor-contextmenu.js
--- a/browser/devtools/debugger/test/browser_dbg_bug731394_editor-contextmenu.js
+++ b/browser/devtools/debugger/test/browser_dbg_bug731394_editor-contextmenu.js
@@ -15,8 +15,4 @@ let gDebugger = null;
 function test()
 {
-  let tempScope = {};
-  Cu.import("resource:///modules/source-editor.jsm", tempScope);
-  let SourceEditor = tempScope.SourceEditor;
-
   let contextMenu = null;
   let scriptShown = false;
@@ -60,15 +56,16 @@ function test()
   function performTest()
   {
-    let scripts = gDebugger.DebuggerView.Sources._container;
+    let scripts = gDebugger.DebuggerView.Sources;
+    let editor = gDebugger.editor;
 
     is(gDebugger.DebuggerController.activeThread.state, "paused",
       "Should only be getting stack frames while paused.");
 
-    is(scripts.itemCount, 2, "Found the expected number of scripts.");
-
-    let editor = gDebugger.editor;
+    is(scripts.itemCount, 2,
+      "Found the expected number of scripts.");
 
     isnot(editor.getText().indexOf("debugger"), -1,
-          "The correct script was loaded initially.");
+      "The correct script was loaded initially.");
+
     isnot(editor.getText().indexOf("\u263a"), -1,
       "Unicode characters are converted correctly.");
@@ -106,8 +103,8 @@ function test()
                     "cmd_gotoLine": false, "cmd_copy": false,
                     "se-cmd-selectAll": false};
+
     for (let id in commands) {
-      let element = document.getElementById(id);
-      is(element.hasAttribute("disabled"), commands[id],
-         id + " hasAttribute('disabled') check");
+      is(document.getElementById(id).hasAttribute("disabled"), commands[id],
+        id + " hasAttribute('disabled') check");
     }
 
diff --git a/browser/devtools/debugger/test/browser_dbg_bug737803_editor_actual_location.js b/browser/devtools/debugger/test/browser_dbg_bug737803_editor_actual_location.js
--- a/browser/devtools/debugger/test/browser_dbg_bug737803_editor_actual_location.js
+++ b/browser/devtools/debugger/test/browser_dbg_bug737803_editor_actual_location.js
@@ -13,13 +13,9 @@ let gTab = null;
 let gDebuggee = null;
 let gDebugger = null;
-let gScripts = null;
+let gSources = null;
 let gEditor = null;
 let gBreakpoints = null;
 
 function test() {
-  let tempScope = {};
-  Cu.import("resource:///modules/source-editor.jsm", tempScope);
-  let SourceEditor = tempScope.SourceEditor;
-
   let scriptShown = false;
   let framesAdded = false;
@@ -60,5 +56,5 @@ function test() {
 
   function performTest() {
-    gScripts = gDebugger.DebuggerView.Sources;
+    gSources = gDebugger.DebuggerView.Sources;
     gEditor = gDebugger.editor;
     gBreakpoints = gPane.getAllBreakpoints();
@@ -68,5 +64,5 @@ function test() {
       onEditorBreakpointAdd);
 
-    let location = { url: gScripts.selectedValue, line: 4 };
+    let location = { url: gSources.selectedValue, line: 4 };
     executeSoon(function () {
       gPane.addBreakpoint(location, onBreakpointAdd);
@@ -78,5 +74,5 @@ function test() {
 
   function onBreakpointAdd(aBpClient) {
-    is(aBpClient.location.url, gScripts.selectedValue, "URL is the same");
+    is(aBpClient.location.url, gSources.selectedValue, "URL is the same");
     is(aBpClient.location.line, 6, "Line number is new");
     is(aBpClient.requestedLocation.line, 4, "Requested location is correct");
@@ -93,9 +89,9 @@ function test() {
       "There is only one breakpoint in the editor");
 
-    ok(!gPane.getBreakpoint(gScripts.selectedValue, 4),
+    ok(!gPane.getBreakpoint(gSources.selectedValue, 4),
       "There are no breakpoints on an invalid line");
 
-    let br = gPane.getBreakpoint(gScripts.selectedValue, 6);
-    is(br.location.url, gScripts.selectedValue, "URL is correct");
+    let br = gPane.getBreakpoint(gSources.selectedValue, 6);
+    is(br.location.url, gSources.selectedValue, "URL is correct");
     is(br.location.line, 6, "Line number is correct");
 
@@ -119,5 +115,5 @@ function test() {
     gDebuggee = null;
     gDebugger = null;
-    gScripts = null;
+    gSources = null;
     gEditor = null;
     gBreakpoints = null;
diff --git a/browser/devtools/debugger/test/browser_dbg_bug740825_conditional-breakpoints-01.js b/browser/devtools/debugger/test/browser_dbg_bug740825_conditional-breakpoints-01.js
--- a/browser/devtools/debugger/test/browser_dbg_bug740825_conditional-breakpoints-01.js
+++ b/browser/devtools/debugger/test/browser_dbg_bug740825_conditional-breakpoints-01.js
@@ -12,8 +12,7 @@ let gTab = null;
 let gDebuggee = null;
 let gDebugger = null;
-let gScripts = null;
 let gEditor = null;
+let gSources = null;
 let gBreakpoints = null;
-let gBreakpointsPane = null;
 
 requestLongerTimeout(2);
@@ -31,8 +30,6 @@ function test()
     gPane = aPane;
     gDebugger = gPane.panelWin;
-    gBreakpoints = gDebugger.DebuggerController.Breakpoints;
-    gBreakpointsPane = gDebugger.DebuggerView.Breakpoints;
 
-    gDebugger.DebuggerView.togglePanes({ visible: true, animated: false });
+    gDebugger.DebuggerView.toggleInstrumentsPane({ visible: true, animated: false });
     resumed = true;
 
@@ -66,22 +63,22 @@ function test()
   function performTest()
   {
-    gScripts = gDebugger.DebuggerView.Sources;
+    gEditor = gDebugger.editor;
+    gSources = gDebugger.DebuggerView.Sources;
+    gBreakpoints = gPane.getAllBreakpoints();
 
     is(gDebugger.DebuggerController.activeThread.state, "paused",
       "Should only be getting stack frames while paused.");
 
-    is(gScripts._container.itemCount, 1, "Found the expected number of scripts.");
-
-    gEditor = gDebugger.editor;
+    is(gSources.itemCount, 1,
+      "Found the expected number of scripts.");
 
     isnot(gEditor.getText().indexOf("ermahgerd"), -1,
-          "The correct script was loaded initially.");
-    is(gScripts.selectedValue, gScripts.values[0],
-          "The correct script is selected");
+      "The correct script was loaded initially.");
 
-    gBreakpoints = gPane.getAllBreakpoints();
+    is(gSources.selectedValue, gSources.values[0],
+      "The correct script is selected");
+
     is(Object.keys(gBreakpoints).length, 13, "thirteen breakpoints");
     ok(!gPane.getBreakpoint("foo", 3), "getBreakpoint('foo', 3) returns falsey");
-
     is(gEditor.getBreakpoints().length, 13, "thirteen breakpoints in the editor");
 
@@ -91,45 +88,45 @@ function test()
   function test1(callback)
   {
-    resumeAndTestBreakpoint(gScripts.selectedValue, 14, test2);
+    resumeAndTestBreakpoint(gSources.selectedValue, 14, test2);
   }
 
   function test2(callback)
   {
-    resumeAndTestBreakpoint(gScripts.selectedValue, 15, test3);
+    resumeAndTestBreakpoint(gSources.selectedValue, 15, test3);
   }
 
   function test3(callback)
   {
-    resumeAndTestBreakpoint(gScripts.selectedValue, 16, test4);
+    resumeAndTestBreakpoint(gSources.selectedValue, 16, test4);
   }
 
   function test4(callback)
   {
-    resumeAndTestBreakpoint(gScripts.selectedValue, 17, test5);
+    resumeAndTestBreakpoint(gSources.selectedValue, 17, test5);
   }
 
   function test5(callback)
   {
-    resumeAndTestBreakpoint(gScripts.selectedValue, 18, test6);
+    resumeAndTestBreakpoint(gSources.selectedValue, 18, test6);
   }
 
   function test6(callback)
   {
-    resumeAndTestBreakpoint(gScripts.selectedValue, 19, test7);
+    resumeAndTestBreakpoint(gSources.selectedValue, 19, test7);
   }
 
   function test7(callback)
   {
-    resumeAndTestBreakpoint(gScripts.selectedValue, 21, test8);
+    resumeAndTestBreakpoint(gSources.selectedValue, 21, test8);
   }
 
   function test8(callback)
   {
-    resumeAndTestBreakpoint(gScripts.selectedValue, 22, test9);
+    resumeAndTestBreakpoint(gSources.selectedValue, 22, test9);
   }
 
   function test9(callback)
   {
-    resumeAndTestBreakpoint(gScripts.selectedValue, 23, test10);
+    resumeAndTestBreakpoint(gSources.selectedValue, 23, test10);
   }
 
@@ -139,12 +136,16 @@ function test()
       gDebugger.removeEventListener("Debugger:AfterFramesCleared", listener, true);
 
-      is(gBreakpointsPane.selectedItem, null,
-        "There should be no selected breakpoint in the breakpoints pane.")
-      is(gBreakpointsPane._popupShown, false,
+      isnot(gSources.selectedItem, null,
+        "There should be a selected script in the scripts pane.")
+      is(gSources.selectedBreakpoint, null,
+        "There should be no selected breakpoint in the scripts pane.")
+      is(gSources.selectedClient, null,
+        "There should be no selected client in the scripts pane.");
+      is(gSources._conditionalPopupVisible, false,
         "The breakpoint conditional expression popup should not be shown.");
 
-      is(gDebugger.DebuggerView.StackFrames.visibleItems.length, 0,
+      is(gDebugger.DebuggerView.StackFrames._container._list.querySelectorAll(".dbg-stackframe").length, 0,
         "There should be no visible stackframes.");
-      is(gDebugger.DebuggerView.Breakpoints.visibleItems.length, 13,
+      is(gDebugger.DebuggerView.Sources._container._list.querySelectorAll(".dbg-breakpoint").length, 13,
         "There should be thirteen visible breakpoints.");
 
@@ -159,5 +160,5 @@ function test()
     resume(line, function() {
       waitForCaretPos(line - 1, function() {
-        testBreakpoint(gBreakpointsPane.selectedItem, gBreakpointsPane.selectedClient, url, line, true);
+        testBreakpoint(gSources.selectedBreakpoint, gSources.selectedClient, url, line, true);
         callback();
       });
@@ -167,13 +168,13 @@ function test()
   function testBreakpoint(aBreakpointItem, aBreakpointClient, url, line, editor)
   {
-    is(aBreakpointItem.attachment.sourceLocation, gScripts.selectedValue,
+    is(aBreakpointItem.attachment.sourceLocation, gSources.selectedValue,
       "The breakpoint on line " + line + " wasn't added on the correct source.");
     is(aBreakpointItem.attachment.lineNumber, line,
       "The breakpoint on line " + line + " wasn't found.");
-    is(aBreakpointItem.attachment.enabled, true,
+    is(!!aBreakpointItem.attachment.disabled, false,
       "The breakpoint on line " + line + " should be enabled.");
-    is(aBreakpointItem.attachment.isConditional, true,
-      "The breakpoint on line " + line + " should be conditional.");
-    is(gBreakpointsPane._popupShown, false,
+    is(!!aBreakpointItem.attachment.openPopupFlag, false,
+      "The breakpoint on line " + line + " should not open a popup.");
+    is(gSources._conditionalPopupVisible, false,
       "The breakpoint conditional expression popup should not be shown.");
 
@@ -254,11 +255,12 @@ function test()
   function testReload()
   {
+    info("Testing reload...");
+
     function _get(url, line) {
       return [
-        gDebugger.DebuggerView.Breakpoints.getBreakpoint(url, line),
+        gDebugger.DebuggerView.Sources.getBreakpoint(url, line),
         gDebugger.DebuggerController.Breakpoints.getBreakpoint(url, line),
         url,
         line,
-        false
       ];
     }
@@ -268,18 +270,22 @@ function test()
 
       waitForBreakpoints(13, function() {
-        testBreakpoint.apply(this, _get(gScripts.selectedValue, 14));
-        testBreakpoint.apply(this, _get(gScripts.selectedValue, 15));
-        testBreakpoint.apply(this, _get(gScripts.selectedValue, 16));
-        testBreakpoint.apply(this, _get(gScripts.selectedValue, 17));
-        testBreakpoint.apply(this, _get(gScripts.selectedValue, 18));
-        testBreakpoint.apply(this, _get(gScripts.selectedValue, 19));
-        testBreakpoint.apply(this, _get(gScripts.selectedValue, 21));
-        testBreakpoint.apply(this, _get(gScripts.selectedValue, 22));
-        testBreakpoint.apply(this, _get(gScripts.selectedValue, 23));
+        testBreakpoint.apply(this, _get(gSources.selectedValue, 14));
+        testBreakpoint.apply(this, _get(gSources.selectedValue, 15));
+        testBreakpoint.apply(this, _get(gSources.selectedValue, 16));
+        testBreakpoint.apply(this, _get(gSources.selectedValue, 17));
+        testBreakpoint.apply(this, _get(gSources.selectedValue, 18));
+        testBreakpoint.apply(this, _get(gSources.selectedValue, 19));
+        testBreakpoint.apply(this, _get(gSources.selectedValue, 21));
+        testBreakpoint.apply(this, _get(gSources.selectedValue, 22));
+        testBreakpoint.apply(this, _get(gSources.selectedValue, 23));
 
-        is(gBreakpointsPane.selectedItem, null,
-          "There should be no selected item in the breakpoints pane.");
-        is(gBreakpointsPane.selectedClient, null,
-          "There should be no selected client in the breakpoints pane.");
+      isnot(gSources.selectedItem, null,
+        "There should be a selected script in the scripts pane.")
+      is(gSources.selectedBreakpoint, null,
+        "There should be no selected breakpoint in the scripts pane.")
+      is(gSources.selectedClient, null,
+        "There should be no selected client in the scripts pane.");
+      is(gSources._conditionalPopupVisible, false,
+        "The breakpoint conditional expression popup should not be shown.");
 
         closeDebuggerAndFinish();
@@ -293,7 +299,7 @@ function test()
   function finalCheck() {
     isnot(gEditor.getText().indexOf("ermahgerd"), -1,
-          "The correct script is still loaded.");
-    is(gScripts.selectedValue, gScripts.values[0],
-          "The correct script is still selected");
+      "The correct script is still loaded.");
+    is(gSources.selectedValue, gSources.values[0],
+      "The correct script is still selected");
   }
 
@@ -325,6 +331,6 @@ function test()
         return closeDebuggerAndFinish();
       }
-      if ((gBreakpointsPane.selectedClient !== expected) &&
-          (gBreakpointsPane.selectedClient || bogusClient).location.line !== expected) {
+      if ((gSources.selectedClient !== expected) &&
+          (gSources.selectedClient || bogusClient).location.line !== expected) {
         return;
       }
@@ -346,5 +352,5 @@ function test()
         return closeDebuggerAndFinish();
       }
-      if (gBreakpointsPane.visibleItems.length != total) {
+      if (gSources._container._list.querySelectorAll(".dbg-breakpoint").length != total) {
         return;
       }
@@ -381,8 +387,7 @@ function test()
     gDebuggee = null;
     gDebugger = null;
-    gScripts = null;
     gEditor = null;
+    gSources = null;
     gBreakpoints = null;
-    gBreakpointsPane = null;
   });
 }
diff --git a/browser/devtools/debugger/test/browser_dbg_bug740825_conditional-breakpoints-02.js b/browser/devtools/debugger/test/browser_dbg_bug740825_conditional-breakpoints-02.js
--- a/browser/devtools/debugger/test/browser_dbg_bug740825_conditional-breakpoints-02.js
+++ b/browser/devtools/debugger/test/browser_dbg_bug740825_conditional-breakpoints-02.js
@@ -12,8 +12,7 @@ let gTab = null;
 let gDebuggee = null;
 let gDebugger = null;
-let gScripts = null;
 let gEditor = null;
+let gSources = null;
 let gBreakpoints = null;
-let gBreakpointsPane = null;
 
 requestLongerTimeout(2);
@@ -21,8 +20,4 @@ requestLongerTimeout(2);
 function test()
 {
-  let tempScope = {};
-  Cu.import("resource:///modules/source-editor.jsm", tempScope);
-  let SourceEditor = tempScope.SourceEditor;
-
   let scriptShown = false;
   let framesAdded = false;
@@ -35,10 +30,8 @@ function test()
     gPane = aPane;
     gDebugger = gPane.panelWin;
-    gBreakpoints = gDebugger.DebuggerController.Breakpoints;
-    gBreakpointsPane = gDebugger.DebuggerView.Breakpoints;
 
     gDebugger.addEventListener("Debugger:SourceShown", onScriptShown);
 
-    gDebugger.DebuggerView.togglePanes({ visible: true, animated: false });
+    gDebugger.DebuggerView.toggleInstrumentsPane({ visible: true, animated: false });
     resumed = true;
 
@@ -70,22 +63,22 @@ function test()
   function performTest()
   {
-    gScripts = gDebugger.DebuggerView.Sources;
+    gEditor = gDebugger.editor;
+    gSources = gDebugger.DebuggerView.Sources;
+    gBreakpoints = gPane.getAllBreakpoints();
 
     is(gDebugger.DebuggerController.activeThread.state, "paused",
       "Should only be getting stack frames while paused.");
 
-    is(gScripts._container.itemCount, 1, "Found the expected number of scripts.");
-
-    gEditor = gDebugger.editor;
+    is(gSources.itemCount, 1,
+      "Found the expected number of scripts.");
 
     isnot(gEditor.getText().indexOf("ermahgerd"), -1,
-          "The correct script was loaded initially.");
-    is(gScripts.selectedValue, gScripts.values[0],
-          "The correct script is selected");
+      "The correct script was loaded initially.");
 
-    gBreakpoints = gPane.getAllBreakpoints();
+    is(gSources.selectedValue, gSources.values[0],
+      "The correct script is selected");
+
     is(Object.keys(gBreakpoints), 0, "no breakpoints");
     ok(!gPane.getBreakpoint("foo", 3), "getBreakpoint('foo', 3) returns falsey");
-
     is(gEditor.getBreakpoints().length, 0, "no breakpoints in the editor");
 
@@ -95,12 +88,12 @@ function test()
   function addBreakpoint1()
   {
-    gPane.addBreakpoint({ url: gScripts.selectedValue, line: 12 });
+    gPane.addBreakpoint({ url: gSources.selectedValue, line: 12 });
 
     waitForBreakpoint(12, function() {
       waitForCaretPos(10, function() {
         waitForPopup(false, function() {
-          testBreakpoint(gBreakpointsPane.selectedItem,
-                         gBreakpointsPane.selectedClient,
-                         gScripts.selectedValue, 12, false, false, false);
+          testBreakpoint(gSources.selectedBreakpoint,
+                         gSources.selectedClient,
+                         gSources.selectedValue, 12, false, false, false);
 
           executeSoon(addBreakpoint2);
@@ -112,13 +105,13 @@ function test()
   function addBreakpoint2()
   {
-    gBreakpointsPane._editorContextMenuLineNumber = 12;
-    gBreakpointsPane._onCmdAddBreakpoint();
+    gSources._editorContextMenuLineNumber = 12;
+    gSources._onCmdAddBreakpoint();
 
     waitForBreakpoint(13, function() {
       waitForCaretPos(12, function() {
         waitForPopup(false, function() {
-          testBreakpoint(gBreakpointsPane.selectedItem,
-                         gBreakpointsPane.selectedClient,
-                         gScripts.selectedValue, 13, false, false, true);
+          testBreakpoint(gSources.selectedBreakpoint,
+                         gSources.selectedClient,
+                         gSources.selectedValue, 13, false, false, true);
 
           executeSoon(modBreakpoint2);
@@ -130,13 +123,13 @@ function test()
   function modBreakpoint2()
   {
-    gBreakpointsPane._editorContextMenuLineNumber = 12;
-    gBreakpointsPane._onCmdAddConditionalBreakpoint();
+    gSources._editorContextMenuLineNumber = 12;
+    gSources._onCmdAddConditionalBreakpoint();
 
     waitForBreakpoint(13, function() {
       waitForCaretPos(12, function() {
         waitForPopup(true, function() {
-          testBreakpoint(gBreakpointsPane.selectedItem,
-                         gBreakpointsPane.selectedClient,
-                         gScripts.selectedValue, 13, true, true, true);
+          testBreakpoint(gSources.selectedBreakpoint,
+                         gSources.selectedClient,
+                         gSources.selectedValue, 13, true, true, true);
 
           executeSoon(addBreakpoint3);
@@ -148,13 +141,13 @@ function test()
   function addBreakpoint3()
   {
-    gBreakpointsPane._editorContextMenuLineNumber = 13;
-    gBreakpointsPane._onCmdAddConditionalBreakpoint();
+    gSources._editorContextMenuLineNumber = 13;
+    gSources._onCmdAddConditionalBreakpoint();
 
     waitForBreakpoint(14, function() {
       waitForCaretPos(13, function() {
         waitForPopup(true, function() {
-          testBreakpoint(gBreakpointsPane.selectedItem,
-                         gBreakpointsPane.selectedClient,
-                         gScripts.selectedValue, 14, true, true, true);
+          testBreakpoint(gSources.selectedBreakpoint,
+                         gSources.selectedClient,
+                         gSources.selectedValue, 14, true, true, true);
 
           executeSoon(modBreakpoint3);
@@ -172,5 +165,5 @@ function test()
       waitForCaretPos(13, function() {
         waitForPopup(false, function() {
-          is(gBreakpointsPane.selectedClient.conditionalExpression, "bamboocha",
+          is(gSources.selectedClient.conditionalExpression, "bamboocha",
             "The bamboocha expression wasn't fonud on the conditional breakpoint");
 
@@ -184,19 +177,27 @@ function test()
   {
     let contextMenu = gDebugger.document.getElementById("sourceEditorContextMenu");
+    info("Testing source editor popup...");
 
     contextMenu.addEventListener("popupshown", function onPopupShown() {
       contextMenu.removeEventListener("popupshown", onPopupShown, false);
+      info("Source editor popup shown...");
 
       contextMenu.addEventListener("popuphidden", function onPopupHidden() {
         contextMenu.removeEventListener("popuphidden", onPopupHidden, false);
+        info("Source editor popup hidden...");
 
+        is(gSources._editorContextMenuLineNumber, 14,
+          "The context menu line number is incorrect after the popup was hidden.");
         executeSoon(addBreakpoint4);
       }, false);
 
-      gBreakpointsPane._editorContextMenuLineNumber = 0;
+      is(gSources._editorContextMenuLineNumber, 14,
+        "The context menu line number is incorrect after the popup was shown.");
       contextMenu.hidePopup();
     }, false);
 
-    gBreakpointsPane._editorContextMenuLineNumber = 14;
+    is(gSources._editorContextMenuLineNumber, -1,
+      "The context menu line number was incorrect before the popup was shown.");
+    gSources._editorContextMenuLineNumber = 14;
     contextMenu.openPopup(gEditor.editorElement, "overlap", 0, 0, true, false);
   }
@@ -205,12 +206,12 @@ function test()
   {
     gEditor.setCaretPosition(14);
-    gBreakpointsPane._onCmdAddBreakpoint();
+    gSources._onCmdAddBreakpoint();
 
     waitForBreakpoint(15, function() {
       waitForCaretPos(14, function() {
         waitForPopup(false, function() {
-          testBreakpoint(gBreakpointsPane.selectedItem,
-                         gBreakpointsPane.selectedClient,
-                         gScripts.selectedValue, 15, false, false, true);
+          testBreakpoint(gSources.selectedBreakpoint,
+                         gSources.selectedClient,
+                         gSources.selectedValue, 15, false, false, true);
 
           executeSoon(delBreakpoint4);
@@ -223,12 +224,12 @@ function test()
   {
     gEditor.setCaretPosition(14);
-    gBreakpointsPane._onCmdAddBreakpoint();
+    gSources._onCmdAddBreakpoint();
 
     waitForBreakpoint(null, function() {
       waitForCaretPos(14, function() {
         waitForPopup(false, function() {
-          is(gBreakpointsPane.selectedItem, null,
+          is(gSources.selectedBreakpoint, null,
             "There should be no selected breakpoint in the breakpoints pane.")
-          is(gBreakpointsPane._popupShown, false,
+          is(gSources._conditionalPopupVisible, false,
             "The breakpoint conditional expression popup should not be shown.");
 
@@ -246,7 +247,7 @@ function test()
       waitForCaretPos(13, function() {
         waitForPopup(false, function() {
-          testBreakpoint(gBreakpointsPane.selectedItem,
-                         gBreakpointsPane.selectedClient,
-                         gScripts.selectedValue, 14, true, false, true);
+          testBreakpoint(gSources.selectedBreakpoint,
+                         gSources.selectedClient,
+                         gSources.selectedValue, 14, false, true, true);
 
           executeSoon(testHighlights1);
@@ -258,11 +259,11 @@ function test()
   function testHighlights1()
   {
-    isnot(gBreakpointsPane.selectedItem, null,
+    isnot(gSources.selectedBreakpoint, null,
       "There should be a selected breakpoint in the breakpoints pane.");
-    is(gBreakpointsPane.selectedItem.attachment.sourceLocation, gScripts.selectedValue,
+    is(gSources.selectedBreakpoint.attachment.sourceLocation, gSources.selectedValue,
       "The selected breakpoint should have the correct location.");
-    is(gBreakpointsPane.selectedItem.attachment.lineNumber, 14,
+    is(gSources.selectedBreakpoint.attachment.lineNumber, 14,
       "The selected breakpoint should have the correct line number.");
-    is(gBreakpointsPane._popupShown, false,
+    is(gSources._conditionalPopupVisible, false,
       "The breakpoint conditional expression popup should not be shown.");
     is(gEditor.getCaretPosition().line, 13,
@@ -275,11 +276,11 @@ function test()
     waitForCaretPos(12, function() {
       waitForPopup(false, function() {
-        isnot(gBreakpointsPane.selectedItem, null,
+        isnot(gSources.selectedBreakpoint, null,
           "There should be a selected breakpoint in the breakpoints pane.");
-        is(gBreakpointsPane.selectedItem.attachment.sourceLocation, gScripts.selectedValue,
+        is(gSources.selectedBreakpoint.attachment.sourceLocation, gSources.selectedValue,
           "The selected breakpoint should have the correct location.");
-        is(gBreakpointsPane.selectedItem.attachment.lineNumber, 13,
+        is(gSources.selectedBreakpoint.attachment.lineNumber, 13,
           "The selected breakpoint should have the correct line number.");
-        is(gBreakpointsPane._popupShown, false,
+        is(gSources._conditionalPopupVisible, false,
           "The breakpoint conditional expression popup should not be shown.");
         is(gEditor.getCaretPosition().line, 12,
@@ -292,11 +293,11 @@ function test()
         waitForCaretPos(11, function() {
           waitForPopup(false, function() {
-            isnot(gBreakpointsPane.selectedItem, null,
+            isnot(gSources.selectedBreakpoint, null,
               "There should be a selected breakpoint in the breakpoints pane.");
-            is(gBreakpointsPane.selectedItem.attachment.sourceLocation, gScripts.selectedValue,
+            is(gSources.selectedBreakpoint.attachment.sourceLocation, gSources.selectedValue,
               "The selected breakpoint should have the correct location.");
-            is(gBreakpointsPane.selectedItem.attachment.lineNumber, 12,
+            is(gSources.selectedBreakpoint.attachment.lineNumber, 12,
               "The selected breakpoint should have the correct line number.");
-            is(gBreakpointsPane._popupShown, false,
+            is(gSources._conditionalPopupVisible, false,
               "The breakpoint conditional expression popup should not be shown.");
             is(gEditor.getCaretPosition().line, 11,
@@ -309,7 +310,7 @@ function test()
             waitForCaretPos(10, function() {
               waitForPopup(false, function() {
-                is(gBreakpointsPane.selectedItem, null,
+                is(gSources.selectedBreakpoint, null,
                   "There should not be a selected breakpoint in the breakpoints pane.");
-                is(gBreakpointsPane._popupShown, false,
+                is(gSources._conditionalPopupVisible, false,
                   "The breakpoint conditional expression popup should not be shown.");
                 is(gEditor.getCaretPosition().line, 10,
@@ -322,7 +323,7 @@ function test()
                 waitForCaretPos(14, function() {
                   waitForPopup(false, function() {
-                    is(gBreakpointsPane.selectedItem, null,
+                    is(gSources.selectedBreakpoint, null,
                       "There should not be a selected breakpoint in the breakpoints pane.");
-                    is(gBreakpointsPane._popupShown, false,
+                    is(gSources._conditionalPopupVisible, false,
                       "The breakpoint conditional expression popup should not be shown.");
                     is(gEditor.getCaretPosition().line, 14,
@@ -345,16 +346,16 @@ function test()
   {
     EventUtils.sendMouseEvent({ type: "click" },
-      gBreakpointsPane._container.getItemAtIndex(2),
+      gSources._container._list.querySelectorAll(".dbg-breakpoint")[2],
       gDebugger);
 
     waitForCaretPos(13, function() {
       waitForPopup(true, function() {
-        isnot(gBreakpointsPane.selectedItem, null,
+        isnot(gSources.selectedBreakpoint, null,
           "There should be a selected breakpoint in the breakpoints pane.");
-        is(gBreakpointsPane.selectedItem.attachment.sourceLocation, gScripts.selectedValue,
+        is(gSources.selectedBreakpoint.attachment.sourceLocation, gSources.selectedValue,
           "The selected breakpoint should have the correct location.");
-        is(gBreakpointsPane.selectedItem.attachment.lineNumber, 14,
+        is(gSources.selectedBreakpoint.attachment.lineNumber, 14,
           "The selected breakpoint should have the correct line number.");
-        is(gBreakpointsPane._popupShown, true,
+        is(gSources._conditionalPopupVisible, true,
           "The breakpoint conditional expression popup should be shown.");
         is(gEditor.getCaretPosition().line, 13,
@@ -364,16 +365,16 @@ function test()
 
         EventUtils.sendMouseEvent({ type: "click" },
-          gBreakpointsPane._container.getItemAtIndex(1),
+          gSources._container._list.querySelectorAll(".dbg-breakpoint")[1],
           gDebugger);
 
         waitForCaretPos(12, function() {
           waitForPopup(true, function() {
-            isnot(gBreakpointsPane.selectedItem, null,
+            isnot(gSources.selectedBreakpoint, null,
               "There should be a selected breakpoint in the breakpoints pane.");
-            is(gBreakpointsPane.selectedItem.attachment.sourceLocation, gScripts.selectedValue,
+            is(gSources.selectedBreakpoint.attachment.sourceLocation, gSources.selectedValue,
               "The selected breakpoint should have the correct location.");
-            is(gBreakpointsPane.selectedItem.attachment.lineNumber, 13,
+            is(gSources.selectedBreakpoint.attachment.lineNumber, 13,
               "The selected breakpoint should have the correct line number.");
-            is(gBreakpointsPane._popupShown, true,
+            is(gSources._conditionalPopupVisible, true,
               "The breakpoint conditional expression popup should be shown.");
             is(gEditor.getCaretPosition().line, 12,
@@ -383,16 +384,16 @@ function test()
 
             EventUtils.sendMouseEvent({ type: "click" },
-              gBreakpointsPane._container.getItemAtIndex(0),
+              gSources._container._list.querySelectorAll(".dbg-breakpoint")[0],
               gDebugger);
 
             waitForCaretPos(11, function() {
               waitForPopup(false, function() {
-                isnot(gBreakpointsPane.selectedItem, null,
+                isnot(gSources.selectedBreakpoint, null,
                   "There should be a selected breakpoint in the breakpoints pane.");
-                is(gBreakpointsPane.selectedItem.attachment.sourceLocation, gScripts.selectedValue,
+                is(gSources.selectedBreakpoint.attachment.sourceLocation, gSources.selectedValue,
                   "The selected breakpoint should have the correct location.");
-                is(gBreakpointsPane.selectedItem.attachment.lineNumber, 12,
+                is(gSources.selectedBreakpoint.attachment.lineNumber, 12,
                   "The selected breakpoint should have the correct line number.");
-                is(gBreakpointsPane._popupShown, false,
+                is(gSources._conditionalPopupVisible, false,
                   "The breakpoint conditional expression popup should be shown.");
                 is(gEditor.getCaretPosition().line, 11,
@@ -412,12 +413,12 @@ function test()
   function delBreakpoint2()
   {
-    gBreakpointsPane._editorContextMenuLineNumber = 12;
-    gBreakpointsPane._onCmdAddBreakpoint();
+    gSources._editorContextMenuLineNumber = 12;
+    gSources._onCmdAddBreakpoint();
 
     waitForBreakpoint(null, function() {
       waitForPopup(false, function() {
-        is(gBreakpointsPane.selectedItem, null,
+        is(gSources.selectedBreakpoint, null,
           "There should be no selected breakpoint in the breakpoints pane.")
-        is(gBreakpointsPane._popupShown, false,
+        is(gSources._conditionalPopupVisible, false,
           "The breakpoint conditional expression popup should not be shown.");
 
@@ -429,12 +430,12 @@ function test()
   function delBreakpoint3()
   {
-    gBreakpointsPane._editorContextMenuLineNumber = 13;
-    gBreakpointsPane._onCmdAddBreakpoint();
+    gSources._editorContextMenuLineNumber = 13;
+    gSources._onCmdAddBreakpoint();
 
     waitForBreakpoint(null, function() {
       waitForPopup(false, function() {
-        is(gBreakpointsPane.selectedItem, null,
+        is(gSources.selectedBreakpoint, null,
           "There should be no selected breakpoint in the breakpoints pane.")
-        is(gBreakpointsPane._popupShown, false,
+        is(gSources._conditionalPopupVisible, false,
           "The breakpoint conditional expression popup should not be shown.");
 
@@ -448,5 +449,4 @@ function test()
     is(Object.keys(gBreakpoints).length, 1, "one breakpoint");
     ok(!gPane.getBreakpoint("foo", 3), "getBreakpoint('foo', 3) returns falsey");
-
     is(gEditor.getBreakpoints().length, 1, "one breakpoint in the editor");
 
@@ -454,16 +454,14 @@ function test()
   }
 
-  function testBreakpoint(aBreakpointItem, aBreakpointClient, url, line, conditional, popup, editor)
+  function testBreakpoint(aBreakpointItem, aBreakpointClient, url, line, popup, conditional, editor)
   {
-    is(aBreakpointItem.attachment.sourceLocation, gScripts.selectedValue,
+    is(aBreakpointItem.attachment.sourceLocation, gSources.selectedValue,
       "The breakpoint on line " + line + " wasn't added on the correct source.");
     is(aBreakpointItem.attachment.lineNumber, line,
       "The breakpoint on line " + line + " wasn't found.");
-    is(aBreakpointItem.attachment.enabled, true,
+    is(!aBreakpointItem.attachment.disabled, true,
       "The breakpoint on line " + line + " should be enabled.");
-    is(aBreakpointItem.attachment.isConditional, conditional,
-      "The breakpoint on line " + line + " should " + (conditional ? "" : "not ") + "be conditional.");
-    is(gBreakpointsPane._popupShown, popup,
-      "The breakpoint conditional expression popup should" + (popup ? "" : "not ") + "be shown.");
+    is(gSources._conditionalPopupVisible, popup,
+      "The breakpoint conditional expression popup should " + (popup ? "" : "not ") + "be shown.");
 
     is(aBreakpointClient.location.url, url,
@@ -505,6 +503,6 @@ function test()
         return closeDebuggerAndFinish();
       }
-      if ((gBreakpointsPane.selectedClient !== expected) &&
-          (gBreakpointsPane.selectedClient || bogusClient).location.line !== expected) {
+      if ((gSources.selectedClient !== expected) &&
+          (gSources.selectedClient || bogusClient).location.line !== expected) {
         return;
       }
@@ -546,5 +544,5 @@ function test()
         return closeDebuggerAndFinish();
       }
-      if (gBreakpointsPane._popupShown != state) {
+      if (gSources._conditionalPopupVisible != state) {
         return;
       }
@@ -556,6 +554,6 @@ function test()
 
   function clear() {
-    gBreakpointsPane._cbTextbox.focus();
-    gBreakpointsPane._cbTextbox.value = "";
+    gSources._cbTextbox.focus();
+    gSources._cbTextbox.value = "";
   }
 
@@ -566,5 +564,5 @@ function test()
 
   function append(text) {
-    gBreakpointsPane._cbTextbox.focus();
+    gSources._cbTextbox.focus();
 
     for (let i = 0; i < text.length; i++) {
@@ -579,8 +577,7 @@ function test()
     gDebuggee = null;
     gDebugger = null;
-    gScripts = null;
     gEditor = null;
+    gSources = null;
     gBreakpoints = null;
-    gBreakpointsPane = null;
   });
 }
diff --git a/browser/devtools/debugger/test/browser_dbg_bug786070_hide_nonenums.js b/browser/devtools/debugger/test/browser_dbg_bug786070_hide_nonenums.js
--- a/browser/devtools/debugger/test/browser_dbg_bug786070_hide_nonenums.js
+++ b/browser/devtools/debugger/test/browser_dbg_bug786070_hide_nonenums.js
@@ -23,6 +23,8 @@ function testNonEnumProperties() {
   gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
     Services.tm.currentThread.dispatch({ run: function() {
+
       let testScope = gDebugger.DebuggerView.Variables.addScope("test-scope");
       let testVar = testScope.addVar("foo");
+
       testVar.addProperties({
         foo: {
@@ -30,5 +32,4 @@ function testNonEnumProperties() {
           enumerable: true
         },
-
         bar: {
           value: "foo",
diff --git a/browser/devtools/debugger/test/browser_dbg_chrome-debugging.js b/browser/devtools/debugger/test/browser_dbg_chrome-debugging.js
--- a/browser/devtools/debugger/test/browser_dbg_chrome-debugging.js
+++ b/browser/devtools/debugger/test/browser_dbg_chrome-debugging.js
@@ -14,4 +14,5 @@ var gNewGlobal = false;
 var gAttached = false;
 var gChromeScript = false;
+
 const DEBUGGER_TAB_URL = EXAMPLE_URL + "browser_dbg_debuggerstatement.html";
 
diff --git a/browser/devtools/debugger/test/browser_dbg_clean-exit.js b/browser/devtools/debugger/test/browser_dbg_clean-exit.js
--- a/browser/devtools/debugger/test/browser_dbg_clean-exit.js
+++ b/browser/devtools/debugger/test/browser_dbg_clean-exit.js
@@ -25,4 +25,5 @@ function testCleanExit() {
   gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
     Services.tm.currentThread.dispatch({ run: function() {
+
       is(gDebugger.DebuggerController.activeThread.paused, true,
         "Should be paused after the debugger statement.");
diff --git a/browser/devtools/debugger/test/browser_dbg_iframes.js b/browser/devtools/debugger/test/browser_dbg_iframes.js
--- a/browser/devtools/debugger/test/browser_dbg_iframes.js
+++ b/browser/devtools/debugger/test/browser_dbg_iframes.js
@@ -8,4 +8,5 @@
 var gPane = null;
 var gTab = null;
+var gDebugger = null;
 
 const TEST_URL = EXAMPLE_URL + "browser_dbg_iframes.html";
@@ -15,5 +16,5 @@ function test() {
     gTab = aTab;
     gPane = aPane;
-    let gDebugger = gPane.panelWin;
+    gDebugger = gPane.panelWin;
 
     is(gDebugger.DebuggerController.activeThread.paused, false,
@@ -63,3 +64,4 @@ registerCleanupFunction(function() {
   gPane = null;
   gTab = null;
+  gDebugger = null;
 });
diff --git a/browser/devtools/debugger/test/browser_dbg_location-changes-blank.js b/browser/devtools/debugger/test/browser_dbg_location-changes-blank.js
--- a/browser/devtools/debugger/test/browser_dbg_location-changes-blank.js
+++ b/browser/devtools/debugger/test/browser_dbg_location-changes-blank.js
@@ -87,5 +87,5 @@ function testLocationChange()
         gDebugger.removeEventListener(aEvent.type, _onEvent);
 
-        is(gDebugger.DebuggerView.Sources.selectedValue, null,
+        is(gDebugger.DebuggerView.Sources.selectedValue, "",
           "There should be no selected script.");
         is(gDebugger.editor.getText().length, 0,
@@ -93,5 +93,5 @@ function testLocationChange()
 
         let menulist = gDebugger.DebuggerView.Sources._container;
-        let noScripts = gDebugger.L10N.getStr("noScriptsText");
+        let noScripts = gDebugger.L10N.getStr("noSourcesText");
         is(menulist.getAttribute("label"), noScripts,
           "The menulist should display a notice that there are no scripts availalble.");
diff --git a/browser/devtools/debugger/test/browser_dbg_location-changes-new.js b/browser/devtools/debugger/test/browser_dbg_location-changes-new.js
--- a/browser/devtools/debugger/test/browser_dbg_location-changes-new.js
+++ b/browser/devtools/debugger/test/browser_dbg_location-changes-new.js
@@ -93,5 +93,5 @@ function testLocationChange()
 
         let menulist = gDebugger.DebuggerView.Sources._container;
-        let noScripts = gDebugger.L10N.getStr("noScriptsText");
+        let noScripts = gDebugger.L10N.getStr("noSourcesText");
         isnot(menulist.getAttribute("label"), noScripts,
           "The menulist should not display a notice that there are no scripts availalble.");
diff --git a/browser/devtools/debugger/test/browser_dbg_pane-collapse.js b/browser/devtools/debugger/test/browser_dbg_pane-collapse.js
--- a/browser/devtools/debugger/test/browser_dbg_pane-collapse.js
+++ b/browser/devtools/debugger/test/browser_dbg_pane-collapse.js
@@ -22,40 +22,41 @@ function test() {
     testPanesState();
 
-    gView.togglePanes({ visible: true, animated: false });
-    testPaneCollapse1();
-    testPaneCollapse2();
-    testPanesStartupPref(closeDebuggerAndFinish);
+    gView.toggleInstrumentsPane({ visible: true, animated: false });
+    testInstrumentsPaneCollapse();
+    testPanesStartupPref();
   });
 }
 
 function testPanesState() {
-  let togglePanesButton =
-    gDebugger.document.getElementById("toggle-panes");
+  let instrumentsPaneToggleButton =
+    gDebugger.document.getElementById("instruments-pane-toggle");
 
-  ok(togglePanesButton.getAttribute("panesHidden"),
-    "The debugger view panes should initially be hidden.");
+  ok(instrumentsPaneToggleButton.getAttribute("toggled"),
+    "The debugger view instruments pane should initially be hidden.");
   is(gDebugger.Prefs.panesVisibleOnStartup, false,
-    "The debugger view panes should initially be preffed as hidden.");
+    "The debugger view instruments pane should initially be preffed as hidden.");
   isnot(gDebugger.DebuggerView.Options._showPanesOnStartupItem.getAttribute("checked"), "true",
     "The options menu item should not be checked.");
 }
 
-function testPaneCollapse1() {
-  let stackframesAndBrekpoints =
-    gDebugger.document.getElementById("stackframes+breakpoints");
-  let togglePanesButton =
-    gDebugger.document.getElementById("toggle-panes");
+function testInstrumentsPaneCollapse() {
+  let instrumentsPane =
+    gDebugger.document.getElementById("instruments-pane");
+  let instrumentsPaneToggleButton =
+    gDebugger.document.getElementById("instruments-pane-toggle");
 
-  let width = parseInt(stackframesAndBrekpoints.getAttribute("width"));
-  is(width, gDebugger.Prefs.stackframesWidth,
-    "The stackframes and breakpoints pane has an incorrect width.");
-  is(stackframesAndBrekpoints.style.marginLeft, "0px",
-    "The stackframes and breakpoints pane has an incorrect left margin.");
-  ok(!stackframesAndBrekpoints.hasAttribute("animated"),
-    "The stackframes and breakpoints pane has an incorrect animated attribute.");
-  ok(!togglePanesButton.getAttribute("panesHidden"),
-    "The stackframes and breakpoints pane should at this point be visible.");
+  let width = parseInt(instrumentsPane.getAttribute("width"));
+  is(width, gDebugger.Prefs.instrumentsWidth,
+    "The instruments pane has an incorrect width.");
+  is(instrumentsPane.style.marginLeft, "0px",
+    "The instruments pane has an incorrect left margin.");
+  is(instrumentsPane.style.marginRight, "0px",
+    "The instruments pane has an incorrect right margin.");
+  ok(!instrumentsPane.hasAttribute("animated"),
+    "The instruments pane has an incorrect animated attribute.");
+  ok(!instrumentsPaneToggleButton.getAttribute("toggled"),
+    "The instruments pane should at this point be visible.");
 
-  gView.togglePanes({ visible: false, animated: true });
+  gView.toggleInstrumentsPane({ visible: false, animated: true });
 
   is(gDebugger.Prefs.panesVisibleOnStartup, false,
@@ -65,14 +66,16 @@ function testPaneCollapse1() {
 
   let margin = -(width + 1) + "px";
-  is(width, gDebugger.Prefs.stackframesWidth,
-    "The stackframes and breakpoints pane has an incorrect width after collapsing.");
-  is(stackframesAndBrekpoints.style.marginLeft, margin,
-    "The stackframes and breakpoints pane has an incorrect left margin after collapsing.");
-  ok(stackframesAndBrekpoints.hasAttribute("animated"),
-    "The stackframes and breakpoints pane has an incorrect attribute after an animated collapsing.");
-  ok(togglePanesButton.hasAttribute("panesHidden"),
-    "The stackframes and breakpoints pane should not be visible after collapsing.");
+  is(width, gDebugger.Prefs.instrumentsWidth,
+    "The instruments pane has an incorrect width after collapsing.");
+  is(instrumentsPane.style.marginLeft, margin,
+    "The instruments pane has an incorrect left margin after collapsing.");
+  is(instrumentsPane.style.marginRight, margin,
+    "The instruments pane has an incorrect right margin after collapsing.");
+  ok(instrumentsPane.hasAttribute("animated"),
+    "The instruments pane has an incorrect attribute after an animated collapsing.");
+  ok(instrumentsPaneToggleButton.hasAttribute("toggled"),
+    "The instruments pane should not be visible after collapsing.");
 
-  gView.togglePanes({ visible: true, animated: false });
+  gView.toggleInstrumentsPane({ visible: true, animated: false });
 
   is(gDebugger.Prefs.panesVisibleOnStartup, false,
@@ -81,77 +84,27 @@ function testPaneCollapse1() {
     "The options menu item should still not be checked.");
 
-  is(width, gDebugger.Prefs.stackframesWidth,
-    "The stackframes and breakpoints pane has an incorrect width after uncollapsing.");
-  is(stackframesAndBrekpoints.style.marginLeft, "0px",
-    "The stackframes and breakpoints pane has an incorrect left margin after uncollapsing.");
-  ok(!stackframesAndBrekpoints.hasAttribute("animated"),
-    "The stackframes and breakpoints pane has an incorrect attribute after an unanimated uncollapsing.");
-  ok(!togglePanesButton.getAttribute("panesHidden"),
-    "The stackframes and breakpoints pane should be visible again after uncollapsing.");
+  is(width, gDebugger.Prefs.instrumentsWidth,
+    "The instruments pane has an incorrect width after uncollapsing.");
+  is(instrumentsPane.style.marginLeft, "0px",
+    "The instruments pane has an incorrect left margin after uncollapsing.");
+  is(instrumentsPane.style.marginRight, "0px",
+    "The instruments pane has an incorrect right margin after uncollapsing.");
+  ok(!instrumentsPane.hasAttribute("animated"),
+    "The instruments pane has an incorrect attribute after an unanimated uncollapsing.");
+  ok(!instrumentsPaneToggleButton.getAttribute("toggled"),
+    "The instruments pane should be visible again after uncollapsing.");
 }
 
-function testPaneCollapse2() {
-  let variablesAndExpressions =
-    gDebugger.document.getElementById("variables+expressions");
-  let togglePanesButton =
-    gDebugger.document.getElementById("toggle-panes");
-
-  let width = parseInt(variablesAndExpressions.getAttribute("width"));
-  is(width, gDebugger.Prefs.variablesWidth,
-    "The variables and expressions pane has an incorrect width.");
-  is(variablesAndExpressions.style.marginRight, "0px",
-    "The variables and expressions pane has an incorrect right margin.");
-  ok(!variablesAndExpressions.hasAttribute("animated"),
-    "The variables and expressions pane has an incorrect animated attribute.");
-  ok(!togglePanesButton.getAttribute("panesHidden"),
-    "The variables and expressions pane should at this point be visible.");
-
-  gView.togglePanes({ visible: false, animated: true });
-
-  is(gDebugger.Prefs.panesVisibleOnStartup, false,
-    "The debugger view panes should still initially be preffed as hidden.");
-  isnot(gDebugger.DebuggerView.Options._showPanesOnStartupItem.getAttribute("checked"), "true",
-    "The options menu item should still not be checked.");
-
-  let margin = -(width + 1) + "px";
-  is(width, gDebugger.Prefs.variablesWidth,
-    "The variables and expressions pane has an incorrect width after collapsing.");
-  is(variablesAndExpressions.style.marginRight, margin,
-    "The variables and expressions pane has an incorrect right margin after collapsing.");
-  ok(variablesAndExpressions.hasAttribute("animated"),
-    "The variables and expressions pane has an incorrect attribute after an animated collapsing.");
-  ok(togglePanesButton.hasAttribute("panesHidden"),
-    "The variables and expressions pane should not be visible after collapsing.");
-
-  gView.togglePanes({ visible: true, animated: false });
-
-  is(gDebugger.Prefs.panesVisibleOnStartup, false,
-    "The debugger view panes should still initially be preffed as hidden.");
-  isnot(gDebugger.DebuggerView.Options._showPanesOnStartupItem.getAttribute("checked"), "true",
-    "The options menu item should still not be checked.");
-
-  is(width, gDebugger.Prefs.variablesWidth,
-    "The variables and expressions pane has an incorrect width after uncollapsing.");
-  is(variablesAndExpressions.style.marginRight, "0px",
-    "The variables and expressions pane has an incorrect right margin after uncollapsing.");
-  ok(!variablesAndExpressions.hasAttribute("animated"),
-    "The variables and expressions pane has an incorrect attribute after an unanimated uncollapsing.");
-  ok(!togglePanesButton.getAttribute("panesHidden"),
-    "The variables and expressions pane should be visible again after uncollapsing.");
-}
-
-function testPanesStartupPref(aCallback) {
-  let stackframesAndBrekpoints =
-    gDebugger.document.getElementById("stackframes+breakpoints");
-  let variablesAndExpressions =
-    gDebugger.document.getElementById("variables+expressions");
-  let togglePanesButton =
-    gDebugger.document.getElementById("toggle-panes");
+function testPanesStartupPref() {
+  let instrumentsPane =
+    gDebugger.document.getElementById("instruments-pane");
+  let instrumentsPaneToggleButton =
+    gDebugger.document.getElementById("instruments-pane-toggle");
 
   is(gDebugger.Prefs.panesVisibleOnStartup, false,
     "The debugger view panes should still initially be preffed as hidden.");
 
-  ok(!togglePanesButton.getAttribute("panesHidden"),
-    "The debugger panes should at this point be visible.");
+  ok(!instrumentsPaneToggleButton.getAttribute("toggled"),
+    "The debugger instruments pane should at this point be visible.");
   is(gDebugger.Prefs.panesVisibleOnStartup, false,
     "The debugger view panes should initially be preffed as hidden.");
@@ -163,6 +116,6 @@ function testPanesStartupPref(aCallback)
 
   executeSoon(function() {
-    ok(!togglePanesButton.getAttribute("panesHidden"),
-      "The debugger panes should at this point be visible.");
+    ok(!instrumentsPaneToggleButton.getAttribute("toggled"),
+      "The debugger instruments pane should at this point be visible.");
     is(gDebugger.Prefs.panesVisibleOnStartup, true,
       "The debugger view panes should now be preffed as visible.");
@@ -174,6 +127,6 @@ function testPanesStartupPref(aCallback)
 
     executeSoon(function() {
-      ok(!togglePanesButton.getAttribute("panesHidden"),
-        "The debugger panes should at this point be visible.");
+      ok(!instrumentsPaneToggleButton.getAttribute("toggled"),
+        "The debugger instruments pane should at this point be visible.");
       is(gDebugger.Prefs.panesVisibleOnStartup, false,
         "The debugger view panes should now be preffed as hidden.");
@@ -182,5 +135,5 @@ function testPanesStartupPref(aCallback)
 
       executeSoon(function() {
-        aCallback();
+        closeDebuggerAndFinish();
       });
     });
diff --git a/browser/devtools/debugger/test/browser_dbg_panesize-inner.js b/browser/devtools/debugger/test/browser_dbg_panesize-inner.js
--- a/browser/devtools/debugger/test/browser_dbg_panesize-inner.js
+++ b/browser/devtools/debugger/test/browser_dbg_panesize-inner.js
@@ -17,6 +17,6 @@ function test() {
       ok(dbg, "We should have a debugger panel.");
 
-      let preferredSfw = Services.prefs.getIntPref("devtools.debugger.ui.stackframes-width");
-      let preferredBpw = Services.prefs.getIntPref("devtools.debugger.ui.variables-width");
+      let preferredSw = Services.prefs.getIntPref("devtools.debugger.ui.panes-sources-width");
+      let preferredIw = Services.prefs.getIntPref("devtools.debugger.ui.panes-instruments-width");
       let someWidth1, someWidth2;
 
@@ -24,35 +24,35 @@ function test() {
         someWidth1 = parseInt(Math.random() * 200) + 100;
         someWidth2 = parseInt(Math.random() * 200) + 100;
-      } while (someWidth1 == preferredSfw ||
-               someWidth2 == preferredBpw)
+      } while (someWidth1 == preferredSw ||
+               someWidth2 == preferredIw)
 
       let someWidth1 = parseInt(Math.random() * 200) + 100;
       let someWidth2 = parseInt(Math.random() * 200) + 100;
 
-      info("Preferred stackframes width: " + preferredSfw);
-      info("Preferred variables width: " + preferredBpw);
-      info("Generated stackframes width: " + someWidth1);
-      info("Generated variables width: " + someWidth2);
+      info("Preferred sources width: " + preferredSw);
+      info("Preferred instruments width: " + preferredIw);
+      info("Generated sources width: " + someWidth1);
+      info("Generated instruments width: " + someWidth2);
 
       let content = dbg.panelWin;
-      let stackframes;
-      let variables;
+      let sources;
+      let instruments;
 
       wait_for_connect_and_resume(function() {
-        ok(content.Prefs.stackframesWidth,
-          "The debugger preferences should have a saved stackframesWidth value.");
-        ok(content.Prefs.variablesWidth,
-          "The debugger preferences should have a saved variablesWidth value.");
+        ok(content.Prefs.sourcesWidth,
+          "The debugger preferences should have a saved sourcesWidth value.");
+        ok(content.Prefs.instrumentsWidth,
+          "The debugger preferences should have a saved instrumentsWidth value.");
 
-        stackframes = content.document.getElementById("stackframes+breakpoints");
-        variables = content.document.getElementById("variables+expressions");
+        sources = content.document.getElementById("sources-pane");
+        instruments = content.document.getElementById("instruments-pane");
 
-        is(content.Prefs.stackframesWidth, stackframes.getAttribute("width"),
-          "The stackframes pane width should be the same as the preferred value.");
-        is(content.Prefs.variablesWidth, variables.getAttribute("width"),
-          "The variables pane width should be the same as the preferred value.");
+        is(content.Prefs.sourcesWidth, sources.getAttribute("width"),
+          "The sources pane width should be the same as the preferred value.");
+        is(content.Prefs.instrumentsWidth, instruments.getAttribute("width"),
+          "The instruments pane width should be the same as the preferred value.");
 
-        stackframes.setAttribute("width", someWidth1);
-        variables.setAttribute("width", someWidth2);
+        sources.setAttribute("width", someWidth1);
+        instruments.setAttribute("width", someWidth2);
 
         removeTab(tab1);
@@ -62,14 +62,16 @@ function test() {
         window.removeEventListener("Debugger:Shutdown", dbgShutdown, true);
 
-        is(content.Prefs.stackframesWidth, stackframes.getAttribute("width"),
-          "The stackframes pane width should have been saved by now.");
-        is(content.Prefs.variablesWidth, variables.getAttribute("width"),
-          "The variables pane width should have been saved by now.");
+        is(content.Prefs.sourcesWidth, sources.getAttribute("width"),
+          "The sources pane width should have been saved by now.");
+        is(content.Prefs.instrumentsWidth, instruments.getAttribute("width"),
+          "The instruments pane width should have been saved by now.");
+
+        // Cleanup after ourselves!
+        Services.prefs.setIntPref("devtools.debugger.ui.panes-sources-width", preferredSw);
+        Services.prefs.setIntPref("devtools.debugger.ui.panes-instruments-width", preferredIw);
 
         finish();
-
       }, true);
     });
-
   });
 }
diff --git a/browser/devtools/debugger/test/browser_dbg_pause-exceptions.js b/browser/devtools/debugger/test/browser_dbg_pause-exceptions.js
--- a/browser/devtools/debugger/test/browser_dbg_pause-exceptions.js
+++ b/browser/devtools/debugger/test/browser_dbg_pause-exceptions.js
@@ -75,5 +75,5 @@ function testWithFrame()
                 scopes = gDebugger.DebuggerView.Variables._list,
                 innerScope = scopes.firstChild,
-                innerNodes = innerScope.querySelector(".details").childNodes;
+                innerNodes = innerScope.querySelector(".variables-view-element-details").childNodes;
 
             is(gDebugger.DebuggerController.activeThread.state, "paused",
diff --git a/browser/devtools/debugger/test/browser_dbg_pause-warning.js b/browser/devtools/debugger/test/browser_dbg_pause-warning.js
--- a/browser/devtools/debugger/test/browser_dbg_pause-warning.js
+++ b/browser/devtools/debugger/test/browser_dbg_pause-warning.js
@@ -9,6 +9,4 @@ var gTab = null;
 var gDebugger = null;
 var gView = null;
-var gLH = null;
-var gL10N = null;
 var gToolbox = null;
 var gTarget = null;
@@ -20,6 +18,4 @@ function test() {
     gDebugger = gPane.panelWin;
     gView = gDebugger.DebuggerView;
-    gLH = gDebugger.LayoutHelpers;
-    gL10N = gDebugger.L10N;
 
     gTarget = TargetFactory.forTab(gBrowser.selectedTab);
@@ -97,6 +93,4 @@ registerCleanupFunction(function() {
   gDebugger = null;
   gView = null;
-  gLH = null;
-  gL10N = null;
   gToolbox = null;
   gTarget = null;
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-01.js b/browser/devtools/debugger/test/browser_dbg_propertyview-01.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-01.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-01.js
@@ -62,9 +62,9 @@ function testlabelshortening() {
       { href: "ftp://interesting.address.com/random/", leaf: "x/script.js" },
       { href: "ftp://interesting.address.com/random/", leaf: "x/y/script.js?a=1" },
-      { href: "ftp://interesting.address.com/random/x/", leaf: "y/script.js?a=1&b=2", dupe: true },
-      { href: "ftp://interesting.address.com/random/x/y/", leaf: "script.js?a=1&b=2&c=3", dupe: true },
-      { href: "ftp://interesting.address.com/random/", leaf: "x/y/script.js?a=2", dupe: true },
-      { href: "ftp://interesting.address.com/random/x/", leaf: "y/script.js?a=2&b=3", dupe: true },
-      { href: "ftp://interesting.address.com/random/x/y/", leaf: "script.js?a=2&b=3&c=4", dupe: true },
+      { href: "ftp://interesting.address.com/random/x/", leaf: "y/script.js?a=1&b=2" },
+      { href: "ftp://interesting.address.com/random/x/y/", leaf: "script.js?a=1&b=2&c=3" },
+      { href: "ftp://interesting.address.com/random/", leaf: "x/y/script.js?a=2" },
+      { href: "ftp://interesting.address.com/random/x/", leaf: "y/script.js?a=2&b=3" },
+      { href: "ftp://interesting.address.com/random/x/y/", leaf: "script.js?a=2&b=3&c=4" },
 
       { href: "file://random/", leaf: "script_t1.js&a=1&b=2&c=3" },
@@ -138,5 +138,5 @@ function testlabelshortening() {
         "Script (15) label is incorrect.");
 
-      is(vs._container.itemCount, urls.filter(function(url) !url.dupe).length,
+      is(vs.itemCount, urls.filter(function(url) !url.dupe).length,
         "Didn't get the correct number of scripts in the list.");
 
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-02.js b/browser/devtools/debugger/test/browser_dbg_propertyview-02.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-02.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-02.js
@@ -35,5 +35,5 @@ function testSimpleCall() {
         "Any new scope should have the designated title.");
 
-      is(testScope.target.querySelector(".details").childNodes.length, 0,
+      is(testScope.target.querySelector(".variables-view-element-details").childNodes.length, 0,
         "Any new scope should have a container with no child nodes.");
 
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-03.js b/browser/devtools/debugger/test/browser_dbg_propertyview-03.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-03.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-03.js
@@ -58,5 +58,5 @@ function testSimpleCall() {
         "Any new variable should have the designated title.");
 
-      is(testVar.target.querySelector(".details").childNodes.length, 0,
+      is(testVar.target.querySelector(".variables-view-element-details").childNodes.length, 0,
         "Any new variable should have a details container with no child nodes.");
 
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-04.js b/browser/devtools/debugger/test/browser_dbg_propertyview-04.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-04.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-04.js
@@ -33,10 +33,9 @@ function testSimpleCall() {
             "class": "Object"
           },
-
           "enumerable": true
         }
       });
 
-      is(testVar.target.querySelector(".details").childNodes.length, 1,
+      is(testVar.target.querySelector(".variables-view-element-details").childNodes.length, 1,
         "A new detail node should have been added in the variable tree.");
 
@@ -51,10 +50,9 @@ function testSimpleCall() {
             "class": "Object"
           },
-
           "enumerable": true
         }
       });
 
-      is(testVar.get("child").target.querySelector(".details").childNodes.length, 1,
+      is(testVar.get("child").target.querySelector(".variables-view-element-details").childNodes.length, 1,
         "A new detail node should have been added in the variable tree.");
 
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-05.js b/browser/devtools/debugger/test/browser_dbg_propertyview-05.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-05.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-05.js
@@ -32,5 +32,5 @@ function testSimpleCall() {
         "The grip information for the variable wasn't set correctly.");
 
-      is(testVar.target.querySelector(".details").childNodes.length, 0,
+      is(testVar.target.querySelector(".variables-view-element-details").childNodes.length, 0,
         "Adding a value property shouldn't add any new tree nodes.");
 
@@ -38,5 +38,5 @@ function testSimpleCall() {
       testVar.setGrip({ "type": "object", "class": "Window" });
 
-      is(testVar.target.querySelector(".details").childNodes.length, 0,
+      is(testVar.target.querySelector(".variables-view-element-details").childNodes.length, 0,
         "Adding type and class properties shouldn't add any new tree nodes.");
 
@@ -47,5 +47,5 @@ function testSimpleCall() {
       testVar.addProperties({ "helloWorld": { "value": "hello world", "enumerable": true } });
 
-      is(testVar.target.querySelector(".details").childNodes.length, 1,
+      is(testVar.target.querySelector(".variables-view-element-details").childNodes.length, 1,
         "A new detail node should have been added in the variable tree.");
 
@@ -53,5 +53,5 @@ function testSimpleCall() {
       testVar.addProperties({ "helloWorld": { "value": "hello jupiter", "enumerable": true } });
 
-      is(testVar.target.querySelector(".details").childNodes.length, 1,
+      is(testVar.target.querySelector(".variables-view-element-details").childNodes.length, 1,
         "Shouldn't be able to duplicate nodes added in the variable tree.");
 
@@ -60,5 +60,5 @@ function testSimpleCall() {
                               "someProp1": { "value": "another string", "enumerable": true } });
 
-      is(testVar.target.querySelector(".details").childNodes.length, 3,
+      is(testVar.target.querySelector(".variables-view-element-details").childNodes.length, 3,
         "Two new detail nodes should have been added in the variable tree.");
 
@@ -72,5 +72,5 @@ function testSimpleCall() {
                             });
 
-      is(testVar.target.querySelector(".details").childNodes.length, 6,
+      is(testVar.target.querySelector(".variables-view-element-details").childNodes.length, 6,
         "Three new detail nodes should have been added in the variable tree.");
 
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-06.js b/browser/devtools/debugger/test/browser_dbg_propertyview-06.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-06.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-06.js
@@ -99,8 +99,8 @@ function testSimpleCall() {
 
 
-      is(localVar5.target.querySelector(".details").childNodes.length, 6,
+      is(localVar5.target.querySelector(".variables-view-element-details").childNodes.length, 6,
         "The localVar5 doesn't contain all the created properties.");
 
-      is(localVar5.get("someProp5").target.querySelector(".details").childNodes.length, 6,
+      is(localVar5.get("someProp5").target.querySelector(".variables-view-element-details").childNodes.length, 6,
         "The localVar5.someProp5 doesn't contain all the created properties.");
 
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-07.js b/browser/devtools/debugger/test/browser_dbg_propertyview-07.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-07.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-07.js
@@ -31,7 +31,6 @@ function testFrameParameters()
 
       var frames = gDebugger.DebuggerView.StackFrames._container._list,
-          childNodes = frames.childNodes,
-          localScope = gDebugger.DebuggerView.Variables._list.querySelector(".scope"),
-          localNodes = localScope.querySelector(".details").childNodes;
+          localScope = gDebugger.DebuggerView.Variables._list.querySelector(".variables-view-scope"),
+          localNodes = localScope.querySelector(".variables-view-element-details").childNodes;
 
       is(gDebugger.DebuggerController.activeThread.state, "paused",
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-08.js b/browser/devtools/debugger/test/browser_dbg_propertyview-08.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-08.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-08.js
@@ -31,6 +31,6 @@ function testFrameParameters()
 
       var frames = gDebugger.DebuggerView.StackFrames._container._list,
-          localScope = gDebugger.DebuggerView.Variables._list.querySelectorAll(".scope")[0],
-          localNodes = localScope.querySelector(".details").childNodes,
+          localScope = gDebugger.DebuggerView.Variables._list.querySelectorAll(".variables-view-scope")[0],
+          localNodes = localScope.querySelector(".variables-view-element-details").childNodes,
           localNonEnums = localScope.querySelector(".nonenum").childNodes;
 
@@ -55,21 +55,21 @@ function testFrameParameters()
 
       is(gVars.getScopeForNode(
-         gVars._list.querySelectorAll(".scope")[0]).target,
-         gVars._list.querySelectorAll(".scope")[0],
+         gVars._list.querySelectorAll(".variables-view-scope")[0]).target,
+         gVars._list.querySelectorAll(".variables-view-scope")[0],
         "getScopeForNode([0]) didn't return the expected scope.");
       is(gVars.getScopeForNode(
-         gVars._list.querySelectorAll(".scope")[1]).target,
-         gVars._list.querySelectorAll(".scope")[1],
+         gVars._list.querySelectorAll(".variables-view-scope")[1]).target,
+         gVars._list.querySelectorAll(".variables-view-scope")[1],
         "getScopeForNode([1]) didn't return the expected scope.");
       is(gVars.getScopeForNode(
-         gVars._list.querySelectorAll(".scope")[2]).target,
-         gVars._list.querySelectorAll(".scope")[2],
+         gVars._list.querySelectorAll(".variables-view-scope")[2]).target,
+         gVars._list.querySelectorAll(".variables-view-scope")[2],
         "getScopeForNode([2]) didn't return the expected scope.");
 
-      is(gVars.getScopeForNode(gVars._list.querySelectorAll(".scope")[0]).expanded, true,
+      is(gVars.getScopeForNode(gVars._list.querySelectorAll(".variables-view-scope")[0]).expanded, true,
         "The local scope should be expanded by default.");
-      is(gVars.getScopeForNode(gVars._list.querySelectorAll(".scope")[1]).expanded, false,
+      is(gVars.getScopeForNode(gVars._list.querySelectorAll(".variables-view-scope")[1]).expanded, false,
         "The block scope should be collapsed by default.");
-      is(gVars.getScopeForNode(gVars._list.querySelectorAll(".scope")[2]).expanded, false,
+      is(gVars.getScopeForNode(gVars._list.querySelectorAll(".variables-view-scope")[2]).expanded, false,
         "The global scope should be collapsed by default.");
 
@@ -140,15 +140,15 @@ function testFrameParameters()
           "Should have the right property value for 'arguments'.");
 
-        is(argumentsNode.target.querySelectorAll(".property > .title > .name")[0]
+        is(argumentsNode.target.querySelectorAll(".variables-view-property > .title > .name")[0]
            .getAttribute("value"), "0",
           "Should have the right property name for 'arguments[0]'.");
-        ok(argumentsNode.target.querySelectorAll(".property > .title > .value")[0]
+        ok(argumentsNode.target.querySelectorAll(".variables-view-property > .title > .value")[0]
            .getAttribute("value").search(/object/) != -1,
           "'arguments[0]' should be an object.");
 
-        is(argumentsNode.target.querySelectorAll(".property > .title > .name")[7]
+        is(argumentsNode.target.querySelectorAll(".variables-view-property > .title > .name")[7]
            .getAttribute("value"), "__proto__",
           "Should have the right property name for '__proto__'.");
-        ok(argumentsNode.target.querySelectorAll(".property > .title > .value")[7]
+        ok(argumentsNode.target.querySelectorAll(".variables-view-property > .title > .value")[7]
            .getAttribute("value").search(/object/) != -1,
           "'__proto__' should be an object.");
@@ -159,22 +159,22 @@ function testFrameParameters()
           "Should have the right property value for 'c'.");
 
-        is(cNode.target.querySelectorAll(".property > .title > .name")[0]
+        is(cNode.target.querySelectorAll(".variables-view-property > .title > .name")[0]
            .getAttribute("value"), "a",
           "Should have the right property name for 'c.a'.");
-        is(cNode.target.querySelectorAll(".property > .title > .value")[0]
+        is(cNode.target.querySelectorAll(".variables-view-property > .title > .value")[0]
            .getAttribute("value"), "1",
           "Should have the right value for 'c.a'.");
 
-        is(cNode.target.querySelectorAll(".property > .title > .name")[1]
+        is(cNode.target.querySelectorAll(".variables-view-property > .title > .name")[1]
            .getAttribute("value"), "b",
           "Should have the right property name for 'c.b'.");
-        is(cNode.target.querySelectorAll(".property > .title > .value")[1]
+        is(cNode.target.querySelectorAll(".variables-view-property > .title > .value")[1]
            .getAttribute("value"), "\"beta\"",
           "Should have the right value for 'c.b'.");
 
-        is(cNode.target.querySelectorAll(".property > .title > .name")[2]
+        is(cNode.target.querySelectorAll(".variables-view-property > .title > .name")[2]
            .getAttribute("value"), "c",
           "Should have the right property name for 'c.c'.");
-        is(cNode.target.querySelectorAll(".property > .title > .value")[2]
+        is(cNode.target.querySelectorAll(".variables-view-property > .title > .value")[2]
            .getAttribute("value"), "true",
           "Should have the right value for 'c.c'.");
@@ -182,32 +182,32 @@ function testFrameParameters()
 
         is(gVars.getItemForNode(
-           cNode.target.querySelectorAll(".property")[0]).target,
-           cNode.target.querySelectorAll(".property")[0],
+           cNode.target.querySelectorAll(".variables-view-property")[0]).target,
+           cNode.target.querySelectorAll(".variables-view-property")[0],
           "getItemForNode([0]) didn't return the expected property.");
 
         is(gVars.getItemForNode(
-           cNode.target.querySelectorAll(".property")[1]).target,
-           cNode.target.querySelectorAll(".property")[1],
+           cNode.target.querySelectorAll(".variables-view-property")[1]).target,
+           cNode.target.querySelectorAll(".variables-view-property")[1],
           "getItemForNode([1]) didn't return the expected property.");
 
         is(gVars.getItemForNode(
-           cNode.target.querySelectorAll(".property")[2]).target,
-           cNode.target.querySelectorAll(".property")[2],
+           cNode.target.querySelectorAll(".variables-view-property")[2]).target,
+           cNode.target.querySelectorAll(".variables-view-property")[2],
           "getItemForNode([2]) didn't return the expected property.");
 
 
         is(cNode.find(
-           cNode.target.querySelectorAll(".property")[0]).target,
-           cNode.target.querySelectorAll(".property")[0],
+           cNode.target.querySelectorAll(".variables-view-property")[0]).target,
+           cNode.target.querySelectorAll(".variables-view-property")[0],
           "find([0]) didn't return the expected property.");
 
         is(cNode.find(
-           cNode.target.querySelectorAll(".property")[1]).target,
-           cNode.target.querySelectorAll(".property")[1],
+           cNode.target.querySelectorAll(".variables-view-property")[1]).target,
+           cNode.target.querySelectorAll(".variables-view-property")[1],
           "find([1]) didn't return the expected property.");
 
         is(cNode.find(
-           cNode.target.querySelectorAll(".property")[2]).target,
-           cNode.target.querySelectorAll(".property")[2],
+           cNode.target.querySelectorAll(".variables-view-property")[2]).target,
+           cNode.target.querySelectorAll(".variables-view-property")[2],
           "find([2]) didn't return the expected property.");
 
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-09.js b/browser/devtools/debugger/test/browser_dbg_propertyview-09.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-09.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-09.js
@@ -42,6 +42,6 @@ function testFrameParameters()
 
       var frames = gDebugger.DebuggerView.StackFrames._container._list,
-          globalScope = gDebugger.DebuggerView.Variables._list.querySelectorAll(".scope")[2],
-          globalNodes = globalScope.querySelector(".details").childNodes;
+          globalScope = gDebugger.DebuggerView.Variables._list.querySelectorAll(".variables-view-scope")[2],
+          globalNodes = globalScope.querySelector(".variables-view-element-details").childNodes;
 
       is(gDebugger.DebuggerController.activeThread.state, "paused",
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-10.js b/browser/devtools/debugger/test/browser_dbg_propertyview-10.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-10.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-10.js
@@ -43,8 +43,8 @@ function testWithFrame()
       var frames = gDebugger.DebuggerView.StackFrames._container._list,
           scopes = gDebugger.DebuggerView.Variables._list,
-          innerScope = scopes.querySelectorAll(".scope")[0],
-          globalScope = scopes.querySelectorAll(".scope")[4],
-          innerNodes = innerScope.querySelector(".details").childNodes,
-          globalNodes = globalScope.querySelector(".details").childNodes;
+          innerScope = scopes.querySelectorAll(".variables-view-scope")[0],
+          globalScope = scopes.querySelectorAll(".variables-view-scope")[4],
+          innerNodes = innerScope.querySelector(".variables-view-element-details").childNodes,
+          globalNodes = globalScope.querySelector(".variables-view-element-details").childNodes;
 
       is(gDebugger.DebuggerController.activeThread.state, "paused",
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-11.js b/browser/devtools/debugger/test/browser_dbg_propertyview-11.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-11.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-11.js
@@ -40,8 +40,8 @@ function testFrameParameters()
     Services.tm.currentThread.dispatch({ run: function() {
 
-      let anonymousScope = gDebugger.DebuggerView.Variables._list.querySelectorAll(".scope")[1],
-          globalScope = gDebugger.DebuggerView.Variables._list.querySelectorAll(".scope")[2],
-          anonymousNodes = anonymousScope.querySelector(".details").childNodes,
-          globalNodes = globalScope.querySelector(".details").childNodes,
+      let anonymousScope = gDebugger.DebuggerView.Variables._list.querySelectorAll(".variables-view-scope")[1],
+          globalScope = gDebugger.DebuggerView.Variables._list.querySelectorAll(".variables-view-scope")[2],
+          anonymousNodes = anonymousScope.querySelector(".variables-view-element-details").childNodes,
+          globalNodes = globalScope.querySelector(".variables-view-element-details").childNodes,
           gVars = gDebugger.DebuggerView.Variables;
 
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-data-big.js b/browser/devtools/debugger/test/browser_dbg_propertyview-data-big.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-data-big.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-data-big.js
@@ -44,9 +44,9 @@ function testWithFrame()
 
       var scopes = gDebugger.DebuggerView.Variables._list,
-          innerScope = scopes.querySelectorAll(".scope")[0],
-          loadScope = scopes.querySelectorAll(".scope")[1],
-          globalScope = scopes.querySelectorAll(".scope")[2],
-          innerNodes = innerScope.querySelector(".details").childNodes,
-          arrayNodes = innerNodes[4].querySelector(".details").childNodes;
+          innerScope = scopes.querySelectorAll(".variables-view-scope")[0],
+          loadScope = scopes.querySelectorAll(".variables-view-scope")[1],
+          globalScope = scopes.querySelectorAll(".variables-view-scope")[2],
+          innerNodes = innerScope.querySelector(".variables-view-element-details").childNodes,
+          arrayNodes = innerNodes[4].querySelector(".variables-view-element-details").childNodes;
 
       is(innerNodes[3].querySelector(".name").getAttribute("value"), "buffer",
@@ -116,7 +116,7 @@ function waitForProperties(total, callba
 {
   var scopes = gDebugger.DebuggerView.Variables._list,
-      innerScope = scopes.querySelectorAll(".scope")[0],
-      innerNodes = innerScope.querySelector(".details").childNodes,
-      arrayNodes = innerNodes[4].querySelector(".details").childNodes;
+      innerScope = scopes.querySelectorAll(".variables-view-scope")[0],
+      innerNodes = innerScope.querySelector(".variables-view-element-details").childNodes,
+      arrayNodes = innerNodes[4].querySelector(".variables-view-element-details").childNodes;
 
   // Poll every few milliseconds until the properties are retrieved.
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-data-getset-01.js b/browser/devtools/debugger/test/browser_dbg_propertyview-data-getset-01.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-data-getset-01.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-data-getset-01.js
@@ -224,6 +224,6 @@ function addWatchExpressions(callback)
 function testEdit(what, string, callback, expected)
 {
-  let localScope = gDebugger.DebuggerView.Variables._list.querySelectorAll(".scope")[1],
-      localNodes = localScope.querySelector(".details").childNodes,
+  let localScope = gDebugger.DebuggerView.Variables._list.querySelectorAll(".variables-view-scope")[1],
+      localNodes = localScope.querySelector(".variables-view-element-details").childNodes,
       myVar = gVars.getItemForNode(localNodes[11]);
 
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-data-getset-02.js b/browser/devtools/debugger/test/browser_dbg_propertyview-data-getset-02.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-data-getset-02.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-data-getset-02.js
@@ -82,6 +82,6 @@ function addWatchExpressions(callback)
 function testEdit(string, expected, callback)
 {
-  let localScope = gDebugger.DebuggerView.Variables._list.querySelectorAll(".scope")[1],
-      localNodes = localScope.querySelector(".details").childNodes,
+  let localScope = gDebugger.DebuggerView.Variables._list.querySelectorAll(".variables-view-scope")[1],
+      localNodes = localScope.querySelector(".variables-view-element-details").childNodes,
       myVar = gVars.getItemForNode(localNodes[11]);
 
@@ -109,5 +109,5 @@ function testEdit(string, expected, call
 
     EventUtils.sendMouseEvent({ type: "mousedown" },
-      prop._target.querySelector(".dbg-variable-edit"),
+      prop._target.querySelector(".variables-view-edit"),
       gDebugger);
 
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-data.js b/browser/devtools/debugger/test/browser_dbg_propertyview-data.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-data.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-data.js
@@ -22,5 +22,5 @@ function test()
     gVariablesView = gDebugger.DebuggerView.Variables;
 
-    gDebugger.DebuggerView.togglePanes({ visible: true, animated: false });
+    gDebugger.DebuggerView.toggleInstrumentsPane({ visible: true, animated: false });
     testVariablesView();
   });
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-edit-value.js b/browser/devtools/debugger/test/browser_dbg_propertyview-edit-value.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-edit-value.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-edit-value.js
@@ -39,6 +39,6 @@ function testFrameEval() {
         "Should only be getting stack frames while paused.");
 
-      var localScope = gDebugger.DebuggerView.Variables._list.querySelector(".scope"),
-          localNodes = localScope.querySelector(".details").childNodes,
+      var localScope = gDebugger.DebuggerView.Variables._list.querySelector(".variables-view-scope"),
+          localNodes = localScope.querySelector(".variables-view-element-details").childNodes,
           varA = localNodes[7];
 
@@ -89,6 +89,6 @@ function testModification(aVar, aCallbac
       // Get the variable reference anew, since the old ones were discarded when
       // we resumed.
-      var localScope = gDebugger.DebuggerView.Variables._list.querySelector(".scope"),
-          localNodes = localScope.querySelector(".details").childNodes,
+      var localScope = gDebugger.DebuggerView.Variables._list.querySelector(".variables-view-scope"),
+          localNodes = localScope.querySelector(".variables-view-element-details").childNodes,
           varA = localNodes[7];
 
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-edit-watch.js b/browser/devtools/debugger/test/browser_dbg_propertyview-edit-watch.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-edit-watch.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-edit-watch.js
@@ -43,6 +43,6 @@ function testFrameEval() {
         "Should only be getting stack frames while paused.");
 
-      var localScope = gDebugger.DebuggerView.Variables._list.querySelectorAll(".scope")[1],
-          localNodes = localScope.querySelector(".details").childNodes,
+      var localScope = gDebugger.DebuggerView.Variables._list.querySelectorAll(".variables-view-scope")[1],
+          localNodes = localScope.querySelector(".variables-view-element-details").childNodes,
           aArg = localNodes[1],
           varT = localNodes[3];
@@ -71,5 +71,5 @@ function testFrameEval() {
       is(scope.get("this")._isContentVisible, true,
         "Should have the right visibility state for 'this'.");
-      is(scope.get("this").target.querySelectorAll(".dbg-variable-delete").length, 1,
+      is(scope.get("this").target.querySelectorAll(".variables-view-delete").length, 1,
         "Should have the one close button visible for 'this'.");
       is(scope.get("this").name, "this",
@@ -82,5 +82,5 @@ function testFrameEval() {
       is(scope.get("ermahgerd")._isContentVisible, true,
         "Should have the right visibility state for 'ermahgerd'.");
-      is(scope.get("ermahgerd").target.querySelectorAll(".dbg-variable-delete").length, 1,
+      is(scope.get("ermahgerd").target.querySelectorAll(".variables-view-delete").length, 1,
         "Should have the one close button visible for 'ermahgerd'.");
       is(scope.get("ermahgerd").name, "ermahgerd",
@@ -93,5 +93,5 @@ function testFrameEval() {
       is(scope.get("aArg")._isContentVisible, true,
         "Should have the right visibility state for 'aArg'.");
-      is(scope.get("aArg").target.querySelectorAll(".dbg-variable-delete").length, 1,
+      is(scope.get("aArg").target.querySelectorAll(".variables-view-delete").length, 1,
         "Should have the one close button visible for 'aArg'.");
       is(scope.get("aArg").name, "aArg",
@@ -102,5 +102,5 @@ function testFrameEval() {
       is(scope.get("document.title")._isContentVisible, true,
         "Should have the right visibility state for 'document.title'.");
-      is(scope.get("document.title").target.querySelectorAll(".dbg-variable-delete").length, 1,
+      is(scope.get("document.title").target.querySelectorAll(".variables-view-delete").length, 1,
         "Should have the one close button visible for 'document.title'.");
       is(scope.get("document.title").name, "document.title",
@@ -113,5 +113,5 @@ function testFrameEval() {
       is(scope.get("document.title = 42")._isContentVisible, true,
         "Should have the right visibility state for 'document.title = 42'.");
-      is(scope.get("document.title = 42").target.querySelectorAll(".dbg-variable-delete").length, 1,
+      is(scope.get("document.title = 42").target.querySelectorAll(".variables-view-delete").length, 1,
         "Should have the one close button visible for 'document.title = 42'.");
       is(scope.get("document.title = 42").name, "document.title = 42",
@@ -205,6 +205,6 @@ function testModification(aVar, aTest, a
       // Get the variable reference anew, since the old ones were discarded when
       // we resumed.
-      var localScope = gDebugger.DebuggerView.Variables._list.querySelectorAll(".scope")[aLocalScopeIndex],
-          localNodes = localScope.querySelector(".details").childNodes,
+      var localScope = gDebugger.DebuggerView.Variables._list.querySelectorAll(".variables-view-scope")[aLocalScopeIndex],
+          localNodes = localScope.querySelector(".variables-view-element-details").childNodes,
           aArg = localNodes[1];
 
@@ -287,6 +287,6 @@ function testExprDeletion(aVar, aTest, a
     // Get the variable reference anew, since the old ones were discarded when
     // we resumed.
-    var localScope = gDebugger.DebuggerView.Variables._list.querySelectorAll(".scope")[aLocalScopeIndex],
-        localNodes = localScope.querySelector(".details").childNodes,
+    var localScope = gDebugger.DebuggerView.Variables._list.querySelectorAll(".variables-view-scope")[aLocalScopeIndex],
+        localNodes = localScope.querySelector(".variables-view-element-details").childNodes,
         aArg = localNodes[1];
 
@@ -326,5 +326,5 @@ function testExprDeletion(aVar, aTest, a
 
   EventUtils.sendMouseEvent({ type: "click" },
-    aVar.querySelector(".dbg-variable-delete"),
+    aVar.querySelector(".variables-view-delete"),
     gDebugger);
 }
@@ -339,21 +339,21 @@ function test1(scope) {
   is(scope._store.size, 5, "There should be 5 evaluations availalble");
 
-  is(gWatch._cache[0].target.inputNode.value, "document.title = 43",
+  is(gWatch._cache[0].attachment.inputNode.value, "document.title = 43",
     "The first textbox input value is not the correct one");
   is(gWatch._cache[0].attachment.currentExpression, "document.title = 43",
     "The first textbox input value is not the correct one");
-  is(gWatch._cache[1].target.inputNode.value, "document.title",
+  is(gWatch._cache[1].attachment.inputNode.value, "document.title",
     "The second textbox input value is not the correct one");
   is(gWatch._cache[1].attachment.currentExpression, "document.title",
     "The second textbox input value is not the correct one");
-  is(gWatch._cache[2].target.inputNode.value, "aArg",
+  is(gWatch._cache[2].attachment.inputNode.value, "aArg",
     "The third textbox input value is not the correct one");
   is(gWatch._cache[2].attachment.currentExpression, "aArg",
     "The third textbox input value is not the correct one");
-  is(gWatch._cache[3].target.inputNode.value, "ermahgerd",
+  is(gWatch._cache[3].attachment.inputNode.value, "ermahgerd",
     "The fourth textbox input value is not the correct one");
   is(gWatch._cache[3].attachment.currentExpression, "ermahgerd",
     "The fourth textbox input value is not the correct one");
-  is(gWatch._cache[4].target.inputNode.value, "this",
+  is(gWatch._cache[4].attachment.inputNode.value, "this",
     "The fifth textbox input value is not the correct one");
   is(gWatch._cache[4].attachment.currentExpression, "this",
@@ -370,21 +370,21 @@ function test2(scope) {
   is(scope._store.size, 5, "There should be 5 evaluations availalble");
 
-  is(gWatch._cache[0].target.inputNode.value, "document.title = 43",
+  is(gWatch._cache[0].attachment.inputNode.value, "document.title = 43",
     "The first textbox input value is not the correct one");
   is(gWatch._cache[0].attachment.currentExpression, "document.title = 43",
     "The first textbox input value is not the correct one");
-  is(gWatch._cache[1].target.inputNode.value, "document.title",
+  is(gWatch._cache[1].attachment.inputNode.value, "document.title",
     "The second textbox input value is not the correct one");
   is(gWatch._cache[1].attachment.currentExpression, "document.title",
     "The second textbox input value is not the correct one");
-  is(gWatch._cache[2].target.inputNode.value, "aArg = 44",
+  is(gWatch._cache[2].attachment.inputNode.value, "aArg = 44",
     "The third textbox input value is not the correct one");
   is(gWatch._cache[2].attachment.currentExpression, "aArg = 44",
     "The third textbox input value is not the correct one");
-  is(gWatch._cache[3].target.inputNode.value, "ermahgerd",
+  is(gWatch._cache[3].attachment.inputNode.value, "ermahgerd",
     "The fourth textbox input value is not the correct one");
   is(gWatch._cache[3].attachment.currentExpression, "ermahgerd",
     "The fourth textbox input value is not the correct one");
-  is(gWatch._cache[4].target.inputNode.value, "this",
+  is(gWatch._cache[4].attachment.inputNode.value, "this",
     "The fifth textbox input value is not the correct one");
   is(gWatch._cache[4].attachment.currentExpression, "this",
@@ -401,17 +401,17 @@ function test3(scope) {
   is(scope._store.size, 4, "There should be 4 evaluations availalble");
 
-  is(gWatch._cache[0].target.inputNode.value, "document.title = 43",
+  is(gWatch._cache[0].attachment.inputNode.value, "document.title = 43",
     "The first textbox input value is not the correct one");
   is(gWatch._cache[0].attachment.currentExpression, "document.title = 43",
     "The first textbox input value is not the correct one");
-  is(gWatch._cache[1].target.inputNode.value, "document.title",
+  is(gWatch._cache[1].attachment.inputNode.value, "document.title",
     "The second textbox input value is not the correct one");
   is(gWatch._cache[1].attachment.currentExpression, "document.title",
     "The second textbox input value is not the correct one");
-  is(gWatch._cache[2].target.inputNode.value, "ermahgerd",
+  is(gWatch._cache[2].attachment.inputNode.value, "ermahgerd",
     "The third textbox input value is not the correct one");
   is(gWatch._cache[2].attachment.currentExpression, "ermahgerd",
     "The third textbox input value is not the correct one");
-  is(gWatch._cache[3].target.inputNode.value, "this",
+  is(gWatch._cache[3].attachment.inputNode.value, "this",
     "The fourth textbox input value is not the correct one");
   is(gWatch._cache[3].attachment.currentExpression, "this",
@@ -428,13 +428,13 @@ function test4(scope) {
   is(scope._store.size, 3, "There should be 3 evaluations availalble");
 
-  is(gWatch._cache[0].target.inputNode.value, "document.title",
+  is(gWatch._cache[0].attachment.inputNode.value, "document.title",
     "The first textbox input value is not the correct one");
   is(gWatch._cache[0].attachment.currentExpression, "document.title",
     "The first textbox input value is not the correct one");
-  is(gWatch._cache[1].target.inputNode.value, "ermahgerd",
+  is(gWatch._cache[1].attachment.inputNode.value, "ermahgerd",
     "The second textbox input value is not the correct one");
   is(gWatch._cache[1].attachment.currentExpression, "ermahgerd",
     "The second textbox input value is not the correct one");
-  is(gWatch._cache[2].target.inputNode.value, "this",
+  is(gWatch._cache[2].attachment.inputNode.value, "this",
     "The third textbox input value is not the correct one");
   is(gWatch._cache[2].attachment.currentExpression, "this",
@@ -451,9 +451,9 @@ function test5(scope) {
   is(scope._store.size, 2, "There should be 2 evaluations availalble");
 
-  is(gWatch._cache[0].target.inputNode.value, "ermahgerd",
+  is(gWatch._cache[0].attachment.inputNode.value, "ermahgerd",
     "The second textbox input value is not the correct one");
   is(gWatch._cache[0].attachment.currentExpression, "ermahgerd",
     "The second textbox input value is not the correct one");
-  is(gWatch._cache[1].target.inputNode.value, "this",
+  is(gWatch._cache[1].attachment.inputNode.value, "this",
     "The third textbox input value is not the correct one");
   is(gWatch._cache[1].attachment.currentExpression, "this",
@@ -470,5 +470,5 @@ function test6(scope) {
   is(scope._store.size, 1, "There should be 1 evaluation availalble");
 
-  is(gWatch._cache[0].target.inputNode.value, "ermahgerd",
+  is(gWatch._cache[0].attachment.inputNode.value, "ermahgerd",
     "The third textbox input value is not the correct one");
   is(gWatch._cache[0].attachment.currentExpression, "ermahgerd",
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-01.js b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-01.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-01.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-01.js
@@ -36,5 +36,5 @@ function testSearchbox()
   ok(!gDebugger.DebuggerView.Variables._searchboxNode,
     "There should not initially be a searchbox available in the variables view.");
-  ok(!gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-searchinput.devtools-searchinput"),
+  ok(!gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-view-searchinput"),
     "The searchbox element should not be found.");
 
@@ -44,5 +44,5 @@ function testSearchbox()
   ok(gDebugger.DebuggerView.Variables._searchboxContainer.hidden,
     "The searchbox container should be hidden at this point.");
-  ok(gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-searchinput.devtools-searchinput"),
+  ok(gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-view-searchinput"),
     "The searchbox element should be found.");
 
@@ -51,5 +51,5 @@ function testSearchbox()
   ok(!gDebugger.DebuggerView.Variables._searchboxNode,
     "There shouldn't be a searchbox available after disabling.");
-  ok(!gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-searchinput.devtools-searchinput"),
+  ok(!gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-view-searchinput"),
     "The searchbox element should not be found.");
 
@@ -59,5 +59,5 @@ function testSearchbox()
   ok(gDebugger.DebuggerView.Variables._searchboxContainer.hidden,
     "The searchbox container should be hidden at this point.");
-  ok(gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-searchinput.devtools-searchinput"),
+  ok(gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-view-searchinput"),
     "The searchbox element should be found.");
 
@@ -76,5 +76,5 @@ function testSearchbox()
   ok(!gDebugger.DebuggerView.Variables._searchboxNode,
     "There shouldn't be a searchbox available after disabling again.");
-  ok(!gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-searchinput.devtools-searchinput"),
+  ok(!gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-view-searchinput"),
     "The searchbox element should not be found.");
 
@@ -84,5 +84,5 @@ function testSearchbox()
   ok(gDebugger.DebuggerView.Variables._searchboxContainer.hidden,
     "The searchbox container should be hidden at this point.");
-  ok(gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-searchinput.devtools-searchinput"),
+  ok(gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-view-searchinput"),
     "The searchbox element should be found.");
 
@@ -94,5 +94,5 @@ function testSearchbox()
   ok(!gDebugger.DebuggerView.Variables._searchboxNode,
     "There shouldn't be a searchbox available after disabling again.");
-  ok(!gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-searchinput.devtools-searchinput"),
+  ok(!gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-view-searchinput"),
     "The searchbox element should not be found.");
 
@@ -102,5 +102,5 @@ function testSearchbox()
   ok(gDebugger.DebuggerView.Variables._searchboxContainer.hidden,
     "The searchbox container should be hidden at this point.");
-  ok(gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-searchinput.devtools-searchinput"),
+  ok(gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-view-searchinput"),
     "The searchbox element should be found.");
 
@@ -142,42 +142,42 @@ function testVariablesFiltering()
     locationItem.toggle();
 
-    is(innerScope.querySelectorAll(".variable:not([non-match])").length, 1,
+    is(innerScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 1,
       "There should be 1 variable displayed in the inner scope");
-    is(mathScope.querySelectorAll(".variable:not([non-match])").length, 0,
+    is(mathScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 0,
       "There should be 0 variables displayed in the math scope");
-    is(testScope.querySelectorAll(".variable:not([non-match])").length, 0,
+    is(testScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 0,
       "There should be 0 variables displayed in the test scope");
-    is(loadScope.querySelectorAll(".variable:not([non-match])").length, 0,
+    is(loadScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 0,
       "There should be 0 variables displayed in the load scope");
-    is(globalScope.querySelectorAll(".variable:not([non-match])").length, 1,
+    is(globalScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 1,
       "There should be 1 variable displayed in the global scope");
 
-    is(innerScope.querySelectorAll(".property:not([non-match])").length, 6,
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match])").length, 6,
       "There should be 6 properties displayed in the inner scope");
-    is(mathScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(mathScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the math scope");
-    is(testScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(testScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the test scope");
-    is(loadScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(loadScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the load scope");
-    is(globalScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(globalScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the global scope");
 
-    is(innerScope.querySelectorAll(".variable:not([non-match]) > .title > .name")[0].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-variable:not([non-match]) > .title > .name")[0].getAttribute("value"),
       "this", "The only inner variable displayed should be 'this'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[0].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[0].getAttribute("value"),
       "window", "The first inner property displayed should be 'window'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[1].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[1].getAttribute("value"),
       "document", "The second inner property displayed should be 'document'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[2].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[2].getAttribute("value"),
       "location", "The third inner property displayed should be 'location'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[3].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[3].getAttribute("value"),
       "__proto__", "The fourth inner property displayed should be '__proto__'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[4].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[4].getAttribute("value"),
       "Location", "The fifth inner property displayed should be 'Location'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[5].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[5].getAttribute("value"),
       "Location", "The sixth inner property displayed should be 'Location'");
 
-    is(globalScope.querySelectorAll(".variable:not([non-match]) > .title > .name")[0].getAttribute("value"),
+    is(globalScope.querySelectorAll(".variables-view-variable:not([non-match]) > .title > .name")[0].getAttribute("value"),
       "Location", "The only global variable displayed should be 'Location'");
   }
@@ -230,51 +230,51 @@ function testVariablesFiltering()
     locationItem.toggle();
 
-    is(innerScope.querySelectorAll(".variable:not([non-match])").length, 1,
+    is(innerScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 1,
       "There should be 1 variable displayed in the inner scope");
-    is(mathScope.querySelectorAll(".variable:not([non-match])").length, 0,
+    is(mathScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 0,
       "There should be 0 variables displayed in the math scope");
-    is(testScope.querySelectorAll(".variable:not([non-match])").length, 0,
+    is(testScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 0,
       "There should be 0 variables displayed in the test scope");
-    is(loadScope.querySelectorAll(".variable:not([non-match])").length, 0,
+    is(loadScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 0,
       "There should be 0 variables displayed in the load scope");
-    is(globalScope.querySelectorAll(".variable:not([non-match])").length, 1,
+    is(globalScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 1,
       "There should be 1 variable displayed in the global scope");
 
-    is(innerScope.querySelectorAll(".property:not([non-match])").length, 6,
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match])").length, 6,
       "There should be 6 properties displayed in the inner scope");
-    is(mathScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(mathScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the math scope");
-    is(testScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(testScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the test scope");
-    is(loadScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(loadScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the load scope");
-    is(globalScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(globalScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the global scope");
 
-    is(innerScope.querySelectorAll(".variable:not([non-match]) > .title > .name")[0].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-variable:not([non-match]) > .title > .name")[0].getAttribute("value"),
       "this", "The only inner variable displayed should be 'this'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[0].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[0].getAttribute("value"),
       "window", "The first inner property displayed should be 'window'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[1].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[1].getAttribute("value"),
       "document", "The second inner property displayed should be 'document'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[2].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[2].getAttribute("value"),
       "location", "The third inner property displayed should be 'location'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[3].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[3].getAttribute("value"),
       "__proto__", "The fourth inner property displayed should be '__proto__'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[4].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[4].getAttribute("value"),
       "Location", "The fifth inner property displayed should be 'Location'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[5].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[5].getAttribute("value"),
       "Location", "The sixth inner property displayed should be 'Location'");
 
-    is(globalScope.querySelectorAll(".variable:not([non-match]) > .title > .name")[0].getAttribute("value"),
+    is(globalScope.querySelectorAll(".variables-view-variable:not([non-match]) > .title > .name")[0].getAttribute("value"),
       "Location", "The only global variable displayed should be 'Location'");
   }
 
   var scopes = gDebugger.DebuggerView.Variables._list,
-      innerScope = scopes.querySelectorAll(".scope")[0],
-      mathScope = scopes.querySelectorAll(".scope")[1],
-      testScope = scopes.querySelectorAll(".scope")[2],
-      loadScope = scopes.querySelectorAll(".scope")[3],
-      globalScope = scopes.querySelectorAll(".scope")[4];
+      innerScope = scopes.querySelectorAll(".variables-view-scope")[0],
+      mathScope = scopes.querySelectorAll(".variables-view-scope")[1],
+      testScope = scopes.querySelectorAll(".variables-view-scope")[2],
+      loadScope = scopes.querySelectorAll(".variables-view-scope")[3],
+      globalScope = scopes.querySelectorAll(".variables-view-scope")[4];
 
   let innerScopeItem = gDebugger.DebuggerView.Variables._currHierarchy.get(
@@ -322,9 +322,9 @@ function prepareVariables(aCallback)
       var frames = gDebugger.DebuggerView.StackFrames._container._list,
           scopes = gDebugger.DebuggerView.Variables._list,
-          innerScope = scopes.querySelectorAll(".scope")[0],
-          mathScope = scopes.querySelectorAll(".scope")[1],
-          testScope = scopes.querySelectorAll(".scope")[2],
-          loadScope = scopes.querySelectorAll(".scope")[3],
-          globalScope = scopes.querySelectorAll(".scope")[4];
+          innerScope = scopes.querySelectorAll(".variables-view-scope")[0],
+          mathScope = scopes.querySelectorAll(".variables-view-scope")[1],
+          testScope = scopes.querySelectorAll(".variables-view-scope")[2],
+          loadScope = scopes.querySelectorAll(".variables-view-scope")[3],
+          globalScope = scopes.querySelectorAll(".variables-view-scope")[4];
 
       let innerScopeItem = gDebugger.DebuggerView.Variables._currHierarchy.get(
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-02.js b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-02.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-02.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-02.js
@@ -36,5 +36,5 @@ function testSearchbox()
   ok(!gDebugger.DebuggerView.Variables._searchboxNode,
     "There should not initially be a searchbox available in the variables view.");
-  ok(!gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-searchinput.devtools-searchinput"),
+  ok(!gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-view-searchinput"),
     "The searchbox element should not be found.");
 
@@ -42,5 +42,5 @@ function testSearchbox()
   ok(gDebugger.DebuggerView.Variables._searchboxNode,
     "There should be a searchbox available after enabling.");
-  ok(gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-searchinput.devtools-searchinput"),
+  ok(gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-view-searchinput"),
     "The searchbox element should be found.");
   ok(gDebugger.DebuggerView.Variables._searchboxContainer.hidden,
@@ -82,48 +82,48 @@ function testVariablesFiltering()
     documentItem.toggle();
 
-    is(innerScope.querySelectorAll(".variable:not([non-match])").length, 1,
+    is(innerScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 1,
       "There should be 1 variable displayed in the inner scope");
-    is(mathScope.querySelectorAll(".variable:not([non-match])").length, 0,
+    is(mathScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 0,
       "There should be 0 variables displayed in the math scope");
-    is(testScope.querySelectorAll(".variable:not([non-match])").length, 0,
+    is(testScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 0,
       "There should be 0 variables displayed in the test scope");
-    is(loadScope.querySelectorAll(".variable:not([non-match])").length, 0,
+    is(loadScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 0,
       "There should be 0 variables displayed in the load scope");
-    is(globalScope.querySelectorAll(".variable:not([non-match])").length, 2,
+    is(globalScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 2,
       "There should be 2 variables displayed in the global scope");
 
-    is(innerScope.querySelectorAll(".property:not([non-match])").length, 8,
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match])").length, 8,
       "There should be 8 properties displayed in the inner scope");
-    is(mathScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(mathScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the math scope");
-    is(testScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(testScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the test scope");
-    is(loadScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(loadScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the load scope");
-    is(globalScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(globalScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the global scope");
 
-    is(innerScope.querySelectorAll(".variable:not([non-match]) > .title > .name")[0].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-variable:not([non-match]) > .title > .name")[0].getAttribute("value"),
       "this", "The only inner variable displayed should be 'this'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[0].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[0].getAttribute("value"),
       "document", "The first inner property displayed should be 'document'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[1].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[1].getAttribute("value"),
       "window", "The second inner property displayed should be 'window'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[2].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[2].getAttribute("value"),
       "document", "The third inner property displayed should be 'document'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[3].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[3].getAttribute("value"),
       "location", "The fourth inner property displayed should be 'location'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[4].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[4].getAttribute("value"),
       "__proto__", "The fifth inner property displayed should be '__proto__'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[5].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[5].getAttribute("value"),
       "__proto__", "The sixth inner property displayed should be '__proto__'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[6].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[6].getAttribute("value"),
       "HTMLDocument", "The seventh inner property displayed should be 'HTMLDocument'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[7].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[7].getAttribute("value"),
       "HTMLDocument", "The eight inner property displayed should be 'HTMLDocument'");
 
-    is(globalScope.querySelectorAll(".variable:not([non-match]) > .title > .name")[0].getAttribute("value"),
+    is(globalScope.querySelectorAll(".variables-view-variable:not([non-match]) > .title > .name")[0].getAttribute("value"),
       "document", "The first global variable displayed should be 'document'");
-    is(globalScope.querySelectorAll(".variable:not([non-match]) > .title > .name")[1].getAttribute("value"),
+    is(globalScope.querySelectorAll(".variables-view-variable:not([non-match]) > .title > .name")[1].getAttribute("value"),
       "HTMLDocument", "The first global variable displayed should be 'HTMLDocument'");
   }
@@ -176,57 +176,57 @@ function testVariablesFiltering()
     locationItem.toggle();
 
-    is(innerScope.querySelectorAll(".variable:not([non-match])").length, 1,
+    is(innerScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 1,
       "There should be 1 variable displayed in the inner scope");
-    is(mathScope.querySelectorAll(".variable:not([non-match])").length, 0,
+    is(mathScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 0,
       "There should be 0 variables displayed in the math scope");
-    is(testScope.querySelectorAll(".variable:not([non-match])").length, 0,
+    is(testScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 0,
       "There should be 0 variables displayed in the test scope");
-    is(loadScope.querySelectorAll(".variable:not([non-match])").length, 0,
+    is(loadScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 0,
       "There should be 0 variables displayed in the load scope");
-    is(globalScope.querySelectorAll(".variable:not([non-match])").length, 2,
+    is(globalScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 2,
       "There should be 2 variables displayed in the global scope");
 
-    is(innerScope.querySelectorAll(".property:not([non-match])").length, 8,
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match])").length, 8,
       "There should be 8 properties displayed in the inner scope");
-    is(mathScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(mathScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the math scope");
-    is(testScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(testScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the test scope");
-    is(loadScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(loadScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the load scope");
-    is(globalScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(globalScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the global scope");
 
-    is(innerScope.querySelectorAll(".variable:not([non-match]) > .title > .name")[0].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-variable:not([non-match]) > .title > .name")[0].getAttribute("value"),
       "this", "The only inner variable displayed should be 'this'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[0].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[0].getAttribute("value"),
       "document", "The first inner property displayed should be 'document'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[1].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[1].getAttribute("value"),
       "window", "The second inner property displayed should be 'window'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[2].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[2].getAttribute("value"),
       "document", "The third inner property displayed should be 'document'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[3].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[3].getAttribute("value"),
       "location", "The fourth inner property displayed should be 'location'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[4].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[4].getAttribute("value"),
       "__proto__", "The fifth inner property displayed should be '__proto__'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[5].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[5].getAttribute("value"),
       "__proto__", "The sixth inner property displayed should be '__proto__'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[6].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[6].getAttribute("value"),
       "HTMLDocument", "The seventh inner property displayed should be 'HTMLDocument'");
-    is(innerScope.querySelectorAll(".property:not([non-match]) > .title > .name")[7].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match]) > .title > .name")[7].getAttribute("value"),
       "HTMLDocument", "The eight inner property displayed should be 'HTMLDocument'");
 
-    is(globalScope.querySelectorAll(".variable:not([non-match]) > .title > .name")[0].getAttribute("value"),
+    is(globalScope.querySelectorAll(".variables-view-variable:not([non-match]) > .title > .name")[0].getAttribute("value"),
       "document", "The first global variable displayed should be 'document'");
-    is(globalScope.querySelectorAll(".variable:not([non-match]) > .title > .name")[1].getAttribute("value"),
+    is(globalScope.querySelectorAll(".variables-view-variable:not([non-match]) > .title > .name")[1].getAttribute("value"),
       "HTMLDocument", "The first global variable displayed should be 'HTMLDocument'");
   }
 
   var scopes = gDebugger.DebuggerView.Variables._list,
-      innerScope = scopes.querySelectorAll(".scope")[0],
-      mathScope = scopes.querySelectorAll(".scope")[1],
-      testScope = scopes.querySelectorAll(".scope")[2],
-      loadScope = scopes.querySelectorAll(".scope")[3],
-      globalScope = scopes.querySelectorAll(".scope")[4];
+      innerScope = scopes.querySelectorAll(".variables-view-scope")[0],
+      mathScope = scopes.querySelectorAll(".variables-view-scope")[1],
+      testScope = scopes.querySelectorAll(".variables-view-scope")[2],
+      loadScope = scopes.querySelectorAll(".variables-view-scope")[3],
+      globalScope = scopes.querySelectorAll(".variables-view-scope")[4];
 
   let innerScopeItem = gDebugger.DebuggerView.Variables._currHierarchy.get(
@@ -274,9 +274,9 @@ function prepareVariables(aCallback)
       var frames = gDebugger.DebuggerView.StackFrames._container._list,
           scopes = gDebugger.DebuggerView.Variables._list,
-          innerScope = scopes.querySelectorAll(".scope")[0],
-          mathScope = scopes.querySelectorAll(".scope")[1],
-          testScope = scopes.querySelectorAll(".scope")[2],
-          loadScope = scopes.querySelectorAll(".scope")[3],
-          globalScope = scopes.querySelectorAll(".scope")[4];
+          innerScope = scopes.querySelectorAll(".variables-view-scope")[0],
+          mathScope = scopes.querySelectorAll(".variables-view-scope")[1],
+          testScope = scopes.querySelectorAll(".variables-view-scope")[2],
+          loadScope = scopes.querySelectorAll(".variables-view-scope")[3],
+          globalScope = scopes.querySelectorAll(".variables-view-scope")[4];
 
       let innerScopeItem = gDebugger.DebuggerView.Variables._currHierarchy.get(
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-03.js b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-03.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-03.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-03.js
@@ -37,5 +37,5 @@ function testSearchbox()
   ok(!gDebugger.DebuggerView.Variables._searchboxNode,
     "There should not initially be a searchbox available in the variables view.");
-  ok(!gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-searchinput.devtools-searchinput"),
+  ok(!gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-view-searchinput"),
     "There searchbox element should not be found.");
 }
@@ -54,5 +54,5 @@ function testPref()
     ok(gDebugger.DebuggerView.Variables._searchboxNode,
       "There should be a searchbox available in the variables view.");
-    ok(gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-searchinput.devtools-searchinput"),
+    ok(gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-view-searchinput"),
       "There searchbox element should be found.");
     is(gDebugger.Prefs.variablesSearchboxVisible, true,
@@ -67,5 +67,5 @@ function testPref()
       ok(!gDebugger.DebuggerView.Variables._searchboxNode,
         "There should not be a searchbox available in the variables view.");
-      ok(!gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-searchinput.devtools-searchinput"),
+      ok(!gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-view-searchinput"),
         "There searchbox element should not be found.");
       is(gDebugger.Prefs.variablesSearchboxVisible, false,
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-04.js b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-04.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-04.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-04.js
@@ -37,5 +37,5 @@ function testSearchbox()
   ok(gDebugger.DebuggerView.Variables._searchboxNode,
     "There should initially be a searchbox available in the variables view.");
-  ok(gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-searchinput.devtools-searchinput"),
+  ok(gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-view-searchinput"),
     "There searchbox element should be found.");
 }
@@ -54,5 +54,5 @@ function testPref()
     ok(!gDebugger.DebuggerView.Variables._searchboxNode,
       "There should not be a searchbox available in the variables view.");
-    ok(!gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-searchinput.devtools-searchinput"),
+    ok(!gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-view-searchinput"),
       "There searchbox element should not be found.");
     is(gDebugger.Prefs.variablesSearchboxVisible, false,
@@ -67,5 +67,5 @@ function testPref()
       ok(gDebugger.DebuggerView.Variables._searchboxNode,
         "There should be a searchbox available in the variables view.");
-      ok(gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-searchinput.devtools-searchinput"),
+      ok(gDebugger.DebuggerView.Variables._parent.parentNode.querySelector(".variables-view-searchinput"),
         "There searchbox element should be found.");
       is(gDebugger.Prefs.variablesSearchboxVisible, true,
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-05.js b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-05.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-05.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-05.js
@@ -37,26 +37,26 @@ function testVariablesFiltering()
     write("*one");
 
-    is(innerScope.querySelectorAll(".variable:not([non-match])").length, 1,
+    is(innerScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 1,
       "There should be 1 variable displayed in the inner scope");
-    is(mathScope.querySelectorAll(".variable:not([non-match])").length, 0,
+    is(mathScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 0,
       "There should be 0 variables displayed in the math scope");
-    is(testScope.querySelectorAll(".variable:not([non-match])").length, 0,
+    is(testScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 0,
       "There should be 0 variables displayed in the test scope");
-    is(loadScope.querySelectorAll(".variable:not([non-match])").length, 1,
+    is(loadScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 1,
       "There should be 1 variable displayed in the load scope");
 
-    is(innerScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the inner scope");
-    is(mathScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(mathScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the math scope");
-    is(testScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(testScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the test scope");
-    is(loadScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(loadScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the load scope");
 
-    is(innerScope.querySelectorAll(".variable:not([non-match]) > .title > .name")[0].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-variable:not([non-match]) > .title > .name")[0].getAttribute("value"),
       "one", "The only inner variable displayed should be 'one'");
 
-    is(loadScope.querySelectorAll(".variable:not([non-match]) > .title > .name")[0].getAttribute("value"),
+    is(loadScope.querySelectorAll(".variables-view-variable:not([non-match]) > .title > .name")[0].getAttribute("value"),
       "button", "The only load variable displayed should be 'button'");
 
@@ -74,23 +74,23 @@ function testVariablesFiltering()
     write("*two");
 
-    is(innerScope.querySelectorAll(".variable:not([non-match])").length, 1,
+    is(innerScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 1,
       "There should be 1 variable displayed in the inner scope");
-    is(mathScope.querySelectorAll(".variable:not([non-match])").length, 0,
+    is(mathScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 0,
       "There should be 0 variables displayed in the math scope");
-    is(testScope.querySelectorAll(".variable:not([non-match])").length, 0,
+    is(testScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 0,
       "There should be 0 variables displayed in the test scope");
-    is(loadScope.querySelectorAll(".variable:not([non-match])").length, 0,
+    is(loadScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 0,
       "There should be 0 variables displayed in the load scope");
 
-    is(innerScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the inner scope");
-    is(mathScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(mathScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the math scope");
-    is(testScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(testScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the test scope");
-    is(loadScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(loadScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the load scope");
 
-    is(innerScope.querySelectorAll(".variable:not([non-match]) > .title > .name")[0].getAttribute("value"),
+    is(innerScope.querySelectorAll(".variables-view-variable:not([non-match]) > .title > .name")[0].getAttribute("value"),
       "two", "The only inner variable displayed should be 'two'");
 
@@ -111,24 +111,24 @@ function testVariablesFiltering()
       "Searchbox value is incorrect after 3 backspaces");
 
-    is(innerScope.querySelectorAll(".variable:not([non-match])").length, 3,
+    is(innerScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 3,
       "There should be 3 variables displayed in the inner scope");
-    isnot(mathScope.querySelectorAll(".variable:not([non-match])").length, 0,
+    isnot(mathScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 0,
       "There should be some variables displayed in the math scope");
-    isnot(testScope.querySelectorAll(".variable:not([non-match])").length, 0,
+    isnot(testScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 0,
       "There should be some variables displayed in the test scope");
-    isnot(loadScope.querySelectorAll(".variable:not([non-match])").length, 0,
+    isnot(loadScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 0,
       "There should be some variables displayed in the load scope");
-    isnot(globalScope.querySelectorAll(".variable:not([non-match])").length, 0,
+    isnot(globalScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 0,
       "There should be some variables displayed in the global scope");
 
-    is(innerScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the inner scope");
-    is(mathScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(mathScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the math scope");
-    is(testScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(testScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the test scope");
-    is(loadScope.querySelectorAll(".property:not([non-match])").length, 1,
+    is(loadScope.querySelectorAll(".variables-view-property:not([non-match])").length, 1,
       "There should be 1 property displayed in the load scope");
-    isnot(globalScope.querySelectorAll(".property:not([non-match])").length, 0,
+    isnot(globalScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be some properties displayed in the global scope");
   }
@@ -141,33 +141,33 @@ function testVariablesFiltering()
       "Searchbox value is incorrect after 1 backspace");
 
-    is(innerScope.querySelectorAll(".variable:not([non-match])").length, 3,
+    is(innerScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 3,
       "There should be 3 variables displayed in the inner scope");
-    isnot(mathScope.querySelectorAll(".variable:not([non-match])").length, 0,
+    isnot(mathScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 0,
       "There should be some variables displayed in the math scope");
-    isnot(testScope.querySelectorAll(".variable:not([non-match])").length, 0,
+    isnot(testScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 0,
       "There should be some variables displayed in the test scope");
-    isnot(loadScope.querySelectorAll(".variable:not([non-match])").length, 0,
+    isnot(loadScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 0,
       "There should be some variables displayed in the load scope");
-    isnot(globalScope.querySelectorAll(".variable:not([non-match])").length, 0,
+    isnot(globalScope.querySelectorAll(".variables-view-variable:not([non-match])").length, 0,
       "There should be some variables displayed in the global scope");
 
-    is(innerScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(innerScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the inner scope");
-    is(mathScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(mathScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the math scope");
-    is(testScope.querySelectorAll(".property:not([non-match])").length, 0,
+    is(testScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be 0 properties displayed in the test scope");
-    is(loadScope.querySelectorAll(".property:not([non-match])").length, 1,
+    is(loadScope.querySelectorAll(".variables-view-property:not([non-match])").length, 1,
       "There should be 1 property displayed in the load scope");
-    isnot(globalScope.querySelectorAll(".property:not([non-match])").length, 0,
+    isnot(globalScope.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
       "There should be some properties displayed in the global scope");
   }
 
   var scopes = gDebugger.DebuggerView.Variables._list,
-      innerScope = scopes.querySelectorAll(".scope")[0],
-      mathScope = scopes.querySelectorAll(".scope")[1],
-      testScope = scopes.querySelectorAll(".scope")[2],
-      loadScope = scopes.querySelectorAll(".scope")[3],
-      globalScope = scopes.querySelectorAll(".scope")[4];
+      innerScope = scopes.querySelectorAll(".variables-view-scope")[0],
+      mathScope = scopes.querySelectorAll(".variables-view-scope")[1],
+      testScope = scopes.querySelectorAll(".variables-view-scope")[2],
+      loadScope = scopes.querySelectorAll(".variables-view-scope")[3],
+      globalScope = scopes.querySelectorAll(".variables-view-scope")[4];
 
   let innerScopeItem = gDebugger.DebuggerView.Variables._currHierarchy.get(
@@ -216,9 +216,9 @@ function prepareVariables(aCallback)
       var frames = gDebugger.DebuggerView.StackFrames._container._list,
           scopes = gDebugger.DebuggerView.Variables._list,
-          innerScope = scopes.querySelectorAll(".scope")[0],
-          mathScope = scopes.querySelectorAll(".scope")[1],
-          testScope = scopes.querySelectorAll(".scope")[2],
-          loadScope = scopes.querySelectorAll(".scope")[3],
-          globalScope = scopes.querySelectorAll(".scope")[4];
+          innerScope = scopes.querySelectorAll(".variables-view-scope")[0],
+          mathScope = scopes.querySelectorAll(".variables-view-scope")[1],
+          testScope = scopes.querySelectorAll(".variables-view-scope")[2],
+          loadScope = scopes.querySelectorAll(".variables-view-scope")[3],
+          globalScope = scopes.querySelectorAll(".variables-view-scope")[4];
 
       let innerScopeItem = gDebugger.DebuggerView.Variables._currHierarchy.get(
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-06.js b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-06.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-06.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-06.js
@@ -146,9 +146,9 @@ function testVariablesFiltering()
 
   var scopes = gDebugger.DebuggerView.Variables._list,
-      innerScope = scopes.querySelectorAll(".scope")[0],
-      mathScope = scopes.querySelectorAll(".scope")[1],
-      testScope = scopes.querySelectorAll(".scope")[2],
-      loadScope = scopes.querySelectorAll(".scope")[3],
-      globalScope = scopes.querySelectorAll(".scope")[4];
+      innerScope = scopes.querySelectorAll(".variables-view-scope")[0],
+      mathScope = scopes.querySelectorAll(".variables-view-scope")[1],
+      testScope = scopes.querySelectorAll(".variables-view-scope")[2],
+      loadScope = scopes.querySelectorAll(".variables-view-scope")[3],
+      globalScope = scopes.querySelectorAll(".variables-view-scope")[4];
 
   let innerScopeItem = gDebugger.DebuggerView.Variables._currHierarchy.get(
@@ -188,9 +188,9 @@ function prepareVariables(aCallback)
       var frames = gDebugger.DebuggerView.StackFrames._container._list,
           scopes = gDebugger.DebuggerView.Variables._list,
-          innerScope = scopes.querySelectorAll(".scope")[0],
-          mathScope = scopes.querySelectorAll(".scope")[1],
-          testScope = scopes.querySelectorAll(".scope")[2],
-          loadScope = scopes.querySelectorAll(".scope")[3],
-          globalScope = scopes.querySelectorAll(".scope")[4];
+          innerScope = scopes.querySelectorAll(".variables-view-scope")[0],
+          mathScope = scopes.querySelectorAll(".variables-view-scope")[1],
+          testScope = scopes.querySelectorAll(".variables-view-scope")[2],
+          loadScope = scopes.querySelectorAll(".variables-view-scope")[3],
+          globalScope = scopes.querySelectorAll(".variables-view-scope")[4];
 
       let innerScopeItem = gDebugger.DebuggerView.Variables._currHierarchy.get(
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-07.js b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-07.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-07.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-07.js
@@ -146,9 +146,9 @@ function testVariablesFiltering()
 
   var scopes = gDebugger.DebuggerView.Variables._list,
-      innerScope = scopes.querySelectorAll(".scope")[0],
-      mathScope = scopes.querySelectorAll(".scope")[1],
-      testScope = scopes.querySelectorAll(".scope")[2],
-      loadScope = scopes.querySelectorAll(".scope")[3],
-      globalScope = scopes.querySelectorAll(".scope")[4];
+      innerScope = scopes.querySelectorAll(".variables-view-scope")[0],
+      mathScope = scopes.querySelectorAll(".variables-view-scope")[1],
+      testScope = scopes.querySelectorAll(".variables-view-scope")[2],
+      loadScope = scopes.querySelectorAll(".variables-view-scope")[3],
+      globalScope = scopes.querySelectorAll(".variables-view-scope")[4];
 
   let innerScopeItem = gDebugger.DebuggerView.Variables._currHierarchy.get(
@@ -188,9 +188,9 @@ function prepareVariables(aCallback)
       var frames = gDebugger.DebuggerView.StackFrames._container._list,
           scopes = gDebugger.DebuggerView.Variables._list,
-          innerScope = scopes.querySelectorAll(".scope")[0],
-          mathScope = scopes.querySelectorAll(".scope")[1],
-          testScope = scopes.querySelectorAll(".scope")[2],
-          loadScope = scopes.querySelectorAll(".scope")[3],
-          globalScope = scopes.querySelectorAll(".scope")[4];
+          innerScope = scopes.querySelectorAll(".variables-view-scope")[0],
+          mathScope = scopes.querySelectorAll(".variables-view-scope")[1],
+          testScope = scopes.querySelectorAll(".variables-view-scope")[2],
+          loadScope = scopes.querySelectorAll(".variables-view-scope")[3],
+          globalScope = scopes.querySelectorAll(".variables-view-scope")[4];
 
       let innerScopeItem = gDebugger.DebuggerView.Variables._currHierarchy.get(
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-08.js b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-08.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-08.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-08.js
@@ -59,7 +59,7 @@ function testVariablesFiltering()
 
       waitForFetchedProperties(2, function() {
-        is(testScopeItem.get("arguments").target.querySelectorAll(".property:not([non-match])").length, 4,
+        is(testScopeItem.get("arguments").target.querySelectorAll(".variables-view-property:not([non-match])").length, 4,
           "The arguments in the testScope should have 4 visible properties");
-        is(loadScopeItem.get("arguments").target.querySelectorAll(".property:not([non-match])").length, 4,
+        is(loadScopeItem.get("arguments").target.querySelectorAll(".variables-view-property:not([non-match])").length, 4,
           "The arguments in the loadScope should have 4 visible properties");
 
@@ -77,7 +77,7 @@ function testVariablesFiltering()
 
       waitForFetchedProperties(0, function() {
-        is(testScopeItem.get("arguments").target.querySelectorAll(".property:not([non-match])").length, 4,
+        is(testScopeItem.get("arguments").target.querySelectorAll(".variables-view-property:not([non-match])").length, 4,
           "The arguments in the testScope should have 4 visible properties");
-        is(loadScopeItem.get("arguments").target.querySelectorAll(".property:not([non-match])").length, 4,
+        is(loadScopeItem.get("arguments").target.querySelectorAll(".variables-view-property:not([non-match])").length, 4,
           "The arguments in the loadScope should have 4 visible properties");
 
@@ -95,7 +95,7 @@ function testVariablesFiltering()
 
       waitForFetchedProperties(0, function() {
-        is(testScopeItem.get("arguments").target.querySelectorAll(".property:not([non-match])").length, 4,
+        is(testScopeItem.get("arguments").target.querySelectorAll(".variables-view-property:not([non-match])").length, 4,
           "The arguments in the testScope should have 4 visible properties");
-        is(loadScopeItem.get("arguments").target.querySelectorAll(".property:not([non-match])").length, 4,
+        is(loadScopeItem.get("arguments").target.querySelectorAll(".variables-view-property:not([non-match])").length, 4,
           "The arguments in the loadScope should have 4 visible properties");
 
@@ -113,7 +113,7 @@ function testVariablesFiltering()
 
       waitForFetchedProperties(0, function() {
-        is(testScopeItem.get("arguments").target.querySelectorAll(".property:not([non-match])").length, 4,
+        is(testScopeItem.get("arguments").target.querySelectorAll(".variables-view-property:not([non-match])").length, 4,
           "The arguments in the testScope should have 4 visible properties");
-        is(loadScopeItem.get("arguments").target.querySelectorAll(".property:not([non-match])").length, 4,
+        is(loadScopeItem.get("arguments").target.querySelectorAll(".variables-view-property:not([non-match])").length, 4,
           "The arguments in the loadScope should have 4 visible properties");
 
@@ -131,7 +131,7 @@ function testVariablesFiltering()
 
       waitForFetchedProperties(0, function() {
-        is(testScopeItem.get("arguments").target.querySelectorAll(".property:not([non-match])").length, 4,
+        is(testScopeItem.get("arguments").target.querySelectorAll(".variables-view-property:not([non-match])").length, 4,
           "The arguments in the testScope should have 4 visible properties");
-        is(loadScopeItem.get("arguments").target.querySelectorAll(".property:not([non-match])").length, 4,
+        is(loadScopeItem.get("arguments").target.querySelectorAll(".variables-view-property:not([non-match])").length, 4,
           "The arguments in the loadScope should have 4 visible properties");
 
@@ -149,7 +149,7 @@ function testVariablesFiltering()
 
       waitForFetchedProperties(0, function() {
-        is(testScopeItem.get("arguments").target.querySelectorAll(".property:not([non-match])").length, 0,
+        is(testScopeItem.get("arguments").target.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
           "The arguments in the testScope should have 0 visible properties");
-        is(loadScopeItem.get("arguments").target.querySelectorAll(".property:not([non-match])").length, 0,
+        is(loadScopeItem.get("arguments").target.querySelectorAll(".variables-view-property:not([non-match])").length, 0,
           "The arguments in the loadScope should have 0 visible properties");
 
@@ -203,9 +203,9 @@ function testVariablesFiltering()
 
   var scopes = gDebugger.DebuggerView.Variables._list,
-      innerScope = scopes.querySelectorAll(".scope")[0],
-      mathScope = scopes.querySelectorAll(".scope")[1],
-      testScope = scopes.querySelectorAll(".scope")[2],
-      loadScope = scopes.querySelectorAll(".scope")[3],
-      globalScope = scopes.querySelectorAll(".scope")[4];
+      innerScope = scopes.querySelectorAll(".variables-view-scope")[0],
+      mathScope = scopes.querySelectorAll(".variables-view-scope")[1],
+      testScope = scopes.querySelectorAll(".variables-view-scope")[2],
+      loadScope = scopes.querySelectorAll(".variables-view-scope")[3],
+      globalScope = scopes.querySelectorAll(".variables-view-scope")[4];
 
   let innerScopeItem = gDebugger.DebuggerView.Variables._currHierarchy.get(
@@ -258,9 +258,9 @@ function prepareVariables(aCallback)
       var frames = gDebugger.DebuggerView.StackFrames._container._list,
           scopes = gDebugger.DebuggerView.Variables._list,
-          innerScope = scopes.querySelectorAll(".scope")[0],
-          mathScope = scopes.querySelectorAll(".scope")[1],
-          testScope = scopes.querySelectorAll(".scope")[2],
-          loadScope = scopes.querySelectorAll(".scope")[3],
-          globalScope = scopes.querySelectorAll(".scope")[4];
+          innerScope = scopes.querySelectorAll(".variables-view-scope")[0],
+          mathScope = scopes.querySelectorAll(".variables-view-scope")[1],
+          testScope = scopes.querySelectorAll(".variables-view-scope")[2],
+          loadScope = scopes.querySelectorAll(".variables-view-scope")[3],
+          globalScope = scopes.querySelectorAll(".variables-view-scope")[4];
 
       let innerScopeItem = gDebugger.DebuggerView.Variables._currHierarchy.get(
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-reexpand.js b/browser/devtools/debugger/test/browser_dbg_propertyview-reexpand.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-reexpand.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-reexpand.js
@@ -63,9 +63,9 @@ function testVariablesExpand()
       var frames = gDebugger.DebuggerView.StackFrames._container._list,
           scopes = gDebugger.DebuggerView.Variables._list,
-          innerScope = scopes.querySelectorAll(".scope")[0],
-          mathScope = scopes.querySelectorAll(".scope")[1],
-          testScope = scopes.querySelectorAll(".scope")[2],
-          loadScope = scopes.querySelectorAll(".scope")[3],
-          globalScope = scopes.querySelectorAll(".scope")[4];
+          innerScope = scopes.querySelectorAll(".variables-view-scope")[0],
+          mathScope = scopes.querySelectorAll(".variables-view-scope")[1],
+          testScope = scopes.querySelectorAll(".variables-view-scope")[2],
+          loadScope = scopes.querySelectorAll(".variables-view-scope")[3],
+          globalScope = scopes.querySelectorAll(".variables-view-scope")[4];
 
       let innerScopeItem = gDebugger.DebuggerView.Variables._currHierarchy.get(
@@ -91,13 +91,13 @@ function testVariablesExpand()
         "The globalScope arrow should initially be expanded");
 
-      is(innerScope.querySelector(".details").hasAttribute("open"), true,
+      is(innerScope.querySelector(".variables-view-element-details").hasAttribute("open"), true,
         "The innerScope enumerables should initially be expanded");
-      is(mathScope.querySelector(".details").hasAttribute("open"), true,
+      is(mathScope.querySelector(".variables-view-element-details").hasAttribute("open"), true,
         "The mathScope enumerables should initially be expanded");
-      is(testScope.querySelector(".details").hasAttribute("open"), true,
+      is(testScope.querySelector(".variables-view-element-details").hasAttribute("open"), true,
         "The testScope enumerables should initially be expanded");
-      is(loadScope.querySelector(".details").hasAttribute("open"), true,
+      is(loadScope.querySelector(".variables-view-element-details").hasAttribute("open"), true,
         "The loadScope enumerables should initially be expanded");
-      is(globalScope.querySelector(".details").hasAttribute("open"), true,
+      is(globalScope.querySelector(".variables-view-element-details").hasAttribute("open"), true,
         "The globalScope enumerables should initially be expanded");
 
@@ -129,13 +129,13 @@ function testVariablesExpand()
         "The globalScope arrow should initially not be expanded");
 
-      is(innerScope.querySelector(".details").hasAttribute("open"), true,
+      is(innerScope.querySelector(".variables-view-element-details").hasAttribute("open"), true,
         "The innerScope enumerables should initially be expanded");
-      is(mathScope.querySelector(".details").hasAttribute("open"), false,
+      is(mathScope.querySelector(".variables-view-element-details").hasAttribute("open"), false,
         "The mathScope enumerables should initially not be expanded");
-      is(testScope.querySelector(".details").hasAttribute("open"), false,
+      is(testScope.querySelector(".variables-view-element-details").hasAttribute("open"), false,
         "The testScope enumerables should initially not be expanded");
-      is(loadScope.querySelector(".details").hasAttribute("open"), false,
+      is(loadScope.querySelector(".variables-view-element-details").hasAttribute("open"), false,
         "The loadScope enumerables should initially not be expanded");
-      is(globalScope.querySelector(".details").hasAttribute("open"), false,
+      is(globalScope.querySelector(".variables-view-element-details").hasAttribute("open"), false,
         "The globalScope enumerables should initially not be expanded");
 
@@ -169,13 +169,13 @@ function testVariablesExpand()
         "The globalScope arrow should now be expanded");
 
-      is(innerScope.querySelector(".details").hasAttribute("open"), true,
+      is(innerScope.querySelector(".variables-view-element-details").hasAttribute("open"), true,
         "The innerScope enumerables should now be expanded");
-      is(mathScope.querySelector(".details").hasAttribute("open"), true,
+      is(mathScope.querySelector(".variables-view-element-details").hasAttribute("open"), true,
         "The mathScope enumerables should now be expanded");
-      is(testScope.querySelector(".details").hasAttribute("open"), true,
+      is(testScope.querySelector(".variables-view-element-details").hasAttribute("open"), true,
         "The testScope enumerables should now be expanded");
-      is(loadScope.querySelector(".details").hasAttribute("open"), true,
+      is(loadScope.querySelector(".variables-view-element-details").hasAttribute("open"), true,
         "The loadScope enumerables should now be expanded");
-      is(globalScope.querySelector(".details").hasAttribute("open"), true,
+      is(globalScope.querySelector(".variables-view-element-details").hasAttribute("open"), true,
         "The globalScope enumerables should now be expanded");
 
@@ -233,11 +233,11 @@ function testVariablesExpand()
                         "The locationItem arrow should still be expanded (1)");
 
-                      is(thisItem.target.querySelector(".details").hasAttribute("open"), true,
+                      is(thisItem.target.querySelector(".variables-view-element-details").hasAttribute("open"), true,
                         "The thisItem enumerables should still be expanded (1)");
-                      is(windowItem.target.querySelector(".details").hasAttribute("open"), true,
+                      is(windowItem.target.querySelector(".variables-view-element-details").hasAttribute("open"), true,
                         "The windowItem enumerables should still be expanded (1)");
-                      is(documentItem.target.querySelector(".details").hasAttribute("open"), true,
+                      is(documentItem.target.querySelector(".variables-view-element-details").hasAttribute("open"), true,
                         "The documentItem enumerables should still be expanded (1)");
-                      is(locationItem.target.querySelector(".details").hasAttribute("open"), true,
+                      is(locationItem.target.querySelector(".variables-view-element-details").hasAttribute("open"), true,
                         "The locationItem enumerables should still be expanded (1)");
 
@@ -274,13 +274,13 @@ function testVariablesExpand()
                             "The globalScope arrow should still be expanded");
 
-                          is(innerScope.querySelector(".details").hasAttribute("open"), true,
+                          is(innerScope.querySelector(".variables-view-element-details").hasAttribute("open"), true,
                             "The innerScope enumerables should still be expanded");
-                          is(mathScope.querySelector(".details").hasAttribute("open"), true,
+                          is(mathScope.querySelector(".variables-view-element-details").hasAttribute("open"), true,
                             "The mathScope enumerables should still be expanded");
-                          is(testScope.querySelector(".details").hasAttribute("open"), true,
+                          is(testScope.querySelector(".variables-view-element-details").hasAttribute("open"), true,
                             "The testScope enumerables should still be expanded");
-                          is(loadScope.querySelector(".details").hasAttribute("open"), true,
+                          is(loadScope.querySelector(".variables-view-element-details").hasAttribute("open"), true,
                             "The loadScope enumerables should still be expanded");
-                          is(globalScope.querySelector(".details").hasAttribute("open"), true,
+                          is(globalScope.querySelector(".variables-view-element-details").hasAttribute("open"), true,
                             "The globalScope enumerables should still be expanded");
 
@@ -305,11 +305,11 @@ function testVariablesExpand()
                             "The locationItem arrow should still be expanded (2)");
 
-                          is(thisItem.target.querySelector(".details").hasAttribute("open"), true,
+                          is(thisItem.target.querySelector(".variables-view-element-details").hasAttribute("open"), true,
                             "The thisItem enumerables should still be expanded (2)");
-                          is(windowItem.target.querySelector(".details").hasAttribute("open"), true,
+                          is(windowItem.target.querySelector(".variables-view-element-details").hasAttribute("open"), true,
                             "The windowItem enumerables should still be expanded (2)");
-                          is(documentItem.target.querySelector(".details").hasAttribute("open"), true,
+                          is(documentItem.target.querySelector(".variables-view-element-details").hasAttribute("open"), true,
                             "The documentItem enumerables should still be expanded (2)");
-                          is(locationItem.target.querySelector(".details").hasAttribute("open"), true,
+                          is(locationItem.target.querySelector(".variables-view-element-details").hasAttribute("open"), true,
                             "The locationItem enumerables should still be expanded (2)");
 
diff --git a/browser/devtools/debugger/test/browser_dbg_scripts-searching-01.js b/browser/devtools/debugger/test/browser_dbg_scripts-searching-01.js
--- a/browser/devtools/debugger/test/browser_dbg_scripts-searching-01.js
+++ b/browser/devtools/debugger/test/browser_dbg_scripts-searching-01.js
@@ -3,4 +3,8 @@
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
+/**
+ * Tests basic functionality of scripts filtering (token search and line jump).
+ */
+
 var gPane = null;
 var gTab = null;
@@ -8,17 +12,9 @@ var gDebuggee = null;
 var gDebugger = null;
 var gEditor = null;
-var gScripts = null;
+var gSources = null;
 var gSearchBox = null;
-var gMenulist = null;
-
-/**
- * Tests basic functionality of scripts filtering (token search and line jump).
- */
 
 function test()
 {
-  let scriptShown = false;
-  let framesAdded = false;
-
   requestLongerTimeout(2);
 
@@ -31,33 +27,17 @@ function test()
     gDebugger.addEventListener("Debugger:SourceShown", function _onEvent(aEvent) {
       gDebugger.removeEventListener(aEvent.type, _onEvent);
-      scriptShown = true;
-      runTest();
+      testScriptSearching();
     });
-
-    gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
-      framesAdded = true;
-      runTest();
-    });
-
-    gDebuggee.simpleCall();
   });
-
-  function runTest()
-  {
-    if (scriptShown && framesAdded) {
-      Services.tm.currentThread.dispatch({ run: testScriptSearching }, 0);
-    }
-  }
 }
 
 function testScriptSearching() {
-  let noMatchingScripts = gDebugger.L10N.getStr("noMatchingScriptsText");
-  var token;
+  let noMatchingSources = gDebugger.L10N.getStr("noMatchingSourcesText");
+  let token = "";
 
-  gDebugger.DebuggerController.activeThread.resume(function() {
+  Services.tm.currentThread.dispatch({ run: function() {
     gEditor = gDebugger.DebuggerView.editor;
-    gScripts = gDebugger.DebuggerView.Sources;
+    gSources = gDebugger.DebuggerView.Sources;
     gSearchBox = gDebugger.DebuggerView.Filtering._searchbox;
-    gMenulist = gScripts._container;
 
     write(":12");
@@ -138,6 +118,6 @@ function testScriptSearching() {
        gEditor.getCaretPosition().col == 2 + token.length,
       "The editor didn't jump to the correct token. (6)");
-    isnot(gMenulist.getAttribute("label"), noMatchingScripts,
-      "The menulist should not display a notice that matches are found.");
+    isnot(gSources._container.getAttribute("label"), noMatchingSources,
+      "The scripts container should not display a notice that matches are found.");
 
     write(":13#" + token);
@@ -145,6 +125,6 @@ function testScriptSearching() {
        gEditor.getCaretPosition().col == 2 + token.length,
       "The editor didn't jump to the correct token. (7)");
-    isnot(gMenulist.getAttribute("label"), noMatchingScripts,
-      "The menulist should not display a notice that matches are found.");
+    isnot(gSources._container.getAttribute("label"), noMatchingSources,
+      "The scripts container should not display a notice that matches are found.");
 
     write(":#" + token);
@@ -152,6 +132,6 @@ function testScriptSearching() {
        gEditor.getCaretPosition().col == 2 + token.length,
       "The editor didn't jump to the correct token. (8)");
-    isnot(gMenulist.getAttribute("label"), noMatchingScripts,
-      "The menulist should not display a notice that matches are found.");
+    isnot(gSources._container.getAttribute("label"), noMatchingSources,
+      "The scripts container should not display a notice that matches are found.");
 
     write("::#" + token);
@@ -159,6 +139,6 @@ function testScriptSearching() {
        gEditor.getCaretPosition().col == 2 + token.length,
       "The editor didn't jump to the correct token. (9)");
-    isnot(gMenulist.getAttribute("label"), noMatchingScripts,
-      "The menulist should not display a notice that matches are found.");
+    isnot(gSources._container.getAttribute("label"), noMatchingSources,
+      "The scripts container should not display a notice that matches are found.");
 
     write(":::#" + token);
@@ -166,6 +146,6 @@ function testScriptSearching() {
        gEditor.getCaretPosition().col == 2 + token.length,
       "The editor didn't jump to the correct token. (10)");
-    isnot(gMenulist.getAttribute("label"), noMatchingScripts,
-      "The menulist should not display a notice that matches are found.");
+    isnot(gSources._container.getAttribute("label"), noMatchingSources,
+      "The scripts container should not display a notice that matches are found.");
 
 
@@ -174,6 +154,6 @@ function testScriptSearching() {
        gEditor.getCaretPosition().col == 2 + token.length,
       "The editor didn't jump to the correct token. (6)");
-    isnot(gMenulist.getAttribute("label"), noMatchingScripts,
-      "The menulist should not display a notice that matches are found.");
+    isnot(gSources._container.getAttribute("label"), noMatchingSources,
+      "The scripts container should not display a notice that matches are found.");
 
     write("#" + token + ":13");
@@ -181,6 +161,6 @@ function testScriptSearching() {
        gEditor.getCaretPosition().col == 2 + token.length,
       "The editor didn't jump to the correct token. (7)");
-    isnot(gMenulist.getAttribute("label"), noMatchingScripts,
-      "The menulist should not display a notice that matches are found.");
+    isnot(gSources._container.getAttribute("label"), noMatchingSources,
+      "The scripts container should not display a notice that matches are found.");
 
     write("#" + token + ":");
@@ -188,6 +168,6 @@ function testScriptSearching() {
        gEditor.getCaretPosition().col == 2 + token.length,
       "The editor didn't jump to the correct token. (8)");
-    isnot(gMenulist.getAttribute("label"), noMatchingScripts,
-      "The menulist should not display a notice that matches are found.");
+    isnot(gSources._container.getAttribute("label"), noMatchingSources,
+      "The scripts container should not display a notice that matches are found.");
 
     write("#" + token + "::");
@@ -195,6 +175,6 @@ function testScriptSearching() {
        gEditor.getCaretPosition().col == 2 + token.length,
       "The editor didn't jump to the correct token. (9)");
-    isnot(gMenulist.getAttribute("label"), noMatchingScripts,
-      "The menulist should not display a notice that matches are found.");
+    isnot(gSources._container.getAttribute("label"), noMatchingSources,
+      "The scripts container should not display a notice that matches are found.");
 
     write("#" + token + ":::");
@@ -202,6 +182,6 @@ function testScriptSearching() {
        gEditor.getCaretPosition().col == 2 + token.length,
       "The editor didn't jump to the correct token. (10)");
-    isnot(gMenulist.getAttribute("label"), noMatchingScripts,
-      "The menulist should not display a notice that matches are found.");
+    isnot(gSources._container.getAttribute("label"), noMatchingSources,
+      "The scripts container should not display a notice that matches are found.");
 
 
@@ -210,6 +190,6 @@ function testScriptSearching() {
        gEditor.getCaretPosition().col == 2 + token.length,
       "The editor didn't remain at the correct token. (11)");
-    isnot(gMenulist.getAttribute("label"), noMatchingScripts,
-      "The menulist should not display a notice that matches are found.");
+    isnot(gSources._container.getAttribute("label"), noMatchingSources,
+      "The scripts container should not display a notice that matches are found.");
 
     write("#__i do not exist__");
@@ -217,6 +197,6 @@ function testScriptSearching() {
        gEditor.getCaretPosition().col == 2 + token.length,
       "The editor didn't remain at the correct token. (12)");
-    isnot(gMenulist.getAttribute("label"), noMatchingScripts,
-      "The menulist should not display a notice that matches are found.");
+    isnot(gSources._container.getAttribute("label"), noMatchingSources,
+      "The scripts container should not display a notice that matches are found.");
 
 
@@ -226,6 +206,6 @@ function testScriptSearching() {
        gEditor.getCaretPosition().col == 44 + token.length,
       "The editor didn't jump to the correct token. (12.1)");
-    isnot(gMenulist.getAttribute("label"), noMatchingScripts,
-      "The menulist should not display a notice that matches are found.");
+    isnot(gSources._container.getAttribute("label"), noMatchingSources,
+      "The scripts container should not display a notice that matches are found.");
 
     clear();
@@ -234,6 +214,6 @@ function testScriptSearching() {
        gEditor.getCaretPosition().col == 44 + token.length,
       "The editor shouldn't jump to another token. (12.2)");
-    isnot(gMenulist.getAttribute("label"), noMatchingScripts,
-      "The menulist should not display a notice that matches are found.");
+    isnot(gSources._container.getAttribute("label"), noMatchingSources,
+      "The scripts container should not display a notice that matches are found.");
 
     EventUtils.sendKey("ENTER", gDebugger);
@@ -241,6 +221,6 @@ function testScriptSearching() {
        gEditor.getCaretPosition().col == 44 + token.length,
       "The editor shouldn't jump to another token. (12.3)");
-    isnot(gMenulist.getAttribute("label"), noMatchingScripts,
-      "The menulist should not display a notice that matches are found.");
+    isnot(gSources._container.getAttribute("label"), noMatchingSources,
+      "The scripts container should not display a notice that matches are found.");
 
 
@@ -285,11 +265,11 @@ function testScriptSearching() {
        gEditor.getCaretPosition().col == 4 + token.length,
       "The editor didn't remain at the correct token. (19)");
-    is(gScripts.visibleItems.length, 1,
+    is(gSources.visibleItems.length, 1,
       "Not all the scripts are shown after the search. (20)");
-    isnot(gMenulist.getAttribute("label"), noMatchingScripts,
-      "The menulist should not display a notice that matches are found.");
+    isnot(gSources._container.getAttribute("label"), noMatchingSources,
+      "The scripts container should not display a notice that matches are found.");
 
     closeDebuggerAndFinish();
-  });
+  }}, 0);
 }
 
@@ -320,6 +300,5 @@ registerCleanupFunction(function() {
   gDebugger = null;
   gEditor = null;
-  gScripts = null;
+  gSources = null;
   gSearchBox = null;
-  gMenulist = null;
 });
diff --git a/browser/devtools/debugger/test/browser_dbg_scripts-searching-02.js b/browser/devtools/debugger/test/browser_dbg_scripts-searching-02.js
--- a/browser/devtools/debugger/test/browser_dbg_scripts-searching-02.js
+++ b/browser/devtools/debugger/test/browser_dbg_scripts-searching-02.js
@@ -14,7 +14,6 @@ var gDebuggee = null;
 var gDebugger = null;
 var gEditor = null;
-var gScripts = null;
+var gSources = null;
 var gSearchBox = null;
-var gMenulist = null;
 
 function test()
@@ -28,4 +27,5 @@ function test()
     gPane = aPane;
     gDebugger = gPane.panelWin;
+    gDebugger.SourceResults.prototype.alwaysExpand = false;
 
     gDebugger.addEventListener("Debugger:SourceShown", function _onEvent(aEvent) {
@@ -57,7 +57,6 @@ function testScriptSearching() {
   gDebugger.DebuggerController.activeThread.resume(function() {
     gEditor = gDebugger.DebuggerView.editor;
-    gScripts = gDebugger.DebuggerView.Sources;
+    gSources = gDebugger.DebuggerView.Sources;
     gSearchBox = gDebugger.DebuggerView.Filtering._searchbox;
-    gMenulist = gScripts._container;
 
     firstSearch();
@@ -79,9 +78,11 @@ function firstSearch() {
            gEditor.getCaretPosition().col == 0,
           "The editor didn't jump to the correct line. (1)");
-        is(gScripts.visibleItems.length, 1,
+        is(gSources.visibleItems.length, 1,
           "Not all the correct scripts are shown after the search. (1)");
 
         secondSearch();
       });
+    } else {
+      ok(false, "Get off my lawn.");
     }
   });
@@ -107,12 +108,14 @@ function secondSearch() {
            gEditor.getCaretPosition().col == 8 + token.length,
           "The editor didn't jump to the correct line. (2)");
-        is(gScripts.visibleItems.length, 1,
+        is(gSources.visibleItems.length, 1,
           "Not all the correct scripts are shown after the search. (2)");
 
         waitForFirstScript();
       });
+    } else {
+      ok(false, "Get off my lawn.");
     }
   });
-  gScripts.selectedIndex = 1;
+  gSources.selectedIndex = 1;
 }
 
@@ -131,5 +134,5 @@ function waitForFirstScript() {
     }
   });
-  gScripts.selectedIndex = 0;
+  gSources.selectedIndex = 0;
 }
 
@@ -150,9 +153,11 @@ function thirdSearch() {
            gEditor.getCaretPosition().col == 8 + token.length,
           "The editor didn't jump to the correct line. (3)");
-        is(gScripts.visibleItems.length, 1,
+        is(gSources.visibleItems.length, 1,
           "Not all the correct scripts are shown after the search. (3)");
 
         fourthSearch(0, "ugger;", token);
       });
+    } else {
+      ok(false, "Get off my lawn.");
     }
   });
@@ -179,10 +184,10 @@ function fourthSearch(i, string, token) 
 
   executeSoon(function() {
-    let noMatchingScripts = gDebugger.L10N.getStr("noMatchingScriptsText");
+    let noMatchingSources = gDebugger.L10N.getStr("noMatchingSourcesText");
 
-    is(gScripts.visibleItems.length, 2,
+    is(gSources.visibleItems.length, 2,
       "Not all the scripts are shown after the searchbox was emptied.");
-    is(gMenulist.selectedIndex, 1,
-      "The menulist should have retained its selected index after the searchbox was emptied.");
+    is(gSources.selectedIndex, 1,
+      "The scripts container should have retained its selected index after the searchbox was emptied.");
 
     write("BOGUS");
@@ -191,10 +196,10 @@ function fourthSearch(i, string, token) 
       "The editor didn't remain at the correct token. (6)");
 
-    is(gMenulist.getAttribute("label"), noMatchingScripts,
-      "The menulist should display a notice that no scripts match the searched token.");
-    is(gScripts.visibleItems.length, 0,
-      "No scripts should be displayed in the menulist after a bogus search.");
-    is(gMenulist.selectedIndex, 1,
-      "The menulist should retain its selected index after a bogus search.");
+    is(gSources._container.getAttribute("label"), noMatchingSources,
+      "The scripts container should display a notice that no scripts match the searched token.");
+    is(gSources.visibleItems.length, 0,
+      "No scripts should be displayed in the scripts container after a bogus search.");
+    is(gSources.selectedIndex, 1,
+      "The scripts container should retain its selected index after a bogus search.");
 
     clear();
@@ -203,17 +208,17 @@ function fourthSearch(i, string, token) 
       "The editor didn't remain at the correct token. (7)");
 
-    isnot(gMenulist.getAttribute("label"), noMatchingScripts,
-      "The menulist should not display a notice after the searchbox was emptied.");
-    is(gScripts.visibleItems.length, 2,
+    isnot(gSources._container.getAttribute("label"), noMatchingSources,
+      "The scripts container should not display a notice after the searchbox was emptied.");
+    is(gSources.visibleItems.length, 2,
       "Not all the scripts are shown after the searchbox was emptied.");
-    is(gMenulist.selectedIndex, 1,
-      "The menulist should have retained its selected index after the searchbox was emptied of a bogus search.");
+    is(gSources.selectedIndex, 1,
+      "The scripts container should have retained its selected index after the searchbox was emptied of a bogus search.");
 
-    noMatchingScriptsSingleCharCheck(token, i);
+    noMatchingSourcesSingleCharCheck(token, i);
   });
 }
 
-function noMatchingScriptsSingleCharCheck(token, i) {
-  let noMatchingScripts = gDebugger.L10N.getStr("noMatchingScriptsText");
+function noMatchingSourcesSingleCharCheck(token, i) {
+  let noMatchingSources = gDebugger.L10N.getStr("noMatchingSourcesText");
 
   write("x");
@@ -222,10 +227,10 @@ function noMatchingScriptsSingleCharChec
     "The editor didn't remain at the correct token. (8)");
 
-  is(gMenulist.getAttribute("label"), noMatchingScripts,
-    "The menulist should display a notice after no matches are found.");
-  is(gScripts.visibleItems.length, 0,
+  is(gSources._container.getAttribute("label"), noMatchingSources,
+    "The scripts container should display a notice after no matches are found.");
+  is(gSources.visibleItems.length, 0,
     "No scripts should be shown after no matches are found.");
-  is(gMenulist.selectedIndex, 1,
-    "The menulist should have retained its selected index after no matches are found.");
+  is(gSources.selectedIndex, 1,
+    "The scripts container should have retained its selected index after no matches are found.");
 
   closeDebuggerAndFinish();
@@ -258,6 +263,5 @@ registerCleanupFunction(function() {
   gDebugger = null;
   gEditor = null;
-  gScripts = null;
+  gSources = null;
   gSearchBox = null;
-  gMenulist = null;
 });
diff --git a/browser/devtools/debugger/test/browser_dbg_scripts-searching-03.js b/browser/devtools/debugger/test/browser_dbg_scripts-searching-03.js
--- a/browser/devtools/debugger/test/browser_dbg_scripts-searching-03.js
+++ b/browser/devtools/debugger/test/browser_dbg_scripts-searching-03.js
@@ -15,5 +15,5 @@ var gDebuggee = null;
 var gDebugger = null;
 var gEditor = null;
-var gScripts = null;
+var gSources = null;
 var gSearchView = null;
 var gSearchBox = null;
@@ -59,5 +59,5 @@ function testScriptSearching() {
   gDebugger.DebuggerController.activeThread.resume(function() {
     gEditor = gDebugger.DebuggerView.editor;
-    gScripts = gDebugger.DebuggerView.Sources;
+    gSources = gDebugger.DebuggerView.Sources;
     gSearchView = gDebugger.DebuggerView.GlobalSearch;
     gSearchBox = gDebugger.DebuggerView.Filtering._searchbox;
@@ -77,8 +77,8 @@ function firstSearch() {
   gDebugger.addEventListener("Debugger:GlobalSearch:MatchFound", function _onEvent(aEvent) {
     gDebugger.removeEventListener(aEvent.type, _onEvent);
-    info("Current script url:\n" + gScripts.selectedValue + "\n");
+    info("Current script url:\n" + gSources.selectedValue + "\n");
     info("Debugger editor text:\n" + gEditor.getText() + "\n");
 
-    let url = gScripts.selectedValue;
+    let url = gSources.selectedValue;
     if (url.indexOf("-02.js") != -1) {
       executeSoon(function() {
@@ -87,5 +87,5 @@ function firstSearch() {
            gEditor.getCaretPosition().col == 0,
           "The editor shouldn't have jumped to a matching line yet.");
-        is(gScripts.visibleItems.length, 2,
+        is(gSources.visibleItems.length, 2,
           "Not all the scripts are shown after the global search.");
 
@@ -99,5 +99,5 @@ function firstSearch() {
           "The first script results should automatically be expanded.")
         is(item1.instance.expanded, false,
-          "The first script results should not be automatically expanded.")
+          "The second script results should not be automatically expanded.")
 
         let searchResult0 = scriptResults[0].querySelectorAll(".dbg-search-result");
@@ -109,64 +109,64 @@ function firstSearch() {
 
         let firstLine0 = searchResult0[0];
-        is(firstLine0.querySelector(".line-number").getAttribute("value"), "1",
+        is(firstLine0.querySelector(".dbg-results-line-number").getAttribute("value"), "1",
           "The first result for the first script doesn't have the correct line attached.");
 
-        is(firstLine0.querySelectorAll(".line-contents").length, 1,
+        is(firstLine0.querySelectorAll(".dbg-results-line-contents").length, 1,
           "The first result for the first script doesn't have the correct number of nodes for a line.");
-        is(firstLine0.querySelectorAll(".string").length, 3,
+        is(firstLine0.querySelectorAll(".dbg-results-line-contents-string").length, 3,
           "The first result for the first script doesn't have the correct number of strings in a line.");
 
-        is(firstLine0.querySelectorAll(".string[match=true]").length, 1,
+        is(firstLine0.querySelectorAll(".dbg-results-line-contents-string[match=true]").length, 1,
           "The first result for the first script doesn't have the correct number of matches in a line.");
-        is(firstLine0.querySelectorAll(".string[match=true]")[0].getAttribute("value"), "de",
+        is(firstLine0.querySelectorAll(".dbg-results-line-contents-string[match=true]")[0].getAttribute("value"), "de",
           "The first result for the first script doesn't have the correct match in a line.");
 
-        is(firstLine0.querySelectorAll(".string[match=false]").length, 2,
+        is(firstLine0.querySelectorAll(".dbg-results-line-contents-string[match=false]").length, 2,
           "The first result for the first script doesn't have the correct number of non-matches in a line.");
-        is(firstLine0.querySelectorAll(".string[match=false]")[0].getAttribute("value"), "/* Any copyright is ",
+        is(firstLine0.querySelectorAll(".dbg-results-line-contents-string[match=false]")[0].getAttribute("value"), "/* Any copyright is ",
           "The first result for the first script doesn't have the correct non-matches in a line.");
-        is(firstLine0.querySelectorAll(".string[match=false]")[1].getAttribute("value"), "dicated to the Public Domain.",
+        is(firstLine0.querySelectorAll(".dbg-results-line-contents-string[match=false]")[1].getAttribute("value"), "dicated to the Public Domain.",
           "The first result for the first script doesn't have the correct non-matches in a line.");
 
         let firstLine1 = searchResult1[0];
-        is(firstLine1.querySelector(".line-number").getAttribute("value"), "1",
+        is(firstLine1.querySelector(".dbg-results-line-number").getAttribute("value"), "1",
           "The first result for the second script doesn't have the correct line attached.");
 
-        is(firstLine1.querySelectorAll(".line-contents").length, 1,
+        is(firstLine1.querySelectorAll(".dbg-results-line-contents").length, 1,
           "The first result for the second script doesn't have the correct number of nodes for a line.");
-        is(firstLine1.querySelectorAll(".string").length, 3,
+        is(firstLine1.querySelectorAll(".dbg-results-line-contents-string").length, 3,
           "The first result for the second script doesn't have the correct number of strings in a line.");
 
-        is(firstLine1.querySelectorAll(".string[match=true]").length, 1,
+        is(firstLine1.querySelectorAll(".dbg-results-line-contents-string[match=true]").length, 1,
           "The first result for the second script doesn't have the correct number of matches in a line.");
-        is(firstLine1.querySelectorAll(".string[match=true]")[0].getAttribute("value"), "de",
+        is(firstLine1.querySelectorAll(".dbg-results-line-contents-string[match=true]")[0].getAttribute("value"), "de",
           "The first result for the second script doesn't have the correct match in a line.");
 
-        is(firstLine1.querySelectorAll(".string[match=false]").length, 2,
+        is(firstLine1.querySelectorAll(".dbg-results-line-contents-string[match=false]").length, 2,
           "The first result for the second script doesn't have the correct number of non-matches in a line.");
-        is(firstLine1.querySelectorAll(".string[match=false]")[0].getAttribute("value"), "/* Any copyright is ",
+        is(firstLine1.querySelectorAll(".dbg-results-line-contents-string[match=false]")[0].getAttribute("value"), "/* Any copyright is ",
           "The first result for the second script doesn't have the correct non-matches in a line.");
-        is(firstLine1.querySelectorAll(".string[match=false]")[1].getAttribute("value"), "dicated to the Public Domain.",
+        is(firstLine1.querySelectorAll(".dbg-results-line-contents-string[match=false]")[1].getAttribute("value"), "dicated to the Public Domain.",
           "The first result for the second script doesn't have the correct non-matches in a line.");
 
         let secondLine1 = searchResult1[1];
-        is(secondLine1.querySelector(".line-number").getAttribute("value"), "6",
+        is(secondLine1.querySelector(".dbg-results-line-number").getAttribute("value"), "6",
           "The second result for the second script doesn't have the correct line attached.");
 
-        is(secondLine1.querySelectorAll(".line-contents").length, 1,
+        is(secondLine1.querySelectorAll(".dbg-results-line-contents").length, 1,
           "The second result for the second script doesn't have the correct number of nodes for a line.");
-        is(secondLine1.querySelectorAll(".string").length, 3,
+        is(secondLine1.querySelectorAll(".dbg-results-line-contents-string").length, 3,
           "The second result for the second script doesn't have the correct number of strings in a line.");
 
-        is(secondLine1.querySelectorAll(".string[match=true]").length, 1,
+        is(secondLine1.querySelectorAll(".dbg-results-line-contents-string[match=true]").length, 1,
           "The second result for the second script doesn't have the correct number of matches in a line.");
-        is(secondLine1.querySelectorAll(".string[match=true]")[0].getAttribute("value"), "de",
+        is(secondLine1.querySelectorAll(".dbg-results-line-contents-string[match=true]")[0].getAttribute("value"), "de",
           "The second result for the second script doesn't have the correct match in a line.");
 
-        is(secondLine1.querySelectorAll(".string[match=false]").length, 2,
+        is(secondLine1.querySelectorAll(".dbg-results-line-contents-string[match=false]").length, 2,
           "The second result for the second script doesn't have the correct number of non-matches in a line.");
-        is(secondLine1.querySelectorAll(".string[match=false]")[0].getAttribute("value"), '  eval("',
+        is(secondLine1.querySelectorAll(".dbg-results-line-contents-string[match=false]")[0].getAttribute("value"), '  eval("',
           "The second result for the second script doesn't have the correct non-matches in a line.");
-        is(secondLine1.querySelectorAll(".string[match=false]")[1].getAttribute("value"), 'bugger;");',
+        is(secondLine1.querySelectorAll(".dbg-results-line-contents-string[match=false]")[1].getAttribute("value"), 'bugger;");',
           "The second result for the second script doesn't have the correct non-matches in a line.");
 
@@ -193,8 +193,8 @@ function secondSearch() {
   gDebugger.addEventListener("Debugger:GlobalSearch:MatchFound", function _onEvent(aEvent) {
     gDebugger.removeEventListener(aEvent.type, _onEvent);
-    info("Current script url:\n" + gScripts.selectedValue + "\n");
+    info("Current script url:\n" + gSources.selectedValue + "\n");
     info("Debugger editor text:\n" + gEditor.getText() + "\n");
 
-    let url = gScripts.selectedValue;
+    let url = gSources.selectedValue;
     if (url.indexOf("-02.js") != -1) {
       executeSoon(function() {
@@ -203,5 +203,5 @@ function secondSearch() {
            gEditor.getCaretPosition().col == 0,
           "The editor shouldn't have jumped to a matching line yet.");
-        is(gScripts.visibleItems.length, 2,
+        is(gSources.visibleItems.length, 2,
           "Not all the scripts are shown after the global search.");
 
@@ -225,51 +225,51 @@ function secondSearch() {
 
         let firstLine0 = searchResult0[0];
-        is(firstLine0.querySelector(".line-number").getAttribute("value"), "1",
+        is(firstLine0.querySelector(".dbg-results-line-number").getAttribute("value"), "1",
           "The first result for the first script doesn't have the correct line attached.");
 
-        is(firstLine0.querySelectorAll(".line-contents").length, 1,
+        is(firstLine0.querySelectorAll(".dbg-results-line-contents").length, 1,
           "The first result for the first script doesn't have the correct number of nodes for a line.");
-        is(firstLine0.querySelectorAll(".string").length, 5,
+        is(firstLine0.querySelectorAll(".dbg-results-line-contents-string").length, 5,
           "The first result for the first script doesn't have the correct number of strings in a line.");
 
-        is(firstLine0.querySelectorAll(".string[match=true]").length, 2,
+        is(firstLine0.querySelectorAll(".dbg-results-line-contents-string[match=true]").length, 2,
           "The first result for the first script doesn't have the correct number of matches in a line.");
-        is(firstLine0.querySelectorAll(".string[match=true]")[0].getAttribute("value"), "ed",
+        is(firstLine0.querySelectorAll(".dbg-results-line-contents-string[match=true]")[0].getAttribute("value"), "ed",
           "The first result for the first script doesn't have the correct matches in a line.");
-        is(firstLine0.querySelectorAll(".string[match=true]")[1].getAttribute("value"), "ed",
+        is(firstLine0.querySelectorAll(".dbg-results-line-contents-string[match=true]")[1].getAttribute("value"), "ed",
           "The first result for the first script doesn't have the correct matches in a line.");
 
-        is(firstLine0.querySelectorAll(".string[match=false]").length, 3,
+        is(firstLine0.querySelectorAll(".dbg-results-line-contents-string[match=false]").length, 3,
           "The first result for the first script doesn't have the correct number of non-matches in a line.");
-        is(firstLine0.querySelectorAll(".string[match=false]")[0].getAttribute("value"), "/* Any copyright is d",
+        is(firstLine0.querySelectorAll(".dbg-results-line-contents-string[match=false]")[0].getAttribute("value"), "/* Any copyright is d",
           "The first result for the first script doesn't have the correct non-matches in a line.");
-        is(firstLine0.querySelectorAll(".string[match=false]")[1].getAttribute("value"), "icat",
+        is(firstLine0.querySelectorAll(".dbg-results-line-contents-string[match=false]")[1].getAttribute("value"), "icat",
           "The first result for the first script doesn't have the correct non-matches in a line.");
-        is(firstLine0.querySelectorAll(".string[match=false]")[2].getAttribute("value"), " to the Public Domain.",
+        is(firstLine0.querySelectorAll(".dbg-results-line-contents-string[match=false]")[2].getAttribute("value"), " to the Public Domain.",
           "The first result for the first script doesn't have the correct non-matches in a line.");
 
         let firstLine1 = searchResult1[0];
-        is(firstLine1.querySelector(".line-number").getAttribute("value"), "1",
+        is(firstLine1.querySelector(".dbg-results-line-number").getAttribute("value"), "1",
           "The first result for the second script doesn't have the correct line attached.");
 
-        is(firstLine1.querySelectorAll(".line-contents").length, 1,
+        is(firstLine1.querySelectorAll(".dbg-results-line-contents").length, 1,
           "The first result for the second script doesn't have the correct number of nodes for a line.");
-        is(firstLine1.querySelectorAll(".string").length, 5,
+        is(firstLine1.querySelectorAll(".dbg-results-line-contents-string").length, 5,
           "The first result for the second script doesn't have the correct number of strings in a line.");
 
-        is(firstLine1.querySelectorAll(".string[match=true]").length, 2,
+        is(firstLine1.querySelectorAll(".dbg-results-line-contents-string[match=true]").length, 2,
           "The first result for the second script doesn't have the correct number of matches in a line.");
-        is(firstLine1.querySelectorAll(".string[match=true]")[0].getAttribute("value"), "ed",
+        is(firstLine1.querySelectorAll(".dbg-results-line-contents-string[match=true]")[0].getAttribute("value"), "ed",
           "The first result for the second script doesn't have the correct matches in a line.");
-        is(firstLine1.querySelectorAll(".string[match=true]")[1].getAttribute("value"), "ed",
+        is(firstLine1.querySelectorAll(".dbg-results-line-contents-string[match=true]")[1].getAttribute("value"), "ed",
           "The first result for the second script doesn't have the correct matches in a line.");
 
-        is(firstLine1.querySelectorAll(".string[match=false]").length, 3,
+        is(firstLine1.querySelectorAll(".dbg-results-line-contents-string[match=false]").length, 3,
           "The first result for the second script doesn't have the correct number of non-matches in a line.");
-        is(firstLine1.querySelectorAll(".string[match=false]")[0].getAttribute("value"), "/* Any copyright is d",
+        is(firstLine1.querySelectorAll(".dbg-results-line-contents-string[match=false]")[0].getAttribute("value"), "/* Any copyright is d",
           "The first result for the second script doesn't have the correct non-matches in a line.");
-        is(firstLine1.querySelectorAll(".string[match=false]")[1].getAttribute("value"), "icat",
+        is(firstLine1.querySelectorAll(".dbg-results-line-contents-string[match=false]")[1].getAttribute("value"), "icat",
           "The first result for the second script doesn't have the correct non-matches in a line.");
-        is(firstLine1.querySelectorAll(".string[match=false]")[2].getAttribute("value"), " to the Public Domain.",
+        is(firstLine1.querySelectorAll(".dbg-results-line-contents-string[match=false]")[2].getAttribute("value"), " to the Public Domain.",
           "The first result for the second script doesn't have the correct non-matches in a line.");
 
@@ -332,5 +332,5 @@ registerCleanupFunction(function() {
   gDebugger = null;
   gEditor = null;
-  gScripts = null;
+  gSources = null;
   gSearchView = null;
   gSearchBox = null;
diff --git a/browser/devtools/debugger/test/browser_dbg_scripts-searching-04.js b/browser/devtools/debugger/test/browser_dbg_scripts-searching-04.js
--- a/browser/devtools/debugger/test/browser_dbg_scripts-searching-04.js
+++ b/browser/devtools/debugger/test/browser_dbg_scripts-searching-04.js
@@ -15,5 +15,5 @@ var gDebuggee = null;
 var gDebugger = null;
 var gEditor = null;
-var gScripts = null;
+var gSources = null;
 var gSearchView = null;
 var gSearchBox = null;
@@ -59,5 +59,5 @@ function testScriptSearching() {
   gDebugger.DebuggerController.activeThread.resume(function() {
     gEditor = gDebugger.DebuggerView.editor;
-    gScripts = gDebugger.DebuggerView.Sources;
+    gSources = gDebugger.DebuggerView.Sources;
     gSearchView = gDebugger.DebuggerView.GlobalSearch;
     gSearchBox = gDebugger.DebuggerView.Filtering._searchbox;
@@ -77,8 +77,8 @@ function doSearch() {
   gDebugger.addEventListener("Debugger:GlobalSearch:MatchFound", function _onEvent(aEvent) {
     gDebugger.removeEventListener(aEvent.type, _onEvent);
-    info("Current script url:\n" + gScripts.selectedValue + "\n");
+    info("Current script url:\n" + gSources.selectedValue + "\n");
     info("Debugger editor text:\n" + gEditor.getText() + "\n");
 
-    let url = gScripts.selectedValue;
+    let url = gSources.selectedValue;
     if (url.indexOf("-02.js") != -1) {
       executeSoon(function() {
@@ -87,5 +87,5 @@ function doSearch() {
            gEditor.getCaretPosition().col == 0,
           "The editor shouldn't have jumped to a matching line yet.");
-        is(gScripts.visibleItems.length, 2,
+        is(gSources.visibleItems.length, 2,
           "Not all the scripts are shown after the global search.");
 
@@ -121,5 +121,5 @@ function doFirstJump() {
            gEditor.getCaretPosition().col == 6,
           "The editor didn't jump to the correct line. (1)");
-        is(gScripts.visibleItems.length, 2,
+        is(gSources.visibleItems.length, 2,
           "Not all the correct scripts are shown after the search. (1)");
 
@@ -148,5 +148,5 @@ function doSecondJump() {
            gEditor.getCaretPosition().col == 6,
           "The editor didn't jump to the correct line. (2)");
-        is(gScripts.visibleItems.length, 2,
+        is(gSources.visibleItems.length, 2,
           "Not all the correct scripts are shown after the search. (2)");
 
@@ -175,5 +175,5 @@ function doWrapAroundJump() {
            gEditor.getCaretPosition().col == 6,
           "The editor didn't jump to the correct line. (3)");
-        is(gScripts.visibleItems.length, 2,
+        is(gSources.visibleItems.length, 2,
           "Not all the correct scripts are shown after the search. (3)");
 
@@ -202,5 +202,5 @@ function doBackwardsWrapAroundJump() {
            gEditor.getCaretPosition().col == 6,
           "The editor didn't jump to the correct line. (4)");
-        is(gScripts.visibleItems.length, 2,
+        is(gSources.visibleItems.length, 2,
           "Not all the correct scripts are shown after the search. (4)");
 
@@ -219,8 +219,8 @@ function testSearchTokenEmpty() {
   gDebugger.addEventListener("Debugger:GlobalSearch:TokenEmpty", function _onEvent(aEvent) {
     gDebugger.removeEventListener(aEvent.type, _onEvent);
-    info("Current script url:\n" + gScripts.selectedValue + "\n");
+    info("Current script url:\n" + gSources.selectedValue + "\n");
     info("Debugger editor text:\n" + gEditor.getText() + "\n");
 
-    let url = gScripts.selectedValue;
+    let url = gSources.selectedValue;
     if (url.indexOf("-02.js") != -1) {
       executeSoon(function() {
@@ -229,5 +229,5 @@ function testSearchTokenEmpty() {
            gEditor.getCaretPosition().col == 6,
           "The editor didn't remain at the correct line. (5)");
-        is(gScripts.visibleItems.length, 2,
+        is(gSources.visibleItems.length, 2,
           "Not all the correct scripts are shown after the search. (5)");
 
@@ -280,5 +280,5 @@ registerCleanupFunction(function() {
   gDebugger = null;
   gEditor = null;
-  gScripts = null;
+  gSources = null;
   gSearchView = null;
   gSearchBox = null;
diff --git a/browser/devtools/debugger/test/browser_dbg_scripts-searching-05.js b/browser/devtools/debugger/test/browser_dbg_scripts-searching-05.js
--- a/browser/devtools/debugger/test/browser_dbg_scripts-searching-05.js
+++ b/browser/devtools/debugger/test/browser_dbg_scripts-searching-05.js
@@ -15,5 +15,5 @@ var gDebuggee = null;
 var gDebugger = null;
 var gEditor = null;
-var gScripts = null;
+var gSources = null;
 var gSearchView = null;
 var gSearchBox = null;
@@ -59,5 +59,5 @@ function testScriptSearching() {
   gDebugger.DebuggerController.activeThread.resume(function() {
     gEditor = gDebugger.DebuggerView.editor;
-    gScripts = gDebugger.DebuggerView.Sources;
+    gSources = gDebugger.DebuggerView.Sources;
     gSearchView = gDebugger.DebuggerView.GlobalSearch;
     gSearchBox = gDebugger.DebuggerView.Filtering._searchbox;
@@ -77,8 +77,8 @@ function doSearch() {
   gDebugger.addEventListener("Debugger:GlobalSearch:MatchFound", function _onEvent(aEvent) {
     gDebugger.removeEventListener(aEvent.type, _onEvent);
-    info("Current script url:\n" + gScripts.selectedValue + "\n");
+    info("Current script url:\n" + gSources.selectedValue + "\n");
     info("Debugger editor text:\n" + gEditor.getText() + "\n");
 
-    let url = gScripts.selectedValue;
+    let url = gSources.selectedValue;
     if (url.indexOf("-02.js") != -1) {
       executeSoon(function() {
@@ -87,5 +87,5 @@ function doSearch() {
            gEditor.getCaretPosition().col == 0,
           "The editor shouldn't have jumped to a matching line yet.");
-        is(gScripts.visibleItems.length, 2,
+        is(gSources.visibleItems.length, 2,
           "Not all the scripts are shown after the global search.");
 
@@ -172,5 +172,5 @@ registerCleanupFunction(function() {
   gDebugger = null;
   gEditor = null;
-  gScripts = null;
+  gSources = null;
   gSearchView = null;
   gSearchBox = null;
diff --git a/browser/devtools/debugger/test/browser_dbg_scripts-searching-06.js b/browser/devtools/debugger/test/browser_dbg_scripts-searching-06.js
--- a/browser/devtools/debugger/test/browser_dbg_scripts-searching-06.js
+++ b/browser/devtools/debugger/test/browser_dbg_scripts-searching-06.js
@@ -15,5 +15,5 @@ var gDebuggee = null;
 var gDebugger = null;
 var gEditor = null;
-var gScripts = null;
+var gSources = null;
 var gSearchView = null;
 var gSearchBox = null;
@@ -59,5 +59,5 @@ function testScriptSearching() {
   gDebugger.DebuggerController.activeThread.resume(function() {
     gEditor = gDebugger.DebuggerView.editor;
-    gScripts = gDebugger.DebuggerView.Sources;
+    gSources = gDebugger.DebuggerView.Sources;
     gSearchView = gDebugger.DebuggerView.GlobalSearch;
     gSearchBox = gDebugger.DebuggerView.Filtering._searchbox;
@@ -70,8 +70,8 @@ function doSearch() {
   gDebugger.addEventListener("Debugger:GlobalSearch:MatchFound", function _onEvent(aEvent) {
     gDebugger.removeEventListener(aEvent.type, _onEvent);
-    info("Current script url:\n" + gScripts.selectedValue + "\n");
+    info("Current script url:\n" + gSources.selectedValue + "\n");
     info("Debugger editor text:\n" + gEditor.getText() + "\n");
 
-    let url = gScripts.selectedValue;
+    let url = gSources.selectedValue;
     if (url.indexOf("-02.js") != -1) {
       executeSoon(function() {
@@ -80,5 +80,5 @@ function doSearch() {
            gEditor.getCaretPosition().col == 0,
           "The editor shouldn't have jumped to a matching line yet.");
-        is(gScripts.visibleItems.length, 2,
+        is(gSources.visibleItems.length, 2,
           "Not all the scripts are shown after the global search.");
 
@@ -97,8 +97,8 @@ function testSearchMatchNotFound() {
   gDebugger.addEventListener("Debugger:GlobalSearch:MatchNotFound", function _onEvent(aEvent) {
     gDebugger.removeEventListener(aEvent.type, _onEvent);
-    info("Current script url:\n" + gScripts.selectedValue + "\n");
+    info("Current script url:\n" + gSources.selectedValue + "\n");
     info("Debugger editor text:\n" + gEditor.getText() + "\n");
 
-    let url = gScripts.selectedValue;
+    let url = gSources.selectedValue;
     if (url.indexOf("-02.js") != -1) {
       executeSoon(function() {
@@ -107,5 +107,5 @@ function testSearchMatchNotFound() {
            gEditor.getCaretPosition().col == 0,
           "The editor didn't remain at the correct line.");
-        is(gScripts.visibleItems.length, 2,
+        is(gSources.visibleItems.length, 2,
           "Not all the correct scripts are shown after the search.");
 
@@ -145,5 +145,5 @@ registerCleanupFunction(function() {
   gDebugger = null;
   gEditor = null;
-  gScripts = null;
+  gSources = null;
   gSearchView = null;
   gSearchBox = null;
diff --git a/browser/devtools/debugger/test/browser_dbg_scripts-searching-07.js b/browser/devtools/debugger/test/browser_dbg_scripts-searching-07.js
--- a/browser/devtools/debugger/test/browser_dbg_scripts-searching-07.js
+++ b/browser/devtools/debugger/test/browser_dbg_scripts-searching-07.js
@@ -16,5 +16,5 @@ var gDebuggee = null;
 var gDebugger = null;
 var gEditor = null;
-var gScripts = null;
+var gSources = null;
 var gSearchView = null;
 var gSearchBox = null;
@@ -58,12 +58,10 @@ function test()
 
 function testScriptSearching() {
-  gDebugger.DebuggerController.activeThread.resume(function() {
-    gEditor = gDebugger.DebuggerView.editor;
-    gScripts = gDebugger.DebuggerView.Sources;
-    gSearchView = gDebugger.DebuggerView.GlobalSearch;
-    gSearchBox = gDebugger.DebuggerView.Filtering._searchbox;
+  gEditor = gDebugger.DebuggerView.editor;
+  gSources = gDebugger.DebuggerView.Sources;
+  gSearchView = gDebugger.DebuggerView.GlobalSearch;
+  gSearchBox = gDebugger.DebuggerView.Filtering._searchbox;
 
-    doSearch();
-  });
+  doSearch();
 }
 
@@ -71,8 +69,8 @@ function doSearch() {
   gDebugger.addEventListener("Debugger:GlobalSearch:MatchFound", function _onEvent(aEvent) {
     gDebugger.removeEventListener(aEvent.type, _onEvent);
-    info("Current script url:\n" + gScripts.selectedValue + "\n");
+    info("Current script url:\n" + gSources.selectedValue + "\n");
     info("Debugger editor text:\n" + gEditor.getText() + "\n");
 
-    let url = gScripts.selectedValue;
+    let url = gSources.selectedValue;
     if (url.indexOf("-02.js") != -1) {
       executeSoon(function() {
@@ -183,5 +181,5 @@ function testClickLineToJump(scriptResul
            gEditor.getCaretPosition().col == 4,
           "The editor didn't jump to the correct line. (1)");
-        is(gScripts.visibleItems.length, 2,
+        is(gSources.visibleItems.length, 2,
           "Not all the correct scripts are shown after the search. (1)");
 
@@ -193,5 +191,5 @@ function testClickLineToJump(scriptResul
   });
 
-  let firstLine = targetResults.querySelector(".line-contents");
+  let firstLine = targetResults.querySelector(".dbg-results-line-contents");
   EventUtils.sendMouseEvent({ type: "click" }, firstLine);
 }
@@ -218,5 +216,5 @@ function testClickMatchToJump(scriptResu
            gEditor.getCaretPosition().col == 5,
           "The editor didn't jump to the correct line. (1)");
-        is(gScripts.visibleItems.length, 2,
+        is(gSources.visibleItems.length, 2,
           "Not all the correct scripts are shown after the search. (1)");
 
@@ -228,5 +226,5 @@ function testClickMatchToJump(scriptResu
   });
 
-  let matches = targetResults.querySelectorAll(".string[match=true]");
+  let matches = targetResults.querySelectorAll(".dbg-results-line-contents-string[match=true]");
   let lastMatch = matches[matches.length - 1];
   EventUtils.sendMouseEvent({ type: "click" }, lastMatch);
@@ -259,5 +257,5 @@ registerCleanupFunction(function() {
   gDebugger = null;
   gEditor = null;
-  gScripts = null;
+  gSources = null;
   gSearchView = null;
   gSearchBox = null;
diff --git a/browser/devtools/debugger/test/browser_dbg_scripts-searching-08.js b/browser/devtools/debugger/test/browser_dbg_scripts-searching-08.js
--- a/browser/devtools/debugger/test/browser_dbg_scripts-searching-08.js
+++ b/browser/devtools/debugger/test/browser_dbg_scripts-searching-08.js
@@ -15,5 +15,5 @@ var gDebuggee = null;
 var gDebugger = null;
 var gEditor = null;
-var gScripts = null;
+var gSources = null;
 var gSearchView = null;
 var gSearchBox = null;
@@ -57,12 +57,10 @@ function test()
 
 function testScriptSearching() {
-  gDebugger.DebuggerController.activeThread.resume(function() {
-    gEditor = gDebugger.DebuggerView.editor;
-    gScripts = gDebugger.DebuggerView.Sources;
-    gSearchView = gDebugger.DebuggerView.GlobalSearch;
-    gSearchBox = gDebugger.DebuggerView.Filtering._searchbox;
+  gEditor = gDebugger.DebuggerView.editor;
+  gSources = gDebugger.DebuggerView.Sources;
+  gSearchView = gDebugger.DebuggerView.GlobalSearch;
+  gSearchBox = gDebugger.DebuggerView.Filtering._searchbox;
 
-    doSearch();
-  });
+  doSearch();
 }
 
@@ -73,8 +71,8 @@ function doSearch() {
   gDebugger.addEventListener("Debugger:GlobalSearch:MatchFound", function _onEvent(aEvent) {
     gDebugger.removeEventListener(aEvent.type, _onEvent);
-    info("Current script url:\n" + gScripts.selectedValue + "\n");
+    info("Current script url:\n" + gSources.selectedValue + "\n");
     info("Debugger editor text:\n" + gEditor.getText() + "\n");
 
-    let url = gScripts.selectedValue;
+    let url = gSources.selectedValue;
     if (url.indexOf("-02.js") != -1) {
       executeSoon(function() {
@@ -97,8 +95,8 @@ function testFocusLost()
   gDebugger.addEventListener("Debugger:GlobalSearch:ViewCleared", function _onEvent(aEvent) {
     gDebugger.removeEventListener(aEvent.type, _onEvent);
-    info("Current script url:\n" + gScripts.selectedValue + "\n");
+    info("Current script url:\n" + gSources.selectedValue + "\n");
     info("Debugger editor text:\n" + gEditor.getText() + "\n");
 
-    let url = gScripts.selectedValue;
+    let url = gSources.selectedValue;
     if (url.indexOf("-02.js") != -1) {
       executeSoon(function() {
@@ -120,8 +118,8 @@ function reshowSearch() {
   gDebugger.addEventListener("Debugger:GlobalSearch:MatchFound", function _onEvent(aEvent) {
     gDebugger.removeEventListener(aEvent.type, _onEvent);
-    info("Current script url:\n" + gScripts.selectedValue + "\n");
+    info("Current script url:\n" + gSources.selectedValue + "\n");
     info("Debugger editor text:\n" + gEditor.getText() + "\n");
 
-    let url = gScripts.selectedValue;
+    let url = gSources.selectedValue;
     if (url.indexOf("-02.js") != -1) {
       executeSoon(function() {
@@ -144,8 +142,8 @@ function testEscape()
   gDebugger.addEventListener("Debugger:GlobalSearch:ViewCleared", function _onEvent(aEvent) {
     gDebugger.removeEventListener(aEvent.type, _onEvent);
-    info("Current script url:\n" + gScripts.selectedValue + "\n");
+    info("Current script url:\n" + gSources.selectedValue + "\n");
     info("Debugger editor text:\n" + gEditor.getText() + "\n");
 
-    let url = gScripts.selectedValue;
+    let url = gSources.selectedValue;
     if (url.indexOf("-02.js") != -1) {
       executeSoon(function() {
@@ -205,5 +203,5 @@ registerCleanupFunction(function() {
   gDebugger = null;
   gEditor = null;
-  gScripts = null;
+  gSources = null;
   gSearchView = null;
   gSearchBox = null;
diff --git a/browser/devtools/debugger/test/browser_dbg_scripts-searching-files_ui.js b/browser/devtools/debugger/test/browser_dbg_scripts-searching-files_ui.js
--- a/browser/devtools/debugger/test/browser_dbg_scripts-searching-files_ui.js
+++ b/browser/devtools/debugger/test/browser_dbg_scripts-searching-files_ui.js
@@ -14,8 +14,7 @@ var gDebuggee = null;
 var gDebugger = null;
 var gEditor = null;
-var gScripts = null;
+var gSources = null;
 var gSearchBox = null;
 var gFilteredSources = null;
-var gMenulist = null;
 
 function test()
@@ -37,8 +36,7 @@ function test()
 function testScriptSearching() {
   gEditor = gDebugger.DebuggerView.editor;
-  gScripts = gDebugger.DebuggerView.Sources;
+  gSources = gDebugger.DebuggerView.Sources;
   gSearchBox = gDebugger.DebuggerView.Filtering._searchbox;
   gFilteredSources = gDebugger.DebuggerView.FilteredSources;
-  gMenulist = gScripts._container;
 
   firstSearch();
@@ -48,5 +46,5 @@ function firstSearch() {
   gDebugger.addEventListener("popupshown", function _onEvent(aEvent) {
     gDebugger.removeEventListener(aEvent.type, _onEvent);
-    info("Current script url:\n" + gScripts.selectedValue + "\n");
+    info("Current script url:\n" + gSources.selectedValue + "\n");
     info("Debugger editor text:\n" + gEditor.getText() + "\n");
 
@@ -58,31 +56,31 @@ function firstSearch() {
     for (let i = 0; i < gFilteredSources.itemCount; i++) {
       is(gFilteredSources.labels[i],
-         gDebugger.SourceUtils.trimUrlLength(gScripts.labels[i]),
+         gDebugger.SourceUtils.trimUrlLength(gSources.labels[i]),
         "The filtered sources view should have the correct labels.");
       is(gFilteredSources.values[i],
-         gDebugger.SourceUtils.trimUrlLength(gScripts.values[i]),
+         gDebugger.SourceUtils.trimUrlLength(gSources.values[i]),
         "The filtered sources view should have the correct values.");
 
       is(gFilteredSources.visibleItems[i].label,
-         gDebugger.SourceUtils.trimUrlLength(gScripts.labels[i]),
+         gDebugger.SourceUtils.trimUrlLength(gSources.labels[i]),
         "The filtered sources view should have the correct labels.");
       is(gFilteredSources.visibleItems[i].value,
-         gDebugger.SourceUtils.trimUrlLength(gScripts.values[i]),
+         gDebugger.SourceUtils.trimUrlLength(gSources.values[i]),
         "The filtered sources view should have the correct values.");
 
-      is(gFilteredSources.visibleItems[i].attachment.fullLabel, gScripts.labels[i],
+      is(gFilteredSources.visibleItems[i].attachment.fullLabel, gSources.labels[i],
         "The filtered sources view should have the correct labels.");
-      is(gFilteredSources.visibleItems[i].attachment.fullValue, gScripts.values[i],
+      is(gFilteredSources.visibleItems[i].attachment.fullValue, gSources.values[i],
         "The filtered sources view should have the correct values.");
     }
 
     is(gFilteredSources.selectedValue,
-       gDebugger.SourceUtils.trimUrlLength(gScripts.selectedValue),
+       gDebugger.SourceUtils.trimUrlLength(gSources.selectedValue),
       "The correct item should be selected in the filtered sources view");
     is(gFilteredSources.selectedLabel,
-       gDebugger.SourceUtils.trimUrlLength(gScripts.selectedLabel),
+       gDebugger.SourceUtils.trimUrlLength(gSources.selectedLabel),
       "The correct item should be selected in the filtered sources view");
 
-    let url = gScripts.selectedValue;
+    let url = gSources.selectedValue;
     if (url.indexOf("update-editor-mode.html") != -1) {
 
@@ -92,5 +90,5 @@ function firstSearch() {
            gEditor.getCaretPosition().col == 0,
           "The editor didn't jump to the correct line.");
-        is(gScripts.visibleItems.length, 3,
+        is(gSources.visibleItems.length, 3,
           "Not all the correct scripts are shown after the search.");
 
@@ -125,5 +123,5 @@ function secondSearch() {
     }
     proceeded = true;
-    info("Current script url:\n" + gScripts.selectedValue + "\n");
+    info("Current script url:\n" + gSources.selectedValue + "\n");
     info("Debugger editor text:\n" + gEditor.getText() + "\n");
 
@@ -135,31 +133,31 @@ function secondSearch() {
     for (let i = 0; i < gFilteredSources.itemCount; i++) {
       is(gFilteredSources.labels[i],
-         gDebugger.SourceUtils.trimUrlLength(gScripts.visibleItems[i].label),
+         gDebugger.SourceUtils.trimUrlLength(gSources.visibleItems[i].label),
         "The filtered sources view should have the correct labels.");
       is(gFilteredSources.values[i],
-         gDebugger.SourceUtils.trimUrlLength(gScripts.visibleItems[i].value),
+         gDebugger.SourceUtils.trimUrlLength(gSources.visibleItems[i].value),
         "The filtered sources view should have the correct values.");
 
       is(gFilteredSources.visibleItems[i].label,
-         gDebugger.SourceUtils.trimUrlLength(gScripts.visibleItems[i].label),
+         gDebugger.SourceUtils.trimUrlLength(gSources.visibleItems[i].label),
         "The filtered sources view should have the correct labels.");
       is(gFilteredSources.visibleItems[i].value,
-         gDebugger.SourceUtils.trimUrlLength(gScripts.visibleItems[i].value),
+         gDebugger.SourceUtils.trimUrlLength(gSources.visibleItems[i].value),
         "The filtered sources view should have the correct values.");
 
-      is(gFilteredSources.visibleItems[i].attachment.fullLabel, gScripts.visibleItems[i].label,
+      is(gFilteredSources.visibleItems[i].attachment.fullLabel, gSources.visibleItems[i].label,
         "The filtered sources view should have the correct labels.");
-      is(gFilteredSources.visibleItems[i].attachment.fullValue, gScripts.visibleItems[i].value,
+      is(gFilteredSources.visibleItems[i].attachment.fullValue, gSources.visibleItems[i].value,
         "The filtered sources view should have the correct values.");
     }
 
     is(gFilteredSources.selectedValue,
-       gDebugger.SourceUtils.trimUrlLength(gScripts.selectedValue),
+       gDebugger.SourceUtils.trimUrlLength(gSources.selectedValue),
       "The correct item should be selected in the filtered sources view");
     is(gFilteredSources.selectedLabel,
-       gDebugger.SourceUtils.trimUrlLength(gScripts.selectedLabel),
+       gDebugger.SourceUtils.trimUrlLength(gSources.selectedLabel),
       "The correct item should be selected in the filtered sources view");
 
-    let url = gScripts.selectedValue;
+    let url = gSources.selectedValue;
     if (url.indexOf("test-script-switching-01.js") != -1) {
 
@@ -169,5 +167,5 @@ function secondSearch() {
            gEditor.getCaretPosition().col == 0,
           "The editor didn't jump to the correct line.");
-        is(gScripts.visibleItems.length, 1,
+        is(gSources.visibleItems.length, 1,
           "Not all the correct scripts are shown after the search.");
 
@@ -202,5 +200,5 @@ function thirdSearch() {
     }
     proceeded = true;
-    info("Current script url:\n" + gScripts.selectedValue + "\n");
+    info("Current script url:\n" + gSources.selectedValue + "\n");
     info("Debugger editor text:\n" + gEditor.getText() + "\n");
 
@@ -212,31 +210,31 @@ function thirdSearch() {
     for (let i = 0; i < gFilteredSources.itemCount; i++) {
       is(gFilteredSources.labels[i],
-         gDebugger.SourceUtils.trimUrlLength(gScripts.visibleItems[i].label),
+         gDebugger.SourceUtils.trimUrlLength(gSources.visibleItems[i].label),
         "The filtered sources view should have the correct labels.");
       is(gFilteredSources.values[i],
-         gDebugger.SourceUtils.trimUrlLength(gScripts.visibleItems[i].value),
+         gDebugger.SourceUtils.trimUrlLength(gSources.visibleItems[i].value),
         "The filtered sources view should have the correct values.");
 
       is(gFilteredSources.visibleItems[i].label,
-         gDebugger.SourceUtils.trimUrlLength(gScripts.visibleItems[i].label),
+         gDebugger.SourceUtils.trimUrlLength(gSources.visibleItems[i].label),
         "The filtered sources view should have the correct labels.");
       is(gFilteredSources.visibleItems[i].value,
-         gDebugger.SourceUtils.trimUrlLength(gScripts.visibleItems[i].value),
+         gDebugger.SourceUtils.trimUrlLength(gSources.visibleItems[i].value),
         "The filtered sources view should have the correct values.");
 
-      is(gFilteredSources.visibleItems[i].attachment.fullLabel, gScripts.visibleItems[i].label,
+      is(gFilteredSources.visibleItems[i].attachment.fullLabel, gSources.visibleItems[i].label,
         "The filtered sources view should have the correct labels.");
-      is(gFilteredSources.visibleItems[i].attachment.fullValue, gScripts.visibleItems[i].value,
+      is(gFilteredSources.visibleItems[i].attachment.fullValue, gSources.visibleItems[i].value,
         "The filtered sources view should have the correct values.");
     }
 
     is(gFilteredSources.selectedValue,
-       gDebugger.SourceUtils.trimUrlLength(gScripts.selectedValue),
+       gDebugger.SourceUtils.trimUrlLength(gSources.selectedValue),
       "The correct item should be selected in the filtered sources view");
     is(gFilteredSources.selectedLabel,
-       gDebugger.SourceUtils.trimUrlLength(gScripts.selectedLabel),
+       gDebugger.SourceUtils.trimUrlLength(gSources.selectedLabel),
       "The correct item should be selected in the filtered sources view");
 
-    let url = gScripts.selectedValue;
+    let url = gSources.selectedValue;
     if (url.indexOf("update-editor-mode.html") != -1) {
 
@@ -246,5 +244,5 @@ function thirdSearch() {
            gEditor.getCaretPosition().col == 0,
           "The editor didn't jump to the correct line.");
-        is(gScripts.visibleItems.length, 3,
+        is(gSources.visibleItems.length, 3,
           "Not all the correct scripts are shown after the search.");
 
@@ -260,5 +258,5 @@ function thirdSearch() {
 function goDown() {
   gDebugger.addEventListener("Debugger:SourceShown", function _onEvent(aEvent) {
-    info("Current script url:\n" + gScripts.selectedValue + "\n");
+    info("Current script url:\n" + gSources.selectedValue + "\n");
     info("Debugger editor text:\n" + gEditor.getText() + "\n");
 
@@ -269,11 +267,11 @@ function goDown() {
 
     is(gFilteredSources.selectedValue,
-       gDebugger.SourceUtils.trimUrlLength(gScripts.selectedValue),
+       gDebugger.SourceUtils.trimUrlLength(gSources.selectedValue),
       "The correct item should be selected in the filtered sources view");
     is(gFilteredSources.selectedLabel,
-       gDebugger.SourceUtils.trimUrlLength(gScripts.selectedLabel),
+       gDebugger.SourceUtils.trimUrlLength(gSources.selectedLabel),
       "The correct item should be selected in the filtered sources view");
 
-    let url = gScripts.selectedValue;
+    let url = gSources.selectedValue;
     if (url.indexOf("test-editor-mode") != -1) {
       gDebugger.removeEventListener(aEvent.type, _onEvent);
@@ -284,5 +282,5 @@ function goDown() {
            gEditor.getCaretPosition().col == 0,
           "The editor didn't jump to the correct line.");
-        is(gScripts.visibleItems.length, 3,
+        is(gSources.visibleItems.length, 3,
           "Not all the correct scripts are shown after the search.");
 
@@ -298,5 +296,5 @@ function goDown() {
 function goDownAgain() {
   gDebugger.addEventListener("Debugger:SourceShown", function _onEvent(aEvent) {
-    info("Current script url:\n" + gScripts.selectedValue + "\n");
+    info("Current script url:\n" + gSources.selectedValue + "\n");
     info("Debugger editor text:\n" + gEditor.getText() + "\n");
 
@@ -307,11 +305,11 @@ function goDownAgain() {
 
     is(gFilteredSources.selectedValue,
-       gDebugger.SourceUtils.trimUrlLength(gScripts.selectedValue),
+       gDebugger.SourceUtils.trimUrlLength(gSources.selectedValue),
       "The correct item should be selected in the filtered sources view");
     is(gFilteredSources.selectedLabel,
-       gDebugger.SourceUtils.trimUrlLength(gScripts.selectedLabel),
+       gDebugger.SourceUtils.trimUrlLength(gSources.selectedLabel),
       "The correct item should be selected in the filtered sources view");
 
-    let url = gScripts.selectedValue;
+    let url = gSources.selectedValue;
     if (url.indexOf("test-script-switching-01.js") != -1) {
       gDebugger.removeEventListener(aEvent.type, _onEvent);
@@ -322,5 +320,5 @@ function goDownAgain() {
            gEditor.getCaretPosition().col == 0,
           "The editor didn't jump to the correct line.");
-        is(gScripts.visibleItems.length, 3,
+        is(gSources.visibleItems.length, 3,
           "Not all the correct scripts are shown after the search.");
 
@@ -336,5 +334,5 @@ function goDownAgain() {
 function goDownAndWrap() {
   gDebugger.addEventListener("Debugger:SourceShown", function _onEvent(aEvent) {
-    info("Current script url:\n" + gScripts.selectedValue + "\n");
+    info("Current script url:\n" + gSources.selectedValue + "\n");
     info("Debugger editor text:\n" + gEditor.getText() + "\n");
 
@@ -345,11 +343,11 @@ function goDownAndWrap() {
 
     is(gFilteredSources.selectedValue,
-       gDebugger.SourceUtils.trimUrlLength(gScripts.selectedValue),
+       gDebugger.SourceUtils.trimUrlLength(gSources.selectedValue),
       "The correct item should be selected in the filtered sources view");
     is(gFilteredSources.selectedLabel,
-       gDebugger.SourceUtils.trimUrlLength(gScripts.selectedLabel),
+       gDebugger.SourceUtils.trimUrlLength(gSources.selectedLabel),
       "The correct item should be selected in the filtered sources view");
 
-    let url = gScripts.selectedValue;
+    let url = gSources.selectedValue;
     if (url.indexOf("update-editor-mode.html") != -1) {
       gDebugger.removeEventListener(aEvent.type, _onEvent);
@@ -360,5 +358,5 @@ function goDownAndWrap() {
            gEditor.getCaretPosition().col == 0,
           "The editor didn't jump to the correct line.");
-        is(gScripts.visibleItems.length, 3,
+        is(gSources.visibleItems.length, 3,
           "Not all the correct scripts are shown after the search.");
 
@@ -374,5 +372,5 @@ function goDownAndWrap() {
 function goUpAndWrap() {
   gDebugger.addEventListener("Debugger:SourceShown", function _onEvent(aEvent) {
-    info("Current script url:\n" + gScripts.selectedValue + "\n");
+    info("Current script url:\n" + gSources.selectedValue + "\n");
     info("Debugger editor text:\n" + gEditor.getText() + "\n");
 
@@ -383,11 +381,11 @@ function goUpAndWrap() {
 
     is(gFilteredSources.selectedValue,
-       gDebugger.SourceUtils.trimUrlLength(gScripts.selectedValue),
+       gDebugger.SourceUtils.trimUrlLength(gSources.selectedValue),
       "The correct item should be selected in the filtered sources view");
     is(gFilteredSources.selectedLabel,
-       gDebugger.SourceUtils.trimUrlLength(gScripts.selectedLabel),
+       gDebugger.SourceUtils.trimUrlLength(gSources.selectedLabel),
       "The correct item should be selected in the filtered sources view");
 
-    let url = gScripts.selectedValue;
+    let url = gSources.selectedValue;
     if (url.indexOf("test-script-switching-01.js") != -1) {
       gDebugger.removeEventListener(aEvent.type, _onEvent);
@@ -398,5 +396,5 @@ function goUpAndWrap() {
            gEditor.getCaretPosition().col == 0,
           "The editor didn't jump to the correct line.");
-        is(gScripts.visibleItems.length, 3,
+        is(gSources.visibleItems.length, 3,
           "Not all the correct scripts are shown after the search.");
 
@@ -411,6 +409,46 @@ function goUpAndWrap() {
 
 function clickAndSwitch() {
+  let sourceshown = false;
+  let popuphidden = false;
+  let popupshown = false;
+  let reopened = false;
+  let proceeded = false;
+
+  gDebugger.addEventListener("popuphidden", function _onEvent2(aEvent) {
+    gDebugger.removeEventListener(aEvent.type, _onEvent2);
+    info("Popup was hidden...");
+    popuphidden = true;
+
+    gDebugger.addEventListener("popupshown", function _onEvent3(aEvent) {
+      gDebugger.removeEventListener(aEvent.type, _onEvent3);
+      info("Popup was shown...");
+      popupshown = true;
+
+      proceed();
+    });
+
+    reopen();
+  });
+
+  function reopen() {
+    if (!sourceshown || !popuphidden || reopened) {
+      return;
+    }
+    info("Reopening popup...");
+    reopened = true;
+    append(".-");
+  }
+
+  function proceed() {
+    if (!sourceshown || !popuphidden || !popupshown || proceeded) {
+      return;
+    }
+    info("Proceeding with next test...");
+    proceeded = true;
+    executeSoon(clickAndSwitchAgain);
+  }
+
   gDebugger.addEventListener("Debugger:SourceShown", function _onEvent(aEvent) {
-    info("Current script url:\n" + gScripts.selectedValue + "\n");
+    info("Current script url:\n" + gSources.selectedValue + "\n");
     info("Debugger editor text:\n" + gEditor.getText() + "\n");
 
@@ -421,11 +459,11 @@ function clickAndSwitch() {
 
     is(gFilteredSources.selectedValue,
-       gDebugger.SourceUtils.trimUrlLength(gScripts.selectedValue),
+       gDebugger.SourceUtils.trimUrlLength(gSources.selectedValue),
       "The correct item should be selected in the filtered sources view");
     is(gFilteredSources.selectedLabel,
-       gDebugger.SourceUtils.trimUrlLength(gScripts.selectedLabel),
+       gDebugger.SourceUtils.trimUrlLength(gSources.selectedLabel),
       "The correct item should be selected in the filtered sources view");
 
-    let url = gScripts.selectedValue;
+    let url = gSources.selectedValue;
     if (url.indexOf("update-editor-mode.html") != -1) {
       gDebugger.removeEventListener(aEvent.type, _onEvent);
@@ -436,8 +474,10 @@ function clickAndSwitch() {
            gEditor.getCaretPosition().col == 0,
           "The editor didn't jump to the correct line.");
-        is(gScripts.visibleItems.length, 3,
+        is(gSources.visibleItems.length, 3,
           "Not all the correct scripts are shown after the search.");
 
-        clickAndSwitchAgain();
+        info("Source was shown and verified");
+        sourceshown = true;
+        reopen();
       });
     } else {
@@ -449,6 +489,46 @@ function clickAndSwitch() {
 
 function clickAndSwitchAgain() {
+  let sourceshown = false;
+  let popuphidden = false;
+  let popupshown = false;
+  let reopened = false;
+  let proceeded = false;
+
+  gDebugger.addEventListener("popuphidden", function _onEvent2(aEvent) {
+    gDebugger.removeEventListener(aEvent.type, _onEvent2);
+    info("Popup was hidden...");
+    popuphidden = true;
+
+    gDebugger.addEventListener("popupshown", function _onEvent3(aEvent) {
+      gDebugger.removeEventListener(aEvent.type, _onEvent3);
+      info("Popup was shown...");
+      popupshown = true;
+
+      proceed();
+    });
+
+    reopen();
+  });
+
+  function reopen() {
+    if (!sourceshown || !popuphidden || reopened) {
+      return;
+    }
+    info("Reopening popup...");
+    reopened = true;
+    append(".-");
+  }
+
+  function proceed() {
+    if (!sourceshown || !popuphidden || !popupshown || proceeded) {
+      return;
+    }
+    info("Proceeding with next test...");
+    proceeded = true;
+    executeSoon(switchFocusWithEscape);
+  }
+
   gDebugger.addEventListener("Debugger:SourceShown", function _onEvent(aEvent) {
-    info("Current script url:\n" + gScripts.selectedValue + "\n");
+    info("Current script url:\n" + gSources.selectedValue + "\n");
     info("Debugger editor text:\n" + gEditor.getText() + "\n");
 
@@ -459,11 +539,11 @@ function clickAndSwitchAgain() {
 
     is(gFilteredSources.selectedValue,
-       gDebugger.SourceUtils.trimUrlLength(gScripts.selectedValue),
+       gDebugger.SourceUtils.trimUrlLength(gSources.selectedValue),
       "The correct item should be selected in the filtered sources view");
     is(gFilteredSources.selectedLabel,
-       gDebugger.SourceUtils.trimUrlLength(gScripts.selectedLabel),
+       gDebugger.SourceUtils.trimUrlLength(gSources.selectedLabel),
       "The correct item should be selected in the filtered sources view");
 
-    let url = gScripts.selectedValue;
+    let url = gSources.selectedValue;
     if (url.indexOf("test-script-switching-01.js") != -1) {
       gDebugger.removeEventListener(aEvent.type, _onEvent);
@@ -474,8 +554,10 @@ function clickAndSwitchAgain() {
            gEditor.getCaretPosition().col == 0,
           "The editor didn't jump to the correct line.");
-        is(gScripts.visibleItems.length, 3,
+        is(gSources.visibleItems.length, 3,
           "Not all the correct scripts are shown after the search.");
 
-        switchFocusWithEscape();
+        info("Source was shown and verified");
+        sourceshown = true;
+        reopen();
       });
     } else {
@@ -490,9 +572,9 @@ function switchFocusWithEscape() {
     gDebugger.removeEventListener(aEvent.type, _onEvent);
 
-    info("Current script url:\n" + gScripts.selectedValue + "\n");
+    info("Current script url:\n" + gSources.selectedValue + "\n");
     info("Debugger editor text:\n" + gEditor.getText() + "\n");
 
-    let url = gScripts.selectedValue;
-    if (url.indexOf("test-script-switching-01.js") != -1) {
+    let url = gSources.selectedValue;
+    if (url.indexOf("update-editor-mode.html") != -1) {
 
       executeSoon(function() {
@@ -501,5 +583,5 @@ function switchFocusWithEscape() {
            gEditor.getCaretPosition().col == 0,
           "The editor didn't jump to the correct line.");
-        is(gScripts.visibleItems.length, 3,
+        is(gSources.visibleItems.length, 3,
           "Not all the correct scripts are shown after the search.");
 
@@ -517,8 +599,8 @@ function focusAgainAfterEscape() {
     gDebugger.removeEventListener(aEvent.type, _onEvent);
 
-    info("Current script url:\n" + gScripts.selectedValue + "\n");
+    info("Current script url:\n" + gSources.selectedValue + "\n");
     info("Debugger editor text:\n" + gEditor.getText() + "\n");
 
-    let url = gScripts.selectedValue;
+    let url = gSources.selectedValue;
     if (url.indexOf("test-script-switching-01.js") != -1) {
 
@@ -528,5 +610,5 @@ function focusAgainAfterEscape() {
            gEditor.getCaretPosition().col == 0,
           "The editor didn't jump to the correct line.");
-        is(gScripts.visibleItems.length, 1,
+        is(gSources.visibleItems.length, 1,
           "Not all the correct scripts are shown after the search.");
 
@@ -544,8 +626,8 @@ function switchFocusWithReturn() {
     gDebugger.removeEventListener(aEvent.type, _onEvent);
 
-    info("Current script url:\n" + gScripts.selectedValue + "\n");
+    info("Current script url:\n" + gSources.selectedValue + "\n");
     info("Debugger editor text:\n" + gEditor.getText() + "\n");
 
-    let url = gScripts.selectedValue;
+    let url = gSources.selectedValue;
     if (url.indexOf("test-script-switching-01.js") != -1) {
 
@@ -555,5 +637,5 @@ function switchFocusWithReturn() {
            gEditor.getCaretPosition().col == 0,
           "The editor didn't jump to the correct line.");
-        is(gScripts.visibleItems.length, 3,
+        is(gSources.visibleItems.length, 3,
           "Not all the correct scripts are shown after the search.");
 
@@ -599,7 +681,6 @@ registerCleanupFunction(function() {
   gDebugger = null;
   gEditor = null;
-  gScripts = null;
+  gSources = null;
   gSearchBox = null;
   gFilteredSources = null;
-  gMenulist = null;
 });
diff --git a/browser/devtools/debugger/test/browser_dbg_scripts-searching-popup.js b/browser/devtools/debugger/test/browser_dbg_scripts-searching-popup.js
--- a/browser/devtools/debugger/test/browser_dbg_scripts-searching-popup.js
+++ b/browser/devtools/debugger/test/browser_dbg_scripts-searching-popup.js
@@ -9,5 +9,4 @@ var gTab = null;
 var gDebuggee = null;
 var gDebugger = null;
-var gScripts = null;
 var gSearchBox = null;
 var gSearchBoxPanel = null;
@@ -21,16 +20,11 @@ function test()
     gDebugger = gPane.panelWin;
 
-    gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
-      runTest();
-    });
-
-    gDebuggee.firstCall();
+    runTest();
   });
 }
 
 function runTest() {
-  gScripts = gDebugger.DebuggerView.Sources;
   gSearchBox = gDebugger.DebuggerView.Filtering._searchbox;
-  gSearchBoxPanel = gDebugger.DebuggerView.Filtering._searchboxPanel
+  gSearchBoxPanel = gDebugger.DebuggerView.Filtering._searchboxHelpPanel;
 
   focusSearchbox();
@@ -43,4 +37,5 @@ function focusSearchbox() {
   gSearchBoxPanel.addEventListener("popupshown", function _onEvent(aEvent) {
     gSearchBoxPanel.removeEventListener(aEvent.type, _onEvent);
+
     is(gSearchBoxPanel.state, "open",
       "The search box panel should be visible after searching started.");
@@ -48,4 +43,5 @@ function focusSearchbox() {
     closeDebuggerAndFinish();
   });
+
   EventUtils.sendMouseEvent({ type: "click" }, gSearchBox);
 }
@@ -57,5 +53,4 @@ registerCleanupFunction(function() {
   gDebuggee = null;
   gDebugger = null;
-  gScripts = null;
   gSearchBox = null;
   gSearchBoxPanel = null;
diff --git a/browser/devtools/debugger/test/browser_dbg_script-switching.js b/browser/devtools/debugger/test/browser_dbg_scripts-switching.js
rename from browser/devtools/debugger/test/browser_dbg_script-switching.js
rename to browser/devtools/debugger/test/browser_dbg_scripts-switching.js
--- a/browser/devtools/debugger/test/browser_dbg_script-switching.js
+++ b/browser/devtools/debugger/test/browser_dbg_scripts-switching.js
@@ -13,5 +13,5 @@ var gTab = null;
 var gDebuggee = null;
 var gDebugger = null;
-var gScripts = null;
+var gSources = null;
 
 function test()
@@ -58,13 +58,14 @@ function test()
 
 function testScriptsDisplay() {
-  gScripts = gDebugger.DebuggerView.Sources._container;
+  gSources = gDebugger.DebuggerView.Sources;
 
   is(gDebugger.DebuggerController.activeThread.state, "paused",
     "Should only be getting stack frames while paused.");
 
-  is(gScripts.itemCount, 2, "Found the expected number of scripts.");
+  is(gSources.itemCount, 2,
+    "Found the expected number of scripts.");
 
-  for (let i = 0; i < gScripts.itemCount; i++) {
-    info("label: " + i + " " + gScripts.getItemAtIndex(i).getAttribute("label"));
+  for (let i = 0; i < gSources.itemCount; i++) {
+    info("label: " + i + " " + gSources.getItemAtIndex(i).target.getAttribute("label"));
   }
 
@@ -146,3 +147,4 @@ registerCleanupFunction(function() {
   gDebuggee = null;
   gDebugger = null;
+  gSources = null;
 });
diff --git a/browser/devtools/debugger/test/browser_dbg_select-line.js b/browser/devtools/debugger/test/browser_dbg_select-line.js
--- a/browser/devtools/debugger/test/browser_dbg_select-line.js
+++ b/browser/devtools/debugger/test/browser_dbg_select-line.js
@@ -9,16 +9,17 @@
 const TAB_URL = EXAMPLE_URL + "browser_dbg_script-switching.html";
 
-let tempScope = {};
-Cu.import("resource:///modules/source-editor.jsm", tempScope);
-let SourceEditor = tempScope.SourceEditor;
-
 var gPane = null;
 var gTab = null;
 var gDebuggee = null;
 var gDebugger = null;
-var gScripts = null;
+var gSources = null;
 
 function test()
 {
+  let scriptShown = false;
+  let framesAdded = false;
+  let testStarted = false;
+  let resumed = false;
+
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
@@ -26,21 +27,63 @@ function test()
     gPane = aPane;
     gDebugger = gPane.panelWin;
+    gSources = gDebugger.DebuggerView.Sources;
+    resumed = true;
 
-    testSelectLine();
+    gDebugger.addEventListener("Debugger:SourceShown", onScriptShown);
+
+    gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
+      framesAdded = true;
+      executeSoon(startTest);
+    });
+
+    executeSoon(function() {
+      gDebuggee.firstCall();
+    });
   });
+
+  function onScriptShown(aEvent) {
+    scriptShown = aEvent.detail.url.indexOf("-02.js") != -1;
+    executeSoon(startTest);
+  }
+
+  function startTest()
+  {
+    if (scriptShown && framesAdded && resumed && !testStarted) {
+      gDebugger.removeEventListener("Debugger:SourceShown", onScriptShown);
+      testStarted = true;
+      Services.tm.currentThread.dispatch({ run: testSelectLine }, 0);
+    }
+  }
 }
 
 function testSelectLine() {
-  gDebugger.DebuggerController.activeThread.addOneTimeListener("scriptsadded", function() {
-    Services.tm.currentThread.dispatch({ run: function() {
-      gScripts = gDebugger.DebuggerView.Sources._container;
+  is(gDebugger.DebuggerController.activeThread.state, "paused",
+    "Should only be getting stack frames while paused.");
 
-      is(gDebugger.DebuggerController.activeThread.state, "paused",
-        "Should only be getting stack frames while paused.");
+  is(gSources.itemCount, 2, "Found the expected number of scripts.");
 
-      is(gScripts.itemCount, 2, "Found the expected number of scripts.");
+  ok(gDebugger.editor.getText().search(/debugger/) != -1,
+    "The correct script was loaded initially.");
 
-      ok(gDebugger.editor.getText().search(/debugger/) != -1,
-        "The correct script was loaded initially.");
+  // Yield control back to the event loop so that the debugger has a
+  // chance to highlight the proper line.
+  executeSoon(function() {
+    // getCaretPosition is 0-based.
+    is(gDebugger.editor.getCaretPosition().line, 5,
+       "The correct line is selected.");
+
+    gDebugger.editor.addEventListener(SourceEditor.EVENTS.TEXT_CHANGED, function onChange() {
+      // Wait for the actual text to be shown.
+      if (gDebugger.editor.getText() == gDebugger.L10N.getStr("loadingText")) {
+        return;
+      }
+      // The requested source text has been shown, remove the event listener.
+      gDebugger.editor.removeEventListener(SourceEditor.EVENTS.TEXT_CHANGED, onChange);
+
+      ok(gDebugger.editor.getText().search(/debugger/) == -1,
+        "The second script is no longer displayed.");
+
+      ok(gDebugger.editor.getText().search(/firstCall/) != -1,
+        "The first script is displayed.");
 
       // Yield control back to the event loop so that the debugger has a
@@ -48,47 +91,24 @@ function testSelectLine() {
       executeSoon(function(){
         // getCaretPosition is 0-based.
-        is(gDebugger.editor.getCaretPosition().line, 5,
+        is(gDebugger.editor.getCaretPosition().line, 4,
            "The correct line is selected.");
 
-        gDebugger.editor.addEventListener(SourceEditor.EVENTS.TEXT_CHANGED,
-                                          function onChange() {
-          gDebugger.editor.removeEventListener(SourceEditor.EVENTS.TEXT_CHANGED,
-                                               onChange);
-          ok(gDebugger.editor.getText().search(/debugger/) == -1,
-            "The second script is no longer displayed.");
+        closeDebuggerAndFinish();
+      });
+    });
 
-          ok(gDebugger.editor.getText().search(/firstCall/) != -1,
-            "The first script is displayed.");
+    let frames = gDebugger.DebuggerView.StackFrames._container._list;
+    let childNodes = frames.childNodes;
 
-          // Yield control back to the event loop so that the debugger has a
-          // chance to highlight the proper line.
-          executeSoon(function(){
-            // getCaretPosition is 0-based.
-            is(gDebugger.editor.getCaretPosition().line, 4,
-               "The correct line is selected.");
+    is(frames.querySelectorAll(".dbg-stackframe").length, 4,
+      "Should have two frames.");
 
-            gDebugger.DebuggerController.activeThread.resume(function() {
-              closeDebuggerAndFinish();
-            });
-          });
-        });
+    is(childNodes.length, frames.querySelectorAll(".dbg-stackframe").length,
+      "All children should be frames.");
 
-        // Scroll all the way down to ensure stackframe-3 is visible.
-        let stackframes = gDebugger.document.getElementById("stackframes");
-        stackframes.scrollTop = stackframes.scrollHeight;
-
-        // Click the oldest stack frame.
-        let frames = gDebugger.DebuggerView.Stackframes._container._list;
-        is(frames.querySelectorAll(".dbg-stackframe").length, 4,
-          "Should have four frames.");
-
-        let element = gDebugger.document.getElementById("stackframe-3");
-        isnot(element, null, "Found the third stack frame.");
-        EventUtils.synthesizeMouseAtCenter(element, {}, gDebugger);
-      });
-    }}, 0);
+    EventUtils.sendMouseEvent({ type: "mousedown" },
+      frames.querySelector("#stackframe-3"),
+      gDebugger);
   });
-
-  gDebuggee.firstCall();
 }
 
@@ -99,3 +119,4 @@ registerCleanupFunction(function() {
   gDebuggee = null;
   gDebugger = null;
+  gSources = null;
 });
diff --git a/browser/devtools/debugger/test/browser_dbg_stack-02.js b/browser/devtools/debugger/test/browser_dbg_stack-02.js
--- a/browser/devtools/debugger/test/browser_dbg_stack-02.js
+++ b/browser/devtools/debugger/test/browser_dbg_stack-02.js
@@ -40,32 +40,33 @@ function testEvalCall() {
         "(eval)", "Frame name should be (eval)");
 
-      ok(frames.querySelector("#stackframe-0").classList.contains("selected"),
+      ok(frames.querySelector("#stackframe-0").parentNode.hasAttribute("checked"),
         "First frame should be selected by default.");
 
-      ok(!frames.querySelector("#stackframe-1").classList.contains("selected"),
+      ok(!frames.querySelector("#stackframe-1").parentNode.hasAttribute("checked"),
         "Second frame should not be selected.");
 
 
-      EventUtils.sendMouseEvent({ type: "click" },
+      EventUtils.sendMouseEvent({ type: "mousedown" },
         frames.querySelector("#stackframe-1"),
         gDebugger);
 
-      ok(!frames.querySelector("#stackframe-0").classList.contains("selected"),
+      ok(!frames.querySelector("#stackframe-0").parentNode.hasAttribute("checked"),
          "First frame should not be selected after click.");
 
-      ok(frames.querySelector("#stackframe-1").classList.contains("selected"),
+      ok(frames.querySelector("#stackframe-1").parentNode.hasAttribute("checked"),
          "Second frame should be selected after click.");
 
 
-      EventUtils.sendMouseEvent({ type: "click" },
+      EventUtils.sendMouseEvent({ type: "mousedown" },
         frames.querySelector("#stackframe-0 .dbg-stackframe-title"),
         gDebugger);
 
-      ok(frames.querySelector("#stackframe-0").classList.contains("selected"),
+      ok(frames.querySelector("#stackframe-0").parentNode.hasAttribute("checked"),
          "First frame should be selected after click inside the first frame.");
 
-      ok(!frames.querySelector("#stackframe-1").classList.contains("selected"),
+      ok(!frames.querySelector("#stackframe-1").parentNode.hasAttribute("checked"),
          "Second frame should not be selected after click inside the first frame.");
 
+
       gDebugger.DebuggerController.activeThread.resume(function() {
         closeDebuggerAndFinish();
diff --git a/browser/devtools/debugger/test/browser_dbg_stack-05.js b/browser/devtools/debugger/test/browser_dbg_stack-05.js
--- a/browser/devtools/debugger/test/browser_dbg_stack-05.js
+++ b/browser/devtools/debugger/test/browser_dbg_stack-05.js
@@ -61,8 +61,8 @@ function testRecurse()
     "All children should be frames.");
 
-  ok(frames.querySelector("#stackframe-0").classList.contains("selected"),
+  ok(frames.querySelector("#stackframe-0").parentNode.hasAttribute("checked"),
     "First frame should be selected by default.");
 
-  ok(!frames.querySelector("#stackframe-2").classList.contains("selected"),
+  ok(!frames.querySelector("#stackframe-2").parentNode.hasAttribute("checked"),
     "Third frame should not be selected.");
 
@@ -70,12 +70,13 @@ function testRecurse()
      "editor debugger location is correct.");
 
-  EventUtils.sendMouseEvent({ type: "click" },
+
+  EventUtils.sendMouseEvent({ type: "mousedown" },
     frames.querySelector("#stackframe-2"),
     gDebugger);
 
-  ok(!frames.querySelector("#stackframe-0").classList.contains("selected"),
+  ok(!frames.querySelector("#stackframe-0").parentNode.hasAttribute("checked"),
      "First frame should not be selected after click.");
 
-  ok(frames.querySelector("#stackframe-2").classList.contains("selected"),
+  ok(frames.querySelector("#stackframe-2").parentNode.hasAttribute("checked"),
      "Third frame should be selected after click.");
 
@@ -83,12 +84,13 @@ function testRecurse()
      "editor debugger location is correct after click.");
 
-  EventUtils.sendMouseEvent({ type: "click" },
+
+  EventUtils.sendMouseEvent({ type: "mousedown" },
     frames.querySelector("#stackframe-0 .dbg-stackframe-title"),
     gDebugger);
 
-  ok(frames.querySelector("#stackframe-0").classList.contains("selected"),
+  ok(frames.querySelector("#stackframe-0").parentNode.hasAttribute("checked"),
      "First frame should be selected after click inside the first frame.");
 
-  ok(!frames.querySelector("#stackframe-2").classList.contains("selected"),
+  ok(!frames.querySelector("#stackframe-2").parentNode.hasAttribute("checked"),
      "Third frame should not be selected after click inside the first frame.");
 
@@ -99,4 +101,5 @@ function testRecurse()
     is(gDebugger.editor.getDebugLocation(), -1,
        "editor debugger location is correct after resume.");
+
     closeDebuggerAndFinish();
   });
diff --git a/browser/devtools/debugger/test/browser_dbg_update-editor-mode.js b/browser/devtools/debugger/test/browser_dbg_update-editor-mode.js
--- a/browser/devtools/debugger/test/browser_dbg_update-editor-mode.js
+++ b/browser/devtools/debugger/test/browser_dbg_update-editor-mode.js
@@ -9,13 +9,9 @@
 const TAB_URL = EXAMPLE_URL + "browser_dbg_update-editor-mode.html";
 
-let tempScope = {};
-Cu.import("resource:///modules/source-editor.jsm", tempScope);
-let SourceEditor = tempScope.SourceEditor;
-
 var gPane = null;
 var gTab = null;
 var gDebuggee = null;
 var gDebugger = null;
-var gScripts = null;
+var gSources = null;
 
 function test()
@@ -31,5 +27,5 @@ function test()
     gPane = aPane;
     gDebugger = gPane.panelWin;
-    gScripts = gDebugger.DebuggerView.Sources._container;
+    gSources = gDebugger.DebuggerView.Sources;
     resumed = true;
 
@@ -65,5 +61,5 @@ function testScriptsDisplay() {
     "Should only be getting stack frames while paused.");
 
-  is(gScripts.itemCount, 3,
+  is(gSources.itemCount, 3,
     "Found the expected number of scripts.");
 
@@ -91,5 +87,5 @@ function testSwitchPaused1()
     "Should only be getting stack frames while paused.");
 
-  is(gScripts.itemCount, 3,
+  is(gSources.itemCount, 3,
     "Found the expected number of scripts.");
 
@@ -120,5 +116,5 @@ function testSwitchPaused2()
     "Should only be getting stack frames while paused.");
 
-  is(gScripts.itemCount, 3,
+  is(gSources.itemCount, 3,
     "Found the expected number of scripts.");
 
@@ -146,4 +142,4 @@ registerCleanupFunction(function() {
   gDebuggee = null;
   gDebugger = null;
-  gScripts = null;
+  gSources = null;
 });
diff --git a/browser/devtools/debugger/test/head.js b/browser/devtools/debugger/test/head.js
--- a/browser/devtools/debugger/test/head.js
+++ b/browser/devtools/debugger/test/head.js
@@ -8,14 +8,16 @@ const Cu = Components.utils;
 
 let tempScope = {};
+Cu.import("resource://gre/modules/Services.jsm", tempScope);
 Cu.import("resource://gre/modules/devtools/dbg-server.jsm", tempScope);
 Cu.import("resource://gre/modules/devtools/dbg-client.jsm", tempScope);
-Cu.import("resource://gre/modules/Services.jsm", tempScope);
+Cu.import("resource:///modules/source-editor.jsm", tempScope);
+Cu.import("resource:///modules/devtools/gDevTools.jsm", tempScope);
+Cu.import("resource:///modules/devtools/Target.jsm", tempScope);
+let SourceEditor = tempScope.SourceEditor;
 let DebuggerServer = tempScope.DebuggerServer;
 let DebuggerTransport = tempScope.DebuggerTransport;
 let DebuggerClient = tempScope.DebuggerClient;
 let Services = tempScope.Services;
-Cu.import("resource:///modules/devtools/gDevTools.jsm", tempScope);
 let gDevTools = tempScope.gDevTools;
-Cu.import("resource:///modules/devtools/Target.jsm", tempScope);
 let TargetFactory = tempScope.TargetFactory;
 
@@ -65,11 +67,10 @@ function addTab(aURL, aOnload, aWindow) 
   let tab = targetBrowser.selectedTab;
   let win = tab.linkedBrowser.contentWindow;
-  let expectedReadyState = aURL == "about:blank" ? ["interactive", "complete"]
-                                                 : ["complete"];
+  let expectedReadyState = aURL == "about:blank" ? ["interactive", "complete"] : ["complete"];
+
   if (aOnload) {
     let handler = function() {
       if (tab.linkedBrowser.currentURI.spec != aURL ||
-          win.document == null ||
-          expectedReadyState.indexOf(win.document.readyState) == -1) {
+          expectedReadyState.indexOf((win.document || {}).readyState) == -1) {
         return;
       }
@@ -93,4 +94,5 @@ function closeDebuggerAndFinish(aRemoteF
   let debuggerClosed = false;
   let debuggerDisconnected = false;
+
   ok(gTab, "There is a gTab to use for getting a toolbox reference");
   let target = TargetFactory.forTab(gTab);
@@ -110,19 +112,7 @@ function closeDebuggerAndFinish(aRemoteF
   function _maybeFinish() {
     if (debuggerClosed && debuggerDisconnected) {
-      if (!aCallback)
-        aCallback = finish;
-      aCallback();
+      (finish || aCallback)();
     }
   }
-
-  // if (!aRemoteFlag) {
-  //   dbg.getDebugger().close(function() {
-  //     debuggerClosed = true;
-  //     _maybeFinish();
-  //   });
-  // } else {
-  //   debuggerClosed = true;
-  //   dbg.getRemoteDebugger().close();
-  // }
 }
 
@@ -160,7 +150,9 @@ function attach_thread_actor_for_url(aCl
 function wait_for_connect_and_resume(aOnDebugging, aTab) {
   let target = TargetFactory.forTab(aTab);
+
   gDevTools.showToolbox(target, "jsdebugger").then(function(toolbox) {
     let dbg = toolbox.getCurrentPanel();
     dbg.once("connected", function dbgConnected() {
+
       // Wait for the initial resume...
       dbg.panelWin.gClient.addOneTimeListener("resumed", function() {
@@ -171,9 +163,12 @@ function wait_for_connect_and_resume(aOn
 }
 
-function debug_tab_pane(aURL, aOnDebugging) {
+function debug_tab_pane(aURL, aOnDebugging, aBeforeTabAdded) {
+  // Make any necessary preparations (start the debugger server etc.)
+  if (aBeforeTabAdded) {
+    aBeforeTabAdded();
+  }
+
   let tab = addTab(aURL, function() {
-    gBrowser.selectedTab = gTab;
     let debuggee = gBrowser.selectedTab.linkedBrowser.contentWindow.wrappedJSObject;
-
     let target = TargetFactory.forTab(gBrowser.selectedTab);
 
@@ -181,4 +176,5 @@ function debug_tab_pane(aURL, aOnDebuggi
       let dbg = toolbox.getCurrentPanel();
       dbg.once("connected", function() {
+
         // Wait for the initial resume...
         dbg.panelWin.gClient.addOneTimeListener("resumed", function() {
@@ -194,8 +190,9 @@ function debug_tab_pane(aURL, aOnDebuggi
 function debug_remote(aURL, aOnDebugging, aBeforeTabAdded) {
   // Make any necessary preparations (start the debugger server etc.)
-  aBeforeTabAdded();
+  if (aBeforeTabAdded) {
+    aBeforeTabAdded();
+  }
 
   let tab = addTab(aURL, function() {
-    gBrowser.selectedTab = gTab;
     let debuggee = tab.linkedBrowser.contentWindow.wrappedJSObject;
 
@@ -216,5 +213,4 @@ function debug_remote(aURL, aOnDebugging
 function debug_chrome(aURL, aOnClosing, aOnDebugging) {
   let tab = addTab(aURL, function() {
-    gBrowser.selectedTab = gTab;
     let debuggee = tab.linkedBrowser.contentWindow.wrappedJSObject;
 
diff --git a/browser/devtools/inspector/Breadcrumbs.jsm b/browser/devtools/inspector/Breadcrumbs.jsm
--- a/browser/devtools/inspector/Breadcrumbs.jsm
+++ b/browser/devtools/inspector/Breadcrumbs.jsm
@@ -10,4 +10,5 @@ const Ci = Components.interfaces;
 
 const PSEUDO_CLASSES = [":hover", ":active", ":focus"];
+const ENSURE_SELECTION_VISIBLE_DELAY = 50; // ms
 
 this.EXPORTED_SYMBOLS = ["HTMLBreadcrumbs"];
@@ -36,4 +37,6 @@ const LOW_PRIORITY_ELEMENTS = {
  * Only one "branch" of children are displayed (only one line).
  *
+ * FIXME: Bug 822388 - Use the BreadcrumbsWidget in the Inspector.
+ *
  * Mechanism:
  * . If no nodes displayed yet:
@@ -117,7 +120,7 @@ HTMLBreadcrumbs.prototype = {
   /**
    * Build <label>s that represent the node:
-   *   <label class="inspector-breadcrumbs-tag">tagName</label>
-   *   <label class="inspector-breadcrumbs-id">#id</label>
-   *   <label class="inspector-breadcrumbs-classes">.class1.class2</label>
+   *   <label class="breadcrumbs-widget-item-tag">tagName</label>
+   *   <label class="breadcrumbs-widget-item-id">#id</label>
+   *   <label class="breadcrumbs-widget-item-classes">.class1.class2</label>
    *
    * @param aNode The node to pretty-print
@@ -129,14 +132,14 @@ HTMLBreadcrumbs.prototype = {
 
     let tagLabel = this.chromeDoc.createElement("label");
-    tagLabel.className = "inspector-breadcrumbs-tag plain";
+    tagLabel.className = "breadcrumbs-widget-item-tag plain";
 
     let idLabel = this.chromeDoc.createElement("label");
-    idLabel.className = "inspector-breadcrumbs-id plain";
+    idLabel.className = "breadcrumbs-widget-item-id plain";
 
     let classesLabel = this.chromeDoc.createElement("label");
-    classesLabel.className = "inspector-breadcrumbs-classes plain";
+    classesLabel.className = "breadcrumbs-widget-item-classes plain";
 
     let pseudosLabel = this.chromeDoc.createElement("label");
-    pseudosLabel.className = "inspector-breadcrumbs-pseudo-classes plain";
+    pseudosLabel.className = "breadcrumbs-widget-item-pseudo-classes plain";
 
     tagLabel.textContent = aNode.tagName.toLowerCase();
@@ -390,5 +393,5 @@ HTMLBreadcrumbs.prototype = {
     let button = this.chromeDoc.createElement("button");
     button.appendChild(this.prettyPrintNodeAsXUL(aNode));
-    button.className = "inspector-breadcrumbs-button";
+    button.className = "breadcrumbs-widget-item";
 
     button.setAttribute("tooltiptext", this.prettyPrintNodeAsText(aNode));
@@ -516,5 +519,11 @@ HTMLBreadcrumbs.prototype = {
     let scrollbox = this.container;
     let element = this.nodeHierarchy[this.currentIndex].button;
-    scrollbox.ensureElementIsVisible(element);
+
+    // Repeated calls to ensureElementIsVisible would interfere with each other
+    // and may sometimes result in incorrect scroll positions.
+    this.chromeWin.clearTimeout(this._ensureVisibleTimeout);
+    this._ensureVisibleTimeout = this.chromeWin.setTimeout(function() {
+      scrollbox.ensureElementIsVisible(element);
+    }, ENSURE_SELECTION_VISIBLE_DELAY);
   },
 
@@ -579,9 +588,8 @@ HTMLBreadcrumbs.prototype = {
     // Add the first child of the very last node of the breadcrumbs if possible.
     this.ensureFirstChild();
+    this.updateSelectors();
 
     // Make sure the selected node and its neighbours are visible.
     this.scroll();
-
-    this.updateSelectors();
   },
 }
diff --git a/browser/devtools/inspector/InspectorPanel.jsm b/browser/devtools/inspector/InspectorPanel.jsm
--- a/browser/devtools/inspector/InspectorPanel.jsm
+++ b/browser/devtools/inspector/InspectorPanel.jsm
@@ -620,4 +620,5 @@ InspectorPanel.prototype = {
     }
     this.selection.emit("pseudoclass");
+    this.breadcrumbs.scroll();
   },
 
diff --git a/browser/devtools/inspector/inspector.css b/browser/devtools/inspector/inspector.css
--- a/browser/devtools/inspector/inspector.css
+++ b/browser/devtools/inspector/inspector.css
@@ -1,5 +1,6 @@
-.inspector-breadcrumbs-button {
-  direction: ltr;
-}
+/* vim:set ts=2 sw=2 sts=2 et: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #inspector-sidebar {
diff --git a/browser/devtools/inspector/inspector.xul b/browser/devtools/inspector/inspector.xul
--- a/browser/devtools/inspector/inspector.xul
+++ b/browser/devtools/inspector/inspector.xul
@@ -3,11 +3,13 @@
    - License, v. 2.0. If a copy of the MPL was not distributed with this
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+<?xml-stylesheet href="chrome://browser/skin/" type="text/css"?>
+<?xml-stylesheet href="chrome://browser/content/devtools/widgets.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/content/devtools/inspector/inspector.css" type="text/css"?>
-<?xml-stylesheet href="chrome://browser/skin/" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/devtools/common.css" type="text/css"?>
+<?xml-stylesheet href="chrome://browser/skin/devtools/widgets.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/devtools/inspector.css" type="text/css"?>
 <!DOCTYPE window [
-<!ENTITY % inspectorDTD SYSTEM "chrome://browser/locale/devtools/inspector.dtd" >
- %inspectorDTD;
+  <!ENTITY % inspectorDTD SYSTEM "chrome://browser/locale/devtools/inspector.dtd" >
+   %inspectorDTD;
 ]>
 
@@ -73,4 +75,5 @@
           oncommand="inspector.highlighter.unlockAndFocus()"/>
         <arrowscrollbox id="inspector-breadcrumbs"
+          class="breadcrumbs-widget-container"
           flex="1" orient="horizontal"
           clicktoscroll="true"/>
diff --git a/browser/devtools/inspector/test/browser_inspector_breadcrumbs.js b/browser/devtools/inspector/test/browser_inspector_breadcrumbs.js
--- a/browser/devtools/inspector/test/browser_inspector_breadcrumbs.js
+++ b/browser/devtools/inspector/test/browser_inspector_breadcrumbs.js
@@ -79,10 +79,10 @@ function test()
       let expectedId = "#" + buttonsLabelIds[i - 2];
       let button = container.childNodes[i];
-      let labelId = button.querySelector(".inspector-breadcrumbs-id");
+      let labelId = button.querySelector(".breadcrumbs-widget-item-id");
       is(labelId.textContent, expectedId, "Node " + cursor + ": button " + i + " matches");
     }
 
     let checkedButton = container.querySelector("button[checked]");
-    let labelId = checkedButton.querySelector(".inspector-breadcrumbs-id");
+    let labelId = checkedButton.querySelector(".breadcrumbs-widget-item-id");
     let id = inspector.selection.node.id;
     is(labelId.textContent, "#" + id, "Node " + cursor + ": selection matches");
diff --git a/browser/devtools/jar.mn b/browser/devtools/jar.mn
--- a/browser/devtools/jar.mn
+++ b/browser/devtools/jar.mn
@@ -4,4 +4,5 @@
 
 browser.jar:
+    content/browser/devtools/widgets.css          (shared/widgets/widgets.css)
     content/browser/devtools/markup-view.xhtml    (markupview/markup-view.xhtml)
     content/browser/devtools/markup-view.css      (markupview/markup-view.css)
diff --git a/browser/devtools/shared/widgets/BreadcrumbsWidget.jsm b/browser/devtools/shared/widgets/BreadcrumbsWidget.jsm
--- a/browser/devtools/shared/widgets/BreadcrumbsWidget.jsm
+++ b/browser/devtools/shared/widgets/BreadcrumbsWidget.jsm
@@ -6,6 +6,11 @@
 "use strict";
 
+const Ci = Components.interfaces;
+const Cu = Components.utils;
+
 const ENSURE_SELECTION_VISIBLE_DELAY = 50; // ms
 
+Cu.import("resource:///modules/devtools/ViewHelpers.jsm");
+
 this.EXPORTED_SYMBOLS = ["BreadcrumbsWidget"];
 
@@ -13,4 +18,18 @@ this.EXPORTED_SYMBOLS = ["BreadcrumbsWid
  * A breadcrumb-like list of items.
  *
+ * You can use this widget alone, but it works great with a MenuContainer!
+ * In that case, you should never need to access the methods in the
+ * BreadcrumbsWidget directly, use the wrapper MenuContainer instance instead.
+ *
+ * @see ViewHelpers.jsm
+ *
+ * function MyView() {
+ *   this.node = new BreadcrumbsWidget(document.querySelector(".my-node"));
+ * }
+ * ViewHelpers.create({ constructor: MyView, proto: MenuContainer.prototype }, {
+ *   myMethod: function() {},
+ *   ...
+ * });
+ *
  * @param nsIDOMNode aNode
  *        The element associated with the widget.
@@ -21,5 +40,5 @@ this.BreadcrumbsWidget = function Breadc
   // Create an internal arrowscrollbox container.
   this._list = this.document.createElement("arrowscrollbox");
-  this._list.id = "inspector-breadcrumbs";
+  this._list.className = "breadcrumbs-widget-container";
   this._list.setAttribute("flex", "1");
   this._list.setAttribute("orient", "horizontal");
@@ -31,9 +50,17 @@ this.BreadcrumbsWidget = function Breadc
   this._list._scrollButtonUp.collapsed = true;
   this._list._scrollButtonDown.collapsed = true;
-  this._list.addEventListener("underflow", this._onUnderflow, false);
-  this._list.addEventListener("overflow", this._onOverflow, false);
+  this._list.addEventListener("underflow", this._onUnderflow.bind(this), false);
+  this._list.addEventListener("overflow", this._onOverflow.bind(this), false);
+
+  // Delegate some of the associated node's methods to satisfy the interface
+  // required by MenuContainer instances.
+  ViewHelpers.delegateWidgetAttributeMethods(this, aNode);
+  ViewHelpers.delegateWidgetEventMethods(this, aNode);
 };
 
 BreadcrumbsWidget.prototype = {
+  get document() this._parent.ownerDocument,
+  get window() this.document.defaultView,
+
   /**
    * Inserts an item in this container at the specified index.
@@ -48,8 +75,6 @@ BreadcrumbsWidget.prototype = {
   insertItemAt: function BCW_insertItemAt(aIndex, aContents) {
     let list = this._list;
-    let breadcrumb = new Breadcrumb(this);
-    breadcrumb.contents = aContents;
-
-    return list.insertBefore(breadcrumb.target, list.childNodes[aIndex]);
+    let breadcrumb = new Breadcrumb(this, aContents);
+    return list.insertBefore(breadcrumb._target, list.childNodes[aIndex]);
   },
 
@@ -113,9 +138,7 @@ BreadcrumbsWidget.prototype = {
       if (node == aChild) {
         node.setAttribute("checked", "");
-        node.classList.add("selected");
         this._selectedItem = node;
       } else {
         node.removeAttribute("checked");
-        node.classList.remove("selected");
       }
     }
@@ -125,5 +148,4 @@ BreadcrumbsWidget.prototype = {
     this.window.clearTimeout(this._ensureVisibleTimeout);
     this._ensureVisibleTimeout = this.window.setTimeout(function() {
-      // Scroll the selected item into view.
       if (this._selectedItem) {
         this._list.ensureElementIsVisible(this._selectedItem);
@@ -136,4 +158,7 @@ BreadcrumbsWidget.prototype = {
    */
   _onUnderflow: function BCW__onUnderflow({target}) {
+    if (target != this._list) {
+      return;
+    }
     target._scrollButtonUp.collapsed = true;
     target._scrollButtonDown.collapsed = true;
@@ -145,4 +170,7 @@ BreadcrumbsWidget.prototype = {
    */
   _onOverflow: function BCW__onOverflow({target}) {
+    if (target != this._list) {
+      return;
+    }
     target._scrollButtonUp.collapsed = false;
     target._scrollButtonDown.collapsed = false;
@@ -150,25 +178,8 @@ BreadcrumbsWidget.prototype = {
   },
 
-  /**
-   * Gets the parent node holding this view.
-   * @return nsIDOMNode
-   */
-  get parentNode() this._parent,
-
-  /**
-   * Gets the owner document holding this view.
-   * @return nsIHTMLDocument
-   */
-  get document() this._parent.ownerDocument,
-
-  /**
-   * Gets the default window holding this view.
-   * @return nsIDOMWindow
-   */
-  get window() this.document.defaultView,
-
   _parent: null,
   _list: null,
-  _selectedItem: null
+  _selectedItem: null,
+  _ensureVisibleTimeout: null
 };
 
@@ -178,14 +189,20 @@ BreadcrumbsWidget.prototype = {
  * @param BreadcrumbsWidget aWidget
  *        The widget to contain this breadcrumb.
+ * @param string | nsIDOMNode aContents
+ *        The string or node displayed in the container.
  */
-function Breadcrumb(aWidget) {
+function Breadcrumb(aWidget, aContents) {
   this.ownerView = aWidget;
 
-  this._target = this.document.createElement("button");
-  this._target.className = "inspector-breadcrumbs-button";
-  this.parentNode.appendChild(this._target);
+  this._target = this.document.createElement("hbox");
+  this._target.className = "breadcrumbs-widget-item";
+  this._target.setAttribute("align", "center");
+  this.contents = aContents;
 }
 
 Breadcrumb.prototype = {
+  get document() this.ownerView.document,
+  get window() this.document.defaultView,
+
   /**
    * Sets the contents displayed in this item's view.
@@ -212,28 +229,4 @@ Breadcrumb.prototype = {
   },
 
-  /**
-   * Gets the element associated with this item.
-   * @return nsIDOMNode
-   */
-  get target() this._target,
-
-  /**
-   * Gets the parent node holding this scope.
-   * @return nsIDOMNode
-   */
-  get parentNode() this.ownerView._list,
-
-  /**
-   * Gets the owner document holding this scope.
-   * @return nsIHTMLDocument
-   */
-  get document() this.ownerView.document,
-
-  /**
-   * Gets the default window holding this scope.
-   * @return nsIDOMWindow
-   */
-  get window() this.ownerView.window,
-
   ownerView: null,
   _target: null
diff --git a/browser/devtools/shared/widgets/SideMenuWidget.jsm b/browser/devtools/shared/widgets/SideMenuWidget.jsm
new file mode 100644
--- /dev/null
+++ b/browser/devtools/shared/widgets/SideMenuWidget.jsm
@@ -0,0 +1,528 @@
+/* -*- Mode: javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const Ci = Components.interfaces;
+const Cu = Components.utils;
+
+const ENSURE_SELECTION_VISIBLE_DELAY = 50; // ms
+
+Cu.import("resource:///modules/devtools/ViewHelpers.jsm");
+
+this.EXPORTED_SYMBOLS = ["SideMenuWidget"];
+
+/**
+ * A simple side menu, with the ability of grouping menu items.
+ *
+ * You can use this widget alone, but it works great with a MenuContainer!
+ * In that case, you should never need to access the methods in the
+ * SideMenuWidget directly, use the wrapper MenuContainer instance instead.
+ *
+ * @see ViewHelpers.jsm
+ *
+ * function MyView() {
+ *   this.node = new SideMenuWidget(document.querySelector(".my-node"));
+ * }
+ * ViewHelpers.create({ constructor: MyView, proto: MenuContainer.prototype }, {
+ *   myMethod: function() {},
+ *   ...
+ * });
+ *
+ * @param nsIDOMNode aNode
+ *        The element associated with the widget.
+ */
+this.SideMenuWidget = function SideMenuWidget(aNode) {
+  this._parent = aNode;
+
+  // Create an internal scrollbox container.
+  this._list = this.document.createElement("scrollbox");
+  this._list.className = "side-menu-widget-container";
+  this._list.setAttribute("flex", "1");
+  this._list.setAttribute("orient", "vertical");
+  this._parent.appendChild(this._list);
+  this._boxObject = this._list.boxObject.QueryInterface(Ci.nsIScrollBoxObject);
+
+  // Menu items can optionally be grouped.
+  this._groupsByName = new Map(); // Can't use a WeakMap because keys are strings.
+  this._orderedGroupElementsArray = [];
+  this._orderedMenuElementsArray = [];
+
+  // Delegate some of the associated node's methods to satisfy the interface
+  // required by MenuContainer instances.
+  ViewHelpers.delegateWidgetEventMethods(this, aNode);
+};
+
+SideMenuWidget.prototype = {
+  get document() this._parent.ownerDocument,
+  get window() this.document.defaultView,
+
+  /**
+   * Specifies if groups in this container should be sorted alphabetically.
+   */
+  sortedGroups: true,
+
+  /**
+   * Inserts an item in this container at the specified index, optionally
+   * grouping by name.
+   *
+   * @param number aIndex
+   *        The position in the container intended for this item.
+   * @param string | nsIDOMNode aContents
+   *        The string or node displayed in the container.
+   * @param string aTooltip [optional]
+   *        A tooltip attribute for the displayed item.
+   * @param string aGroup [optional]
+   *        The group to place the displayed item into.
+   * @return nsIDOMNode
+   *         The element associated with the displayed item.
+   */
+  insertItemAt: function SMW_insertItemAt(aIndex, aContents, aTooltip = "", aGroup = "") {
+    this.ensureSelectionIsVisible(true, true); // Don't worry, it's delayed.
+    let group = this._getGroupForName(aGroup);
+    return group.insertItemAt(aIndex, aContents, aTooltip);
+  },
+
+  /**
+   * Returns the child node in this container situated at the specified index.
+   *
+   * @param number aIndex
+   *        The position in the container intended for this item.
+   * @return nsIDOMNode
+   *         The element associated with the displayed item.
+   */
+  getItemAtIndex: function SMW_getItemAtIndex(aIndex) {
+    return this._orderedMenuElementsArray[aIndex];
+  },
+
+  /**
+   * Removes the specified child node from this container.
+   *
+   * @param nsIDOMNode aChild
+   *        The element associated with the displayed item.
+   */
+  removeChild: function SMW_removeChild(aChild) {
+    aChild.parentNode.removeChild(aChild);
+    this._orderedMenuElementsArray.splice(
+      this._orderedMenuElementsArray.indexOf(aChild), 1);
+
+    if (this._selectedItem == aChild) {
+      this._selectedItem = null;
+    }
+  },
+
+  /**
+   * Removes all of the child nodes from this container.
+   */
+  removeAllItems: function SMW_removeAllItems() {
+    let parent = this._parent;
+    let list = this._list;
+    let firstChild;
+
+    while (firstChild = list.firstChild) {
+      list.removeChild(firstChild);
+    }
+    this._selectedItem = null;
+
+    this._groupsByName = new Map();
+    this._orderedGroupElementsArray.length = 0;
+    this._orderedMenuElementsArray.length = 0;
+  },
+
+  /**
+   * Gets the currently selected child node in this container.
+   * @return nsIDOMNode
+   */
+  get selectedItem() this._selectedItem,
+
+  /**
+   * Sets the currently selected child node in this container.
+   * @param nsIDOMNode aChild
+   */
+  set selectedItem(aChild) {
+    let menuElementsArray = this._orderedMenuElementsArray;
+
+    if (!aChild) {
+      this._selectedItem = null;
+    }
+    for (let node of menuElementsArray) {
+      if (node == aChild) {
+        node.parentNode.classList.add("selected");
+        this._selectedItem = node;
+      } else {
+        node.parentNode.classList.remove("selected");
+      }
+    }
+    // Repeated calls to ensureElementIsVisible would interfere with each other
+    // and may sometimes result in incorrect scroll positions.
+    this.ensureSelectionIsVisible(false, true);
+  },
+
+  /**
+   * Ensures the selected element is visible.
+   * @see SideMenuWidget.prototype.ensureElementIsVisible.
+   */
+  ensureSelectionIsVisible:
+  function SMW_ensureSelectionIsVisible(aGroupFlag, aDelayedFlag) {
+    this.ensureElementIsVisible(this.selectedItem, aGroupFlag, aDelayedFlag);
+  },
+
+  /**
+   * Ensures the specified element is visible.
+   *
+   * @param nsIDOMNode aElement
+   *        The element to make visible.
+   * @param boolean aGroupFlag
+   *        True if the group header should also be made visible, if possible.
+   * @param boolean aDelayedFlag
+   *        True to wait a few cycles before ensuring the selection is visible.
+   */
+  ensureElementIsVisible:
+  function SMW_ensureElementIsVisible(aElement, aGroupFlag, aDelayedFlag) {
+    if (!aElement) {
+      return;
+    }
+    if (aDelayedFlag) {
+      this.window.clearTimeout(this._ensureVisibleTimeout);
+      this._ensureVisibleTimeout = this.window.setTimeout(function() {
+        this.ensureElementIsVisible(aElement, aGroupFlag, false);
+      }.bind(this), ENSURE_SELECTION_VISIBLE_DELAY);
+      return;
+    }
+    if (aGroupFlag) {
+      let groupList = aElement.parentNode;
+      let groupContainer = groupList.parentNode;
+      groupContainer.scrollIntoView(true); // Align with the top.
+    }
+    this._boxObject.ensureElementIsVisible(aElement);
+  },
+
+  /**
+   * Shows all the groups, even the ones with no visible children.
+   */
+  showEmptyGroups: function SMW_showEmptyGroups() {
+    for (let group of this._orderedGroupElementsArray) {
+      group.hidden = false;
+    }
+  },
+
+  /**
+   * Hides all the groups which have no visible children.
+   */
+  hideEmptyGroups: function SMW_hideEmptyGroups() {
+    let visibleChildNodes = ".side-menu-widget-item-contents:not([hidden=true])";
+
+    for (let group of this._orderedGroupElementsArray) {
+      group.hidden = group.querySelectorAll(visibleChildNodes).length == 0;
+    }
+    for (let menuItem of this._orderedMenuElementsArray) {
+      menuItem.parentNode.hidden = menuItem.hidden;
+    }
+  },
+
+  /**
+   * Returns the value of the named attribute on this container.
+   *
+   * @param string aName
+   *        The name of the attribute.
+   * @return string
+   *         The current attribute value.
+   */
+  getAttribute: function SMW_getAttribute(aName) {
+    return this._parent.getAttribute(aName);
+  },
+
+  /**
+   * Adds a new attribute or changes an existing attribute on this container.
+   *
+   * @param string aName
+   *        The name of the attribute.
+   * @param string aValue
+   *        The desired attribute value.
+   */
+  setAttribute: function SMW_setAttribute(aName, aValue) {
+    this._parent.setAttribute(aName, aValue);
+
+    if (aName == "notice") {
+      this.notice = aValue;
+    }
+  },
+
+  /**
+   * Removes an attribute on this container.
+   *
+   * @param string aName
+   *        The name of the attribute.
+   */
+  removeAttribute: function SMW_removeAttribute(aName) {
+    this._parent.removeAttribute(aName);
+
+    if (aName == "notice") {
+      this._removeNotice();
+    }
+  },
+
+  /**
+   * Sets the text displayed in this container as a notice.
+   * @param string aValue
+   */
+  set notice(aValue) {
+    if (this._noticeTextNode) {
+      this._noticeTextNode.setAttribute("value", aValue);
+    }
+    this._noticeTextValue = aValue;
+    this._appendNotice();
+  },
+
+  /**
+   * Creates and appends a label representing a notice in this container.
+   */
+  _appendNotice: function DVSL__appendNotice() {
+    if (this._noticeTextNode || !this._noticeTextValue) {
+      return;
+    }
+
+    let container = this.document.createElement("vbox");
+    container.className = "side-menu-widget-empty-notice-container";
+    container.setAttribute("align", "center");
+
+    let label = this.document.createElement("label");
+    label.className = "plain side-menu-widget-empty-notice";
+    label.setAttribute("value", this._noticeTextValue);
+    container.appendChild(label);
+
+    this._parent.insertBefore(container, this._list);
+    this._noticeTextContainer = container;
+    this._noticeTextNode = label;
+  },
+
+  /**
+   * Removes the label representing a notice in this container.
+   */
+  _removeNotice: function DVSL__removeNotice() {
+    if (!this._noticeTextNode) {
+      return;
+    }
+
+    this._parent.removeChild(this._noticeTextContainer);
+    this._noticeTextContainer = null;
+    this._noticeTextNode = null;
+  },
+
+  /**
+   * Gets a container representing a group for menu items. If the container
+   * is not available yet, it is immediately created.
+   *
+   * @param string aName
+   *        The required group name.
+   * @return SideMenuGroup
+   *         The newly created group.
+   */
+  _getGroupForName: function SMW__getGroupForName(aName) {
+    let cachedGroup = this._groupsByName.get(aName);
+    if (cachedGroup) {
+      return cachedGroup;
+    }
+
+    let group = new SideMenuGroup(this, aName);
+    this._groupsByName.set(aName, group);
+    group.insertSelfAt(this.sortedGroups ? group.findExpectedIndexForSelf() : -1);
+    return group;
+  },
+
+  _parent: null,
+  _list: null,
+  _boxObject: null,
+  _selectedItem: null,
+  _groupsByName: null,
+  _orderedGroupElementsArray: null,
+  _orderedMenuElementsArray: null,
+  _ensureVisibleTimeout: null,
+  _noticeTextContainer: null,
+  _noticeTextNode: null,
+  _noticeTextValue: ""
+};
+
+/**
+ * A SideMenuGroup constructor for the BreadcrumbsWidget.
+ * Represents a group which should contain SideMenuItems.
+ *
+ * @param SideMenuWidget aWidget
+ *        The widget to contain this menu item.
+ * @param string aName
+ *        The string displayed in the container.
+ */
+function SideMenuGroup(aWidget, aName) {
+  this.ownerView = aWidget;
+  this.identifier = aName;
+
+  let document = this.document;
+  let title = this._title = document.createElement("hbox");
+  title.className = "side-menu-widget-group-title";
+
+  let name = this._name = document.createElement("label");
+  name.className = "plain name";
+  name.setAttribute("value", aName);
+  name.setAttribute("crop", "end");
+  name.setAttribute("flex", "1");
+
+  let list = this._list = document.createElement("vbox");
+  list.className = "side-menu-widget-group-list";
+
+  let target = this._target = document.createElement("vbox");
+  target.className = "side-menu-widget-group side-menu-widget-item-or-group";
+  target.setAttribute("name", aName);
+  target.setAttribute("tooltiptext", aName);
+
+  title.appendChild(name);
+  target.appendChild(title);
+  target.appendChild(list);
+}
+
+SideMenuGroup.prototype = {
+  get document() this.ownerView.document,
+  get window() this.document.defaultView,
+  get _groupElementsArray() this.ownerView._orderedGroupElementsArray,
+  get _menuElementsArray() this.ownerView._orderedMenuElementsArray,
+
+  /**
+   * Inserts an item in this group at the specified index.
+   *
+   * @param number aIndex
+   *        The position in the container intended for this item.
+   * @param string | nsIDOMNode aContents
+   *        The string or node displayed in the container.
+   * @param string aTooltip [optional]
+   *        A tooltip attribute for the displayed item.
+   * @return nsIDOMNode
+   *         The element associated with the displayed item.
+   */
+  insertItemAt: function SMG_insertItemAt(aIndex, aContents, aTooltip) {
+    let list = this._list;
+    let menuArray = this._menuElementsArray;
+    let item = new SideMenuItem(this, aContents, aTooltip);
+
+    if (aIndex >= 0) {
+      list.insertBefore(item._container, list.childNodes[aIndex]);
+      menuArray.splice(aIndex, 0, item._target);
+    } else {
+      list.appendChild(item._container);
+      menuArray.push(item._target);
+    }
+    return item._target;
+  },
+
+  /**
+   * Inserts this group in the parent container at the specified index.
+   *
+   * @param number aIndex
+   *        The position in the container intended for this group.
+   */
+  insertSelfAt: function SMG_insertSelfAt(aIndex) {
+    let ownerList = this.ownerView._list;
+    let groupsArray = this._groupElementsArray;
+
+    if (aIndex >= 0) {
+      ownerList.insertBefore(this._target, groupsArray[aIndex]);
+      groupsArray.splice(aIndex, 0, this._target);
+    } else {
+      ownerList.appendChild(this._target);
+      groupsArray.push(this._target);
+    }
+  },
+
+  /**
+   * Finds the expected index of this group based on its name.
+   *
+   * @return number
+   *         The expected index.
+   */
+  findExpectedIndexForSelf: function SMG_findExpectedIndexForSelf() {
+    let identifier = this.identifier;
+    let groupsArray = this._groupElementsArray;
+
+    for (let group of groupsArray) {
+      let name = group.getAttribute("name");
+      if (name > identifier && // Insertion sort at its best :)
+         !name.contains(identifier)) { // Least significat group should be last.
+        return groupsArray.indexOf(group);
+      }
+    }
+    return -1;
+  },
+
+  ownerView: null,
+  identifier: "",
+  _target: null,
+  _title: null,
+  _name: null,
+  _list: null
+};
+
+/**
+ * A SideMenuItem constructor for the BreadcrumbsWidget.
+ *
+ * @param SideMenuGroup aGroup
+ *        The group to contain this menu item.
+ * @param string aTooltip [optional]
+ *        A tooltip attribute for the displayed item.
+ * @param string | nsIDOMNode aContents
+ *        The string or node displayed in the container.
+ */
+function SideMenuItem(aGroup, aContents, aTooltip = "") {
+  this.ownerView = aGroup;
+
+  let document = this.document;
+  let target = this._target = document.createElement("vbox");
+  target.className = "side-menu-widget-item-contents";
+  target.setAttribute("flex", "1");
+  this.contents = aContents;
+
+  let arrow = this._arrow = document.createElement("hbox");
+  arrow.className = "side-menu-widget-item-arrow";
+
+  let container = this._container = document.createElement("hbox");
+  container.className = "side-menu-widget-item side-menu-widget-item-or-group";
+  container.setAttribute("tooltiptext", aTooltip);
+  container.appendChild(target);
+  container.appendChild(arrow);
+}
+
+SideMenuItem.prototype = {
+  get document() this.ownerView.document,
+  get window() this.document.defaultView,
+
+  /**
+   * Sets the contents displayed in this item's view.
+   *
+   * @param string | nsIDOMNode aContents
+   *        The string or node displayed in the container.
+   */
+  set contents(aContents) {
+    // If this item's view contents are a string, then create a label to hold
+    // the text displayed in this breadcrumb.
+    if (typeof aContents == "string") {
+      let label = this.document.createElement("label");
+      label.className = "side-menu-widget-item-label";
+      label.setAttribute("value", aContents);
+      label.setAttribute("crop", "start");
+      label.setAttribute("flex", "1");
+      this.contents = label;
+      return;
+    }
+    // If there are already some contents displayed, replace them.
+    if (this._target.hasChildNodes()) {
+      this._target.replaceChild(aContents, this._target.firstChild);
+      return;
+    }
+    // These are the first contents ever displayed.
+    this._target.appendChild(aContents);
+  },
+
+  ownerView: null,
+  _target: null,
+  _container: null,
+  _arrow: null
+};
diff --git a/browser/devtools/shared/widgets/VariablesView.jsm b/browser/devtools/shared/widgets/VariablesView.jsm
--- a/browser/devtools/shared/widgets/VariablesView.jsm
+++ b/browser/devtools/shared/widgets/VariablesView.jsm
@@ -15,15 +15,14 @@ const LAZY_APPEND_BATCH = 100; // nodes
 const PAGE_SIZE_SCROLL_HEIGHT_RATIO = 100;
 const PAGE_SIZE_MAX_JUMPS = 30;
-const SEARCH_ACTION_MAX_DELAY = 1000; // ms
-const ELEMENT_INPUT_DEFAULT_WIDTH = 100; // px
-const ELEMENT_INPUT_EXTRA_SPACE = 4; // px
+const SEARCH_ACTION_MAX_DELAY = 300; // ms
 
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+Cu.import("resource:///modules/devtools/ViewHelpers.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this,
   "WebConsoleUtils", "resource://gre/modules/devtools/WebConsoleUtils.jsm");
 
-this.EXPORTED_SYMBOLS = ["VariablesView", "create"];
+this.EXPORTED_SYMBOLS = ["VariablesView"];
 
 /**
@@ -52,4 +51,5 @@ this.VariablesView = function VariablesV
 
   this._parent = aParentNode;
+  this._parent.classList.add("variables-view-container");
   this._appendEmptyNotice();
 
@@ -58,9 +58,10 @@ this.VariablesView = function VariablesV
   this._onViewKeyPress = this._onViewKeyPress.bind(this);
 
-  // Create an internal list container.
+  // Create an internal scrollbox container.
   this._list = this.document.createElement("scrollbox");
   this._list.setAttribute("orient", "vertical");
   this._list.addEventListener("keypress", this._onViewKeyPress, false);
   this._parent.appendChild(this._list);
+  this._boxObject = this._list.boxObject.QueryInterface(Ci.nsIScrollBoxObject);
 };
 
@@ -161,4 +162,5 @@ VariablesView.prototype = {
       this._parent.removeChild(prevList);
       this._parent.appendChild(currList);
+      this._boxObject = currList.boxObject.QueryInterface(Ci.nsIScrollBoxObject);
 
       if (!this._store.size) {
@@ -365,5 +367,5 @@ VariablesView.prototype = {
 
     let searchbox = this._searchboxNode = document.createElement("textbox");
-    searchbox.className = "variables-searchinput devtools-searchinput";
+    searchbox.className = "variables-view-searchinput devtools-searchinput";
     searchbox.setAttribute("placeholder", this._searchboxPlaceholder);
     searchbox.setAttribute("type", "search");
@@ -685,8 +687,5 @@ VariablesView.prototype = {
     }
     aItem._target.focus();
-
-    let boxObject = this._list.boxObject.QueryInterface(Ci.nsIScrollBoxObject);
-    boxObject.ensureElementIsVisible(aItem._title);
-    boxObject.scrollBy(-this._list.clientWidth, 0);
+    this._boxObject.ensureElementIsVisible(aItem._arrow);
     return true;
   },
@@ -833,4 +832,5 @@ VariablesView.prototype = {
     }
     this._emptyTextValue = aValue;
+    this._appendEmptyNotice();
   },
 
@@ -839,10 +839,10 @@ VariablesView.prototype = {
    */
   _appendEmptyNotice: function VV__appendEmptyNotice() {
-    if (this._emptyTextNode) {
+    if (this._emptyTextNode || !this._emptyTextValue) {
       return;
     }
 
     let label = this.document.createElement("label");
-    label.className = "empty list-item";
+    label.className = "variables-view-empty-notice";
     label.setAttribute("value", this._emptyTextValue);
 
@@ -894,4 +894,5 @@ VariablesView.prototype = {
   _parent: null,
   _list: null,
+  _boxObject: null,
   _searchboxNode: null,
   _searchboxContainer: null,
@@ -1442,10 +1443,8 @@ Scope.prototype = {
    * @param object aFlags [optional]
    *        Additional options or flags for this scope.
-   * @param string aClassName [optional]
-   *        A custom class name for this scope.
    */
-  _init: function S__init(aName, aFlags = {}, aClassName = "scope") {
+  _init: function S__init(aName, aFlags) {
     this._idString = generateId(this._nameString = aName);
-    this._displayScope(aName, aClassName);
+    this._displayScope(aName, "variables-view-scope", "devtools-toolbar");
     this._addEventListeners();
     this.parentNode.appendChild(this._target);
@@ -1459,6 +1458,8 @@ Scope.prototype = {
    * @param string aClassName
    *        A custom class name for this scope.
+   * @param string aTitleClassName [optional]
+   *        A custom class name for this scope's title.
    */
-  _displayScope: function S__createScope(aName, aClassName) {
+  _displayScope: function S__createScope(aName, aClassName, aTitleClassName) {
     let document = this.document;
 
@@ -1475,11 +1476,11 @@ Scope.prototype = {
 
     let title = this._title = document.createElement("hbox");
-    title.className = "title" + (aClassName == "scope" ? " devtools-toolbar" : "");
+    title.className = "title " + (aTitleClassName || "");
     title.setAttribute("align", "center");
 
     let enumerable = this._enum = document.createElement("vbox");
     let nonenum = this._nonenum = document.createElement("vbox");
-    enumerable.className = "details";
-    nonenum.className = "details nonenum";
+    enumerable.className = "variables-view-element-details enum";
+    nonenum.className = "variables-view-element-details nonenum";
 
     title.appendChild(arrow);
@@ -1580,5 +1581,5 @@ Scope.prototype = {
     }
     let throbber = this._throbber = this.document.createElement("hbox");
-    throbber.className = "dbg-variable-throbber";
+    throbber.className = "variables-view-throbber";
     this._title.appendChild(throbber);
   },
@@ -1820,5 +1821,5 @@ Scope.prototype = {
  *
  * @param Scope aScope
- *        The scope to contain this varialbe.
+ *        The scope to contain this variable.
  * @param string aName
  *        The variable's name.
@@ -1837,5 +1838,5 @@ function Variable(aScope, aName, aDescri
 }
 
-create({ constructor: Variable, proto: Scope.prototype }, {
+ViewHelpers.create({ constructor: Variable, proto: Scope.prototype }, {
   /**
    * Adds a property for this variable.
@@ -2086,5 +2087,5 @@ create({ constructor: Variable, proto: S
   _init: function V__init(aName, aDescriptor) {
     this._idString = generateId(this._nameString = aName);
-    this._displayScope(aName, "variable variable-or-property");
+    this._displayScope(aName, "variables-view-variable variable-or-property");
 
     // Don't allow displaying variable information there's no name available.
@@ -2125,5 +2126,5 @@ create({ constructor: Variable, proto: S
 
     let separatorLabel = this._separatorLabel = document.createElement("label");
-    separatorLabel.className = "plain";
+    separatorLabel.className = "plain separator";
     separatorLabel.setAttribute("value", this.ownerView.separatorStr);
 
@@ -2131,4 +2132,5 @@ create({ constructor: Variable, proto: S
     valueLabel.className = "plain value";
     valueLabel.setAttribute("crop", "center");
+    valueLabel.setAttribute('flex', "1");
 
     this._title.appendChild(separatorLabel);
@@ -2178,5 +2180,5 @@ create({ constructor: Variable, proto: S
       if (!this._isUndefined && (this.getter || this.setter)) {
         let editNode = this._editNode = this.document.createElement("toolbarbutton");
-        editNode.className = "plain dbg-variable-edit";
+        editNode.className = "plain variables-view-edit";
         editNode.addEventListener("mousedown", this._onEdit.bind(this), false);
         this._title.appendChild(editNode);
@@ -2186,5 +2188,5 @@ create({ constructor: Variable, proto: S
       if (!this._isUndefined || !(this.ownerView.getter && this.ownerView.setter)) {
         let deleteNode = this._deleteNode = this.document.createElement("toolbarbutton");
-        deleteNode.className = "plain dbg-variable-delete devtools-closebutton";
+        deleteNode.className = "plain variables-view-delete";
         deleteNode.addEventListener("click", this._onDelete.bind(this), false);
         this._title.appendChild(deleteNode);
@@ -2261,5 +2263,5 @@ create({ constructor: Variable, proto: S
       this._target.setAttribute("non-enumerable", "");
     }
-    if (!descriptor.writable && !this.ownerView.get && !this.ownerView.set) {
+    if (!descriptor.writable && !this.ownerView.getter && !this.ownerView.setter) {
       this._target.setAttribute("non-writable", "");
     }
@@ -2300,15 +2302,11 @@ create({ constructor: Variable, proto: S
     // element's specified label location.
     let input = this.document.createElement("textbox");
+    input.className = "plain " + aClassName;
     input.setAttribute("value", initialString);
-    input.className = "plain " + aClassName;
-
-    // Can't use clientWidth because labels may have extra unnecessary padding.
-    let style = this.window.getComputedStyle(aLabel);
-    input.width = (parseInt(style.getPropertyValue("width")) ||
-      ELEMENT_INPUT_DEFAULT_WIDTH) + // If no content was previously available.
-      ELEMENT_INPUT_EXTRA_SPACE; // Extra space added for editing.
+    input.setAttribute("flex", "1");
 
     // Replace the specified label with a textbox input element.
     aLabel.parentNode.replaceChild(input, aLabel);
+    this._variablesView._boxObject.ensureElementIsVisible(input);
     input.select();
 
@@ -2316,5 +2314,5 @@ create({ constructor: Variable, proto: S
     // to change it to another string in the textbox, so to avoid typing the ""
     // again, tackle with the selection bounds just a bit.
-    if (aLabel.getAttribute("value").match(/^"[^"]*"$/)) {
+    if (aLabel.getAttribute("value").match(/^".+"$/)) {
       input.selectionEnd--;
       input.selectionStart++;
@@ -2580,5 +2578,5 @@ function Property(aVar, aName, aDescript
 }
 
-create({ constructor: Property, proto: Variable.prototype }, {
+ViewHelpers.create({ constructor: Property, proto: Variable.prototype }, {
   /**
    * Initializes this property's id, view and binds event listeners.
@@ -2591,5 +2589,5 @@ create({ constructor: Property, proto: V
   _init: function P__init(aName, aDescriptor) {
     this._idString = generateId(this._nameString = aName);
-    this._displayScope(aName, "property variable-or-property");
+    this._displayScope(aName, "variables-view-property variable-or-property");
 
     // Don't allow displaying property information there's no name available.
@@ -2713,6 +2711,5 @@ VariablesView.prototype.commitHierarchy 
 // It would be a bad idea to re-expand them or perform expensive operations.
 VariablesView.prototype.commitHierarchyIgnoredItems = Object.create(null, {
-  "window": { value: true },
-  "this": { value: true }
+  "window": { value: true }
 });
 
@@ -2903,19 +2900,2 @@ let generateId = (function() {
   };
 })();
-
-/**
- * Sugar for prototypal inheritance using Object.create.
- * Creates a new object with the specified prototype object and properties.
- *
- * @param object target
- * @param object properties
- */
-function create({ constructor, proto }, properties = {}) {
-  let propertiesObject = {
-    constructor: { value: constructor }
-  };
-  for (let name in properties) {
-    propertiesObject[name] = Object.getOwnPropertyDescriptor(properties, name);
-  }
-  constructor.prototype = Object.create(proto, propertiesObject);
-}
diff --git a/browser/devtools/shared/widgets/ViewHelpers.jsm b/browser/devtools/shared/widgets/ViewHelpers.jsm
new file mode 100644
--- /dev/null
+++ b/browser/devtools/shared/widgets/ViewHelpers.jsm
@@ -0,0 +1,896 @@
+/* -*- Mode: javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const Ci = Components.interfaces;
+const Cu = Components.utils;
+
+this.EXPORTED_SYMBOLS = ["ViewHelpers", "MenuItem", "MenuContainer"];
+
+/**
+ * Helpers for creating and messaging between UI components.
+ */
+this.ViewHelpers = {
+  /**
+   * Sugar for prototypal inheritance using Object.create.
+   * Creates a new object with the specified prototype object and properties.
+   *
+   * @param object aObject
+   *        An object containing the following properties:
+   *          - constructor: the function to configure the prototype for
+   *          - proto: the prototype to extend
+   * @param object aProperties
+   *        The properties extending the prototype.
+   */
+  create: function VH_create({ constructor, proto }, aProperties = {}) {
+    let descriptors = {
+      constructor: { value: constructor }
+    };
+    for (let name in aProperties) {
+      descriptors[name] = Object.getOwnPropertyDescriptor(aProperties, name);
+    }
+    constructor.prototype = Object.create(proto, descriptors);
+  },
+
+  /**
+   * Convenience method, dispatching a custom event.
+   *
+   * @param nsIDOMNode aTarget
+   *        A custom target element to dispatch the event from.
+   * @param string aType
+   *        The name of the event.
+   * @param any aDetail
+   *        The data passed when initializing the event.
+   * @return boolean
+   *         True if the event was cancelled or a registered handler
+   *         called preventDefault.
+   */
+  dispatchEvent: function VH_dispatchEvent(aTarget, aType, aDetail) {
+    if (!aTarget) {
+      return true; // Event cancelled.
+    }
+    let document = aTarget.ownerDocument || aTarget;
+    let dispatcher = aTarget.ownerDocument ? aTarget : document.documentElement;
+
+    let event = document.createEvent("CustomEvent");
+    event.initCustomEvent(aType, true, true, aDetail);
+    return dispatcher.dispatchEvent(event);
+  },
+
+  /**
+   * Helper delegating some of the DOM attribute methods of a node to a widget.
+   * @see MenuContainer constructor
+   *
+   * @param object aWidget
+   *        The widget to assign the methods to.
+   * @param nsIDOMNode aNode
+   *        A node to delegate the methods to.
+   */
+  delegateWidgetAttributeMethods: function MC_delegateWidgetAttributeMethods(aWidget, aNode) {
+    aWidget.getAttribute = aNode.getAttribute.bind(aNode);
+    aWidget.setAttribute = aNode.setAttribute.bind(aNode);
+    aWidget.removeAttribute = aNode.removeAttribute.bind(aNode);
+  },
+
+  /**
+   * Helper delegating some of the DOM event methods of a node to a widget.
+   * @see MenuContainer constructor
+   *
+   * @param object aWidget
+   *        The widget to assign the methods to.
+   * @param nsIDOMNode aNode
+   *        A node to delegate the methods to.
+   */
+  delegateWidgetEventMethods: function MC_delegateWidgetEventMethods(aWidget, aNode) {
+    aWidget.addEventListener = aNode.addEventListener.bind(aNode);
+    aWidget.removeEventListener = aNode.removeEventListener.bind(aNode);
+  }
+};
+
+/**
+ * A generic MenuItem is used to describe elements present in a MenuContainer.
+ * The label, value and description properties are necessarily strings.
+ * Iterable via "for (let childItem in parentItem) { }".
+ *
+ * @param any aAttachment
+ *        Some attached primitive/object.
+ * @param string aLabel
+ *        The label displayed in the container.
+ * @param string aValue
+ *        The actual internal value of the item.
+ * @param string aDescription [optional]
+ *        An optional description of the item.
+ */
+this.MenuItem = function MenuItem(aAttachment, aLabel, aValue, aDescription) {
+  this.attachment = aAttachment;
+  this._label = aLabel + "";
+  this._value = aValue + "";
+  this._description = (aDescription || "") + "";
+};
+
+MenuItem.prototype = {
+  /**
+   * Gets the label set for this item.
+   * @return string
+   */
+  get label() this._label,
+
+  /**
+   * Gets the value set for this item.
+   * @return string
+   */
+  get value() this._value,
+
+  /**
+   * Gets the description set for this item.
+   * @return string
+   */
+  get description() this._description,
+
+  /**
+   * Immediately appends a child item to this menu item.
+   *
+   * @param nsIDOMNode
+   *        An nsIDOMNode representing the child element to append.
+   * @param object aOptions [optional]
+   *        Additional options or flags supported by this operation:
+   *          - attachment: some attached primitive/object for the item
+   *          - attributes: a batch of attributes set to the displayed element
+   *          - finalize: function called when the child node is removed
+   * @return MenuItem
+   *         The item associated with the displayed element.
+   */
+  append: function MI_append(aElement, aOptions = {}) {
+    let item = new MenuItem(aOptions.attachment);
+
+    // Handle any additional options before appending the child node.
+    if (aOptions.attributes) {
+      this.setAttributes(aOptions.attributes);
+    }
+    if (aOptions.finalize) {
+      item.finalize = aOptions.finalize;
+    }
+
+    // Entangle the item with the newly inserted child node.
+    this._entangleItem(item, this.target.appendChild(aElement));
+
+    // Return the item associated with the displayed element.
+    return item;
+  },
+
+  /**
+   * Immediately removes the specified child item from this menu item.
+   *
+   * @param MenuItem aItem
+   *        The item associated with the element to remove.
+   */
+  remove: function MI_remove(aItem) {
+    if (!aItem) {
+      return;
+    }
+    this.target.removeChild(aItem.target);
+    this._untangleItem(aItem);
+  },
+
+  /**
+   * Visually marks this menu item as selected.
+   */
+  markSelected: function MI_markSelected() {
+    if (!this.target) {
+      return;
+    }
+    this.target.classList.add("selected");
+  },
+
+  /**
+   * Visually marks this menu item as deselected.
+   */
+  markDeselected: function MI_markDeselected() {
+    if (!this.target) {
+      return;
+    }
+    this.target.classList.remove("selected");
+  },
+
+  /**
+   * Batch sets attributes on an element.
+   *
+   * @param array aAttributes
+   *        An array of [name, value] tuples representing the attributes.
+   * @param nsIDOMNode aElement [optional]
+   *        A custom element to set the attributes to.
+   */
+  setAttributes: function MI_setAttributes(aAttributes, aElement = this.target) {
+    for (let [name, value] of aAttributes) {
+      aElement.setAttribute(name, value);
+    }
+  },
+
+  /**
+   * Entangles an item (model) with a displayed node element (view).
+   *
+   * @param MenuItem aItem
+   *        The item describing the element.
+   * @param nsIDOMNode aElement
+   *        The element displaying the item.
+   */
+  _entangleItem: function MI__entangleItem(aItem, aElement) {
+    if (!this._itemsByElement) {
+      this._itemsByElement = new Map();
+    }
+
+    this._itemsByElement.set(aElement, aItem);
+    aItem.target = aElement;
+  },
+
+  /**
+   * Untangles an item (model) from a displayed node element (view).
+   *
+   * @param MenuItem aItem
+   *        The item describing the element.
+   */
+  _untangleItem: function MI__untangleItem(aItem) {
+    if (aItem.finalize) {
+      aItem.finalize(aItem);
+    }
+    for (let childItem in aItem) {
+      aItem.remove(childItem);
+    }
+
+    this._itemsByElement.delete(aItem.target);
+    aItem.target = null;
+  },
+
+  /**
+   * Returns a string representing the object.
+   * @return string
+   */
+  toString: function MI_toString() {
+    return this._label + " -> " + this._value;
+  },
+
+  _label: "",
+  _value: "",
+  _description: "",
+  target: null,
+  finalize: null,
+  attachment: null
+};
+
+/**
+ * A generic MenuContainer is used for displaying MenuItem instances.
+ * Iterable via "for (let item in menuContainer) { }".
+ *
+ * Language:
+ *   - An "item" is an instance (or compatible interface) of a MenuItem.
+ *   - An "element" or "node" is a nsIDOMNode.
+ *
+ * The element node or widget supplied to all instances of this container
+ * can either be a <menulist>, or any other object interfacing the following
+ * methods:
+ *   - function:nsIDOMNode insertItemAt(aIndex:number, aLabel:string, aValue:string)
+ *   - function:nsIDOMNode getItemAtIndex(aIndex:number)
+ *   - function removeChild(aChild:nsIDOMNode)
+ *   - function removeAllItems()
+ *   - get:nsIDOMNode selectedItem()
+ *   - set selectedItem(aChild:nsIDOMNode)
+ *   - function getAttribute(aName:string)
+ *   - function setAttribute(aName:string, aValue:string)
+ *   - function removeAttribute(aName:string)
+ *   - function addEventListener(aName:string, aCallback:function, aBubbleFlag:boolean)
+ *   - function removeEventListener(aName:string, aCallback:function, aBubbleFlag:boolean)
+ */
+this.MenuContainer = function MenuContainer() {
+};
+
+MenuContainer.prototype = {
+  /**
+   * Sets the element node or widget associated with this container.
+   * @param nsIDOMNode | object aWidget
+   */
+  set node(aWidget) {
+    this._container = aWidget;
+    this._itemsByLabel = new Map();   // Can't use a WeakMap for itemsByLabel or
+    this._itemsByValue = new Map();   // itemsByValue because keys are strings,
+    this._itemsByElement = new Map(); // and itemsByElement needs to be iterable.
+    this._stagedItems = [];
+  },
+
+  /**
+   * Gets the element node or widget associated with this container.
+   * @return nsIDOMNode | object
+   */
+  get node() this._container,
+
+  /**
+   * Prepares an item to be added to this container. This allows for a large
+   * number of items to be batched up before alphabetically sorted and added.
+   *
+   * If the "staged" flag is not set to true, the item will be immediately
+   * inserted at the correct position in this container, so that all the items
+   * remain sorted. This can (possibly) be much slower than batching up
+   * multiple items.
+   *
+   * By default, this container assumes that all the items should be displayed
+   * sorted by their label. This can be overridden with the "index" flag,
+   * specifying on which position should an item be appended.
+   *
+   * Furthermore, this container makes sure that all the items are unique
+   * (two items with the same label or value are not allowed) and non-degenerate
+   * (items with "undefined" or "null" labels/values). This can, as well, be
+   * overridden via the "relaxed" flag.
+   *
+   * @param nsIDOMNode | object aContents
+   *        An nsIDOMNode, or an array containing the following properties:
+   *          - label: the label displayed in the container
+   *          - value: the actual internal value of the item
+   *          - description: an optional description of the item
+   * @param object aOptions [optional]
+   *        Additional options or flags supported by this operation:
+   *          - staged: true to stage the item to be appended later
+   *          - index: specifies on which position should the item be appended
+   *          - relaxed: true if this container should allow dupes & degenerates
+   *          - attachment: some attached primitive/object for the item
+   *          - attributes: a batch of attributes set to the displayed element
+   *          - finalize: function called when the item is untangled (removed)
+   * @return MenuItem
+   *         The item associated with the displayed element if an unstaged push,
+   *         undefined if the item was staged for a later commit.
+   */
+  push: function MC_push(aContents, aOptions = {}) {
+    if (aContents instanceof Ci.nsIDOMNode ||
+        aContents instanceof Ci.nsIDOMElement) {
+      // Allow the insertion of prebuilt nodes.
+      aOptions.node = aContents;
+      aContents = [];
+    }
+
+    let [label, value, description] = aContents;
+    let item = new MenuItem(aOptions.attachment, label, value, description);
+
+    // Batch the item to be added later.
+    if (aOptions.staged) {
+      return void this._stagedItems.push({ item: item, options: aOptions });
+    }
+    // Find the target position in this container and insert the item there.
+    if (!("index" in aOptions)) {
+      return this._insertItemAt(this._findExpectedIndex(label), item, aOptions);
+    }
+    // Insert the item at the specified index. If negative or out of bounds,
+    // the item will be simply appended.
+    return this._insertItemAt(aOptions.index, item, aOptions);
+  },
+
+  /**
+   * Flushes all the prepared items into this container.
+   *
+   * @param object aOptions [optional]
+   *        Additional options or flags supported by this operation:
+   *          - sorted: true to sort all the items before adding them
+   */
+  commit: function MC_commit(aOptions = {}) {
+    let stagedItems = this._stagedItems;
+
+    // Sort the items before adding them to this container, if preferred.
+    if (aOptions.sorted) {
+      stagedItems.sort(function(a, b) a.item._label.toLowerCase() >
+                                      b.item._label.toLowerCase());
+    }
+    // Append the prepared items to this container.
+    for (let { item, options } of stagedItems) {
+      this._insertItemAt(-1, item, options);
+    }
+    // Recreate the temporary items list for ulterior pushes.
+    this._stagedItems.length = 0;
+  },
+
+  /**
+   * Updates this container to reflect the information provided by the
+   * currently selected item.
+   *
+   * @return boolean
+   *         True if a selected item was available, false otherwise.
+   */
+  refresh: function MC_refresh() {
+    let selectedValue = this.selectedValue;
+    if (!selectedValue) {
+      return false;
+    }
+    let entangledLabel = this.getItemByValue(selectedValue)._label;
+    this._container.removeAttribute("notice");
+    this._container.setAttribute("label", entangledLabel);
+    this._container.setAttribute("tooltiptext", selectedValue);
+    return true;
+  },
+
+  /**
+   * Immediately removes the specified item from this container.
+   *
+   * @param MenuItem aItem
+   *        The item associated with the element to remove.
+   */
+  remove: function MC_remove(aItem) {
+    if (!aItem) {
+      return;
+    }
+    this._container.removeChild(aItem.target);
+    this._untangleItem(aItem);
+  },
+
+  /**
+   * Removes all items from this container.
+   */
+  empty: function MC_empty() {
+    this._preferredValue = this.selectedValue;
+    this._container.selectedItem = null;
+    this._container.removeAllItems();
+    this._container.setAttribute("notice", this.emptyText);
+    this._container.setAttribute("label", this.emptyText);
+    this._container.removeAttribute("tooltiptext");
+
+    for (let [, item] of this._itemsByElement) {
+      this._untangleItem(item);
+    }
+
+    this._itemsByLabel = new Map();
+    this._itemsByValue = new Map();
+    this._itemsByElement = new Map();
+    this._stagedItems.length = 0;
+  },
+
+  /**
+   * Does not remove any item in this container. Instead, it overrides the
+   * current label to signal that it is unavailable and removes the tooltip.
+   */
+  setUnavailable: function MC_setUnavailable() {
+    this._container.setAttribute("notice", this.unavailableText);
+    this._container.setAttribute("label", this.unavailableText);
+    this._container.removeAttribute("tooltiptext");
+  },
+
+  /**
+   * The label string automatically added to this container when there are
+   * no child nodes present.
+   */
+  emptyText: "",
+
+  /**
+   * The label string added to this container when it is marked as unavailable.
+   */
+  unavailableText: "",
+
+  /**
+   * Toggles all the items in this container hidden or visible.
+   *
+   * @param boolean aVisibleFlag
+   *        Specifies the intended visibility.
+   */
+  toggleContents: function MC_toggleContents(aVisibleFlag) {
+    for (let [, item] of this._itemsByElement) {
+      item.target.hidden = !aVisibleFlag;
+    }
+  },
+
+  /**
+   * Checks whether an item with the specified label is among the elements
+   * shown in this container.
+   *
+   * @param string aLabel
+   *        The item's label.
+   * @return boolean
+   *         True if the label is known, false otherwise.
+   */
+  containsLabel: function MC_containsLabel(aLabel) {
+    return this._itemsByLabel.has(aLabel) ||
+           this._stagedItems.some(function({item}) item._label == aLabel);
+  },
+
+  /**
+   * Checks whether an item with the specified value is among the elements
+   * shown in this container.
+   *
+   * @param string aValue
+   *        The item's value.
+   * @return boolean
+   *         True if the value is known, false otherwise.
+   */
+  containsValue: function MC_containsValue(aValue) {
+    return this._itemsByValue.has(aValue) ||
+           this._stagedItems.some(function({item}) item._value == aValue);
+  },
+
+  /**
+   * Gets the preferred selected value to be displayed in this container.
+   * @return string
+   */
+  get preferredValue() this._preferredValue,
+
+  /**
+   * Retrieves the item associated with the selected element.
+   * @return MenuItem
+   */
+  get selectedItem() {
+    let selectedElement = this._container.selectedItem;
+    if (selectedElement) {
+      return this._itemsByElement.get(selectedElement);
+    }
+    return -1;
+  },
+
+  /**
+   * Retrieves the selected element's index in this container.
+   * @return number
+   */
+  get selectedIndex() {
+    let selectedElement = this._container.selectedItem;
+    if (selectedElement) {
+      return this._indexOfElement(selectedElement);
+    }
+    return -1;
+  },
+
+  /**
+   * Retrieves the label of the selected element.
+   * @return string
+   */
+  get selectedLabel() {
+    let selectedElement = this._container.selectedItem;
+    if (selectedElement) {
+      return this._itemsByElement.get(selectedElement)._label;
+    }
+    return "";
+  },
+
+  /**
+   * Retrieves the value of the selected element.
+   * @return string
+   */
+  get selectedValue() {
+    let selectedElement = this._container.selectedItem;
+    if (selectedElement) {
+      return this._itemsByElement.get(selectedElement)._value;
+    }
+    return "";
+  },
+
+  /**
+   * Selects the element with the entangled item in this container.
+   * @param MenuItem aItem
+   */
+  set selectedItem(aItem) {
+    // A falsy item is allowed to invalidate the current selection.
+    let targetNode = aItem ? aItem.target : null;
+
+    // Prevent selecting the same item again, so return early.
+    if (this._container.selectedItem == targetNode) {
+      return;
+    }
+    this._container.selectedItem = targetNode;
+    ViewHelpers.dispatchEvent(targetNode, "select", aItem);
+  },
+
+  /**
+   * Selects the element at the specified index in this container.
+   * @param number aIndex
+   */
+  set selectedIndex(aIndex) {
+    let targetElement = this._container.getItemAtIndex(aIndex);
+    if (targetElement) {
+      this.selectedItem = this._itemsByElement.get(targetElement);
+      return;
+    }
+    this.selectedItem = null;
+  },
+
+  /**
+   * Selects the element with the specified label in this container.
+   * @param string aLabel
+   */
+  set selectedLabel(aLabel)
+    this.selectedItem = this._itemsByLabel.get(aLabel),
+
+  /**
+   * Selects the element with the specified value in this container.
+   * @param string aValue
+   */
+  set selectedValue(aValue)
+    this.selectedItem = this._itemsByValue.get(aValue),
+
+  /**
+   * Gets the item in the container having the specified index.
+   *
+   * @param number aIndex
+   *        The index used to identify the element.
+   * @return MenuItem
+   *         The matched item, or null if nothing is found.
+   */
+  getItemAtIndex: function MC_getItemAtIndex(aIndex) {
+    return this.getItemForElement(this._container.getItemAtIndex(aIndex));
+  },
+
+  /**
+   * Gets the item in the container having the specified label.
+   *
+   * @param string aLabel
+   *        The label used to identify the element.
+   * @return MenuItem
+   *         The matched item, or null if nothing is found.
+   */
+  getItemByLabel: function MC_getItemByLabel(aLabel) {
+    return this._itemsByLabel.get(aLabel);
+  },
+
+  /**
+   * Gets the item in the container having the specified value.
+   *
+   * @param string aValue
+   *        The value used to identify the element.
+   * @return MenuItem
+   *         The matched item, or null if nothing is found.
+   */
+  getItemByValue: function MC_getItemByValue(aValue) {
+    return this._itemsByValue.get(aValue);
+  },
+
+  /**
+   * Gets the item in the container associated with the specified element.
+   *
+   * @param nsIDOMNode aElement
+   *        The element used to identify the item.
+   * @return MenuItem
+   *         The matched item, or null if nothing is found.
+   */
+  getItemForElement: function MC_getItemForElement(aElement) {
+    while (aElement) {
+      let item = this._itemsByElement.get(aElement);
+      if (item) {
+        return item;
+      }
+      aElement = aElement.parentNode;
+    }
+    return null;
+  },
+
+  /**
+   * Finds the index of an item in the container.
+   *
+   * @param MenuItem aItem
+   *        The item get the index for.
+   * @return number
+   *         The index of the matched item, or -1 if nothing is found.
+   */
+  indexOfItem: function MC_indexOfItem(aItem) {
+    return this._indexOfElement(aItem.target);
+  },
+
+  /**
+   * Finds the index of an element in the container.
+   *
+   * @param nsIDOMNode aElement
+   *        The element get the index for.
+   * @return number
+   *         The index of the matched element, or -1 if nothing is found.
+   */
+  _indexOfElement: function MC__indexOfElement(aElement) {
+    let container = this._container;
+    let itemCount = this._itemsByElement.size;
+
+    for (let i = 0; i < itemCount; i++) {
+      if (container.getItemAtIndex(i) == aElement) {
+        return i;
+      }
+    }
+    return -1;
+  },
+
+  /**
+   * Returns the list of labels in this container.
+   * @return array
+   */
+  get labels() {
+    let labels = [];
+    for (let [label] of this._itemsByLabel) {
+      labels.push(label);
+    }
+    return labels;
+  },
+
+  /**
+   * Returns the list of values in this container.
+   * @return array
+   */
+  get values() {
+    let values = [];
+    for (let [value] of this._itemsByValue) {
+      values.push(value);
+    }
+    return values;
+  },
+
+  /**
+   * Gets the total number of items in this container.
+   * @return number
+   */
+  get itemCount() this._itemsByElement.size,
+
+  /**
+   * Returns a list of all the visible (non-hidden) items in this container.
+   * @return array
+   */
+  get visibleItems() {
+    let items = [];
+    for (let [element, item] of this._itemsByElement) {
+      if (!element.hidden) {
+        items.push(item);
+      }
+    }
+    return items;
+  },
+
+  /**
+   * Specifies the required conditions for an item to be considered unique.
+   * Possible values:
+   *   - 1: label AND value are different from all other items
+   *   - 2: label OR value are different from all other items
+   *   - 3: only label is required to be different
+   *   - 4: only value is required to be different
+   */
+  uniquenessQualifier: 1,
+
+  /**
+   * Checks if an item is unique in this container.
+   *
+   * @param MenuItem aItem
+   *        An object containing a label and a value property (at least).
+   * @return boolean
+   *         True if the element is unique, false otherwise.
+   */
+  isUnique: function MC_isUnique(aItem) {
+    switch (this.uniquenessQualifier) {
+      case 1:
+        return !this._itemsByLabel.has(aItem._label) &&
+               !this._itemsByValue.has(aItem._value);
+      case 2:
+        return !this._itemsByLabel.has(aItem._label) ||
+               !this._itemsByValue.has(aItem._value);
+      case 3:
+        return !this._itemsByLabel.has(aItem._label);
+      case 4:
+        return !this._itemsByValue.has(aItem._value);
+    }
+    return false;
+  },
+
+  /**
+   * Checks if an item's label and value are eligible for this container.
+   *
+   * @param MenuItem aItem
+   *        An object containing a label and a value property (at least).
+   * @return boolean
+   *         True if the element is eligible, false otherwise.
+   */
+  isEligible: function MC_isEligible(aItem) {
+    return this.isUnique(aItem) &&
+           aItem._label != "undefined" && aItem._label != "null" &&
+           aItem._value != "undefined" && aItem._value != "null";
+  },
+
+  /**
+   * Finds the expected item index in this container based on its label.
+   *
+   * @param string aLabel
+   *        The label used to identify the element.
+   * @return number
+   *         The expected item index.
+   */
+  _findExpectedIndex: function MC__findExpectedIndex(aLabel) {
+    let container = this._container;
+    let itemCount = this.itemCount;
+
+    for (let i = 0; i < itemCount; i++) {
+      if (this.getItemAtIndex(i)._label > aLabel) {
+        return i;
+      }
+    }
+    return itemCount;
+  },
+
+  /**
+   * Immediately inserts an item in this container at the specified index.
+   *
+   * @param number aIndex
+   *        The position in the container intended for this item.
+   * @param MenuItem aItem
+   *        An object containing a label and a value property (at least).
+   * @param object aOptions [optional]
+   *        Additional options or flags supported by this operation:
+   *          - node: allows the insertion of prebuilt nodes instead of labels
+   *          - relaxed: true if this container should allow dupes & degenerates
+   *          - attributes: a batch of attributes set to the displayed element
+   *          - finalize: function called when the item is untangled (removed)
+   * @return MenuItem
+   *         The item associated with the displayed element, null if rejected.
+   */
+  _insertItemAt: function MC__insertItemAt(aIndex, aItem, aOptions) {
+    // Relaxed nodes may be appended without verifying their eligibility.
+    if (!aOptions.relaxed && !this.isEligible(aItem)) {
+      return null;
+    }
+
+    // Entangle the item with the newly inserted node.
+    this._entangleItem(aItem, this._container.insertItemAt(aIndex,
+      aOptions.node || aItem._label,
+      aItem._value,
+      aItem._description,
+      aOptions.attachment));
+
+    // Handle any additional options after entangling the item.
+    if (aOptions.attributes) {
+      aItem.setAttributes(aOptions.attributes, aItem.target);
+    }
+    if (aOptions.finalize) {
+      aItem.finalize = aOptions.finalize;
+    }
+
+    // Return the item associated with the displayed element.
+    return aItem;
+  },
+
+  /**
+   * Entangles an item (model) with a displayed node element (view).
+   *
+   * @param MenuItem aItem
+   *        The item describing the element.
+   * @param nsIDOMNode aElement
+   *        The element displaying the item.
+   */
+  _entangleItem: function MC__entangleItem(aItem, aElement) {
+    this._itemsByLabel.set(aItem._label, aItem);
+    this._itemsByValue.set(aItem._value, aItem);
+    this._itemsByElement.set(aElement, aItem);
+    aItem.target = aElement;
+  },
+
+  /**
+   * Untangles an item (model) from a displayed node element (view).
+   *
+   * @param MenuItem aItem
+   *        The item describing the element.
+   */
+  _untangleItem: function MC__untangleItem(aItem) {
+    if (aItem.finalize) {
+      aItem.finalize(aItem);
+    }
+    for (let childItem in aItem) {
+      aItem.remove(childItem);
+    }
+
+    this._itemsByLabel.delete(aItem._label);
+    this._itemsByValue.delete(aItem._value);
+    this._itemsByElement.delete(aItem.target);
+    aItem.target = null;
+  },
+
+  _container: null,
+  _stagedItems: null,
+  _itemsByLabel: null,
+  _itemsByValue: null,
+  _itemsByElement: null,
+  _preferredValue: null
+};
+
+/**
+ * A generator-iterator over all the items in this container.
+ */
+MenuItem.prototype.__iterator__ =
+MenuContainer.prototype.__iterator__ = function VH_iterator() {
+  if (!this._itemsByElement) {
+    return;
+  }
+  for (let [, item] of this._itemsByElement) {
+    yield item;
+  }
+};
diff --git a/browser/devtools/shared/widgets/widgets.css b/browser/devtools/shared/widgets/widgets.css
new file mode 100644
--- /dev/null
+++ b/browser/devtools/shared/widgets/widgets.css
@@ -0,0 +1,43 @@
+/* vim:set ts=2 sw=2 sts=2 et: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/* BreacrumbsWidget */
+
+.breadcrumbs-widget-item {
+  direction: ltr;
+}
+
+/* SideMenuWidget */
+
+.side-menu-widget-container {
+  overflow-x: hidden;
+  overflow-y: auto;
+}
+
+.side-menu-widget-group[name=""] > .side-menu-widget-group-title {
+  display: none;
+}
+
+/* VariablesView */
+
+.variables-view-container {
+  overflow-x: hidden;
+  overflow-y: auto;
+}
+
+.variables-view-element-details:not([open]) {
+  display: none;
+}
+
+.variables-view-scope,
+.variable-or-property {
+  -moz-user-focus: normal;
+}
+
+.variables-view-scope[non-header] > .title,
+.variable-or-property[non-header] > .title,
+.variable-or-property[non-match] > .title {
+  display: none;
+}
diff --git a/browser/locales/en-US/chrome/browser/devtools/debugger.properties b/browser/locales/en-US/chrome/browser/devtools/debugger.properties
--- a/browser/locales/en-US/chrome/browser/devtools/debugger.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/debugger.properties
@@ -84,23 +84,19 @@ stepInTooltip=Step In (%S)
 stepOutTooltip=Step Out (%S)
 
-# LOCALIZATION NOTE (emptyBreakpointsText): The text that is displayed in the
-# breakpoints list when there are no breakpoints to display.
-emptyBreakpointsText=No breakpoints to display
-
 # LOCALIZATION NOTE (emptyGlobalsText): The text to display in the menulist
 # when there are no chrome globals available.
 noGlobalsText=No globals
 
-# LOCALIZATION NOTE (noMatchingScriptsText): The text to display in the
+# LOCALIZATION NOTE (noMatchingGlobalsText): The text to display in the
 # menulist when there are no matching chrome globals after filtering.
 noMatchingGlobalsText=No matching globals
 
-# LOCALIZATION NOTE (noScriptsText): The text to display in the menulist
+# LOCALIZATION NOTE (noSourcesText): The text to display in the sources menu
 # when there are no scripts.
-noScriptsText=No scripts
+noSourcesText=This page has no sources.
 
-# LOCALIZATION NOTE (noMatchingScriptsText): The text to display in the
-# menulist when there are no matching scripts after filtering.
-noMatchingScriptsText=No matching scripts
+# LOCALIZATION NOTE (noMatchingSourcesText): The text to display in the
+# sources menu when there are no matching scripts after filtering.
+noMatchingSourcesText=No matching sources.
 
 # LOCALIZATION NOTE (noMatchingStringsText): The text to display in the
diff --git a/browser/themes/linux/devtools/debugger.css b/browser/themes/linux/devtools/debugger.css
--- a/browser/themes/linux/devtools/debugger.css
+++ b/browser/themes/linux/devtools/debugger.css
@@ -1,4 +1,3 @@
-/* -*- Mode: javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* vim:set ts=2 sw=2 sts=2 et: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,108 +5,112 @@
 
 #body {
-  background-color: white;
+  background: #fff;
 }
 
-/**
- * Debugger content
- */
+/* Sources and breakpoints pane */
 
-#chrome-globals, #sources {
-  width: 200px;
+#sources-pane {
+  min-width: 50px;
 }
 
-/**
- * Lists and headers
- */
+#sources-pane + .devtools-side-splitter {
+  -moz-border-start-color: transparent;
+}
 
-.list-item {
+/* Watch expressions, variables and other instruments pane */
+
+#instruments-pane {
+  min-width: 50px;
+  -moz-margin-start: 0px !important;
+  /* Unfortunately, transitions don't work properly with locale-aware properties,
+     so both the left and right margins are set via js, while the start margin
+     is always overridden here. */
+}
+
+#instruments-pane[animated] {
+  -moz-transition: margin 0.25s ease-in-out;
+}
+
+/* ListWidget items */
+
+.list-widget-item {
   padding: 2px;
 }
 
-.list-item:not(.selected):not(.empty):hover {
-  background: #cddae5;
+.list-widget-item:not(.selected):not(.empty):hover {
+  background: linear-gradient(rgba(255,255,255,0.9), rgba(255,255,255,0.85)), Highlight;
 }
 
-.list-item.selected {
+.list-widget-item.selected.light {
+  background: linear-gradient(rgba(255,255,255,0.85), rgba(255,255,255,0.8)), Highlight;
+  color: #000;
+}
+
+.list-widget-item.selected {
   background: Highlight;
   color: HighlightText;
 }
 
-.list-item.empty {
+.list-widget-item.empty {
   color: GrayText;
   padding: 2px;
 }
 
-/**
- * Sources searching
- */
+/* Stack frames view */
 
-#globalsearch {
-  background-color: white;
-  min-height: 10px;
+.dbg-stackframe-details {
+  -moz-padding-start: 4px;
 }
 
-#globalsearch > vbox:not(:empty) {
-  min-height: 10px;
-  max-height: 150px;
-}
-
-.dbg-source-results:not(:last-child) {
-  border-bottom: 1px dotted #aaa;
-}
-
-.dbg-results-header {
-  -moz-padding-start: 6px;
-}
-
-.dbg-results-header .location {
+.dbg-stackframe-menuitem[checked] {
+  margin-top: 3px;
+  margin-bottom: 3px;
+  outline: 1px solid #eee;
   font-weight: 600;
 }
 
-.dbg-results-header .match-count {
-  -moz-padding-start: 6px;
-  color: GrayText;
+.dbg-stackframe-menuitem-details {
+  -moz-padding-start: 16px;
 }
 
-.dbg-results-container .line-number {
-  background: hsl(0,0%,89%);
-  min-width: 40px;
-  -moz-padding-end: 4px;
-  -moz-border-end: 1px dotted #aaa;
-  text-align: end;
-  font: 8pt monospace;
-  color: hsl(0,0%,55%);
+/* Sources and breakpoints view */
+
+.dbg-breakpoint {
+  font-family: monospace;
 }
 
-.dbg-results-container .line-contents {
-  -moz-padding-start: 4px;
-  font: 8pt monospace;
+.dbg-breakpoint-line {
+  font-weight: 600;
 }
 
-.dbg-results-container .line-contents:hover {
-  background: #cddae5;
+.dbg-breakpoint-text {
+  -moz-margin-start: 10px !important;
+  font-style: italic;
 }
 
-.dbg-results-container .line-contents > .string {
-  padding: 1px;
+/* Watch expressions view */
+
+#expressions {
+  min-height: 10px;
+  max-height: 125px;
 }
 
-.dbg-results-container .line-contents > .string[match=true] {
-  background: rgba(255, 255, 0, 0.65);
-  padding: 0;
-  border: 1px solid #aaa;
-  border-radius: 4px;
-  cursor: pointer;
-  transition: transform 0.25s ease-in-out;
+.dbg-expression {
+  height: 20px;
+  -moz-padding-start: 8px;
 }
 
-.dbg-results-container .line-contents > .string[match=true][focused] {
-  transition-duration: 0.1s;
-  transform: scale(1.75, 1.75);
+.dbg-expression-arrow {
+  width: 10px;
+  height: auto;
+  background: url("chrome://browser/skin/devtools/commandline.png") 0px 4px no-repeat;
 }
 
-/**
- * Searchbox
- */
+.dbg-expression-input {
+  -moz-padding-start: 2px !important;
+  font-family: Menlo, Monaco, monospace;
+}
+
+/* Searchbox and the search operations help panel */
 
 .devtools-searchinput {
@@ -116,26 +119,29 @@
 }
 
-#searchbox-panel .description {
-  margin: -6px 0 8px 0;
+#searchbox-panel-description {
+  margin-top: 0;
+  margin-bottom: 8px;
+  -moz-margin-start: 2px;
 }
 
-#searchbox-panel button.operator {
-  min-width: 0;
-  margin: 0;
-  padding: 0;
-  font: 9pt monospace;
+.searchbox-panel-operator-button {
+  min-width: 26px;
+  margin-top: 0;
+  margin-bottom: 0;
+  -moz-margin-start: 2px;
+  -moz-margin-end: 6px;
+  text-align: center;
+  font-family: Menlo, Monaco, monospace;
 }
 
-#searchbox-panel label.operator {
-  -moz-padding-start: 6px;
-  padding-bottom: 1px;
+.searchbox-panel-operator-label {
+  padding-bottom: 2px;
 }
 
-/**
- * Filtered sources panel
- */
+/* Filtering results panel */
 
 #filtered-sources-panel {
   padding: 4px;
+  opacity: 0.9;
 }
 
@@ -144,8 +150,6 @@
   border: 1px solid #ddd;
   border-top-color: #fff;
-}
-
-.dbg-source-item.selected {
-  background: #cddae5;
+  padding: 5px;
+  cursor: pointer;
 }
 
@@ -168,426 +172,97 @@
 
 .dbg-source-item-name {
-  color: #333;
+  color: #111;
   font-weight: 600;
+  cursor: inherit;
 }
 
 .dbg-source-item-details {
-  color: #888;
+  color: #777;
+  cursor: inherit;
 }
 
-/**
- * Stack frames and breakpoints pane
- */
+/* Sources search view */
 
-#stackframes\+breakpoints {
-  min-width: 50px;
+#globalsearch {
+  min-height: 10px;
+  box-shadow: inset 0 -4px 8px #eee;
+  background: url(background-noise-toolbar.png);
 }
 
-#stackframes\+breakpoints[animated] {
-  transition: margin 0.25s ease-in-out;
-}
-
-/**
- * Variables and watch expressions pane
- */
-
-#variables\+expressions {
-  min-width: 50px;
-}
-
-#variables\+expressions[animated] {
-  transition: margin 0.25s ease-in-out;
-}
-
-/**
- * Stack frames view
- */
-
-.dbg-stackframe {
-  width: auto !important;
-  min-width: 64px;
-}
-
-.dbg-stackframe-menuitem[checked] {
-  outline: 1px solid #eee;
-  margin-top: 3px;
-  margin-bottom: 3px;
-  font-weight: 600;
-}
-
-.dbg-stackframe-menuitem-title {
-  -moz-padding-end: 8px;
-}
-
-.dbg-stackframe-menuitem-details {
-  -moz-padding-start: 8px;
-}
-
-/**
- * Breakpoints view
- */
-
-.dbg-breakpoint {
-  border-bottom: 1px solid #eee;
-}
-
-.dbg-breakpoint-info {
-  font-weight: 600;
-}
-
-.dbg-breakpoint-text {
-  font: 8pt monospace;
-}
-
-#conditional-breakpoint-panel .description {
-  margin: -6px 0 8px 0;
-}
-
-#conditional-breakpoint-panel textbox {
-  margin: 0 0 -2px 0;
-}
-
-/**
- * Watch expressions view
- */
-
-#expressions {
+#globalsearch > vbox:not(:empty) {
   min-height: 10px;
   max-height: 125px;
 }
 
-.dbg-expression {
-  height: 20px;
-  -moz-padding-start: 8px;
+#globalsearch + .devtools-horizontal-splitter {
+  -moz-border-top-colors: #bfbfbf;
 }
 
-.dbg-expression-arrow {
-  width: 10px;
-  height: auto;
-  background: url("chrome://browser/skin/devtools/commandline.png") 0px 4px no-repeat;
+.dbg-source-results {
+  padding: 0;
+  background: none !important;
 }
 
-.dbg-expression-input {
-  font: 9pt monospace;
+.dbg-results-header {
+  -moz-padding-start: 6px;
 }
 
-.dbg-expression-delete {
-  opacity: 0;
+.dbg-results-header-location {
+  font-weight: 600;
 }
 
-.dbg-expression-delete:hover {
-  opacity: 1;
+.dbg-results-header-match-count {
+  -moz-padding-start: 6px;
+  color: GrayText;
 }
 
-.dbg-expression:hover > .dbg-expression-delete:not(:hover) {
-  opacity: 0.5;
-  transition: opacity 0.2s ease-in-out;
+.dbg-results-line-number {
+  background: #e2e2e2;
+  min-width: 40px;
+  -moz-border-end: 1px solid #b4c4d3;
+  -moz-padding-end: 4px;
+  padding-top: 2px;
+  text-align: end;
+  font-family: monospace;
+  color: #8c8c8c;
 }
 
-/**
- * Variables view
- */
-
-#variables {
-  min-height: 10px;
+.dbg-results-line-contents {
+  -moz-padding-start: 4px;
+  padding-top: 1px;
+  padding-bottom: 1px;
+  font-family: monospace;
 }
 
-.dbg-variable-delete {
-  opacity: 0;
+.dbg-results-line-contents-string {
+  padding: 1px;
 }
 
-.dbg-variable-delete:hover {
-  opacity: 1;
-}
-
-.variable-or-property:hover > .title > .dbg-variable-delete:not(:hover),
-.variable-or-property:focus > .title > .dbg-variable-delete:not(:hover) {
-  opacity: 0.5;
-  transition: opacity 0.2s ease-in-out;
-}
-
-.dbg-variable-edit {
-  background: url("chrome://browser/skin/tabview/edit-light.png") center no-repeat;
-  width: 20px;
-  height: 16px;
+.dbg-results-line-contents-string[match=true] {
+  background: rgba(255,255,0,0.5);
+  padding: 0;
+  border: 1px solid #aaa;
+  border-radius: 4px;
   cursor: pointer;
 }
 
-.dbg-variable-throbber {
-  background: url("chrome://global/skin/icons/loading_16.png") center no-repeat;
-  width: 16px;
-  height: 16px;
+.dbg-results-line-contents-string[match=true][focusing] {
+  transition: transform 0.3s ease-in-out;
 }
 
-/**
- * Scope element
- */
-
-.scope:focus > .title {
-  background: Highlight;
-  color: HighlightText;
+.dbg-results-line-contents-string[match=true][focused] {
+  transition-duration: 0.1s;
+  transform: scale(1.75, 1.75);
 }
 
-.scope > .title {
-  text-shadow: 0 1px #222;
-  color: #fff;
-}
-
-.scope > .details {
-  -moz-margin-start: 2px;
-  -moz-margin-end: 1px;
-}
-
-.scope > .details.nonenum:not(:empty) {
-  border-top: 1px solid #ddd;
-}
-
-/**
- * Variable element
- */
-
-.variable {
-  -moz-margin-start: 1px;
-  -moz-margin-end: 1px;
-  border-bottom: 1px solid #eee;
-  transition: background 1s ease-in-out;
-}
-
-.variable[changed] {
-  background: rgba(255, 255, 0, 0.65);
-  transition-duration: 0.4s;
-}
-
-.variable:focus > .title {
-  background: Highlight;
-  color: HighlightText;
-  border-radius: 4px;
-}
-
-.variable > .title > .name {
-  font-weight: 600;
-}
-
-.variable:not(:focus) > .title > .name {
-  color: #048;
-}
-
-.variable > .title > .value {
-  -moz-padding-start: 6px;
-  -moz-padding-end: 4px;
-}
-
-.variable[editable] > .title > .value {
-  cursor: text;
-}
-
-.variable:not([non-header]) > .details {
-  -moz-margin-start: 10px;
-}
-
-/**
- * Property element
- */
-
-.property {
-  transition: background 1s ease-in-out;
-}
-
-.property[changed] {
-  background: rgba(255, 255, 0, 0.65);
-  transition-duration: 0.4s;
-}
-
-.property:focus > .title {
-  background: Highlight;
-  color: HighlightText;
-  border-radius: 4px;
-}
-
-.property:not(:focus) > .title > .name {
-  color: #881090;
-}
-
-.property > .title > .value {
-  -moz-padding-start: 6px;
-  -moz-padding-end: 4px;
-}
-
-.property[editable] > .title > .value {
-  cursor: text;
-}
-
-.property:not([non-header]) > .details {
-  -moz-margin-start: 10px;
-}
-
-/**
- * Non enumerable, configurable and writable variables and properties
- */
-
-.variable[proto] > .title > .name,
-.property[proto] > .title > .name,
-.variable[non-enumerable]:not([self]):not([exception]) > .title > .name,
-.property[non-enumerable]:not([self]):not([exception]) > .title > .name {
-  opacity: 0.5;
-}
-
-.variable[non-configurable] > .title > .name,
-.property[non-configurable] > .title > .name {
-  border-bottom: 1px dashed #99f;
-}
-
-.variable[non-configurable][non-writable] > .title > .name,
-.property[non-configurable][non-writable] > .title > .name {
-  border-bottom: 1px dashed #f99;
-}
-
-.variable[non-writable] > .title:after,
-.property[non-writable] > .title:after {
-  content: " ";
-  display: inline-block;
-  width: 16px;
-  height: 16px;
-  background: url("chrome://browser/skin/identity-icons-https.png") no-repeat;
-  opacity: 0.5;
-}
-
-@media (min-resolution: 2dppx) {
-  .variable[non-writable] > .title:after,
-  .property[non-writable] > .title:after {
-    background-image: url("chrome://browser/skin/identity-icons-https@2x.png");
-    background-size: 32px;
-  }
-}
-
-.variable[exception]:not(:focus) > .title > .name,
-.property[exception]:not(:focus) > .title > .name {
-  color: #a00;
-  text-shadow: 0 0 8px #fcc;
-}
-
-.variable > tooltip > label,
-.property > tooltip > label {
-  margin: 0 2px 0 2px;
-}
-
-.variable[non-enumerable] > tooltip > label[value="enumerable"],
-.property[non-enumerable] > tooltip > label[value="enumerable"],
-.variable[non-configurable] > tooltip > label[value="configurable"],
-.property[non-configurable] > tooltip > label[value="configurable"],
-.variable[non-writable] > tooltip > label[value="writable"],
-.property[non-writable] > tooltip > label[value="writable"] {
-  text-decoration: line-through;
-}
-
-/**
- * Variables and properties editing
- */
-
-.element-value-input {
-  -moz-margin-start: 4px !important;
-}
-
-.element-name-input {
-  -moz-margin-start: -2px !important;
-  color: #048;
-  font-weight: 600;
-}
-
-.element-value-input,
-.element-name-input {
-  max-width: 30em;
-  border: 1px solid #999 !important;
-  box-shadow: 1px 2px 4px #aaa;
-}
-
-/**
- * Variables and properties searching
- */
-
-.variables-searchinput.devtools-searchinput {
-  min-height: 24px;
-}
-
-.variable[non-match],
-.property[non-match] {
-  border: none;
-  margin: 0;
-}
-
-/**
- * Token value colors
- */
-
-.variable-or-property:not(:focus) > .title > .token-undefined {
-  color: #bbb;
-}
-
-.variable-or-property:not(:focus) > .title > .token-null {
-  color: #999;
-}
-
-.variable-or-property:not(:focus) > .title > .token-boolean {
-  color: #777;
-}
-
-.variable-or-property:not(:focus) > .title > .token-number {
-  color: #c40a16;
-}
-
-.variable-or-property:not(:focus) > .title > .token-string {
-  max-width: 30em;
-  color: #1c00cf;
-}
-
-.variable-or-property:not(:focus) > .title > .token-other {
-  color: #333;
-}
-
-/**
- * Expand/collapse arrow
- */
-
-.arrow {
-  -moz-appearance: treetwisty;
-  -moz-margin-start: 10px;
-  -moz-margin-end: 5px;
-}
-
-.arrow[open] {
-  -moz-appearance: treetwistyopen;
-}
-
-.arrow[invisible] {
-  visibility: hidden;
-}
-
-/**
- * Toolbar Controls
- */
-
-#toggle-panes {
-  background: none;
-  box-shadow: none;
-  border: none;
-  list-style-image: url("chrome://browser/skin/devtools/debugger-expand.png");
-  -moz-image-region: rect(0px, 16px, 16px, 0px);
-}
-
-#toggle-panes:not([panesHidden]) {
-  list-style-image: url("chrome://browser/skin/devtools/debugger-collapse.png");
-}
-
-#toggle-panes:active {
-  -moz-image-region: rect(0px, 32px, 16px, 16px);
-}
+/* Toolbar Controls */
 
 #resume {
   list-style-image: url("chrome://browser/skin/devtools/debugger-play.png");
-  -moz-image-region: rect(0px, 16px, 16px, 0px);
+  -moz-image-region: rect(0px,16px,16px,0px);
 }
 
-#resume[checked=true] {
-  -moz-image-region: rect(0px, 32px, 16px, 16px);
+#resume[checked] {
+  -moz-image-region: rect(0px,32px,16px,16px);
 }
 
@@ -605,9 +280,9 @@
 
 #debugger-controls > toolbarbutton {
+  margin: 0;
+  box-shadow: none;
+  border-radius: 0;
   border-width: 0;
   -moz-border-end-width: 1px;
-  border-radius: 0;
-  box-shadow: none;
-  margin: 0;
   outline-offset: -3px;
 }
@@ -618,7 +293,25 @@
 
 #debugger-controls {
+  box-shadow: 0 1px 0 hsla(210,16%,76%,.15) inset,
+              0 0 0 1px hsla(210,16%,76%,.15) inset,
+              0 1px 0 hsla(210,16%,76%,.15);
   border: 1px solid hsla(210,8%,5%,.45);
   border-radius: 3px;
-  box-shadow: 0 1px 0 hsla(210,16%,76%,.15) inset, 0 0 0 1px hsla(210,16%,76%,.15) inset, 0 1px 0 hsla(210,16%,76%,.15);
   margin: 0 3px;
 }
+
+#instruments-pane-toggle {
+  background: none;
+  box-shadow: none;
+  border: none;
+  list-style-image: url("chrome://browser/skin/devtools/debugger-expand.png");
+  -moz-image-region: rect(0px,16px,16px,0px);
+}
+
+#instruments-pane-toggle:not([toggled]) {
+  list-style-image: url("chrome://browser/skin/devtools/debugger-collapse.png");
+}
+
+#instruments-pane-toggle:active {
+  -moz-image-region: rect(0px,32px,16px,16px);
+}
diff --git a/browser/themes/linux/devtools/inspector.css b/browser/themes/linux/devtools/inspector.css
--- a/browser/themes/linux/devtools/inspector.css
+++ b/browser/themes/linux/devtools/inspector.css
@@ -1,2 +1,7 @@
+/* vim:set ts=2 sw=2 sts=2 et: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
 #inspector-inspect-toolbutton {
   list-style-image: url("chrome://browser/skin/devtools/inspect-button.png");
@@ -8,209 +13,4 @@
 }
 
-/* Highlighter toolbar - breadcrumbs */
-
-#inspector-breadcrumbs {
-  -moz-margin-end: 3px;
-  /* A fake 1px-shadow is included in the border-images of the
-     inspector-breadcrumbs-buttons, to match toolbar-buttons style.
-     This negative margin compensate the extra row of pixels created
-     by the shadow.*/
-  margin-bottom: -1px;
-}
-
-#inspector-breadcrumbs > .scrollbutton-up,
-#inspector-breadcrumbs > .scrollbutton-down {
-  -moz-appearance: none;
-  border: 1px solid hsla(210,8%,5%,.45);
-  background: -moz-linear-gradient(hsla(212,7%,57%,.35), hsla(212,7%,57%,.1)) padding-box;
-  box-shadow: 0 1px 0 hsla(210,16%,76%,.15) inset, 0 0 0 1px hsla(210,16%,76%,.15) inset, 0 1px 0 hsla(210,16%,76%,.15);
-  margin: 0 0 1px;
-}
-
-#inspector-breadcrumbs > .scrollbutton-up:not([disabled]):active:hover,
-#inspector-breadcrumbs > .scrollbutton-down:not([disabled]):active:hover {
-  border-color: hsla(210,8%,5%,.6);
-  background: -moz-linear-gradient(hsla(220,6%,10%,.3), hsla(212,7%,57%,.15) 65%, hsla(212,7%,57%,.3));
-  box-shadow: 0 0 3px hsla(210,8%,5%,.25) inset, 0 1px 3px hsla(210,8%,5%,.25) inset, 0 1px 0 hsla(210,16%,76%,.15);
-}
-
-#inspector-breadcrumbs > .scrollbutton-up:not([disabled]):active:hover > .toolbarbutton-icon,
-#inspector-breadcrumbs > .scrollbutton-down:not([disabled]):active:hover > .toolbarbutton-icon {
-  -moz-image-region: rect(0px 14px 16px 7px);
-}
-
-#inspector-breadcrumbs > .scrollbutton-up > .toolbarbutton-icon,
-#inspector-breadcrumbs > .scrollbutton-down > .toolbarbutton-icon {
-  -moz-appearance: none;
-  list-style-image: url("chrome://browser/skin/devtools/breadcrumbs-scrollbutton.png");
-  -moz-image-region: rect(0px 7px 16px 0px);
-  margin: 0 5px;
-}
-
-#inspector-breadcrumbs > .scrollbutton-up[disabled] > .toolbarbutton-icon,
-#inspector-breadcrumbs > .scrollbutton-down[disabled] > .toolbarbutton-icon {
-  opacity: 0.5;
-}
-
-#inspector-breadcrumbs > .scrollbutton-up > .toolbarbutton-icon:-moz-locale-dir(rtl),
-#inspector-breadcrumbs > .scrollbutton-down > .toolbarbutton-icon:-moz-locale-dir(ltr) {
-  transform: scaleX(-1);
-}
-
-.inspector-breadcrumbs-button {
-  -moz-appearance: none;
-  background-color: transparent;
-  border-style: solid;
-  border-width: 1px 13px 2px 13px;
-  color: hsl(210,30%,85%);
-  width: 85px; /* Can't use max-width. See bug 723132 */
-  /* The content of the button can be larger than the button */
-  overflow: hidden;
-  min-height: 25px;
-  margin: 0 -11px 0 0;
-  padding: 0 9px;
-}
-
-.inspector-breadcrumbs-button:-moz-focusring > label {
-  border-bottom: 1px dotted hsla(210,30%,85%,0.4);
-}
-
-.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-tag {
-  color: hsl(208,100%,60%);
-}
-
-.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-id {
-  color: hsl(205,100%,70%);
-}
-
-.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-pseudo-classes {
-  color: hsl(20, 100%, 70%);
-}
-
-.inspector-breadcrumbs-id,
-.inspector-breadcrumbs-classes {
-  color: #8d99a6;
-}
-
-.inspector-breadcrumbs-pseudo-classes {
-  color: hsl(20, 100%, 85%);
-}
-
-/* Highlighter toolbar - breadcrumbs - LTR */
-
-.inspector-breadcrumbs-button {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:not([checked]):hover:active {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[checked] {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-selected.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[checked]:hover:active {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-selected-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type:not([checked]):hover:active {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type[checked] {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-selected.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type[checked]:hover:active {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-selected-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end.png") 1 13 2 13 fill stretch;
-}
-
-#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:-moz-locale-dir(ltr):first-of-type {
-  border-left-width: 0;
-}
-
-#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:-moz-locale-dir(ltr):last-of-type {
-  border-right-width: 0;
-}
-
-.inspector-breadcrumbs-button:last-of-type:not([checked]):hover:active {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type[checked] {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-selected.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type[checked]:hover:active {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-selected-pressed.png") 1 13 2 13 fill stretch;
-}
-
-/* Highlighter toolbar - breadcrumbs - RTL */
-
-.inspector-breadcrumbs-button:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:not([checked]):hover:active:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[checked]:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-selected.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[checked]:hover:active:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-selected-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type:not([checked]):hover:active:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type[checked]:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-selected.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type[checked]:hover:active:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-selected-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end.png") 1 13 2 13 fill stretch;
-}
-
-#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:-moz-locale-dir(rtl):first-of-type {
-  border-right-width: 0;
-}
-
-#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:last-of-type:-moz-locale-dir(rtl) {
-  border-left-width: 0;
-}
-
-.inspector-breadcrumbs-button:last-of-type:not([checked]):hover:active:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type[checked]:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-selected.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type[checked]:hover:active:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-selected-pressed.png") 1 13 2 13 fill stretch;
-}
-
 #inspector-searchbox {
   transition-property: max-width, -moz-padding-end, -moz-padding-start;
diff --git a/browser/themes/linux/devtools/widgets.css b/browser/themes/linux/devtools/widgets.css
new file mode 100644
--- /dev/null
+++ b/browser/themes/linux/devtools/widgets.css
@@ -0,0 +1,599 @@
+/* vim:set ts=2 sw=2 sts=2 et: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/* BreacrumbsWidget */
+
+.breadcrumbs-widget-container {
+  -moz-margin-end: 3px;
+  /* A fake 1px-shadow is included in the border-images of the
+     breadcrumbs-widget-items, to match toolbar-buttons style.
+     This negative margin compensates the extra row of pixels created
+     by the shadow.*/
+  margin-bottom: -1px;
+}
+
+/* Preloading hack, LTR */
+
+.breadcrumbs-widget-container:-moz-locale-dir(ltr)::after {
+  content: '';
+  display: block;
+  background-image:
+    url(breadcrumbs/ltr-start.png),
+    url(breadcrumbs/ltr-start-selected.png),
+    url(breadcrumbs/ltr-start-pressed.png),
+    url(breadcrumbs/ltr-start-selected-pressed.png),
+    url(breadcrumbs/ltr-middle.png),
+    url(breadcrumbs/ltr-middle-selected.png),
+    url(breadcrumbs/ltr-middle-pressed.png),
+    url(breadcrumbs/ltr-middle-selected-pressed.png),
+    url(breadcrumbs/ltr-end.png),
+    url(breadcrumbs/ltr-end-selected.png),
+    url(breadcrumbs/ltr-end-pressed.png),
+    url(breadcrumbs/ltr-end-selected-pressed.png);
+}
+
+/* Preloading hack, RTL */
+
+.breadcrumbs-widget-container:-moz-locale-dir(rtl)::after {
+  content: '';
+  display: block;
+  background-image:
+    url(breadcrumbs/rtl-start.png),
+    url(breadcrumbs/rtl-start-selected.png),
+    url(breadcrumbs/rtl-start-pressed.png),
+    url(breadcrumbs/rtl-start-selected-pressed.png),
+    url(breadcrumbs/rtl-middle.png),
+    url(breadcrumbs/rtl-middle-selected.png),
+    url(breadcrumbs/rtl-middle-pressed.png),
+    url(breadcrumbs/rtl-middle-selected-pressed.png),
+    url(breadcrumbs/rtl-end.png),
+    url(breadcrumbs/rtl-end-selected.png),
+    url(breadcrumbs/rtl-end-pressed.png),
+    url(breadcrumbs/rtl-end-selected-pressed.png);
+}
+
+.scrollbutton-up,
+.scrollbutton-down {
+  -moz-appearance: none;
+  background: -moz-linear-gradient(hsla(212,7%,57%,.35), hsla(212,7%,57%,.1)) padding-box;
+  box-shadow: 0 1px 0 hsla(210,16%,76%,.15) inset,
+              0 0 0 1px hsla(210,16%,76%,.15) inset,
+              0 1px 0 hsla(210,16%,76%,.15);
+  border: 1px solid hsla(210,8%,5%,.45);
+  margin: 0 0 1px;
+}
+
+.scrollbutton-up:not([disabled]):active:hover,
+.scrollbutton-down:not([disabled]):active:hover {
+  background: -moz-linear-gradient(hsla(220,6%,10%,.3), hsla(212,7%,57%,.15) 65%, hsla(212,7%,57%,.3));
+  box-shadow: 0 0 3px hsla(210,8%,5%,.25) inset,
+              0 1px 3px hsla(210,8%,5%,.25) inset,
+              0 1px 0 hsla(210,16%,76%,.15);
+  border-color: hsla(210,8%,5%,.6);
+}
+
+.scrollbutton-up > .toolbarbutton-icon,
+.scrollbutton-down > .toolbarbutton-icon {
+  -moz-appearance: none;
+  list-style-image: url("breadcrumbs-scrollbutton.png");
+  -moz-image-region: rect(0px,7px,16px,0px);
+  margin: 0 5px;
+}
+
+.scrollbutton-up:not([disabled]):active:hover > .toolbarbutton-icon,
+.scrollbutton-down:not([disabled]):active:hover > .toolbarbutton-icon {
+  -moz-image-region: rect(0px,14px,16px,7px);
+}
+
+.scrollbutton-up[disabled] > .toolbarbutton-icon,
+.scrollbutton-down[disabled] > .toolbarbutton-icon {
+  opacity: 0.5;
+}
+
+.scrollbutton-up > .toolbarbutton-icon:-moz-locale-dir(rtl),
+.scrollbutton-down > .toolbarbutton-icon:-moz-locale-dir(ltr) {
+  transform: scaleX(-1);
+}
+
+.breadcrumbs-widget-item {
+  background-color: transparent;
+  -moz-appearance: none;
+  overflow: hidden;
+  min-width: 85px;
+  min-height: 25px;
+  border-style: solid;
+  border-width: 1px 13px 2px 13px;
+  margin: 0 -11px 0 0;
+  padding: 0 9px;
+  outline: none;
+  color: hsl(210,30%,85%);
+}
+
+.breadcrumbs-widget-item:-moz-focusring > label {
+  border-bottom: 1px dotted hsla(210,30%,85%,0.4);
+}
+
+.breadcrumbs-widget-item[checked] .breadcrumbs-widget-item-tag {
+  color: hsl(208,100%,60%);
+}
+
+.breadcrumbs-widget-item[checked] .breadcrumbs-widget-item-id {
+  color: hsl(205,100%,70%);
+}
+
+.breadcrumbs-widget-item[checked] .breadcrumbs-widget-item-pseudo-classes {
+  color: hsl(20,100%,70%);
+}
+
+.breadcrumbs-widget-item-id,
+.breadcrumbs-widget-item-classes {
+  color: #8d99a6;
+}
+
+.breadcrumbs-widget-item-pseudo-classes {
+  color: hsl(20,100%,85%);
+}
+
+/* Breadcrumbs LTR */
+
+.breadcrumbs-widget-item:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-middle.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:not([checked]):hover:active:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-middle-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item[checked]:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-middle-selected.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item[checked]:hover:active:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-middle-selected-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:first-of-type:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-start.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:first-of-type:not([checked]):hover:active:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-start-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:first-of-type[checked]:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-start-selected.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:first-of-type[checked]:hover:active:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-start-selected-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:last-of-type:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-end.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:last-of-type:not([checked]):hover:active:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-end-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:last-of-type[checked]:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-end-selected.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:last-of-type[checked]:hover:active:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-end-selected-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-container[overflows] > .breadcrumbs-widget-item:first-of-type:-moz-locale-dir(ltr) {
+  border-left-width: 0;
+}
+
+.breadcrumbs-widget-container[overflows] > .breadcrumbs-widget-item:last-of-type:-moz-locale-dir(ltr) {
+  border-right-width: 0;
+}
+
+/* Breadcrumbs RTL */
+
+.breadcrumbs-widget-item:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-middle.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:not([checked]):hover:active:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-middle-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item[checked]:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-middle-selected.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item[checked]:hover:active:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-middle-selected-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:first-of-type:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-start.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:first-of-type:not([checked]):hover:active:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-start-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:first-of-type[checked]:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-start-selected.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:first-of-type[checked]:hover:active:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-start-selected-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:last-of-type:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-end.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:last-of-type:not([checked]):hover:active:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-end-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:last-of-type[checked]:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-end-selected.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:last-of-type[checked]:hover:active:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-end-selected-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-container[overflows] > .breadcrumbs-widget-item:first-of-type:-moz-locale-dir(rtl) {
+  border-right-width: 0;
+}
+
+.breadcrumbs-widget-container[overflows] > .breadcrumbs-widget-item:last-of-type:-moz-locale-dir(rtl) {
+  border-left-width: 0;
+}
+
+/* SideMenuWidget */
+
+.side-menu-widget-container {
+  background: url(background-noise-toolbar.png), hsl(208,11%,27%);
+  color: #fff;
+}
+
+.side-menu-widget-container:-moz-locale-dir(ltr),
+.side-menu-widget-item-or-group:-moz-locale-dir(ltr) {
+  box-shadow: inset -1px 0 0 #222426;
+}
+
+.side-menu-widget-container:-moz-locale-dir(rtl),
+.side-menu-widget-item-or-group:-moz-locale-dir(rtl) {
+  box-shadow: inset 1px 0 0 #222426;
+}
+
+.side-menu-widget-group-title {
+  background-image: linear-gradient(#1f3e4f, #1b3243);
+  box-shadow: 0 1px 0 hsla(0,0%,100%,.05) inset,
+              0 -2px 0 hsla(206,37%,4%,.05) inset,
+              0 -1px 1px hsla(206,37%,4%,.1) inset;
+  text-shadow: 0 -1px 0 hsla(210,8%,5%,.45);
+  padding: 4px;
+  color: #f5f7fa;
+}
+
+.side-menu-widget-item {
+  border-top: 1px solid hsla(210,16%,76%,.1);
+  border-bottom: 1px solid hsla(210,8%,5%,.25);
+  cursor: pointer;
+}
+
+.side-menu-widget-item:last-of-type {
+  box-shadow: 0 1px 0 hsla(210,16%,76%,.1);
+}
+
+.side-menu-widget-item.selected {
+  background: -moz-linear-gradient(hsl(206,61%,40%), hsl(206,61%,31%)) repeat-x top left;
+  box-shadow: inset 0 1px 0 hsla(210,40%,83%,.15),
+              inset 0 -1px 0 hsla(210,40%,83%,.05);
+  border-top: 0;
+  padding-top: 1px;
+}
+
+.side-menu-widget-item-arrow {
+  -moz-margin-start: -8px;
+  width: 8px;
+}
+
+.side-menu-widget-item.selected > .side-menu-widget-item-arrow {
+  margin-top: -1px; /* Selection removes the top border, offset by 1 pixel */
+  background-size: auto, 1px 100%;
+  background-repeat: no-repeat;
+}
+
+.side-menu-widget-item.selected > .side-menu-widget-item-arrow:-moz-locale-dir(ltr) {
+  background-image: url(itemArrow-ltr.png), -moz-linear-gradient(left, black, black);
+  background-position: center right, top right;
+}
+
+.side-menu-widget-item.selected > .side-menu-widget-item-arrow:-moz-locale-dir(rtl) {
+  background-image: url(itemArrow-rtl.png), -moz-linear-gradient(left, black, black);
+  background-position: center left, top left;
+}
+
+.side-menu-widget-item-contents {
+  padding: 4px;
+}
+
+.side-menu-widget-item-label {
+  cursor: inherit;
+}
+
+.side-menu-widget-item-other {
+  background: url(background-noise-toolbar.png), hsla(208,11%,27%, 0.65);
+  margin: 0 -4px;
+  -moz-padding-start: 5px;
+}
+
+.side-menu-widget-item-other.selected {
+  background: url(background-noise-toolbar.png), hsla(208,11%,27%, 0.15);
+  box-shadow: inset 0 1px 0 hsla(210,40%,83%,.07),
+              inset 0 -1px 0 hsla(210,40%,83%,.07);
+}
+
+.side-menu-widget-item.selected .side-menu-widget-item-other:first-of-type {
+  border-top: 1px dotted #333;
+  margin-top: 3px;
+}
+
+.side-menu-widget-item-other:first-of-type {
+  margin-top: 4px;
+}
+
+.side-menu-widget-item-other:last-of-type {
+  margin-bottom: -4px;
+}
+
+.side-menu-widget-item-other > label {
+  cursor: inherit;
+  color: #f5f7fa;
+  text-shadow: 0 1px 1px #111;
+}
+
+.side-menu-widget-empty-notice-container {
+  background: url(background-noise-toolbar.png), hsl(208,11%,27%);
+  padding: 12px;
+  color: #fff;
+  font-weight: 600;
+}
+
+/* VariablesView */
+
+.variables-view-container {
+  background: #fff;
+}
+
+.variables-view-empty-notice {
+  color: GrayText;
+  padding: 2px;
+}
+
+.variables-view-scope > .title {
+  color: #fff;
+}
+
+.variables-view-scope:focus > .title {
+  background: Highlight;
+  color: HighlightText;
+}
+
+.variables-view-scope > .variables-view-element-details:not(:empty) {
+  margin-top: 1px;
+  -moz-margin-start: 2px;
+  -moz-margin-end: 1px;
+}
+
+.variables-view-scope > .variables-view-element-details.nonenum:not(:empty) {
+  border-top: 1px solid #ddd;
+}
+
+/* Generic traits applied to both variables and properties */
+
+.variable-or-property {
+  transition: background 1s ease-in-out;
+}
+
+.variable-or-property[changed] {
+  background: rgba(255,255,0,0.65);
+  transition-duration: 0.4s;
+}
+
+.variable-or-property > .title > .value {
+  -moz-padding-start: 6px;
+  -moz-padding-end: 4px;
+}
+
+.variable-or-property:focus > .title {
+  background: Highlight;
+  color: HighlightText;
+  border-radius: 4px;
+}
+
+.variable-or-property[editable] > .title > .value {
+  cursor: text;
+}
+
+.variable-or-property:not([non-header]) > .variables-view-element-details {
+  -moz-margin-start: 10px;
+}
+
+/* Custom variables and properties traits */
+
+.variables-view-variable {
+  -moz-margin-start: 1px;
+  -moz-margin-end: 1px;
+  border-bottom: 1px solid #eee;
+}
+
+.variables-view-variable > .title > .name {
+  font-weight: 600;
+}
+
+.variables-view-variable:not(:focus) > .title > .name {
+  color: #048;
+}
+
+.variables-view-property:not(:focus) > .title > .name {
+  color: #881090;
+}
+
+/* Token value colors */
+
+.variable-or-property:not(:focus) > .title > .token-undefined {
+  color: #bbb;
+}
+
+.variable-or-property:not(:focus) > .title > .token-null {
+  color: #999;
+}
+
+.variable-or-property:not(:focus) > .title > .token-boolean {
+  color: #777;
+}
+
+.variable-or-property:not(:focus) > .title > .token-number {
+  color: #c40a16;
+}
+
+.variable-or-property:not(:focus) > .title > .token-string {
+  max-width: 30em;
+  color: #1c00cf;
+}
+
+.variable-or-property:not(:focus) > .title > .token-other {
+  color: #333;
+}
+
+/* Non enumerable, configurable and writable variables and properties */
+
+.variable-or-property[proto] > .title > .name,
+.variable-or-property[non-enumerable]:not([self]):not([exception]) > .title > .name {
+  opacity: 0.5;
+}
+
+.variable-or-property[non-configurable] > .title > .name {
+  border-bottom: 1px dashed #99f;
+}
+
+.variable-or-property[non-configurable][non-writable] > .title > .name {
+  border-bottom: 1px dashed #f99;
+}
+
+.variable-or-property[non-writable] > .title:after {
+  content: " ";
+  display: inline-block;
+  background: url("chrome://browser/skin/identity-icons-https.png") no-repeat;
+  width: 16px;
+  height: 16px;
+  opacity: 0.5;
+}
+
+@media (min-resolution: 2dppx) {
+  .variable-or-property[non-writable] > .title:after {
+    background-image: url("chrome://browser/skin/identity-icons-https@2x.png");
+    background-size: 32px;
+  }
+}
+
+.variable-or-property[exception]:not(:focus) > .title > .name {
+  color: #a00;
+  text-shadow: 0 0 8px #fcc;
+}
+
+/* Variables and properties tooltips */
+
+.variable-or-property > tooltip > label {
+  margin: 0 2px 0 2px;
+}
+
+.variable-or-property[non-enumerable] > tooltip > label[value=enumerable],
+.variable-or-property[non-configurable] > tooltip > label[value=configurable],
+.variable-or-property[non-writable] > tooltip > label[value=writable] {
+  text-decoration: line-through;
+}
+
+/* Variables and properties editing */
+
+.variables-view-delete {
+  list-style-image: url("moz-icon://stock/gtk-close?size=menu");
+  opacity: 0;
+}
+
+.variables-view-delete:hover {
+  opacity: 1;
+}
+
+*:hover > .title > .variables-view-delete:not(:hover),
+*:focus > .title > .variables-view-delete:not(:hover) {
+  opacity: 0.5;
+  transition: opacity 0.2s ease-in-out;
+}
+
+.variables-view-delete > .toolbarbutton-text {
+  display: none;
+}
+
+.variables-view-edit {
+  background: url("chrome://browser/skin/tabview/edit-light.png") center no-repeat;
+  width: 20px;
+  height: 16px;
+  cursor: pointer;
+}
+
+.variables-view-throbber {
+  background: url("chrome://global/skin/icons/loading_16.png") center no-repeat;
+  width: 16px;
+  height: 16px;
+}
+
+.element-value-input {
+  -moz-margin-start: 4px !important;
+  -moz-margin-end: 2px !important;
+}
+
+.element-name-input {
+  -moz-margin-start: -2px !important;
+  -moz-margin-end: 2px !important;
+  color: #048;
+  font-weight: 600;
+}
+
+.element-value-input,
+.element-name-input {
+  border: 1px solid #999 !important;
+  box-shadow: 1px 2px 4px #aaa;
+}
+
+/* Variables and properties searching */
+
+.variables-view-searchinput {
+  min-height: 24px;
+}
+
+.variable-or-property[non-match] {
+  border: none;
+  margin: 0;
+}
+
+/* Expand/collapse arrow */
+
+.arrow {
+  -moz-appearance: treetwisty;
+  -moz-margin-start: 10px;
+  -moz-margin-end: 5px;
+}
+
+.arrow[open] {
+  -moz-appearance: treetwistyopen;
+}
+
+.arrow[invisible] {
+  visibility: hidden;
+}
diff --git a/browser/themes/linux/jar.mn b/browser/themes/linux/jar.mn
--- a/browser/themes/linux/jar.mn
+++ b/browser/themes/linux/jar.mn
@@ -113,4 +113,5 @@ browser.jar:
 * skin/classic/browser/devtools/common.css            (devtools/common.css)
   skin/classic/browser/devtools/arrows.png            (devtools/arrows.png)
+  skin/classic/browser/devtools/widgets.css           (devtools/widgets.css)
   skin/classic/browser/devtools/commandline.png       (devtools/commandline.png)
   skin/classic/browser/devtools/command-responsivemode.png (devtools/command-responsivemode.png)
diff --git a/browser/themes/osx/devtools/debugger.css b/browser/themes/osx/devtools/debugger.css
--- a/browser/themes/osx/devtools/debugger.css
+++ b/browser/themes/osx/devtools/debugger.css
@@ -1,4 +1,3 @@
-/* -*- Mode: javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* vim:set ts=2 sw=2 sts=2 et: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -8,108 +7,112 @@
 
 #body {
-  background-color: white;
+  background: #fff;
 }
 
-/**
- * Debugger content
- */
+/* Sources and breakpoints pane */
 
-#chrome-globals, #sources {
-  width: 200px;
+#sources-pane {
+  min-width: 50px;
 }
 
-/**
- * Lists and headers
- */
+#sources-pane + .devtools-side-splitter {
+  -moz-border-start-color: transparent;
+}
 
-.list-item {
+/* Watch expressions, variables and other instruments pane */
+
+#instruments-pane {
+  min-width: 50px;
+  -moz-margin-start: 0px !important;
+  /* Unfortunately, transitions don't work properly with locale-aware properties,
+     so both the left and right margins are set via js, while the start margin
+     is always overridden here. */
+}
+
+#instruments-pane[animated] {
+  -moz-transition: margin 0.25s ease-in-out;
+}
+
+/* ListWidget items */
+
+.list-widget-item {
   padding: 2px;
 }
 
-.list-item:not(.selected):not(.empty):hover {
-  background: #cddae5;
+.list-widget-item:not(.selected):not(.empty):hover {
+  background: linear-gradient(rgba(255,255,255,0.9), rgba(255,255,255,0.85)), Highlight;
 }
 
-.list-item.selected {
+.list-widget-item.selected.light {
+  background: linear-gradient(rgba(255,255,255,0.85), rgba(255,255,255,0.8)), Highlight;
+  color: #000;
+}
+
+.list-widget-item.selected {
   background: Highlight;
   color: HighlightText;
 }
 
-.list-item.empty {
+.list-widget-item.empty {
   color: GrayText;
   padding: 2px;
 }
 
-/**
- * Sources searching
- */
+/* Stack frames view */
 
-#globalsearch {
-  background-color: white;
-  min-height: 10px;
+.dbg-stackframe-details {
+  -moz-padding-start: 4px;
 }
 
-#globalsearch > vbox:not(:empty) {
-  min-height: 10px;
-  max-height: 150px;
-}
-
-.dbg-source-results:not(:last-child) {
-  border-bottom: 1px dotted #aaa;
-}
-
-.dbg-results-header {
-  -moz-padding-start: 6px;
-}
-
-.dbg-results-header .location {
+.dbg-stackframe-menuitem[checked] {
+  margin-top: 3px;
+  margin-bottom: 3px;
+  outline: 1px solid #eee;
   font-weight: 600;
 }
 
-.dbg-results-header .match-count {
-  -moz-padding-start: 6px;
-  color: GrayText;
+.dbg-stackframe-menuitem-details {
+  -moz-padding-start: 16px;
 }
 
-.dbg-results-container .line-number {
-  background: hsl(0,0%,89%);
-  min-width: 40px;
-  -moz-padding-end: 4px;
-  -moz-border-end: 1px dotted #aaa;
-  text-align: end;
-  font: 8pt monospace;
-  color: hsl(0,0%,55%);
+/* Sources and breakpoints view */
+
+.dbg-breakpoint {
+  font-family: monospace;
 }
 
-.dbg-results-container .line-contents {
-  -moz-padding-start: 4px;
-  font: 8pt monospace;
+.dbg-breakpoint-line {
+  font-weight: 600;
 }
 
-.dbg-results-container .line-contents:hover {
-  background: #cddae5;
+.dbg-breakpoint-text {
+  -moz-margin-start: 10px !important;
+  font-style: italic;
 }
 
-.dbg-results-container .line-contents > .string {
-  padding: 1px;
+/* Watch expressions view */
+
+#expressions {
+  min-height: 10px;
+  max-height: 125px;
 }
 
-.dbg-results-container .line-contents > .string[match=true] {
-  background: rgba(255, 255, 0, 0.65);
-  padding: 0;
-  border: 1px solid #aaa;
-  border-radius: 4px;
-  cursor: pointer;
-  transition: transform 0.25s ease-in-out;
+.dbg-expression {
+  height: 20px;
+  -moz-padding-start: 8px;
 }
 
-.dbg-results-container .line-contents > .string[match=true][focused] {
-  transition-duration: 0.1s;
-  transform: scale(1.75, 1.75);
+.dbg-expression-arrow {
+  width: 10px;
+  height: auto;
+  background: url("chrome://browser/skin/devtools/commandline.png") 0px 4px no-repeat;
 }
 
-/**
- * Searchbox
- */
+.dbg-expression-input {
+  -moz-padding-start: 2px !important;
+  font-family: Menlo, Monaco, monospace;
+}
+
+/* Searchbox and the search operations help panel */
 
 .devtools-searchinput {
@@ -118,26 +121,29 @@
 }
 
-#searchbox-panel .description {
-  margin: -6px 0 8px 0;
+#searchbox-panel-description {
+  margin-top: 0;
+  margin-bottom: 8px;
+  -moz-margin-start: 2px;
 }
 
-#searchbox-panel button.operator {
-  min-width: 0;
-  margin: 0;
-  padding: 0;
-  font: 9pt monospace;
+.searchbox-panel-operator-button {
+  min-width: 26px;
+  margin-top: 0;
+  margin-bottom: 0;
+  -moz-margin-start: 2px;
+  -moz-margin-end: 6px;
+  text-align: center;
+  font-family: Menlo, Monaco, monospace;
 }
 
-#searchbox-panel label.operator {
-  -moz-padding-start: 6px;
-  padding-bottom: 1px;
+.searchbox-panel-operator-label {
+  padding-bottom: 2px;
 }
 
-/**
- * Filtered sources panel
- */
+/* Filtering results panel */
 
 #filtered-sources-panel {
   padding: 4px;
+  opacity: 0.9;
 }
 
@@ -146,8 +152,6 @@
   border: 1px solid #ddd;
   border-top-color: #fff;
-}
-
-.dbg-source-item.selected {
-  background: #cddae5;
+  padding: 5px;
+  cursor: pointer;
 }
 
@@ -170,432 +174,97 @@
 
 .dbg-source-item-name {
-  color: #333;
+  color: #111;
   font-weight: 600;
+  cursor: inherit;
 }
 
 .dbg-source-item-details {
-  color: #888;
+  color: #777;
+  cursor: inherit;
 }
 
-/**
- * Stack frames and breakpoints pane
- */
+/* Sources search view */
 
-#stackframes\+breakpoints {
-  min-width: 50px;
+#globalsearch {
+  min-height: 10px;
+  box-shadow: inset 0 -4px 8px #eee;
+  background: url(background-noise-toolbar.png);
 }
 
-#stackframes\+breakpoints[animated] {
-  transition: margin 0.25s ease-in-out;
-}
-
-/**
- * Variables and watch expressions pane
- */
-
-#variables\+expressions {
-  min-width: 50px;
-}
-
-#variables\+expressions[animated] {
-  transition: margin 0.25s ease-in-out;
-}
-
-/**
- * Stack frames view
- */
-
-.dbg-stackframe {
-  width: auto !important;
-  min-width: 64px;
-}
-
-.dbg-stackframe-menuitem[checked] {
-  outline: 1px solid #eee;
-  margin-top: 3px;
-  margin-bottom: 3px;
-  font-weight: 600;
-}
-
-.dbg-stackframe-menuitem-title {
-  -moz-padding-end: 8px;
-}
-
-.dbg-stackframe-menuitem-details {
-  -moz-padding-start: 8px;
-}
-
-/**
- * Breakpoints view
- */
-
-.dbg-breakpoint {
-  border-bottom: 1px solid #eee;
-}
-
-.dbg-breakpoint-info {
-  font-weight: 600;
-}
-
-.dbg-breakpoint-text {
-  font: 8pt monospace;
-}
-
-#conditional-breakpoint-panel .description {
-  margin: -6px 0 8px 0;
-}
-
-#conditional-breakpoint-panel textbox {
-  margin: 0 0 -2px 0;
-}
-
-/**
- * Watch expressions view
- */
-
-#expressions {
+#globalsearch > vbox:not(:empty) {
   min-height: 10px;
   max-height: 125px;
 }
 
-.dbg-expression {
-  height: 20px;
-  -moz-padding-start: 8px;
+#globalsearch + .devtools-horizontal-splitter {
+  -moz-border-top-colors: #bfbfbf;
 }
 
-.dbg-expression-arrow {
-  width: 10px;
-  height: auto;
-  background: url("chrome://browser/skin/devtools/commandline.png") 0px 4px no-repeat;
+.dbg-source-results {
+  padding: 0;
+  background: none !important;
 }
 
-.dbg-expression-input {
-  font: 9pt monospace;
+.dbg-results-header {
+  -moz-padding-start: 6px;
 }
 
-.dbg-expression-delete {
-  opacity: 0;
+.dbg-results-header-location {
+  font-weight: 600;
 }
 
-.dbg-expression-delete:not(:hover) {
-  -moz-image-region: rect(0, 32px, 16px, 16px);
+.dbg-results-header-match-count {
+  -moz-padding-start: 6px;
+  color: GrayText;
 }
 
-.dbg-expression-delete:hover {
-  opacity: 1;
+.dbg-results-line-number {
+  background: #e2e2e2;
+  min-width: 40px;
+  -moz-border-end: 1px solid #b4c4d3;
+  -moz-padding-end: 4px;
+  padding-top: 2px;
+  text-align: end;
+  font-family: monospace;
+  color: #8c8c8c;
 }
 
-.dbg-expression:hover > .dbg-expression-delete:not(:hover) {
-  opacity: 0.5;
-  transition: opacity 0.2s ease-in-out;
+.dbg-results-line-contents {
+  -moz-padding-start: 4px;
+  padding-top: 1px;
+  padding-bottom: 1px;
+  font-family: monospace;
 }
 
-/**
- * Variables view
- */
-
-#variables {
-  min-height: 10px;
+.dbg-results-line-contents-string {
+  padding: 1px;
 }
 
-.dbg-variable-delete {
-  opacity: 0;
-}
-
-.dbg-variable-delete:not(:hover) {
-  -moz-image-region: rect(0, 32px, 16px, 16px);
-}
-
-.dbg-variable-delete:hover {
-  opacity: 1;
-}
-
-.variable-or-property:hover > .title > .dbg-variable-delete:not(:hover),
-.variable-or-property:focus > .title > .dbg-variable-delete:not(:hover) {
-  opacity: 0.5;
-  transition: opacity 0.2s ease-in-out;
-}
-
-.dbg-variable-edit {
-  background: url("chrome://browser/skin/tabview/edit-light.png") center no-repeat;
-  width: 20px;
-  height: 16px;
+.dbg-results-line-contents-string[match=true] {
+  background: rgba(255,255,0,0.5);
+  padding: 0;
+  border: 1px solid #aaa;
+  border-radius: 4px;
   cursor: pointer;
 }
 
-.dbg-variable-throbber {
-  background: url("chrome://global/skin/icons/loading_16.png") center no-repeat;
-  width: 16px;
-  height: 16px;
+.dbg-results-line-contents-string[match=true][focusing] {
+  transition: transform 0.3s ease-in-out;
 }
 
-/**
- * Scope element
- */
-
-.scope:focus > .title {
-  background: Highlight;
-  color: HighlightText;
+.dbg-results-line-contents-string[match=true][focused] {
+  transition-duration: 0.1s;
+  transform: scale(1.75, 1.75);
 }
 
-.scope > .title {
-  text-shadow: 0 1px #222;
-  color: #fff;
-}
-
-.scope > .details {
-  -moz-margin-start: 2px;
-  -moz-margin-end: 1px;
-}
-
-.scope > .details.nonenum:not(:empty) {
-  border-top: 1px solid #ddd;
-}
-
-/**
- * Variable element
- */
-
-.variable {
-  -moz-margin-start: 1px;
-  -moz-margin-end: 1px;
-  border-bottom: 1px solid #eee;
-  transition: background 1s ease-in-out;
-}
-
-.variable[changed] {
-  background: rgba(255, 255, 0, 0.65);
-  transition-duration: 0.4s;
-}
-
-.variable:focus > .title {
-  background: Highlight;
-  color: HighlightText;
-  border-radius: 4px;
-}
-
-.variable > .title > .name {
-  font-weight: 600;
-}
-
-.variable:not(:focus) > .title > .name {
-  color: #048;
-}
-
-.variable > .title > .value {
-  -moz-padding-start: 6px;
-  -moz-padding-end: 4px;
-}
-
-.variable[editable] > .title > .value {
-  cursor: text;
-}
-
-.variable:not([non-header]) > .details {
-  -moz-margin-start: 10px;
-}
-
-/**
- * Property element
- */
-
-.property {
-  transition: background 1s ease-in-out;
-}
-
-.property[changed] {
-  background: rgba(255, 255, 0, 0.65);
-  transition-duration: 0.4s;
-}
-
-.property:focus > .title {
-  background: Highlight;
-  color: HighlightText;
-  border-radius: 4px;
-}
-
-.property:not(:focus) > .title > .name {
-  color: #881090;
-}
-
-.property > .title > .value {
-  -moz-padding-start: 6px;
-  -moz-padding-end: 4px;
-}
-
-.property[editable] > .title > .value {
-  cursor: text;
-}
-
-.property:not([non-header]) > .details {
-  -moz-margin-start: 10px;
-}
-
-/**
- * Non enumerable, configurable and writable variables and properties
- */
-
-.variable[proto] > .title > .name,
-.property[proto] > .title > .name,
-.variable[non-enumerable]:not([self]):not([exception]) > .title > .name,
-.property[non-enumerable]:not([self]):not([exception]) > .title > .name {
-  opacity: 0.5;
-}
-
-.variable[non-configurable] > .title > .name,
-.property[non-configurable] > .title > .name {
-  border-bottom: 1px dashed #99f;
-}
-
-.variable[non-configurable][non-writable] > .title > .name,
-.property[non-configurable][non-writable] > .title > .name {
-  border-bottom: 1px dashed #f99;
-}
-
-.variable[non-writable] > .title:after,
-.property[non-writable] > .title:after {
-  content: " ";
-  display: inline-block;
-  width: 16px;
-  height: 16px;
-  background: url("chrome://browser/skin/identity-icons-https.png") no-repeat;
-  opacity: 0.5;
-}
-
-@media (min-resolution: 2dppx) {
-  .variable[non-writable] > .title:after,
-  .property[non-writable] > .title:after {
-    background-image: url("chrome://browser/skin/identity-icons-https@2x.png");
-    background-size: 32px;
-  }
-}
-
-.variable[exception]:not(:focus) > .title > .name,
-.property[exception]:not(:focus) > .title > .name {
-  color: #a00;
-  text-shadow: 0 0 8px #fcc;
-}
-
-.variable > tooltip > label,
-.property > tooltip > label {
-  margin: 0 2px 0 2px;
-}
-
-.variable[non-enumerable] > tooltip > label[value="enumerable"],
-.property[non-enumerable] > tooltip > label[value="enumerable"],
-.variable[non-configurable] > tooltip > label[value="configurable"],
-.property[non-configurable] > tooltip > label[value="configurable"],
-.variable[non-writable] > tooltip > label[value="writable"],
-.property[non-writable] > tooltip > label[value="writable"] {
-  text-decoration: line-through;
-}
-
-/**
- * Variables and properties editing
- */
-
-.element-value-input {
-  -moz-margin-start: 4px !important;
-}
-
-.element-name-input {
-  -moz-margin-start: -2px !important;
-  color: #048;
-  font-weight: 600;
-}
-
-.element-value-input,
-.element-name-input {
-  max-width: 30em;
-  border: 1px solid #999 !important;
-  box-shadow: 1px 2px 4px #aaa;
-}
-
-/**
- * Variables and properties searching
- */
-
-.variables-searchinput.devtools-searchinput {
-  min-height: 24px;
-}
-
-.variable[non-match],
-.property[non-match] {
-  border: none;
-  margin: 0;
-}
-
-/**
- * Token value colors
- */
-
-.variable-or-property:not(:focus) > .title > .token-undefined {
-  color: #bbb;
-}
-
-.variable-or-property:not(:focus) > .title > .token-null {
-  color: #999;
-}
-
-.variable-or-property:not(:focus) > .title > .token-boolean {
-  color: #777;
-}
-
-.variable-or-property:not(:focus) > .title > .token-number {
-  color: #c40a16;
-}
-
-.variable-or-property:not(:focus) > .title > .token-string {
-  max-width: 30em;
-  color: #1c00cf;
-}
-
-.variable-or-property:not(:focus) > .title > .token-other {
-  color: #333;
-}
-
-/**
- * Expand/collapse arrow
- */
-
-.arrow {
-  -moz-appearance: treetwisty;
-}
-
-.arrow[open] {
-  -moz-appearance: treetwistyopen;
-}
-
-.arrow[invisible] {
-  visibility: hidden;
-}
-
-/**
- * Toolbar Controls
- */
-
-#toggle-panes {
-  background: none;
-  box-shadow: none;
-  border: none;
-  list-style-image: url("chrome://browser/skin/devtools/debugger-expand.png");
-  -moz-image-region: rect(0px, 16px, 16px, 0px);
-}
-
-#toggle-panes:not([panesHidden]) {
-  list-style-image: url("chrome://browser/skin/devtools/debugger-collapse.png");
-}
-
-#toggle-panes:active {
-  -moz-image-region: rect(0px, 32px, 16px, 16px);
-}
+/* Toolbar Controls */
 
 #resume {
   list-style-image: url("chrome://browser/skin/devtools/debugger-play.png");
-  -moz-image-region: rect(0px, 16px, 16px, 0px);
+  -moz-image-region: rect(0px,16px,16px,0px);
 }
 
-#resume[checked=true] {
-  -moz-image-region: rect(0px, 32px, 16px, 16px);
+#resume[checked] {
+  -moz-image-region: rect(0px,32px,16px,16px);
 }
 
@@ -613,9 +282,9 @@
 
 #debugger-controls > toolbarbutton {
+  margin: 0;
+  box-shadow: none;
+  border-radius: 0;
   border-width: 0;
   -moz-border-end-width: 1px;
-  border-radius: 0;
-  box-shadow: none;
-  margin: 0;
   outline-offset: -3px;
 }
@@ -626,7 +295,25 @@
 
 #debugger-controls {
+  box-shadow: 0 1px 0 hsla(210,16%,76%,.15) inset,
+              0 0 0 1px hsla(210,16%,76%,.15) inset,
+              0 1px 0 hsla(210,16%,76%,.15);
   border: 1px solid hsla(210,8%,5%,.45);
   border-radius: @toolbarbuttonCornerRadius@;
-  box-shadow: 0 1px 0 hsla(210,16%,76%,.15) inset, 0 0 0 1px hsla(210,16%,76%,.15) inset, 0 1px 0 hsla(210,16%,76%,.15);
   margin: 0 3px;
 }
+
+#instruments-pane-toggle {
+  background: none;
+  box-shadow: none;
+  border: none;
+  list-style-image: url("chrome://browser/skin/devtools/debugger-expand.png");
+  -moz-image-region: rect(0px,16px,16px,0px);
+}
+
+#instruments-pane-toggle:not([toggled]) {
+  list-style-image: url("chrome://browser/skin/devtools/debugger-collapse.png");
+}
+
+#instruments-pane-toggle:active {
+  -moz-image-region: rect(0px,32px,16px,16px);
+}
diff --git a/browser/themes/osx/devtools/inspector.css b/browser/themes/osx/devtools/inspector.css
--- a/browser/themes/osx/devtools/inspector.css
+++ b/browser/themes/osx/devtools/inspector.css
@@ -1,2 +1,7 @@
+/* vim:set ts=2 sw=2 sts=2 et: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
 %include ../shared.inc
 %filter substitution
@@ -26,244 +31,4 @@
 }
 
-#inspector-breadcrumbs {
-  -moz-margin-end: 3px;
-  /* A fake 1px-shadow is included in the border-images of the
-     inspector-breadcrumbs-buttons, to match toolbar-buttons style.
-     This negative margin compensate the extra row of pixels created
-     by the shadow.*/
-  margin-bottom: -1px;
-}
-
-/* preloading hack */
-#inspector-breadcrumbs::after {
-  content: '';
-  display: block;
-  background-image:
-    url(chrome://browser/skin/devtools/breadcrumbs/ltr-start.png),
-    url(chrome://browser/skin/devtools/breadcrumbs/ltr-start-selected.png),
-    url(chrome://browser/skin/devtools/breadcrumbs/ltr-start-pressed.png),
-    url(chrome://browser/skin/devtools/breadcrumbs/ltr-start-selected-pressed.png),
-    url(chrome://browser/skin/devtools/breadcrumbs/ltr-middle.png),
-    url(chrome://browser/skin/devtools/breadcrumbs/ltr-middle-selected.png),
-    url(chrome://browser/skin/devtools/breadcrumbs/ltr-middle-pressed.png),
-    url(chrome://browser/skin/devtools/breadcrumbs/ltr-middle-selected-pressed.png),
-    url(chrome://browser/skin/devtools/breadcrumbs/ltr-end.png),
-    url(chrome://browser/skin/devtools/breadcrumbs/ltr-end-selected.png),
-    url(chrome://browser/skin/devtools/breadcrumbs/ltr-end-pressed.png),
-    url(chrome://browser/skin/devtools/breadcrumbs/ltr-end-selected-pressed.png);
-}
-
-/* preloading hack */
-#inspector-breadcrumbs:-moz-locale-dir(rtl)::after {
-  content: '';
-  display: block;
-  background-image:
-    url(chrome://browser/skin/devtools/breadcrumbs/rtl-start.png),
-    url(chrome://browser/skin/devtools/breadcrumbs/rtl-start-selected.png),
-    url(chrome://browser/skin/devtools/breadcrumbs/rtl-start-pressed.png),
-    url(chrome://browser/skin/devtools/breadcrumbs/rtl-start-selected-pressed.png),
-    url(chrome://browser/skin/devtools/breadcrumbs/rtl-middle.png),
-    url(chrome://browser/skin/devtools/breadcrumbs/rtl-middle-selected.png),
-    url(chrome://browser/skin/devtools/breadcrumbs/rtl-middle-pressed.png),
-    url(chrome://browser/skin/devtools/breadcrumbs/rtl-middle-selected-pressed.png),
-    url(chrome://browser/skin/devtools/breadcrumbs/rtl-end.png),
-    url(chrome://browser/skin/devtools/breadcrumbs/rtl-end-selected.png),
-    url(chrome://browser/skin/devtools/breadcrumbs/rtl-end-pressed.png),
-    url(chrome://browser/skin/devtools/breadcrumbs/rtl-end-selected-pressed.png);
-}
-
-#inspector-breadcrumbs > .scrollbutton-up,
-#inspector-breadcrumbs > .scrollbutton-down {
-  -moz-appearance: none;
-  border: 1px solid hsla(210,8%,5%,.45);
-  background: -moz-linear-gradient(hsla(212,7%,57%,.35), hsla(212,7%,57%,.1)) padding-box;
-  box-shadow: 0 1px 0 hsla(210,16%,76%,.15) inset, 0 0 0 1px hsla(210,16%,76%,.15) inset, 0 1px 0 hsla(210,16%,76%,.15);
-  margin: 0 0 1px;
-}
-
-#inspector-breadcrumbs > .scrollbutton-up:not([disabled]):active:hover,
-#inspector-breadcrumbs > .scrollbutton-down:not([disabled]):active:hover {
-  border-color: hsla(210,8%,5%,.6);
-  background: -moz-linear-gradient(hsla(220,6%,10%,.3), hsla(212,7%,57%,.15) 65%, hsla(212,7%,57%,.3));
-  box-shadow: 0 0 3px hsla(210,8%,5%,.25) inset, 0 1px 3px hsla(210,8%,5%,.25) inset, 0 1px 0 hsla(210,16%,76%,.15);
-}
-
-#inspector-breadcrumbs > .scrollbutton-up > .toolbarbutton-icon,
-#inspector-breadcrumbs > .scrollbutton-down > .toolbarbutton-icon {
-  -moz-appearance: none;
-  list-style-image: url("chrome://browser/skin/devtools/breadcrumbs-scrollbutton.png");
-  -moz-image-region: rect(0px 7px 16px 0px);
-  margin: 0 5px;
-}
-
-#inspector-breadcrumbs > .scrollbutton-up[disabled] > .toolbarbutton-icon,
-#inspector-breadcrumbs > .scrollbutton-down[disabled] > .toolbarbutton-icon {
-  opacity: 0.5;
-}
-
-#inspector-breadcrumbs > .scrollbutton-up:not([disabled]):active:hover > .toolbarbutton-icon,
-#inspector-breadcrumbs > .scrollbutton-down:not([disabled]):active:hover > .toolbarbutton-icon {
-  -moz-image-region: rect(0px 14px 16px 7px);
-}
-
-#inspector-breadcrumbs > .scrollbutton-up > .toolbarbutton-icon:-moz-locale-dir(rtl),
-#inspector-breadcrumbs > .scrollbutton-down > .toolbarbutton-icon:-moz-locale-dir(ltr) {
-  transform: scaleX(-1);
-}
-
-.inspector-breadcrumbs-button {
-  -moz-appearance: none;
-  border-style: solid;
-  border-width: 1px 13px 2px 13px;
-  color: hsl(210,30%,85%);
-  width: 85px; /* Can't use max-width. See bug 723132 */
-  /* The content of the button can be larger than the button */
-  overflow: hidden;
-  min-height: 25px;
-  margin: 0 -11px 0 0;
-  padding: 0 9px;
-}
-
-.inspector-breadcrumbs-button:-moz-focusring > label {
-  border-bottom: 1px dotted hsla(210,30%,85%,0.4);
-}
-
-.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-tag {
-  color: hsl(208,100%,60%);
-}
-
-.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-id {
-  color: hsl(205,100%,70%);
-}
-
-.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-pseudo-classes {
-  color: hsl(20, 100%, 70%);
-}
-
-.inspector-breadcrumbs-id,
-.inspector-breadcrumbs-classes {
-  color: #8d99a6;
-}
-
-.inspector-breadcrumbs-pseudo-classes {
-  color: hsl(20, 100%, 85%);
-}
-
-/* Highlighter toolbar - breadcrumbs - LTR */
-
-.inspector-breadcrumbs-button {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:not([checked]):hover:active {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[checked] {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-selected.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[checked]:hover:active {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-selected-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type:not([checked]):hover:active {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type[checked] {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-selected.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type[checked]:hover:active {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-selected-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end.png") 1 13 2 13 fill stretch;
-}
-
-#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:-moz-locale-dir(ltr):first-of-type {
-  border-left-width: 0;
-}
-
-#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:-moz-locale-dir(ltr):last-of-type {
-  border-right-width: 0;
-}
-
-.inspector-breadcrumbs-button:last-of-type:not([checked]):hover:active {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type[checked] {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-selected.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type[checked]:hover:active {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-selected-pressed.png") 1 13 2 13 fill stretch;
-}
-
-/* Highlighter toolbar - breadcrumbs - RTL */
-
-.inspector-breadcrumbs-button:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:not([checked]):hover:active:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[checked]:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-selected.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[checked]:hover:active:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-selected-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type:not([checked]):hover:active:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type[checked]:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-selected.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type[checked]:hover:active:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-selected-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end.png") 1 13 2 13 fill stretch;
-}
-
-#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:-moz-locale-dir(rtl):first-of-type {
-  border-right-width: 0;
-}
-
-#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:last-of-type:-moz-locale-dir(rtl) {
-  border-left-width: 0;
-}
-
-.inspector-breadcrumbs-button:last-of-type:not([checked]):hover:active:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type[checked]:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-selected.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type[checked]:hover:active:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-selected-pressed.png") 1 13 2 13 fill stretch;
-}
-
 #inspector-searchbox {
   transition-property: max-width, -moz-padding-end, -moz-padding-start;
diff --git a/browser/themes/osx/devtools/widgets.css b/browser/themes/osx/devtools/widgets.css
new file mode 100644
--- /dev/null
+++ b/browser/themes/osx/devtools/widgets.css
@@ -0,0 +1,598 @@
+/* vim:set ts=2 sw=2 sts=2 et: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/* BreacrumbsWidget */
+
+.breadcrumbs-widget-container {
+  -moz-margin-end: 3px;
+  /* A fake 1px-shadow is included in the border-images of the
+     breadcrumbs-widget-items, to match toolbar-buttons style.
+     This negative margin compensates the extra row of pixels created
+     by the shadow.*/
+  margin-bottom: -1px;
+}
+
+/* Preloading hack, LTR */
+
+.breadcrumbs-widget-container:-moz-locale-dir(ltr)::after {
+  content: '';
+  display: block;
+  background-image:
+    url(breadcrumbs/ltr-start.png),
+    url(breadcrumbs/ltr-start-selected.png),
+    url(breadcrumbs/ltr-start-pressed.png),
+    url(breadcrumbs/ltr-start-selected-pressed.png),
+    url(breadcrumbs/ltr-middle.png),
+    url(breadcrumbs/ltr-middle-selected.png),
+    url(breadcrumbs/ltr-middle-pressed.png),
+    url(breadcrumbs/ltr-middle-selected-pressed.png),
+    url(breadcrumbs/ltr-end.png),
+    url(breadcrumbs/ltr-end-selected.png),
+    url(breadcrumbs/ltr-end-pressed.png),
+    url(breadcrumbs/ltr-end-selected-pressed.png);
+}
+
+/* Preloading hack, RTL */
+
+.breadcrumbs-widget-container:-moz-locale-dir(rtl)::after {
+  content: '';
+  display: block;
+  background-image:
+    url(breadcrumbs/rtl-start.png),
+    url(breadcrumbs/rtl-start-selected.png),
+    url(breadcrumbs/rtl-start-pressed.png),
+    url(breadcrumbs/rtl-start-selected-pressed.png),
+    url(breadcrumbs/rtl-middle.png),
+    url(breadcrumbs/rtl-middle-selected.png),
+    url(breadcrumbs/rtl-middle-pressed.png),
+    url(breadcrumbs/rtl-middle-selected-pressed.png),
+    url(breadcrumbs/rtl-end.png),
+    url(breadcrumbs/rtl-end-selected.png),
+    url(breadcrumbs/rtl-end-pressed.png),
+    url(breadcrumbs/rtl-end-selected-pressed.png);
+}
+
+.scrollbutton-up,
+.scrollbutton-down {
+  -moz-appearance: none;
+  background: -moz-linear-gradient(hsla(212,7%,57%,.35), hsla(212,7%,57%,.1)) padding-box;
+  box-shadow: 0 1px 0 hsla(210,16%,76%,.15) inset,
+              0 0 0 1px hsla(210,16%,76%,.15) inset,
+              0 1px 0 hsla(210,16%,76%,.15);
+  border: 1px solid hsla(210,8%,5%,.45);
+  margin: 0 0 1px;
+}
+
+.scrollbutton-up:not([disabled]):active:hover,
+.scrollbutton-down:not([disabled]):active:hover {
+  background: -moz-linear-gradient(hsla(220,6%,10%,.3), hsla(212,7%,57%,.15) 65%, hsla(212,7%,57%,.3));
+  box-shadow: 0 0 3px hsla(210,8%,5%,.25) inset,
+              0 1px 3px hsla(210,8%,5%,.25) inset,
+              0 1px 0 hsla(210,16%,76%,.15);
+  border-color: hsla(210,8%,5%,.6);
+}
+
+.scrollbutton-up > .toolbarbutton-icon,
+.scrollbutton-down > .toolbarbutton-icon {
+  -moz-appearance: none;
+  list-style-image: url("breadcrumbs-scrollbutton.png");
+  -moz-image-region: rect(0px,7px,16px,0px);
+  margin: 0 5px;
+}
+
+.scrollbutton-up:not([disabled]):active:hover > .toolbarbutton-icon,
+.scrollbutton-down:not([disabled]):active:hover > .toolbarbutton-icon {
+  -moz-image-region: rect(0px,14px,16px,7px);
+}
+
+.scrollbutton-up[disabled] > .toolbarbutton-icon,
+.scrollbutton-down[disabled] > .toolbarbutton-icon {
+  opacity: 0.5;
+}
+
+.scrollbutton-up > .toolbarbutton-icon:-moz-locale-dir(rtl),
+.scrollbutton-down > .toolbarbutton-icon:-moz-locale-dir(ltr) {
+  transform: scaleX(-1);
+}
+
+.breadcrumbs-widget-item {
+  background-color: transparent;
+  -moz-appearance: none;
+  overflow: hidden;
+  min-width: 85px;
+  min-height: 25px;
+  border-style: solid;
+  border-width: 1px 13px 2px 13px;
+  margin: 0 -11px 0 0;
+  padding: 0 9px;
+  outline: none;
+  color: hsl(210,30%,85%);
+}
+
+.breadcrumbs-widget-item:-moz-focusring > label {
+  border-bottom: 1px dotted hsla(210,30%,85%,0.4);
+}
+
+.breadcrumbs-widget-item[checked] .breadcrumbs-widget-item-tag {
+  color: hsl(208,100%,60%);
+}
+
+.breadcrumbs-widget-item[checked] .breadcrumbs-widget-item-id {
+  color: hsl(205,100%,70%);
+}
+
+.breadcrumbs-widget-item[checked] .breadcrumbs-widget-item-pseudo-classes {
+  color: hsl(20,100%,70%);
+}
+
+.breadcrumbs-widget-item-id,
+.breadcrumbs-widget-item-classes {
+  color: #8d99a6;
+}
+
+.breadcrumbs-widget-item-pseudo-classes {
+  color: hsl(20,100%,85%);
+}
+
+/* Breadcrumbs LTR */
+
+.breadcrumbs-widget-item:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-middle.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:not([checked]):hover:active:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-middle-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item[checked]:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-middle-selected.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item[checked]:hover:active:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-middle-selected-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:first-of-type:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-start.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:first-of-type:not([checked]):hover:active:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-start-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:first-of-type[checked]:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-start-selected.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:first-of-type[checked]:hover:active:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-start-selected-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:last-of-type:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-end.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:last-of-type:not([checked]):hover:active:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-end-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:last-of-type[checked]:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-end-selected.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:last-of-type[checked]:hover:active:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-end-selected-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-container[overflows] > .breadcrumbs-widget-item:first-of-type:-moz-locale-dir(ltr) {
+  border-left-width: 0;
+}
+
+.breadcrumbs-widget-container[overflows] > .breadcrumbs-widget-item:last-of-type:-moz-locale-dir(ltr) {
+  border-right-width: 0;
+}
+
+/* Breadcrumbs RTL */
+
+.breadcrumbs-widget-item:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-middle.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:not([checked]):hover:active:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-middle-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item[checked]:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-middle-selected.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item[checked]:hover:active:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-middle-selected-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:first-of-type:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-start.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:first-of-type:not([checked]):hover:active:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-start-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:first-of-type[checked]:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-start-selected.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:first-of-type[checked]:hover:active:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-start-selected-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:last-of-type:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-end.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:last-of-type:not([checked]):hover:active:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-end-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:last-of-type[checked]:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-end-selected.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:last-of-type[checked]:hover:active:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-end-selected-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-container[overflows] > .breadcrumbs-widget-item:first-of-type:-moz-locale-dir(rtl) {
+  border-right-width: 0;
+}
+
+.breadcrumbs-widget-container[overflows] > .breadcrumbs-widget-item:last-of-type:-moz-locale-dir(rtl) {
+  border-left-width: 0;
+}
+
+/* SideMenuWidget */
+
+.side-menu-widget-container {
+  background: url(background-noise-toolbar.png), hsl(208,11%,27%);
+  color: #fff;
+}
+
+.side-menu-widget-container:-moz-locale-dir(ltr),
+.side-menu-widget-item-or-group:-moz-locale-dir(ltr) {
+  box-shadow: inset -1px 0 0 #222426;
+}
+
+.side-menu-widget-container:-moz-locale-dir(rtl),
+.side-menu-widget-item-or-group:-moz-locale-dir(rtl) {
+  box-shadow: inset 1px 0 0 #222426;
+}
+
+.side-menu-widget-group-title {
+  background-image: linear-gradient(#1f3e4f, #1b3243);
+  box-shadow: 0 1px 0 hsla(0,0%,100%,.05) inset,
+              0 -2px 0 hsla(206,37%,4%,.05) inset,
+              0 -1px 1px hsla(206,37%,4%,.1) inset;
+  text-shadow: 0 -1px 0 hsla(210,8%,5%,.45);
+  padding: 4px;
+  color: #f5f7fa;
+}
+
+.side-menu-widget-item {
+  border-top: 1px solid hsla(210,16%,76%,.1);
+  border-bottom: 1px solid hsla(210,8%,5%,.25);
+  cursor: pointer;
+}
+
+.side-menu-widget-item:last-of-type {
+  box-shadow: 0 1px 0 hsla(210,16%,76%,.1);
+}
+
+.side-menu-widget-item.selected {
+  background: -moz-linear-gradient(hsl(206,61%,40%), hsl(206,61%,31%)) repeat-x top left;
+  box-shadow: inset 0 1px 0 hsla(210,40%,83%,.15),
+              inset 0 -1px 0 hsla(210,40%,83%,.05);
+  border-top: 0;
+  padding-top: 1px;
+}
+
+.side-menu-widget-item-arrow {
+  -moz-margin-start: -8px;
+  width: 8px;
+}
+
+.side-menu-widget-item.selected > .side-menu-widget-item-arrow {
+  margin-top: -1px; /* Selection removes the top border, offset by 1 pixel */
+  background-size: auto, 1px 100%;
+  background-repeat: no-repeat;
+}
+
+.side-menu-widget-item.selected > .side-menu-widget-item-arrow:-moz-locale-dir(ltr) {
+  background-image: url(itemArrow-ltr.png), -moz-linear-gradient(left, black, black);
+  background-position: center right, top right;
+}
+
+.side-menu-widget-item.selected > .side-menu-widget-item-arrow:-moz-locale-dir(rtl) {
+  background-image: url(itemArrow-rtl.png), -moz-linear-gradient(left, black, black);
+  background-position: center left, top left;
+}
+
+.side-menu-widget-item-contents {
+  padding: 4px;
+}
+
+.side-menu-widget-item-label {
+  cursor: inherit;
+}
+
+.side-menu-widget-item-other {
+  background: url(background-noise-toolbar.png), hsla(208,11%,27%, 0.65);
+  margin: 0 -4px;
+  -moz-padding-start: 5px;
+}
+
+.side-menu-widget-item-other.selected {
+  background: url(background-noise-toolbar.png), hsla(208,11%,27%, 0.15);
+  box-shadow: inset 0 1px 0 hsla(210,40%,83%,.07),
+              inset 0 -1px 0 hsla(210,40%,83%,.07);
+}
+
+.side-menu-widget-item.selected .side-menu-widget-item-other:first-of-type {
+  border-top: 1px dotted #333;
+  margin-top: 3px;
+}
+
+.side-menu-widget-item-other:first-of-type {
+  margin-top: 4px;
+}
+
+.side-menu-widget-item-other:last-of-type {
+  margin-bottom: -4px;
+}
+
+.side-menu-widget-item-other > label {
+  cursor: inherit;
+  color: #f5f7fa;
+  text-shadow: 0 1px 1px #111;
+}
+
+.side-menu-widget-empty-notice-container {
+  background: url(background-noise-toolbar.png), hsl(208,11%,27%);
+  padding: 12px;
+  color: #fff;
+  font-weight: 600;
+}
+
+/* VariablesView */
+
+.variables-view-container {
+  background: #fff;
+}
+
+.variables-view-empty-notice {
+  color: GrayText;
+  padding: 2px;
+}
+
+.variables-view-scope > .title {
+  color: #fff;
+}
+
+.variables-view-scope:focus > .title {
+  background: Highlight;
+  color: HighlightText;
+}
+
+.variables-view-scope > .variables-view-element-details:not(:empty) {
+  margin-top: 1px;
+  -moz-margin-start: 2px;
+  -moz-margin-end: 1px;
+}
+
+.variables-view-scope > .variables-view-element-details.nonenum:not(:empty) {
+  border-top: 1px solid #ddd;
+}
+
+/* Generic traits applied to both variables and properties */
+
+.variable-or-property {
+  transition: background 1s ease-in-out;
+}
+
+.variable-or-property[changed] {
+  background: rgba(255,255,0,0.65);
+  transition-duration: 0.4s;
+}
+
+.variable-or-property > .title > .value {
+  -moz-padding-start: 6px;
+  -moz-padding-end: 4px;
+}
+
+.variable-or-property:focus > .title {
+  background: Highlight;
+  color: HighlightText;
+  border-radius: 4px;
+}
+
+.variable-or-property[editable] > .title > .value {
+  cursor: text;
+}
+
+.variable-or-property:not([non-header]) > .variables-view-element-details {
+  -moz-margin-start: 10px;
+}
+
+/* Custom variables and properties traits */
+
+.variables-view-variable {
+  -moz-margin-start: 1px;
+  -moz-margin-end: 1px;
+  border-bottom: 1px solid #eee;
+}
+
+.variables-view-variable > .title > .name {
+  font-weight: 600;
+}
+
+.variables-view-variable:not(:focus) > .title > .name {
+  color: #048;
+}
+
+.variables-view-property:not(:focus) > .title > .name {
+  color: #881090;
+}
+
+/* Token value colors */
+
+.variable-or-property:not(:focus) > .title > .token-undefined {
+  color: #bbb;
+}
+
+.variable-or-property:not(:focus) > .title > .token-null {
+  color: #999;
+}
+
+.variable-or-property:not(:focus) > .title > .token-boolean {
+  color: #777;
+}
+
+.variable-or-property:not(:focus) > .title > .token-number {
+  color: #c40a16;
+}
+
+.variable-or-property:not(:focus) > .title > .token-string {
+  max-width: 30em;
+  color: #1c00cf;
+}
+
+.variable-or-property:not(:focus) > .title > .token-other {
+  color: #333;
+}
+
+/* Non enumerable, configurable and writable variables and properties */
+
+.variable-or-property[proto] > .title > .name,
+.variable-or-property[non-enumerable]:not([self]):not([exception]) > .title > .name {
+  opacity: 0.5;
+}
+
+.variable-or-property[non-configurable] > .title > .name {
+  border-bottom: 1px dashed #99f;
+}
+
+.variable-or-property[non-configurable][non-writable] > .title > .name {
+  border-bottom: 1px dashed #f99;
+}
+
+.variable-or-property[non-writable] > .title:after {
+  content: " ";
+  display: inline-block;
+  background: url("chrome://browser/skin/identity-icons-https.png") no-repeat;
+  width: 16px;
+  height: 16px;
+  opacity: 0.5;
+}
+
+@media (min-resolution: 2dppx) {
+  .variable-or-property[non-writable] > .title:after {
+    background-image: url("chrome://browser/skin/identity-icons-https@2x.png");
+    background-size: 32px;
+  }
+}
+
+.variable-or-property[exception]:not(:focus) > .title > .name {
+  color: #a00;
+  text-shadow: 0 0 8px #fcc;
+}
+
+/* Variables and properties tooltips */
+
+.variable-or-property > tooltip > label {
+  margin: 0 2px 0 2px;
+}
+
+.variable-or-property[non-enumerable] > tooltip > label[value=enumerable],
+.variable-or-property[non-configurable] > tooltip > label[value=configurable],
+.variable-or-property[non-writable] > tooltip > label[value=writable] {
+  text-decoration: line-through;
+}
+
+/* Variables and properties editing */
+
+.variables-view-delete {
+  list-style-image: url("chrome://browser/skin/devtools/toolbarbutton-close.png");
+  -moz-image-region: rect(0,32px,16px,16px);
+  opacity: 0;
+}
+
+.variables-view-delete:hover {
+  opacity: 1;
+}
+
+*:hover > .title > .variables-view-delete:not(:hover),
+*:focus > .title > .variables-view-delete:not(:hover) {
+  opacity: 0.5;
+  transition: opacity 0.2s ease-in-out;
+}
+
+.variables-view-delete > .toolbarbutton-text {
+  display: none;
+}
+
+.variables-view-edit {
+  background: url("chrome://browser/skin/tabview/edit-light.png") center no-repeat;
+  width: 20px;
+  height: 16px;
+  cursor: pointer;
+}
+
+.variables-view-throbber {
+  background: url("chrome://global/skin/icons/loading_16.png") center no-repeat;
+  width: 16px;
+  height: 16px;
+}
+
+.element-value-input {
+  -moz-margin-start: 4px !important;
+  -moz-margin-end: 2px !important;
+}
+
+.element-name-input {
+  -moz-margin-start: -2px !important;
+  -moz-margin-end: 2px !important;
+  color: #048;
+  font-weight: 600;
+}
+
+.element-value-input,
+.element-name-input {
+  border: 1px solid #999 !important;
+  box-shadow: 1px 2px 4px #aaa;
+}
+
+/* Variables and properties searching */
+
+.variables-view-searchinput {
+  min-height: 24px;
+}
+
+.variable-or-property[non-match] {
+  border: none;
+  margin: 0;
+}
+
+/* Expand/collapse arrow */
+
+.arrow {
+  -moz-appearance: treetwisty;
+}
+
+.arrow[open] {
+  -moz-appearance: treetwistyopen;
+}
+
+.arrow[invisible] {
+  visibility: hidden;
+}
diff --git a/browser/themes/osx/jar.mn b/browser/themes/osx/jar.mn
--- a/browser/themes/osx/jar.mn
+++ b/browser/themes/osx/jar.mn
@@ -192,4 +192,5 @@ browser.jar:
   skin/classic/browser/tabview/tabview.css                  (tabview/tabview.css)
 * skin/classic/browser/devtools/common.css                  (devtools/common.css)
+  skin/classic/browser/devtools/widgets.css                 (devtools/widgets.css)
   skin/classic/browser/devtools/arrows.png                  (devtools/arrows.png)
   skin/classic/browser/devtools/commandline.png             (devtools/commandline.png)
diff --git a/browser/themes/windows/devtools/debugger.css b/browser/themes/windows/devtools/debugger.css
--- a/browser/themes/windows/devtools/debugger.css
+++ b/browser/themes/windows/devtools/debugger.css
@@ -1,4 +1,3 @@
-/* -*- Mode: javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* vim:set ts=2 sw=2 sts=2 et: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
@@ -6,116 +5,112 @@
 
 #body {
-  background-color: white;
+  background: #fff;
 }
 
-/**
- * Debugger content
- */
+/* Sources and breakpoints pane */
 
-#chrome-globals, #sources {
-  width: 200px;
+#sources-pane {
+  min-width: 50px;
 }
 
-/**
- * This hardcoded width likely due to a toolkit Windows specific bug.
- * See http://hg.mozilla.org/mozilla-central/annotate/f38d6df93cad/toolkit/themes/winstripe/global/textbox-aero.css#l7
- */
-#searchbox {
-  width: 200px;
+#sources-pane + .devtools-side-splitter {
+  -moz-border-start-color: transparent;
 }
 
-/**
- * Lists and headers
- */
+/* Watch expressions, variables and other instruments pane */
 
-.list-item {
+#instruments-pane {
+  min-width: 50px;
+  -moz-margin-start: 0px !important;
+  /* Unfortunately, transitions don't work properly with locale-aware properties,
+     so both the left and right margins are set via js, while the start margin
+     is always overridden here. */
+}
+
+#instruments-pane[animated] {
+  -moz-transition: margin 0.25s ease-in-out;
+}
+
+/* ListWidget items */
+
+.list-widget-item {
   padding: 2px;
 }
 
-.list-item:not(.selected):not(.empty):hover {
-  background: #cddae5;
+.list-widget-item:not(.selected):not(.empty):hover {
+  background: linear-gradient(rgba(255,255,255,0.9), rgba(255,255,255,0.85)), Highlight;
 }
 
-.list-item.selected {
+.list-widget-item.selected.light {
+  background: linear-gradient(rgba(255,255,255,0.85), rgba(255,255,255,0.8)), Highlight;
+  color: #000;
+}
+
+.list-widget-item.selected {
   background: Highlight;
   color: HighlightText;
 }
 
-.list-item.empty {
+.list-widget-item.empty {
   color: GrayText;
   padding: 2px;
 }
 
-/**
- * Sources searching
- */
+/* Stack frames view */
 
-#globalsearch {
-  background-color: white;
-  min-height: 10px;
+.dbg-stackframe-details {
+  -moz-padding-start: 4px;
 }
 
-#globalsearch > vbox:not(:empty) {
-  min-height: 10px;
-  max-height: 150px;
-}
-
-.dbg-source-results:not(:last-child) {
-  border-bottom: 1px dotted #aaa;
-}
-
-.dbg-results-header {
-  -moz-padding-start: 6px;
-}
-
-.dbg-results-header .location {
+.dbg-stackframe-menuitem[checked] {
+  margin-top: 3px;
+  margin-bottom: 3px;
+  outline: 1px solid #eee;
   font-weight: 600;
 }
 
-.dbg-results-header .match-count {
-  -moz-padding-start: 6px;
-  color: GrayText;
+.dbg-stackframe-menuitem-details {
+  -moz-padding-start: 16px;
 }
 
-.dbg-results-container .line-number {
-  background: hsl(0,0%,89%);
-  min-width: 40px;
-  -moz-padding-end: 4px;
-  -moz-border-end: 1px dotted #aaa;
-  text-align: end;
-  font: 8pt monospace;
-  color: hsl(0,0%,55%);
+/* Sources and breakpoints view */
+
+.dbg-breakpoint {
+  font-family: monospace;
 }
 
-.dbg-results-container .line-contents {
-  -moz-padding-start: 4px;
-  font: 8pt monospace;
+.dbg-breakpoint-line {
+  font-weight: 600;
 }
 
-.dbg-results-container .line-contents:hover {
-  background: #cddae5;
+.dbg-breakpoint-text {
+  -moz-margin-start: 10px !important;
+  font-style: italic;
 }
 
-.dbg-results-container .line-contents > .string {
-  padding: 1px;
+/* Watch expressions view */
+
+#expressions {
+  min-height: 10px;
+  max-height: 125px;
 }
 
-.dbg-results-container .line-contents > .string[match=true] {
-  background: rgba(255, 255, 0, 0.65);
-  padding: 0;
-  border: 1px solid #aaa;
-  border-radius: 4px;
-  cursor: pointer;
-  transition: transform 0.25s ease-in-out;
+.dbg-expression {
+  height: 20px;
+  -moz-padding-start: 8px;
 }
 
-.dbg-results-container .line-contents > .string[match=true][focused] {
-  transition-duration: 0.1s;
-  transform: scale(1.75, 1.75);
+.dbg-expression-arrow {
+  width: 10px;
+  height: auto;
+  background: url("chrome://browser/skin/devtools/commandline.png") 0px 4px no-repeat;
 }
 
-/**
- * Searchbox
- */
+.dbg-expression-input {
+  -moz-padding-start: 2px !important;
+  font-family: Menlo, Monaco, monospace;
+}
+
+/* Searchbox and the search operations help panel */
 
 .devtools-searchinput {
@@ -124,26 +119,29 @@
 }
 
-#searchbox-panel .description {
-  margin: -6px 0 8px 0;
+#searchbox-panel-description {
+  margin-top: 0;
+  margin-bottom: 8px;
+  -moz-margin-start: 2px;
 }
 
-#searchbox-panel button.operator {
-  min-width: 0;
-  margin: 0;
-  padding: 0;
-  font: 9pt monospace;
+.searchbox-panel-operator-button {
+  min-width: 26px;
+  margin-top: 0;
+  margin-bottom: 0;
+  -moz-margin-start: 2px;
+  -moz-margin-end: 6px;
+  text-align: center;
+  font-family: Menlo, Monaco, monospace;
 }
 
-#searchbox-panel label.operator {
-  -moz-padding-start: 6px;
-  padding-bottom: 1px;
+.searchbox-panel-operator-label {
+  padding-bottom: 2px;
 }
 
-/**
- * Filtered sources panel
- */
+/* Filtering results panel */
 
 #filtered-sources-panel {
   padding: 4px;
+  opacity: 0.9;
 }
 
@@ -152,8 +150,6 @@
   border: 1px solid #ddd;
   border-top-color: #fff;
-}
-
-.dbg-source-item.selected {
-  background: #cddae5;
+  padding: 5px;
+  cursor: pointer;
 }
 
@@ -176,441 +172,97 @@
 
 .dbg-source-item-name {
-  color: #333;
+  color: #111;
   font-weight: 600;
+  cursor: inherit;
 }
 
 .dbg-source-item-details {
-  color: #888;
+  color: #777;
+  cursor: inherit;
 }
 
-/**
- * Stack frames and breakpoints pane
- */
+/* Sources search view */
 
-#stackframes\+breakpoints {
-  min-width: 50px;
+#globalsearch {
+  min-height: 10px;
+  box-shadow: inset 0 -4px 8px #eee;
+  background: url(background-noise-toolbar.png);
 }
 
-#stackframes\+breakpoints[animated] {
-  transition: margin 0.25s ease-in-out;
-}
-
-/**
- * Variables and watch expressions pane
- */
-
-#variables\+expressions {
-  min-width: 50px;
-}
-
-#variables\+expressions[animated] {
-  transition: margin 0.25s ease-in-out;
-}
-
-/**
- * Stack frames view
- */
-
-.dbg-stackframe {
-  width: auto !important;
-  min-width: 64px;
-}
-
-.dbg-stackframe-menuitem[checked] {
-  outline: 1px solid #eee;
-  margin-top: 3px;
-  margin-bottom: 3px;
-  font-weight: 600;
-}
-
-.dbg-stackframe-menuitem-title {
-  -moz-padding-end: 8px;
-}
-
-.dbg-stackframe-menuitem-details {
-  -moz-padding-start: 8px;
-}
-
-/**
- * Breakpoints view
- */
-
-.dbg-breakpoint {
-  border-bottom: 1px solid #eee;
-}
-
-.dbg-breakpoint-info {
-  font-weight: 600;
-}
-
-.dbg-breakpoint-text {
-  font: 8pt monospace;
-}
-
-#conditional-breakpoint-panel .description {
-  margin: -6px 0 8px 0;
-}
-
-#conditional-breakpoint-panel textbox {
-  margin: 0 0 -2px 0;
-}
-
-/**
- * Watch expressions view
- */
-
-#expressions {
+#globalsearch > vbox:not(:empty) {
   min-height: 10px;
   max-height: 125px;
 }
 
-.dbg-expression {
-  height: 20px;
-  -moz-padding-start: 8px;
+#globalsearch + .devtools-horizontal-splitter {
+  -moz-border-top-colors: #bfbfbf;
 }
 
-.dbg-expression-arrow {
-  width: 10px;
-  height: auto;
-  background: url("chrome://browser/skin/devtools/commandline.png") 0px 4px no-repeat;
+.dbg-source-results {
+  padding: 0;
+  background: none !important;
 }
 
-.dbg-expression-input {
-  font: 9pt monospace;
+.dbg-results-header {
+  -moz-padding-start: 6px;
 }
 
-.dbg-expression-delete {
-  opacity: 0;
+.dbg-results-header-location {
+  font-weight: 600;
 }
 
-.dbg-expression-delete:not(:hover) {
-  -moz-image-region: rect(0, 32px, 16px, 16px);
+.dbg-results-header-match-count {
+  -moz-padding-start: 6px;
+  color: GrayText;
 }
 
-.dbg-expression-delete:hover {
-  opacity: 1;
+.dbg-results-line-number {
+  background: #e2e2e2;
+  min-width: 40px;
+  -moz-border-end: 1px solid #b4c4d3;
+  -moz-padding-end: 4px;
+  padding-top: 2px;
+  text-align: end;
+  font-family: monospace;
+  color: #8c8c8c;
 }
 
-.dbg-expression:hover > .dbg-expression-delete:not(:hover) {
-  opacity: 0.5;
-  transition: opacity 0.2s ease-in-out;
+.dbg-results-line-contents {
+  -moz-padding-start: 4px;
+  padding-top: 1px;
+  padding-bottom: 1px;
+  font-family: monospace;
 }
 
-/**
- * Variables view
- */
-
-#variables {
-  min-height: 10px;
+.dbg-results-line-contents-string {
+  padding: 1px;
 }
 
-.dbg-variable-delete {
-  opacity: 0;
-}
-
-.dbg-variable-delete:not(:hover) {
-  -moz-image-region: rect(0, 32px, 16px, 16px);
-}
-
-.dbg-variable-delete:hover {
-  opacity: 1;
-}
-
-.variable-or-property:hover > .title > .dbg-variable-delete:not(:hover),
-.variable-or-property:focus > .title > .dbg-variable-delete:not(:hover) {
-  opacity: 0.5;
-  transition: opacity 0.2s ease-in-out;
-}
-
-.dbg-variable-edit {
-  background: url("chrome://browser/skin/tabview/edit-light.png") center no-repeat;
-  width: 20px;
-  height: 16px;
+.dbg-results-line-contents-string[match=true] {
+  background: rgba(255,255,0,0.5);
+  padding: 0;
+  border: 1px solid #aaa;
+  border-radius: 4px;
   cursor: pointer;
 }
 
-.dbg-variable-throbber {
-  background: url("chrome://global/skin/icons/loading_16.png") center no-repeat;
-  width: 16px;
-  height: 16px;
+.dbg-results-line-contents-string[match=true][focusing] {
+  transition: transform 0.3s ease-in-out;
 }
 
-/**
- * Scope element
- */
-
-.scope:focus > .title {
-  background: Highlight;
-  color: HighlightText;
+.dbg-results-line-contents-string[match=true][focused] {
+  transition-duration: 0.1s;
+  transform: scale(1.75, 1.75);
 }
 
-.scope > .title {
-  text-shadow: 0 1px #222;
-  color: #fff;
-}
-
-.scope > .details {
-  -moz-margin-start: 2px;
-  -moz-margin-end: 1px;
-}
-
-.scope > .details.nonenum:not(:empty) {
-  border-top: 1px solid #ddd;
-}
-
-/**
- * Variable element
- */
-
-.variable {
-  -moz-margin-start: 1px;
-  -moz-margin-end: 1px;
-  border-bottom: 1px solid #eee;
-  transition: background 1s ease-in-out;
-}
-
-.variable[changed] {
-  background: rgba(255, 255, 0, 0.65);
-  transition-duration: 0.4s;
-}
-
-.variable:focus > .title {
-  background: Highlight;
-  color: HighlightText;
-  border-radius: 4px;
-}
-
-.variable > .title > .name {
-  font-weight: 600;
-}
-
-.variable:not(:focus) > .title > .name {
-  color: #048;
-}
-
-.variable > .title > .value {
-  -moz-padding-start: 6px;
-  -moz-padding-end: 4px;
-}
-
-.variable[editable] > .title > .value {
-  cursor: text;
-}
-
-.variable:not([non-header]) > .details {
-  -moz-margin-start: 10px;
-}
-
-/**
- * Property element
- */
-
-.property {
-  transition: background 1s ease-in-out;
-}
-
-.property[changed] {
-  background: rgba(255, 255, 0, 0.65);
-  transition-duration: 0.4s;
-}
-
-.property:focus > .title {
-  background: Highlight;
-  color: HighlightText;
-  border-radius: 4px;
-}
-
-.property:not(:focus) > .title > .name {
-  color: #881090;
-}
-
-.property > .title > .value {
-  -moz-padding-start: 6px;
-  -moz-padding-end: 4px;
-}
-
-.property[editable] > .title > .value {
-  cursor: text;
-}
-
-.property:not([non-header]) > .details {
-  -moz-margin-start: 10px;
-}
-
-/**
- * Non enumerable, configurable and writable variables and properties
- */
-
-.variable[proto] > .title > .name,
-.property[proto] > .title > .name,
-.variable[non-enumerable]:not([self]):not([exception]) > .title > .name,
-.property[non-enumerable]:not([self]):not([exception]) > .title > .name {
-  opacity: 0.5;
-}
-
-.variable[non-configurable] > .title > .name,
-.property[non-configurable] > .title > .name {
-  border-bottom: 1px dashed #99f;
-}
-
-.variable[non-configurable][non-writable] > .title > .name,
-.property[non-configurable][non-writable] > .title > .name {
-  border-bottom: 1px dashed #f99;
-}
-
-.variable[non-writable] > .title:after,
-.property[non-writable] > .title:after {
-  content: " ";
-  display: inline-block;
-  width: 16px;
-  height: 16px;
-  background: url("chrome://browser/skin/identity-icons-https.png") no-repeat;
-  opacity: 0.5;
-}
-
-@media (min-resolution: 2dppx) {
-  .variable[non-writable] > .title:after,
-  .property[non-writable] > .title:after {
-    background-image: url("chrome://browser/skin/identity-icons-https@2x.png");
-    background-size: 32px;
-  }
-}
-
-.variable[exception]:not(:focus) > .title > .name,
-.property[exception]:not(:focus) > .title > .name {
-  color: #a00;
-  text-shadow: 0 0 8px #fcc;
-}
-
-.variable > tooltip > label,
-.property > tooltip > label {
-  margin: 0 2px 0 2px;
-}
-
-.variable[non-enumerable] > tooltip > label[value="enumerable"],
-.property[non-enumerable] > tooltip > label[value="enumerable"],
-.variable[non-configurable] > tooltip > label[value="configurable"],
-.property[non-configurable] > tooltip > label[value="configurable"],
-.variable[non-writable] > tooltip > label[value="writable"],
-.property[non-writable] > tooltip > label[value="writable"] {
-  text-decoration: line-through;
-}
-
-/**
- * Variables and properties editing
- */
-
-.element-value-input {
-  -moz-margin-start: 4px !important;
-}
-
-.element-name-input {
-  -moz-margin-start: -2px !important;
-  color: #048;
-  font-weight: 600;
-}
-
-.element-value-input,
-.element-name-input {
-  max-width: 30em;
-  border: 1px solid #999 !important;
-  box-shadow: 1px 2px 4px #aaa;
-}
-
-/**
- * Variables and properties searching
- */
-
-.variables-searchinput.devtools-searchinput {
-  min-height: 24px;
-}
-
-.variable[non-match],
-.property[non-match] {
-  border: none;
-  margin: 0;
-}
-
-/**
- * Token value colors
- */
-
-.variable-or-property:not(:focus) > .title > .token-undefined {
-  color: #bbb;
-}
-
-.variable-or-property:not(:focus) > .title > .token-null {
-  color: #999;
-}
-
-.variable-or-property:not(:focus) > .title > .token-boolean {
-  color: #777;
-}
-
-.variable-or-property:not(:focus) > .title > .token-number {
-  color: #c40a16;
-}
-
-.variable-or-property:not(:focus) > .title > .token-string {
-  max-width: 30em;
-  color: #1c00cf;
-}
-
-.variable-or-property:not(:focus) > .title > .token-other {
-  color: #333;
-}
-
-/**
- * Expand/collapse arrow
- */
-
-.arrow {
-  width: 9px;
-  height: 9px;
-  -moz-margin-start: 5px;
-  -moz-margin-end: 5px;
-  margin-top: -2px;
-  background: url("chrome://global/skin/tree/twisty-clsd.png") center center no-repeat;
-}
-
-.arrow[open] {
-  background-image: url("chrome://global/skin/tree/twisty-open.png");
-}
-
-.arrow[invisible] {
-  visibility: hidden;
-}
-
-/**
- * Toolbar Controls
- */
-
-#toggle-panes {
-  background: none;
-  box-shadow: none;
-  border: none;
-  list-style-image: url("chrome://browser/skin/devtools/debugger-expand.png");
-  -moz-image-region: rect(0px, 16px, 16px, 0px);
-}
-
-#toggle-panes:not([panesHidden]) {
-  list-style-image: url("chrome://browser/skin/devtools/debugger-collapse.png");
-}
-
-#toggle-panes:hover {
-  -moz-image-region: rect(0px, 32px, 16px, 16px);
-}
-
-#toggle-panes:hover:active {
-  -moz-image-region: rect(0px, 48px, 16px, 32px);
-}
+/* Toolbar Controls */
 
 #resume {
   list-style-image: url("chrome://browser/skin/devtools/debugger-play.png");
-  -moz-image-region: rect(0px, 16px, 16px, 0px);
+  -moz-image-region: rect(0px,16px,16px,0px);
 }
 
-#resume[checked=true] {
-  -moz-image-region: rect(0px, 32px, 16px, 16px);
+#resume[checked] {
+  -moz-image-region: rect(0px,32px,16px,16px);
 }
 
@@ -628,9 +280,9 @@
 
 #debugger-controls > toolbarbutton {
+  margin: 0;
+  box-shadow: none;
+  border-radius: 0;
   border-width: 0;
   -moz-border-end-width: 1px;
-  border-radius: 0;
-  box-shadow: none;
-  margin: 0;
   outline-offset: -3px;
 }
@@ -641,7 +293,30 @@
 
 #debugger-controls {
+  box-shadow: 0 1px 0 hsla(209,29%,72%,.15) inset,
+              0 0 0 1px hsla(209,29%,72%,.1) inset,
+              0 0 0 1px hsla(209,29%,72%,.1),
+              0 1px 0 hsla(210,16%,76%,.1);
   border: 1px solid hsla(210,8%,5%,.45);
   border-radius: 3px;
-  box-shadow: 0 1px 0 hsla(209,29%,72%,.15) inset, 0 0 0 1px hsla(209,29%,72%,.1) inset, 0 0 0 1px hsla(209,29%,72%,.1), 0 1px 0 hsla(210,16%,76%,.1);
   margin: 0 3px;
 }
+
+#instruments-pane-toggle {
+  background: none;
+  box-shadow: none;
+  border: none;
+  list-style-image: url("chrome://browser/skin/devtools/debugger-expand.png");
+  -moz-image-region: rect(0px,16px,16px,0px);
+}
+
+#instruments-pane-toggle:not([toggled]) {
+  list-style-image: url("chrome://browser/skin/devtools/debugger-collapse.png");
+}
+
+#instruments-pane-toggle:hover {
+  -moz-image-region: rect(0px,32px,16px,16px);
+}
+
+#instruments-pane-toggle:hover:active {
+  -moz-image-region: rect(0px,48px,16px,32px);
+}
diff --git a/browser/themes/windows/devtools/inspector.css b/browser/themes/windows/devtools/inspector.css
--- a/browser/themes/windows/devtools/inspector.css
+++ b/browser/themes/windows/devtools/inspector.css
@@ -1,2 +1,7 @@
+/* vim:set ts=2 sw=2 sts=2 et: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
 #inspector-inspect-toolbutton {
   list-style-image: url("chrome://browser/skin/devtools/inspect-button.png");
@@ -8,214 +13,4 @@
 }
 
-/* Highlighter toolbar - breadcrumbs */
-
-#inspector-breadcrumbs {
-  -moz-margin-end: 3px;
-  /* A fake 1px-shadow is included in the border-images of the
-     inspector-breadcrumbs-buttons, to match toolbar-buttons style.
-     This negative margin compensate the extra row of pixels created
-     by the shadow.*/
-  margin: -1px 0;
-}
-
-#inspector-breadcrumbs > .scrollbutton-up,
-#inspector-breadcrumbs > .scrollbutton-down {
-  -moz-appearance: none;
-  border: 1px solid hsla(210,8%,5%,.45);
-  background: -moz-linear-gradient(hsla(212,7%,57%,.35), hsla(212,7%,57%,.1)) padding-box;
-  box-shadow: 0 1px 0 hsla(210,16%,76%,.15) inset, 0 0 0 1px hsla(210,16%,76%,.15) inset, 0 1px 0 hsla(210,16%,76%,.15);
-  margin: 1px 0 1px;
-}
-
-#inspector-breadcrumbs > .scrollbutton-up:not([disabled]):active:hover,
-#inspector-breadcrumbs > .scrollbutton-down:not([disabled]):active:hover {
-  border-color: hsla(210,8%,5%,.6);
-  background: -moz-linear-gradient(hsla(220,6%,10%,.3), hsla(212,7%,57%,.15) 65%, hsla(212,7%,57%,.3));
-  box-shadow: 0 0 3px hsla(210,8%,5%,.25) inset, 0 1px 3px hsla(210,8%,5%,.25) inset, 0 1px 0 hsla(210,16%,76%,.15);
-}
-
-#inspector-breadcrumbs > .scrollbutton-up > .toolbarbutton-icon,
-#inspector-breadcrumbs > .scrollbutton-down > .toolbarbutton-icon {
-  -moz-appearance: none;
-  list-style-image: url("chrome://browser/skin/devtools/breadcrumbs-scrollbutton.png");
-  -moz-image-region: rect(0px 7px 16px 0px);
-  margin: 0 5px;
-}
-
-#inspector-breadcrumbs > .scrollbutton-up[disabled] > .toolbarbutton-icon,
-#inspector-breadcrumbs > .scrollbutton-down[disabled] > .toolbarbutton-icon {
-  opacity: 0.5;
-}
-
-#inspector-breadcrumbs > .scrollbutton-up:not([disabled]):active:hover > .toolbarbutton-icon,
-#inspector-breadcrumbs > .scrollbutton-down:not([disabled]):active:hover > .toolbarbutton-icon {
-  -moz-image-region: rect(0px 14px 16px 7px);
-}
-
-#inspector-breadcrumbs > .scrollbutton-up > .toolbarbutton-icon:-moz-locale-dir(rtl),
-#inspector-breadcrumbs > .scrollbutton-down > .toolbarbutton-icon:-moz-locale-dir(ltr) {
-  transform: scaleX(-1);
-}
-
-.inspector-breadcrumbs-button {
-  -moz-appearance: none;
-  background-color: transparent;
-  border-style: solid;
-  border-width: 2px 13px;
-  outline: none;
-  color: hsl(210,30%,85%);
-  width: 85px; /* Can't use max-width. See bug 723132 */
-  /* The content of the button can be larger than the button */
-  overflow: hidden;
-  min-height: 25px;
-  margin: 0 -11px 0 0;
-  padding: 0 9px;
-}
-
-.inspector-breadcrumbs-button:-moz-focusring > .button-box {
-  border-width: 0;
-}
-
-.inspector-breadcrumbs-button:-moz-focusring > label {
-  border-bottom: 1px dotted hsla(210,30%,85%,0.4);
-}
-
-.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-tag {
-  color: hsl(200,100%,60%);
-}
-
-.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-id {
-  color: hsl(200,100%,70%);
-}
-
-.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-pseudo-classes {
-  color: hsl(20, 100%, 70%);
-}
-
-.inspector-breadcrumbs-id,
-.inspector-breadcrumbs-classes {
-  color: #8d99a6;
-}
-
-.inspector-breadcrumbs-pseudo-classes {
-  color: hsl(20, 100%, 85%);
-}
-
-/* Highlighter toolbar - breadcrumbs - LTR */
-
-.inspector-breadcrumbs-button {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:not([checked]):hover:active {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-pressed.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[checked] {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-selected.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[checked]:hover:active {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-selected-pressed.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type:not([checked]):hover:active {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-pressed.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type[checked] {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-selected.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type[checked]:hover:active {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-selected-pressed.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end.png") 2 13 2 13 fill stretch;
-}
-
-#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:-moz-locale-dir(ltr):first-of-type {
-  border-left-width: 0;
-}
-
-#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:-moz-locale-dir(ltr):last-of-type {
-  border-right-width: 0;
-}
-
-.inspector-breadcrumbs-button:last-of-type:not([checked]):hover:active {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-pressed.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type[checked] {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-selected.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type[checked]:hover:active {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-selected-pressed.png") 2 13 2 13 fill stretch;
-}
-
-/* Highlighter toolbar - breadcrumbs - RTL */
-
-.inspector-breadcrumbs-button:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:not([checked]):hover:active:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-pressed.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[checked]:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-selected.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[checked]:hover:active:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-selected-pressed.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type:not([checked]):hover:active:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-pressed.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type[checked]:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-selected.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type[checked]:hover:active:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-selected-pressed.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end.png") 2 13 2 13 fill stretch;
-}
-
-#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:-moz-locale-dir(rtl):first-of-type {
-  border-right-width: 0;
-}
-
-#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:last-of-type:-moz-locale-dir(rtl) {
-  border-left-width: 0;
-}
-
-.inspector-breadcrumbs-button:last-of-type:not([checked]):hover:active:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-pressed.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type[checked]:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-selected.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type[checked]:hover:active:-moz-locale-dir(rtl) {
-  border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-selected-pressed.png") 2 13 2 13 fill stretch;
-}
-
 #inspector-searchbox {
   transition-property: max-width, -moz-padding-end, -moz-padding-start;
diff --git a/browser/themes/windows/devtools/widgets.css b/browser/themes/windows/devtools/widgets.css
new file mode 100644
--- /dev/null
+++ b/browser/themes/windows/devtools/widgets.css
@@ -0,0 +1,607 @@
+/* vim:set ts=2 sw=2 sts=2 et: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/* BreacrumbsWidget */
+
+.breadcrumbs-widget-container {
+  -moz-margin-end: 3px;
+  /* A fake 1px-shadow is included in the border-images of the
+     breadcrumbs-widget-items, to match toolbar-buttons style.
+     This negative margin compensates the extra row of pixels created
+     by the shadow.*/
+  margin: -1px 0;
+}
+
+/* Preloading hack, LTR */
+
+.breadcrumbs-widget-container:-moz-locale-dir(ltr)::after {
+  content: '';
+  display: block;
+  background-image:
+    url(breadcrumbs/ltr-start.png),
+    url(breadcrumbs/ltr-start-selected.png),
+    url(breadcrumbs/ltr-start-pressed.png),
+    url(breadcrumbs/ltr-start-selected-pressed.png),
+    url(breadcrumbs/ltr-middle.png),
+    url(breadcrumbs/ltr-middle-selected.png),
+    url(breadcrumbs/ltr-middle-pressed.png),
+    url(breadcrumbs/ltr-middle-selected-pressed.png),
+    url(breadcrumbs/ltr-end.png),
+    url(breadcrumbs/ltr-end-selected.png),
+    url(breadcrumbs/ltr-end-pressed.png),
+    url(breadcrumbs/ltr-end-selected-pressed.png);
+}
+
+/* Preloading hack, RTL */
+
+.breadcrumbs-widget-container:-moz-locale-dir(rtl)::after {
+  content: '';
+  display: block;
+  background-image:
+    url(breadcrumbs/rtl-start.png),
+    url(breadcrumbs/rtl-start-selected.png),
+    url(breadcrumbs/rtl-start-pressed.png),
+    url(breadcrumbs/rtl-start-selected-pressed.png),
+    url(breadcrumbs/rtl-middle.png),
+    url(breadcrumbs/rtl-middle-selected.png),
+    url(breadcrumbs/rtl-middle-pressed.png),
+    url(breadcrumbs/rtl-middle-selected-pressed.png),
+    url(breadcrumbs/rtl-end.png),
+    url(breadcrumbs/rtl-end-selected.png),
+    url(breadcrumbs/rtl-end-pressed.png),
+    url(breadcrumbs/rtl-end-selected-pressed.png);
+}
+
+.scrollbutton-up,
+.scrollbutton-down {
+  -moz-appearance: none;
+  background: -moz-linear-gradient(hsla(212,7%,57%,.35), hsla(212,7%,57%,.1)) padding-box;
+  box-shadow: 0 1px 0 hsla(210,16%,76%,.15) inset,
+              0 0 0 1px hsla(210,16%,76%,.15) inset,
+              0 1px 0 hsla(210,16%,76%,.15);
+  border: 1px solid hsla(210,8%,5%,.45);
+  margin: 1px 0 1px;
+}
+
+.scrollbutton-up:not([disabled]):active:hover,
+.scrollbutton-down:not([disabled]):active:hover {
+  background: -moz-linear-gradient(hsla(220,6%,10%,.3), hsla(212,7%,57%,.15) 65%, hsla(212,7%,57%,.3));
+  box-shadow: 0 0 3px hsla(210,8%,5%,.25) inset,
+              0 1px 3px hsla(210,8%,5%,.25) inset,
+              0 1px 0 hsla(210,16%,76%,.15);
+  border-color: hsla(210,8%,5%,.6);
+}
+
+.scrollbutton-up > .toolbarbutton-icon,
+.scrollbutton-down > .toolbarbutton-icon {
+  -moz-appearance: none;
+  list-style-image: url("breadcrumbs-scrollbutton.png");
+  -moz-image-region: rect(0px,7px,16px,0px);
+  margin: 0 5px;
+}
+
+.scrollbutton-up:not([disabled]):active:hover > .toolbarbutton-icon,
+.scrollbutton-down:not([disabled]):active:hover > .toolbarbutton-icon {
+  -moz-image-region: rect(0px,14px,16px,7px);
+}
+
+.scrollbutton-up[disabled] > .toolbarbutton-icon,
+.scrollbutton-down[disabled] > .toolbarbutton-icon {
+  opacity: 0.5;
+}
+
+.scrollbutton-up > .toolbarbutton-icon:-moz-locale-dir(rtl),
+.scrollbutton-down > .toolbarbutton-icon:-moz-locale-dir(ltr) {
+  transform: scaleX(-1);
+}
+
+.breadcrumbs-widget-item {
+  background-color: transparent;
+  -moz-appearance: none;
+  overflow: hidden;
+  min-width: 85px;
+  min-height: 25px;
+  border-style: solid;
+  border-width: 2px 13px;
+  margin: 0 -11px 0 0;
+  padding: 0 9px;
+  outline: none;
+  color: hsl(210,30%,85%);
+}
+
+.breadcrumbs-widget-item:-moz-focusring > label {
+  border-bottom: 1px dotted hsla(210,30%,85%,0.4);
+}
+
+.breadcrumbs-widget-item:-moz-focusring > .button-box {
+  border-width: 0;
+}
+
+.breadcrumbs-widget-item[checked] .breadcrumbs-widget-item-tag {
+  color: hsl(208,100%,60%);
+}
+
+.breadcrumbs-widget-item[checked] .breadcrumbs-widget-item-id {
+  color: hsl(205,100%,70%);
+}
+
+.breadcrumbs-widget-item[checked] .breadcrumbs-widget-item-pseudo-classes {
+  color: hsl(20,100%,70%);
+}
+
+.breadcrumbs-widget-item-id,
+.breadcrumbs-widget-item-classes {
+  color: #8d99a6;
+}
+
+.breadcrumbs-widget-item-pseudo-classes {
+  color: hsl(20,100%,85%);
+}
+
+/* Breadcrumbs LTR */
+
+.breadcrumbs-widget-item:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-middle.png") 2 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:not([checked]):hover:active:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-middle-pressed.png") 2 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item[checked]:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-middle-selected.png") 2 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item[checked]:hover:active:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-middle-selected-pressed.png") 2 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:first-of-type:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-start.png") 2 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:first-of-type:not([checked]):hover:active:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-start-pressed.png") 2 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:first-of-type[checked]:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-start-selected.png") 2 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:first-of-type[checked]:hover:active:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-start-selected-pressed.png") 2 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:last-of-type:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-end.png") 2 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:last-of-type:not([checked]):hover:active:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-end-pressed.png") 2 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:last-of-type[checked]:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-end-selected.png") 2 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:last-of-type[checked]:hover:active:-moz-locale-dir(ltr) {
+  border-image: url("breadcrumbs/ltr-end-selected-pressed.png") 2 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-container[overflows] > .breadcrumbs-widget-item:first-of-type:-moz-locale-dir(ltr) {
+  border-left-width: 0;
+}
+
+.breadcrumbs-widget-container[overflows] > .breadcrumbs-widget-item:last-of-type:-moz-locale-dir(ltr) {
+  border-right-width: 0;
+}
+
+/* Breadcrumbs RTL */
+
+.breadcrumbs-widget-item:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-middle.png") 2 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:not([checked]):hover:active:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-middle-pressed.png") 2 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item[checked]:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-middle-selected.png") 2 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item[checked]:hover:active:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-middle-selected-pressed.png") 2 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:first-of-type:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-start.png") 2 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:first-of-type:not([checked]):hover:active:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-start-pressed.png") 2 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:first-of-type[checked]:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-start-selected.png") 2 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:first-of-type[checked]:hover:active:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-start-selected-pressed.png") 2 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:last-of-type:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-end.png") 2 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:last-of-type:not([checked]):hover:active:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-end-pressed.png") 2 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:last-of-type[checked]:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-end-selected.png") 2 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-item:last-of-type[checked]:hover:active:-moz-locale-dir(rtl) {
+  border-image: url("breadcrumbs/rtl-end-selected-pressed.png") 2 13 2 13 fill stretch;
+}
+
+.breadcrumbs-widget-container[overflows] > .breadcrumbs-widget-item:first-of-type:-moz-locale-dir(rtl) {
+  border-right-width: 0;
+}
+
+.breadcrumbs-widget-container[overflows] > .breadcrumbs-widget-item:last-of-type:-moz-locale-dir(rtl) {
+  border-left-width: 0;
+}
+
+/* SideMenuWidget */
+
+.side-menu-widget-container {
+  background: url(background-noise-toolbar.png), hsl(208,11%,27%);
+  color: #fff;
+}
+
+.side-menu-widget-container:-moz-locale-dir(ltr),
+.side-menu-widget-item-or-group:-moz-locale-dir(ltr) {
+  box-shadow: inset -1px 0 0 #222426;
+}
+
+.side-menu-widget-container:-moz-locale-dir(rtl),
+.side-menu-widget-item-or-group:-moz-locale-dir(rtl) {
+  box-shadow: inset 1px 0 0 #222426;
+}
+
+.side-menu-widget-group-title {
+  background-image: linear-gradient(#1f3e4f, #1b3243);
+  box-shadow: 0 1px 0 hsla(0,0%,100%,.05) inset,
+              0 -2px 0 hsla(206,37%,4%,.05) inset,
+              0 -1px 1px hsla(206,37%,4%,.1) inset;
+  text-shadow: 0 -1px 0 hsla(210,8%,5%,.45);
+  padding: 4px;
+  color: #f5f7fa;
+}
+
+.side-menu-widget-item {
+  border-top: 1px solid hsla(210,16%,76%,.1);
+  border-bottom: 1px solid hsla(210,8%,5%,.25);
+  cursor: pointer;
+}
+
+.side-menu-widget-item:last-of-type {
+  box-shadow: 0 1px 0 hsla(210,16%,76%,.1);
+}
+
+.side-menu-widget-item.selected {
+  background: -moz-linear-gradient(hsl(206,61%,40%), hsl(206,61%,31%)) repeat-x top left;
+  box-shadow: inset 0 1px 0 hsla(210,40%,83%,.15),
+              inset 0 -1px 0 hsla(210,40%,83%,.05);
+  border-top: 0;
+  padding-top: 1px;
+}
+
+.side-menu-widget-item-arrow {
+  -moz-margin-start: -8px;
+  width: 8px;
+}
+
+.side-menu-widget-item.selected > .side-menu-widget-item-arrow {
+  margin-top: -1px; /* Selection removes the top border, offset by 1 pixel */
+  background-size: auto, 1px 100%;
+  background-repeat: no-repeat;
+}
+
+.side-menu-widget-item.selected > .side-menu-widget-item-arrow:-moz-locale-dir(ltr) {
+  background-image: url(itemArrow-ltr.png), -moz-linear-gradient(left, black, black);
+  background-position: center right, top right;
+}
+
+.side-menu-widget-item.selected > .side-menu-widget-item-arrow:-moz-locale-dir(rtl) {
+  background-image: url(itemArrow-rtl.png), -moz-linear-gradient(left, black, black);
+  background-position: center left, top left;
+}
+
+.side-menu-widget-item-contents {
+  padding: 4px;
+}
+
+.side-menu-widget-item-label {
+  cursor: inherit;
+}
+
+.side-menu-widget-item-other {
+  background: url(background-noise-toolbar.png), hsla(208,11%,27%, 0.65);
+  margin: 0 -4px;
+  -moz-padding-start: 5px;
+}
+
+.side-menu-widget-item-other.selected {
+  background: url(background-noise-toolbar.png), hsla(208,11%,27%, 0.15);
+  box-shadow: inset 0 1px 0 hsla(210,40%,83%,.07),
+              inset 0 -1px 0 hsla(210,40%,83%,.07);
+}
+
+.side-menu-widget-item.selected .side-menu-widget-item-other:first-of-type {
+  border-top: 1px dotted #333;
+  margin-top: 3px;
+}
+
+.side-menu-widget-item-other:first-of-type {
+  margin-top: 4px;
+}
+
+.side-menu-widget-item-other:last-of-type {
+  margin-bottom: -4px;
+}
+
+.side-menu-widget-item-other > label {
+  cursor: inherit;
+  color: #f5f7fa;
+  text-shadow: 0 1px 1px #111;
+}
+
+.side-menu-widget-empty-notice-container {
+  background: url(background-noise-toolbar.png), hsl(208,11%,27%);
+  padding: 12px;
+  color: #fff;
+  font-weight: 600;
+}
+
+/* VariablesView */
+
+.variables-view-container {
+  background: #fff;
+}
+
+.variables-view-empty-notice {
+  color: GrayText;
+  padding: 2px;
+}
+
+.variables-view-scope > .title {
+  color: #fff;
+}
+
+.variables-view-scope:focus > .title {
+  background: Highlight;
+  color: HighlightText;
+}
+
+.variables-view-scope > .variables-view-element-details:not(:empty) {
+  margin-top: 1px;
+  -moz-margin-start: 2px;
+  -moz-margin-end: 1px;
+}
+
+.variables-view-scope > .variables-view-element-details.nonenum:not(:empty) {
+  border-top: 1px solid #ddd;
+}
+
+/* Generic traits applied to both variables and properties */
+
+.variable-or-property {
+  transition: background 1s ease-in-out;
+}
+
+.variable-or-property[changed] {
+  background: rgba(255,255,0,0.65);
+  transition-duration: 0.4s;
+}
+
+.variable-or-property > .title > .value {
+  -moz-padding-start: 6px;
+  -moz-padding-end: 4px;
+}
+
+.variable-or-property:focus > .title {
+  background: Highlight;
+  color: HighlightText;
+  border-radius: 4px;
+}
+
+.variable-or-property[editable] > .title > .value {
+  cursor: text;
+}
+
+.variable-or-property:not([non-header]) > .variables-view-element-details {
+  -moz-margin-start: 10px;
+}
+
+/* Custom variables and properties traits */
+
+.variables-view-variable {
+  -moz-margin-start: 1px;
+  -moz-margin-end: 1px;
+  border-bottom: 1px solid #eee;
+}
+
+.variables-view-variable > .title > .name {
+  font-weight: 600;
+}
+
+.variables-view-variable:not(:focus) > .title > .name {
+  color: #048;
+}
+
+.variables-view-property:not(:focus) > .title > .name {
+  color: #881090;
+}
+
+/* Token value colors */
+
+.variable-or-property:not(:focus) > .title > .token-undefined {
+  color: #bbb;
+}
+
+.variable-or-property:not(:focus) > .title > .token-null {
+  color: #999;
+}
+
+.variable-or-property:not(:focus) > .title > .token-boolean {
+  color: #777;
+}
+
+.variable-or-property:not(:focus) > .title > .token-number {
+  color: #c40a16;
+}
+
+.variable-or-property:not(:focus) > .title > .token-string {
+  max-width: 30em;
+  color: #1c00cf;
+}
+
+.variable-or-property:not(:focus) > .title > .token-other {
+  color: #333;
+}
+
+/* Non enumerable, configurable and writable variables and properties */
+
+.variable-or-property[proto] > .title > .name,
+.variable-or-property[non-enumerable]:not([self]):not([exception]) > .title > .name {
+  opacity: 0.5;
+}
+
+.variable-or-property[non-configurable] > .title > .name {
+  border-bottom: 1px dashed #99f;
+}
+
+.variable-or-property[non-configurable][non-writable] > .title > .name {
+  border-bottom: 1px dashed #f99;
+}
+
+.variable-or-property[non-writable] > .title:after {
+  content: " ";
+  display: inline-block;
+  background: url("chrome://browser/skin/identity-icons-https.png") no-repeat;
+  width: 16px;
+  height: 16px;
+  opacity: 0.5;
+}
+
+@media (min-resolution: 2dppx) {
+  .variable-or-property[non-writable] > .title:after {
+    background-image: url("chrome://browser/skin/identity-icons-https@2x.png");
+    background-size: 32px;
+  }
+}
+
+.variable-or-property[exception]:not(:focus) > .title > .name {
+  color: #a00;
+  text-shadow: 0 0 8px #fcc;
+}
+
+/* Variables and properties tooltips */
+
+.variable-or-property > tooltip > label {
+  margin: 0 2px 0 2px;
+}
+
+.variable-or-property[non-enumerable] > tooltip > label[value=enumerable],
+.variable-or-property[non-configurable] > tooltip > label[value=configurable],
+.variable-or-property[non-writable] > tooltip > label[value=writable] {
+  text-decoration: line-through;
+}
+
+/* Variables and properties editing */
+
+.variables-view-delete {
+  list-style-image: url("chrome://browser/skin/devtools/toolbarbutton-close.png");
+  -moz-image-region: rect(0,32px,16px,16px);
+  opacity: 0;
+}
+
+.variables-view-delete:hover {
+  opacity: 1;
+}
+
+*:hover > .title > .variables-view-delete:not(:hover),
+*:focus > .title > .variables-view-delete:not(:hover) {
+  opacity: 0.5;
+  transition: opacity 0.2s ease-in-out;
+}
+
+.variables-view-delete > .toolbarbutton-text {
+  display: none;
+}
+
+.variables-view-edit {
+  background: url("chrome://browser/skin/tabview/edit-light.png") center no-repeat;
+  width: 20px;
+  height: 16px;
+  cursor: pointer;
+}
+
+.variables-view-throbber {
+  background: url("chrome://global/skin/icons/loading_16.png") center no-repeat;
+  width: 16px;
+  height: 16px;
+}
+
+.element-value-input {
+  -moz-margin-start: 4px !important;
+  -moz-margin-end: 2px !important;
+}
+
+.element-name-input {
+  -moz-margin-start: -2px !important;
+  -moz-margin-end: 2px !important;
+  color: #048;
+  font-weight: 600;
+}
+
+.element-value-input,
+.element-name-input {
+  border: 1px solid #999 !important;
+  box-shadow: 1px 2px 4px #aaa;
+}
+
+/* Variables and properties searching */
+
+.variables-view-searchinput {
+  min-height: 24px;
+}
+
+.variable-or-property[non-match] {
+  border: none;
+  margin: 0;
+}
+
+/* Expand/collapse arrow */
+
+.arrow {
+  background: url("chrome://global/skin/tree/twisty-clsd.png") center center no-repeat;
+  width: 9px;
+  height: 9px;
+  margin-top: -2px;
+  -moz-margin-start: 5px;
+  -moz-margin-end: 5px;
+}
+
+.arrow[open] {
+  background-image: url("chrome://global/skin/tree/twisty-open.png");
+}
+
+.arrow[invisible] {
+  visibility: hidden;
+}
diff --git a/browser/themes/windows/jar.mn b/browser/themes/windows/jar.mn
--- a/browser/themes/windows/jar.mn
+++ b/browser/themes/windows/jar.mn
@@ -138,4 +138,5 @@ browser.jar:
         skin/classic/browser/tabview/tabview.css                    (tabview/tabview.css)
 *       skin/classic/browser/devtools/common.css                    (devtools/common.css)
+        skin/classic/browser/devtools/widgets.css                   (devtools/widgets.css)
         skin/classic/browser/devtools/arrows.png                    (devtools/arrows.png)
         skin/classic/browser/devtools/commandline.png               (devtools/commandline.png)
