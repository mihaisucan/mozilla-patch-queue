# HG changeset patch
# Parent 4a496e6b99af3f6eae4025dda2748337d3b21585
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1367495591 -10800

Bug 865871 - Allow object inspector to be closed by pressing Escape; r=past

diff --git a/browser/devtools/webconsole/test/Makefile.in b/browser/devtools/webconsole/test/Makefile.in
--- a/browser/devtools/webconsole/test/Makefile.in
+++ b/browser/devtools/webconsole/test/Makefile.in
@@ -117,30 +117,31 @@ MOCHITEST_BROWSER_FILES = \
 	browser_repeated_messages_accuracy.js \
 	browser_webconsole_bug_821877_csp_errors.js \
 	browser_eval_in_debugger_stackframe.js \
 	browser_console_variables_view.js \
 	browser_console_variables_view_while_debugging.js \
 	browser_console.js \
 	browser_longstring_hang.js \
 	browser_console_consolejsm_output.js \
-  browser_webconsole_bug_837351_securityerrors.js \
+	browser_webconsole_bug_837351_securityerrors.js \
+	browser_bug_865871_variables_view_close_on_esc_key.js \
 	head.js \
 	$(NULL)
 
 ifeq ($(OS_ARCH), Darwin)
 MOCHITEST_BROWSER_FILES += \
-        browser_webconsole_bug_804845_ctrl_key_nav.js \
+	browser_webconsole_bug_804845_ctrl_key_nav.js \
         $(NULL)
 endif
 
 ifeq ($(OS_ARCH),WINNT)
 MOCHITEST_BROWSER_FILES += \
-		browser_webconsole_bug_623749_ctrl_a_select_all_winnt.js \
-		$(NULL)
+	browser_webconsole_bug_623749_ctrl_a_select_all_winnt.js \
+	$(NULL)
 endif
 
 MOCHITEST_BROWSER_FILES += \
 	test-console.html \
 	test-network.html \
 	test-network-request.html \
 	test-mutation.html \
 	testscript.js \
@@ -220,12 +221,12 @@ MOCHITEST_BROWSER_FILES += \
 	test-repeated-messages.html \
 	test-bug-766001-console-log.js \
 	test-bug-766001-js-console-links.html \
 	test-bug-766001-js-errors.js \
 	test-bug-821877-csperrors.html \
 	test-bug-821877-csperrors.html^headers^ \
 	test-eval-in-stackframe.html \
 	test-bug-859170-longstring-hang.html \
-  test-bug-837351-security-errors.html \
+	test-bug-837351-security-errors.html \
 	$(NULL)
 
 include $(topsrcdir)/config/rules.mk
diff --git a/browser/devtools/webconsole/test/browser_bug_865871_variables_view_close_on_esc_key.js b/browser/devtools/webconsole/test/browser_bug_865871_variables_view_close_on_esc_key.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/webconsole/test/browser_bug_865871_variables_view_close_on_esc_key.js
@@ -0,0 +1,98 @@
+/*
+ * Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/
+ */
+
+// Check that the variables view sidebar can be closed by pressing Escape in the
+// web console.
+
+const TEST_URI = "http://example.com/browser/browser/devtools/webconsole/test/test-eval-in-stackframe.html";
+
+let gWebConsole, gJSTerm, gVariablesView;
+
+function test()
+{
+  registerCleanupFunction(() => {
+    gWebConsole = gJSTerm = gVariablesView = null;
+  });
+
+  addTab(TEST_URI);
+  browser.addEventListener("load", function onLoad() {
+    browser.removeEventListener("load", onLoad, true);
+    openConsole(null, consoleOpened);
+  }, true);
+}
+
+function consoleOpened(hud)
+{
+  gWebConsole = hud;
+  gJSTerm = hud.jsterm;
+  gJSTerm.execute("fooObj", onExecuteFooObj);
+}
+
+function onExecuteFooObj()
+{
+  let msg = gWebConsole.outputNode.querySelector(".webconsole-msg-output");
+  ok(msg, "output message found");
+  isnot(msg.textContent.indexOf("[object Object]"), -1, "message text check");
+
+  gJSTerm.once("variablesview-fetched", onFooObjFetch);
+  EventUtils.synthesizeMouse(msg, 2, 2, {}, gWebConsole.iframeWindow)
+}
+
+function onFooObjFetch(aEvent, aVar)
+{
+  gVariablesView = aVar._variablesView;
+  ok(gVariablesView, "variables view object");
+
+  findVariableViewProperties(aVar, [
+    { name: "testProp", value: "testValue" },
+  ], { webconsole: gWebConsole }).then(onTestPropFound);
+}
+
+function onTestPropFound(aResults)
+{
+  let prop = aResults[0].matchedProp;
+  ok(prop, "matched the |testProp| property in the variables view");
+
+  is(content.wrappedJSObject.fooObj.testProp, aResults[0].value,
+     "|fooObj.testProp| value is correct");
+
+  gVariablesView.window.focus();
+  gJSTerm.once("sidebar-closed", onSidebarClosed);
+  EventUtils.synthesizeKey("VK_ESCAPE", {}, gVariablesView.window);
+}
+
+function onSidebarClosed()
+{
+  gJSTerm.clearOutput();
+  gJSTerm.execute("window", onExecuteWindow);
+}
+
+function onExecuteWindow()
+{
+  let msg = gWebConsole.outputNode.querySelector(".webconsole-msg-output");
+  ok(msg, "output message found");
+  isnot(msg.textContent.indexOf("[object Window]"), -1, "message text check");
+
+  gJSTerm.once("variablesview-fetched", onWindowFetch);
+  EventUtils.synthesizeMouse(msg, 2, 2, {}, gWebConsole.iframeWindow)
+}
+
+function onWindowFetch(aEvent, aVar)
+{
+  gVariablesView = aVar._variablesView;
+  ok(gVariablesView, "variables view object");
+
+  findVariableViewProperties(aVar, [
+    { name: "foo", value: "globalFooBug783499" },
+  ], { webconsole: gWebConsole }).then(onFooFound);
+}
+
+function onFooFound(aResults)
+{
+  gVariablesView.window.focus();
+  gJSTerm.once("sidebar-closed", finishTest);
+  EventUtils.synthesizeKey("VK_ESCAPE", {}, gVariablesView.window);
+}
+
diff --git a/browser/devtools/webconsole/test/browser_console.js b/browser/devtools/webconsole/test/browser_console.js
--- a/browser/devtools/webconsole/test/browser_console.js
+++ b/browser/devtools/webconsole/test/browser_console.js
@@ -1,16 +1,16 @@
 /*
  * Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
 // Test the basic features of the Browser Console, bug 587757.
 
-const TEST_URI = "http://example.com/browser/browser/devtools/webconsole/test/test-eval-in-stackframe.html";
+const TEST_URI = "http://example.com/browser/browser/devtools/webconsole/test/test-console.html?" + Date.now();
 
 function test()
 {
   HUDConsoleUI.toggleBrowserConsole().then(consoleOpened);
 }
 
 function consoleOpened(hud)
 {
diff --git a/browser/devtools/webconsole/test/browser_console_variables_view.js b/browser/devtools/webconsole/test/browser_console_variables_view.js
--- a/browser/devtools/webconsole/test/browser_console_variables_view.js
+++ b/browser/devtools/webconsole/test/browser_console_variables_view.js
@@ -1,15 +1,14 @@
 /*
  * Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
-// Test that makes sure web console eval happens in the user-selected stackframe
-// from the js debugger.
+// Check that variables view works as expected in the web console.
 
 const TEST_URI = "http://example.com/browser/browser/devtools/webconsole/test/test-eval-in-stackframe.html";
 
 let gWebConsole, gJSTerm, gVariablesView;
 
 function test()
 {
   addTab(TEST_URI);
diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -1100,17 +1100,20 @@ WebConsoleFrame.prototype = {
     }
 
     // Make the node bring up the variables view, to allow the user to inspect
     // the stack trace.
     if (level == "trace") {
       node._stacktrace = aMessage.stacktrace;
 
       this.makeOutputMessageLink(node, () =>
-        this.jsterm.openVariablesView({ rawObject: node._stacktrace }));
+        this.jsterm.openVariablesView({
+          rawObject: node._stacktrace,
+          autofocus: true,
+        }));
     }
 
     return node;
   },
 
   /**
    * Handle ConsoleAPICall objects received from the server. This method outputs
    * the window.console API call.
@@ -1131,21 +1134,21 @@ WebConsoleFrame.prototype = {
    * @param nsIDOMNode aAnchor
    *        The object inspector anchor element. This is the clickable element
    *        in the console.log message we display.
    * @param object aObjectActor
    *        The object actor grip.
    */
   _consoleLogClick: function WCF__consoleLogClick(aAnchor, aObjectActor)
   {
-    let options = {
+    this.jsterm.openVariablesView({
       label: aAnchor.textContent,
       objectActor: aObjectActor,
-    };
-    this.jsterm.openVariablesView(options);
+      autofocus: true,
+    });
   },
 
   /**
    * Reports an error in the page source, either JavaScript or CSS.
    *
    * @param nsIScriptError aScriptError
    *        The error message to report.
    * @return nsIDOMElement|undefined
@@ -2643,16 +2646,17 @@ function JSTerm(aWebConsoleFrame)
   this.historyIndex = 0;
   this.historyPlaceHolder = 0;  // this.history.length;
   this._objectActorsInVariablesViews = new Map();
 
   this._keyPress = this.keyPress.bind(this);
   this._inputEventHandler = this.inputEventHandler.bind(this);
   this._fetchVarProperties = this._fetchVarProperties.bind(this);
   this._fetchVarLongString = this._fetchVarLongString.bind(this);
+  this._onKeypressInVariablesView = this._onKeypressInVariablesView.bind(this);
 
   EventEmitter.decorate(this);
 }
 
 JSTerm.prototype = {
   SELECTED_FRAME: -1,
 
   /**
@@ -3001,16 +3005,18 @@ JSTerm.prototype = {
    *        - rawObject: the raw object you want to show in the variables view.
    *        - label: label to display in the variables view for inspected
    *        object.
    *        - hideFilterInput: optional boolean, |true| if you want to hide the
    *        variables view filter input.
    *        - targetElement: optional nsIDOMElement to append the variables view
    *        to. An iframe element is used as a container for the view. If this
    *        option is not used, then the variables view opens in the sidebar.
+   *        - autofocus: optional boolean, |true| if you want to give focus to
+   *        the variables view window after open, |false| otherwise.
    * @return object
    *         A Promise object that is resolved when the variables view has
    *         opened. The new variables view instance is given to the callbacks.
    */
   openVariablesView: function JST_openVariablesView(aOptions)
   {
     let onContainerReady = (aWindow) => {
       let container = aWindow.document.querySelector("#variables");
@@ -3018,20 +3024,25 @@ JSTerm.prototype = {
       if (!view || aOptions.targetElement) {
         let viewOptions = {
           container: container,
           hideFilterInput: aOptions.hideFilterInput,
         };
         view = this._createVariablesView(viewOptions);
         if (!aOptions.targetElement) {
           this._variablesView = view;
+          aWindow.addEventListener("keypress", this._onKeypressInVariablesView);
         }
       }
       aOptions.view = view;
       this._updateVariablesView(aOptions);
+
+      this.sidebar.show();
+      aOptions.autofocus && aWindow.focus();
+
       this.emit("variablesview-open", view, aOptions);
       return view;
     };
 
     let promise;
     if (aOptions.targetElement) {
       let deferred = Promise.defer();
       promise = deferred.promise;
@@ -3043,36 +3054,36 @@ JSTerm.prototype = {
         deferred.resolve(iframe.contentWindow);
       }, true);
 
       iframe.flex = 1;
       iframe.setAttribute("src", VARIABLES_VIEW_URL);
       aOptions.targetElement.appendChild(iframe);
     }
     else {
-      this._createSidebar();
+      if (!this.sidebar) {
+        this._createSidebar();
+      }
       promise = this._addVariablesViewSidebarTab();
     }
 
     return promise.then(onContainerReady);
   },
 
   /**
    * Create the Web Console sidebar.
    *
    * @see devtools/framework/sidebar.js
    * @private
    */
   _createSidebar: function JST__createSidebar()
   {
-    if (!this.sidebar) {
-      let tabbox = this.hud.document.querySelector("#webconsole-sidebar");
-      let ToolSidebar = devtools.require("devtools/framework/sidebar").ToolSidebar;
-      this.sidebar = new ToolSidebar(tabbox, this);
-    }
+    let tabbox = this.hud.document.querySelector("#webconsole-sidebar");
+    let ToolSidebar = devtools.require("devtools/framework/sidebar").ToolSidebar;
+    this.sidebar = new ToolSidebar(tabbox, this);
     this.sidebar.show();
   },
 
   /**
    * Add the variables view tab to the sidebar.
    *
    * @private
    * @return object
@@ -3101,16 +3112,37 @@ JSTerm.prototype = {
       this.sidebar.once("variablesview-ready", onTabReady);
       this.sidebar.addTab("variablesview", VARIABLES_VIEW_URL, true);
     }
 
     return deferred.promise;
   },
 
   /**
+   * The keypress event handler for the Variables View sidebar. Currently this
+   * is used for removing the sidebar when Escape is pressed.
+   *
+   * @private
+   * @param nsIDOMEvent aEvent
+   *        The keypress DOM event object.
+   */
+  _onKeypressInVariablesView: function JST__onKeypressInVariablesView(aEvent)
+  {
+    let tag = aEvent.target.nodeName;
+    if (aEvent.keyCode != Ci.nsIDOMKeyEvent.DOM_VK_ESCAPE || aEvent.shiftKey ||
+        aEvent.altKey || aEvent.ctrlKey || aEvent.metaKey ||
+        ["input", "textarea", "select", "textbox"].indexOf(tag) > -1) {
+        return;
+    }
+
+    this._sidebarDestroy();
+    this.inputNode.focus();
+  },
+
+  /**
    * Create a variables view instance.
    *
    * @private
    * @param object aOptions
    *        Options for the new Variables View instance:
    *        - container: the DOM element where the variables view is inserted.
    *        - hideFilterInput: boolean, if true the variables filter input is
    *        hidden.
@@ -3757,16 +3789,19 @@ JSTerm.prototype = {
     let inputUpdated = false;
 
     switch(aEvent.keyCode) {
       case Ci.nsIDOMKeyEvent.DOM_VK_ESCAPE:
         if (this.autocompletePopup.isOpen) {
           this.clearCompletion();
           aEvent.preventDefault();
         }
+        else if (this.sidebar) {
+          this._sidebarDestroy();
+        }
         break;
 
       case Ci.nsIDOMKeyEvent.DOM_VK_RETURN:
         if (this.autocompletePopup.isOpen && this.autocompletePopup.selectedIndex > -1) {
           this.acceptProposedCompletion();
         }
         else {
           this.execute();
@@ -4162,38 +4197,51 @@ JSTerm.prototype = {
    * @param object aResponse
    *        The JavaScript evaluation response received from the server.
    */
   _evalOutputClick: function JST__evalOutputClick(aResponse)
   {
     this.openVariablesView({
       label: VariablesView.getString(aResponse.result),
       objectActor: aResponse.result,
+      autofocus: true,
     });
   },
 
   /**
-   * Destroy the JSTerm object. Call this method to avoid memory leaks.
+   * Destroy the sidebar.
+   * @private
    */
-  destroy: function JST_destroy()
+  _sidebarDestroy: function JST__sidebarDestroy()
   {
     if (this._variablesView) {
       let actors = this._objectActorsInVariablesViews.get(this._variablesView);
       for (let actor of actors) {
         this.hud._releaseObject(actor);
       }
       actors.clear();
       this._variablesView = null;
     }
 
     if (this.sidebar) {
+      this.sidebar.hide();
       this.sidebar.destroy();
       this.sidebar = null;
     }
 
+    this.emit("sidebar-closed");
+  },
+
+  /**
+   * Destroy the JSTerm object. Call this method to avoid memory leaks.
+   */
+  destroy: function JST_destroy()
+  {
+    this._sidebarDestroy();
+
     this.clearCompletion();
     this.clearOutput();
 
     this.autocompletePopup.destroy();
     this.autocompletePopup = null;
 
     let popup = this.hud.owner.chromeWindow.document
                 .getElementById("webConsole_autocompletePopup");
