# HG changeset patch
# Parent 425a1df0e2863bfcbaa9011d4f900f1fd265eb63
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1367665204 -10800

diff --git a/browser/devtools/webconsole/test/browser_console_variables_view.js b/browser/devtools/webconsole/test/browser_console_variables_view.js
--- a/browser/devtools/webconsole/test/browser_console_variables_view.js
+++ b/browser/devtools/webconsole/test/browser_console_variables_view.js
@@ -65,17 +65,17 @@ function onTestPropFound(aResults)
     webconsole: gWebConsole,
     callback: onFooObjFetchAfterUpdate,
   });
 }
 
 function onFooObjFetchAfterUpdate(aEvent, aVar)
 {
   info("onFooObjFetchAfterUpdate");
-  let para = content.document.querySelector("p");
+  let para = content.wrappedJSObject.document.querySelector("p");
   let expectedValue = content.document.title + content.location + para;
 
   findVariableViewProperties(aVar, [
     { name: "testProp", value: expectedValue },
   ], { webconsole: gWebConsole }).then(onUpdatedTestPropFound);
 }
 
 function onUpdatedTestPropFound(aResults)
@@ -95,17 +95,17 @@ function onUpdatedTestPropFound(aResults
     callback: onFooObjFetchAfterPropRename,
   });
 }
 
 function onFooObjFetchAfterPropRename(aEvent, aVar)
 {
   info("onFooObjFetchAfterPropRename");
 
-  let para = content.document.querySelector("p");
+  let para = content.wrappedJSObject.document.querySelector("p");
   let expectedValue = content.document.title + content.location + para;
 
   // Check that the new value is in the variables view.
   findVariableViewProperties(aVar, [
     { name: "testUpdatedProp", value: expectedValue },
   ], { webconsole: gWebConsole }).then(onRenamedTestPropFound);
 }
 
@@ -129,17 +129,17 @@ function onRenamedTestPropFound(aResults
     callback: onPropUpdateError,
   });
 }
 
 function onPropUpdateError(aEvent, aVar)
 {
   info("onPropUpdateError");
 
-  let para = content.document.querySelector("p");
+  let para = content.wrappedJSObject.document.querySelector("p");
   let expectedValue = content.document.title + content.location + para;
 
   // Make sure the property did not change.
   findVariableViewProperties(aVar, [
     { name: "testUpdatedProp", value: expectedValue },
   ], { webconsole: gWebConsole }).then(onRenamedTestPropFoundAgain);
 }
 
diff --git a/browser/devtools/webconsole/test/browser_console_variables_view_while_debugging.js b/browser/devtools/webconsole/test/browser_console_variables_view_while_debugging.js
--- a/browser/devtools/webconsole/test/browser_console_variables_view_while_debugging.js
+++ b/browser/devtools/webconsole/test/browser_console_variables_view_while_debugging.js
@@ -96,17 +96,17 @@ function onTestPropFound(aResults)
     webconsole: gWebConsole,
     callback: onFooObjFetchAfterUpdate,
   });
 }
 
 function onFooObjFetchAfterUpdate(aEvent, aVar)
 {
   info("onFooObjFetchAfterUpdate");
-  let para = content.document.querySelector("p");
+  let para = content.wrappedJSObject.document.querySelector("p");
   let expectedValue = content.document.title + "foo2SecondCall" + para;
 
   findVariableViewProperties(aVar, [
     { name: "testProp2", value: expectedValue },
   ], { webconsole: gWebConsole }).then(onUpdatedTestPropFound);
 }
 
 function onUpdatedTestPropFound(aResults)
@@ -115,17 +115,17 @@ function onUpdatedTestPropFound(aResults
   ok(prop, "matched the updated |testProp2| property value");
 
   // Check that testProp2 was updated.
   executeSoon(() => gJSTerm.execute("fooObj.testProp2", onExecuteFooObjTestProp2));
 }
 
 function onExecuteFooObjTestProp2()
 {
-  let para = content.document.querySelector("p");
+  let para = content.wrappedJSObject.document.querySelector("p");
   let expected = content.document.title + "foo2SecondCall" + para;
 
   isnot(gWebConsole.outputNode.textContent.indexOf(expected), -1,
         "fooObj.testProp2 is correct");
 
   gWebConsole = gJSTerm = gDebuggerWin = gThread = gDebuggerController =
     gStackframes = gVariablesView = null;
   executeSoon(finishTest);
