# HG changeset patch
# Parent 81a9c890838e7f0ec50a9bb6b3ecc78e824d4a27
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1383686194 -7200

Bug 843004 - Part 1: use the ConsoleOutput API for eval results and for console API messages; r=robcee

diff --git a/browser/devtools/webconsole/console-output.js b/browser/devtools/webconsole/console-output.js
--- a/browser/devtools/webconsole/console-output.js
+++ b/browser/devtools/webconsole/console-output.js
@@ -1,18 +1,24 @@
 /* vim: set ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
+const {Cc, Ci, Cu} = require("chrome");
+
 const Heritage = require("sdk/core/heritage");
 const XHTML_NS = "http://www.w3.org/1999/xhtml";
 const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
+const STRINGS_URI = "chrome://browser/locale/devtools/webconsole.properties";
+
+const WebConsoleUtils = require("devtools/toolkit/webconsole/utils").Utils;
+const l10n = new WebConsoleUtils.l10n(STRINGS_URI);
 
 // Constants for compatibility with the Web Console output implementation before
 // bug 778766.
 // TODO: remove these once bug 778766 is fixed.
 const COMPAT = {
   // The various categories of messages.
   CATEGORIES: {
     NETWORK: 0,
@@ -26,16 +32,35 @@ const COMPAT = {
 
   // The possible message severities.
   SEVERITIES: {
     ERROR: 0,
     WARNING: 1,
     INFO: 2,
     LOG: 3,
   },
+
+  // The preference keys to use for each category/severity combination, indexed
+  // first by category (rows) and then by severity (columns).
+  //
+  // Most of these rather idiosyncratic names are historical and predate the
+  // division of message type into "category" and "severity".
+  PREFERENCE_KEYS: [
+    // Error        Warning       Info    Log
+    [ "network",    "netwarn",    null,   "networkinfo", ],  // Network
+    [ "csserror",   "cssparser",  null,   null,          ],  // CSS
+    [ "exception",  "jswarn",     null,   "jslog",       ],  // JS
+    [ "error",      "warn",       "info", "log",         ],  // Web Developer
+    [ null,         null,         null,   null,          ],  // Input
+    [ null,         null,         null,   null,          ],  // Output
+    [ "secerror",   "secwarn",    null,   null,          ],  // Security
+  ],
+
+  // The indent of a console group in pixels.
+  GROUP_INDENT: 12,
 };
 
 /**
  * The ConsoleOutput object is used to manage output of messages in the Web
  * Console.
  *
  * @constructor
  * @param object owner
@@ -203,16 +228,21 @@ ConsoleOutput.prototype = {
   {
     let selection = this.window.getSelection();
     selection.removeAllRanges();
     let range = this.document.createRange();
     range.selectNodeContents(elem);
     selection.addRange(range);
   },
 
+  openLink: function(url)
+  {
+    this.owner.owner.openLink(url);
+  },
+
   /**
    * Destroy this ConsoleOutput instance.
    */
   destroy: function()
   {
     this.owner = null;
   },
 }; // ConsoleOutput.prototype
@@ -227,16 +257,17 @@ let Messages = {};
  * The BaseMessage object is used for all types of messages. Every kind of
  * message should use this object as its base.
  *
  * @constructor
  */
 Messages.BaseMessage = function()
 {
   this.widgets = new Set();
+  this._anchorClickHandler = this._anchorClickHandler.bind(this);
 };
 
 Messages.BaseMessage.prototype = {
   /**
    * Reference to the ConsoleOutput owner.
    *
    * @type object|null
    *       This is |null| if the message is not yet initialized.
@@ -263,16 +294,24 @@ Messages.BaseMessage.prototype = {
    * Tells if this message is visible or not.
    * @type boolean
    */
   get visible() {
     return this.element && this.element.parentNode;
   },
 
   /**
+   * The owner DOM document.
+   * @type DOMElement
+   */
+  get document() {
+    return this.output.document;
+  },
+
+  /**
    * Holds the text-only representation of the message.
    * @type string
    */
   textContent: "",
 
   /**
    * Set of widgets included in this message.
    * @type Set
@@ -314,17 +353,17 @@ Messages.BaseMessage.prototype = {
       this.element = this._renderCompat();
     }
     return this;
   },
 
   /**
    * Prepare the message container for the Web Console, such that it is
    * compatible with the current implementation.
-   * TODO: remove this once bug 778766.
+   * TODO: remove this once bug 778766 is fixed.
    */
   _renderCompat: function()
   {
     let doc = this.output.document;
     let container = doc.createElementNS(XHTML_NS, "div");
     container.id = "console-msg-" + gSequenceId();
     container.className = "message";
     container.category = this._categoryCompat;
@@ -333,33 +372,48 @@ Messages.BaseMessage.prototype = {
     container.setAttribute("severity", this._severityNameCompat);
     container.setAttribute("filter", this._filterKeyCompat);
     container.clipboardText = this.textContent;
     container.timestamp = this.timestamp;
     container._messageObject = this;
 
     return container;
   },
+
+  _anchorClickHandler: function(event)
+  {
+    this.output.openLink(event.target.href);
+  },
+
+  _addLinkCallback: function(element, callback = this._anchorClickHandler)
+  {
+    // This is going into the WebConsoleFrame object instance that owns
+    // the ConsoleOutput object. The WebConsoleFrame owner is the WebConsole
+    // object instance from hudservice.js.
+    // TODO: move _addMessageLinkCallback() into ConsoleOutput once bug 778766
+    // is fixed.
+    this.output.owner._addMessageLinkCallback(element, callback);
+  },
 }; // Messages.BaseMessage.prototype
 
 
 /**
  * The NavigationMarker is used to show a page load event.
  *
  * @constructor
  * @extends Messages.BaseMessage
  * @param string url
  *        The URL to display.
  * @param number timestamp
  *        The message date and time, milliseconds elapsed since 1 January 1970
  *        00:00:00 UTC.
  */
 Messages.NavigationMarker = function(url, timestamp)
 {
-  Messages.BaseMessage.apply(this, arguments);
+  Messages.BaseMessage.call(this);
   this._url = url;
   this.textContent = "------ " + url;
   this.timestamp = timestamp;
 };
 
 Messages.NavigationMarker.prototype = Heritage.extend(Messages.BaseMessage.prototype,
 {
   /**
@@ -394,37 +448,286 @@ Messages.NavigationMarker.prototype = He
 
     let doc = this.output.document;
     let urlnode = doc.createElementNS(XHTML_NS, "a");
     urlnode.className = "url";
     urlnode.textContent = url;
     urlnode.title = this._url;
     urlnode.href = this._url;
     urlnode.draggable = false;
-
-    // This is going into the WebConsoleFrame object instance that owns
-    // the ConsoleOutput object. The WebConsoleFrame owner is the WebConsole
-    // object instance from hudservice.js.
-    // TODO: move _addMessageLinkCallback() into ConsoleOutput once bug 778766
-    // is fixed.
-    this.output.owner._addMessageLinkCallback(urlnode, () => {
-      this.output.owner.owner.openLink(this._url);
-    });
+    this._addLinkCallback(urlnode);
 
     let render = Messages.BaseMessage.prototype.render.bind(this);
     render().element.appendChild(urlnode);
     this.element.classList.add("navigation-marker");
     this.element.url = this._url;
     this.element.appendChild(doc.createTextNode("\n"));
 
     return this;
   },
 }); // Messages.NavigationMarker.prototype
 
 
+/**
+ * The Simple message is used to show any basic message in the Web Console.
+ *
+ * @constructor
+ * @extends Messages.BaseMessage
+ * @param string|DOMElement message
+ *        The message to display.
+ * @param object [options]
+ *        Options for this message:
+ *        - html: (boolean) tells if |message| is an HTML string or not.
+ *        Defaults to |false|.
+ *        - category: (string) category that this message belongs to. Defaults
+ *        to no category.
+ *        - severity: (string) severity of the message. Defaults to no severity.
+ *        - timestamp: (number) date and time when the message was recorded.
+ *        Defaults to |Date.now()|.
+ *        - link: (string) if provided, the message will be wrapped in an anchor
+ *        pointing to the given URL here.
+ *        - linkCallback: (function) if provided, the message will be wrapped in
+ *        an anchor. The |linkCallback| function will be added as click event
+ *        handler.
+ *        - location: object that tells the message source: url, line, column
+ *        and lineText.
+ *        - className: (string) additional element class names for styling
+ *        purposes.
+ *        - _groupDepthCompat: (number) group depth.
+ *        - _afterMessageElement: (DOMElement) add this message element after
+ *        the given element.
+ */
+Messages.Simple = function(message, options = {})
+{
+  Messages.BaseMessage.call(this);
+
+  this.category = options.category;
+  this.severity = options.severity;
+  this.location = options.location;
+  this.timestamp = options.timestamp || Date.now();
+
+  this._message = message;
+  this._messageIsHTML = options.html;
+  this._className = options.className;
+  this._link = options.link;
+  this._linkCallback = options.linkCallback;
+};
+
+Messages.Simple.prototype = Heritage.extend(Messages.BaseMessage.prototype,
+{
+  /**
+   * Message timestamp.
+   *
+   * @type number
+   *       Milliseconds elapsed since 1 January 1970 00:00:00 UTC.
+   */
+  timestamp: 0,
+
+  get _categoryCompat() {
+    return this.category ?
+           COMPAT.CATEGORIES[this.category.toUpperCase()] : null;
+  },
+  get _severityCompat() {
+    return this.severity ?
+           COMPAT.SEVERITIES[this.severity.toUpperCase()] : null;
+  },
+  get _categoryNameCompat() {
+    return this.category;
+  },
+  get _severityNameCompat() {
+    return this.severity;
+  },
+
+  get _filterKeyCompat() {
+    return this._categoryCompat !== null && this._severityCompat !== null ?
+           COMPAT.PREFERENCE_KEYS[this._categoryCompat][this._severityCompat] :
+           null;
+  },
+
+  /**
+   * Prepare the DOM element for this message.
+   * @return this
+   */
+  render: function()
+  {
+    if (this.element) {
+      return this;
+    }
+
+    let timestamp = new Widgets.MessageTimestamp(this, this.timestamp).render();
+    this.widgets.add(timestamp);
+
+    let icon = this.document.createElementNS(XHTML_NS, "span");
+    icon.className = "icon";
+
+    let body = this._renderBody();
+    let location = this._renderLocation();
+
+    Messages.BaseMessage.prototype.render.call(this);
+    this.element.appendChild(timestamp.element);
+    this.element.appendChild(icon);
+    this.element.appendChild(body);
+    if (location) {
+      this.element.appendChild(location);
+    }
+    this.element.appendChild(this.document.createTextNode("\n"));
+
+    return this;
+  },
+
+  _renderBody: function()
+  {
+    let body = this.document.createElementNS(XHTML_NS, "span");
+    body.className = "body devtools-monospace";
+    if (this._className) {
+      body.className += " " + this._className;
+    }
+
+    let anchor, container = body;
+    if (this._link || this._linkCallback) {
+      container = anchor = this.document.createElementNS(XHTML_NS, "a");
+      anchor.href = this._link || "#";
+      anchor.draggable = false;
+      this._addLinkCallback(anchor, this._linkCallback);
+      body.appendChild(anchor);
+    }
+
+    if (this._message instanceof Ci.nsIDOMElement) {
+      container.appendChild(this._message);
+    } else if (this._messageIsHTML) {
+      container.innerHTML = this._message;
+    } else {
+      container.textContent = this._message;
+    }
+
+    return body;
+  },
+
+  _renderLocation: function()
+  {
+    if (!this.location) {
+      return null;
+    }
+
+    let {url, line} = this.location;
+
+    // The ConsoleOutput owner is a WebConsoleFrame instance from webconsole.js.
+    // TODO: move createLocationNode() into this file when bug 778766 is fixed.
+    return this.output.owner.createLocationNode(url, line);
+  },
+}); // Messages.Simple.prototype
+
+
+
+/**
+ * The JavaScriptEvalOutput message.
+ *
+ * @constructor
+ * @extends Messages.Simple
+ * @param object result
+ *        The message to display.
+ */
+Messages.JavaScriptEvalOutput = function(evalResponse, {onClickObjectActor,
+                                                        errorMessage})
+{
+  let severity = "log", msg;
+
+  if (errorMessage) {
+    severity = "error";
+    msg = errorMessage;
+  } else {
+    msg = VariablesView.getString(evalResponse.result);
+  }
+
+  let options = {
+    timestamp: response.timestamp,
+    category: "output",
+    severity: severity,
+  };
+  Messages.Simple.call(this, msg, options);
+
+  this.evalResponse = evalResponse;
+  this._onClickObjectActor = onClickObjectActor;
+};
+
+Messages.JavaScriptEvalOutput.prototype = Heritage.extend(Messages.Simple.prototype,
+{
+  _renderBody: function()
+  {
+    return Messages.Simple.prototype._renderBody.call(this);
+  },
+}); // Messages.JavaScriptEvalOutput.prototype
+
+
+let Widgets = {};
+
+/**
+ * The base widget class.
+ *
+ * @constructor
+ * @param object message
+ *        The owning message.
+ */
+Widgets.BaseWidget = function(message)
+{
+  this.message = message;
+};
+
+Widgets.BaseWidget.prototype = {
+  message: null,
+  element: null,
+  textContent: "",
+
+  get document() {
+    return this.message.document;
+  },
+
+  render: function() { },
+  destroy: function() { },
+};
+
+/**
+ * The timestamp widget.
+ *
+ * @constructor
+ * @param object message
+ *        The owning message.
+ * @param number timestamp
+ *        The UNIX timestamp to display.
+ */
+Widgets.MessageTimestamp = function(message, timestamp)
+{
+  Widgets.BaseWidget.call(this, message);
+  this.timestamp = timestamp;
+};
+
+Widgets.MessageTimestamp.prototype = Heritage.extend(Widgets.BaseWidget.prototype,
+{
+  render: function()
+  {
+    if (this.element) {
+      return this;
+    }
+
+    this.textContent = l10n.timestampString(this.timestamp);
+    this.element = this.document.createElementNS(XHTML_NS, "span");
+    this.element.className = "timestamp devtools-monospace";
+    this.element.textContent = this.textContent + " ";
+
+    // Apply the current group by indenting appropriately.
+    // TODO: remove this once bug 778766 is fixed.
+    this.element.style.marginRight = this.message._groupDepthCompat *
+                                     COMPAT.GROUP_INDENT + "px";
+
+    return this;
+  },
+});
+
+
 function gSequenceId()
 {
   return gSequenceId.n++;
 }
 gSequenceId.n = 0;
 
 exports.ConsoleOutput = ConsoleOutput;
 exports.Messages = Messages;
+exports.Widgets = Widgets;
diff --git a/browser/devtools/webconsole/hudservice.js b/browser/devtools/webconsole/hudservice.js
--- a/browser/devtools/webconsole/hudservice.js
+++ b/browser/devtools/webconsole/hudservice.js
@@ -6,24 +6,24 @@
 
 "use strict";
 
 const {Cc, Ci, Cu} = require("chrome");
 
 let WebConsoleUtils = require("devtools/toolkit/webconsole/utils").Utils;
 let Heritage = require("sdk/core/heritage");
 
-loader.lazyGetter(this, "promise", () => require("sdk/core/promise"));
 loader.lazyGetter(this, "Telemetry", () => require("devtools/shared/telemetry"));
 loader.lazyGetter(this, "WebConsoleFrame", () => require("devtools/webconsole/webconsole").WebConsoleFrame);
 loader.lazyImporter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
 loader.lazyImporter(this, "devtools", "resource://gre/modules/devtools/Loader.jsm");
 loader.lazyImporter(this, "Services", "resource://gre/modules/Services.jsm");
 loader.lazyImporter(this, "DebuggerServer", "resource://gre/modules/devtools/dbg-server.jsm");
 loader.lazyImporter(this, "DebuggerClient", "resource://gre/modules/devtools/dbg-client.jsm");
+loader.lazyImporter(this, "promise", "resource://gre/modules/Promise.jsm", "Promise");
 
 const STRINGS_URI = "chrome://browser/locale/devtools/webconsole.properties";
 let l10n = new WebConsoleUtils.l10n(STRINGS_URI);
 
 const BROWSER_CONSOLE_WINDOW_FEATURES = "chrome,titlebar,toolbar,centerscreen,resizable,dialog=no";
 
 // The preference prefix for all of the Browser Console filters.
 const BROWSER_CONSOLE_FILTER_PREFS_PREFIX = "devtools.browserconsole.filter.";
diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -9,17 +9,16 @@
 const {Cc, Ci, Cu} = require("chrome");
 
 let WebConsoleUtils = require("devtools/toolkit/webconsole/utils").Utils;
 
 loader.lazyServiceGetter(this, "clipboardHelper",
                          "@mozilla.org/widget/clipboardhelper;1",
                          "nsIClipboardHelper");
 loader.lazyImporter(this, "Services", "resource://gre/modules/Services.jsm");
-loader.lazyGetter(this, "promise", () => require("sdk/core/promise"));
 loader.lazyGetter(this, "EventEmitter", () => require("devtools/shared/event-emitter"));
 loader.lazyGetter(this, "AutocompletePopup",
                   () => require("devtools/shared/autocomplete-popup").AutocompletePopup);
 loader.lazyGetter(this, "ToolSidebar",
                   () => require("devtools/framework/sidebar").ToolSidebar);
 loader.lazyGetter(this, "NetworkPanel",
                   () => require("devtools/webconsole/network-panel").NetworkPanel);
 loader.lazyGetter(this, "ConsoleOutput",
@@ -27,16 +26,17 @@ loader.lazyGetter(this, "ConsoleOutput",
 loader.lazyGetter(this, "Messages",
                   () => require("devtools/webconsole/console-output").Messages);
 loader.lazyImporter(this, "EnvironmentClient", "resource://gre/modules/devtools/dbg-client.jsm");
 loader.lazyImporter(this, "ObjectClient", "resource://gre/modules/devtools/dbg-client.jsm");
 loader.lazyImporter(this, "VariablesView", "resource:///modules/devtools/VariablesView.jsm");
 loader.lazyImporter(this, "VariablesViewController", "resource:///modules/devtools/VariablesViewController.jsm");
 loader.lazyImporter(this, "PluralForm", "resource://gre/modules/PluralForm.jsm");
 loader.lazyImporter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
+loader.lazyImporter(this, "promise", "resource://gre/modules/Promise.jsm", "Promise");
 
 const STRINGS_URI = "chrome://browser/locale/devtools/webconsole.properties";
 let l10n = new WebConsoleUtils.l10n(STRINGS_URI);
 
 const XHTML_NS = "http://www.w3.org/1999/xhtml";
 
 const MIXED_CONTENT_LEARN_MORE = "https://developer.mozilla.org/docs/Security/MixedContent";
 
@@ -47,20 +47,16 @@ const STRICT_TRANSPORT_SECURITY_LEARN_MO
 const HELP_URL = "https://developer.mozilla.org/docs/Tools/Web_Console/Helpers";
 
 const VARIABLES_VIEW_URL = "chrome://browser/content/devtools/widgets/VariablesView.xul";
 
 const CONSOLE_DIR_VIEW_HEIGHT = 0.6;
 
 const IGNORED_SOURCE_URLS = ["debugger eval code", "self-hosted"];
 
-// The amount of time in milliseconds that must pass between messages to
-// trigger the display of a new group.
-const NEW_GROUP_DELAY = 5000;
-
 // The amount of time in milliseconds that we wait before performing a live
 // search.
 const SEARCH_DELAY = 200;
 
 // The number of lines that are displayed in the console output by default, for
 // each category. The user can change this number by adjusting the hidden
 // "devtools.hud.loglimit.{network,cssparser,exception,console}" preferences.
 const DEFAULT_LOG_LIMIT = 200;
@@ -1462,17 +1458,17 @@ WebConsoleFrame.prototype = {
     mixedContentWarningNode.title = MIXED_CONTENT_LEARN_MORE;
     mixedContentWarningNode.href = MIXED_CONTENT_LEARN_MORE;
     mixedContentWarningNode.className = "learn-more-link";
     mixedContentWarningNode.textContent = mixedContentWarning;
     mixedContentWarningNode.draggable = false;
 
     aLinkNode.appendChild(mixedContentWarningNode);
 
-    this._addMessageLinkCallback(mixedContentWarningNode, (aNode, aEvent) => {
+    this._addMessageLinkCallback(mixedContentWarningNode, (aEvent) => {
       aEvent.stopPropagation();
       this.owner.openLink(MIXED_CONTENT_LEARN_MORE);
     });
   },
 
   /**
    * Adds a more info link node to messages based on the nsIScriptError object
    * that we need to report to the console
@@ -1523,17 +1519,17 @@ WebConsoleFrame.prototype = {
 
     let warningNode = this.document.createElementNS(XHTML_NS, "a");
     warningNode.title = aURL;
     warningNode.href = aURL;
     warningNode.draggable = false;
     warningNode.textContent = moreInfoLabel;
     warningNode.className = "learn-more-link";
 
-    this._addMessageLinkCallback(warningNode, (aNode, aEvent) => {
+    this._addMessageLinkCallback(warningNode, (aEvent) => {
       aEvent.stopPropagation();
       this.owner.openLink(aURL);
     });
 
     aNode.appendChild(warningNode);
   },
 
   /**
@@ -2729,17 +2725,17 @@ WebConsoleFrame.prototype = {
 
       // If this event started with a mousedown event and it ends at a different
       // location, we consider this text selection.
       if (mousedown && this._startX != aEvent.clientX &&
           this._startY != aEvent.clientY) {
         return;
       }
 
-      aCallback(this, aEvent);
+      aCallback.call(this, aEvent);
     }, false);
   },
 
   /**
    * Copies the selected items to the system clipboard.
    *
    * @param object aOptions
    *        - linkOnly:
@@ -2943,16 +2939,17 @@ function JSTerm(aWebConsoleFrame)
   // This is reset to this.history.length when this.execute() is invoked.
   this.historyPlaceHolder = 0;
   this._objectActorsInVariablesViews = new Map();
 
   this._keyPress = this._keyPress.bind(this);
   this._inputEventHandler = this._inputEventHandler.bind(this);
   this._focusEventHandler = this._focusEventHandler.bind(this);
   this._onKeypressInVariablesView = this._onKeypressInVariablesView.bind(this);
+  this._onClickObjectActor = this._onClickObjectActor.bind(this);
 
   EventEmitter.decorate(this);
 }
 
 JSTerm.prototype = {
   SELECTED_FRAME: -1,
 
   /**
@@ -3154,57 +3151,62 @@ JSTerm.prototype = {
     // Hide undefined results coming from JSTerm helper functions.
     if (!errorMessage && result && typeof result == "object" &&
         result.type == "undefined" &&
         helperResult && !helperHasRawOutput) {
       aCallback && aCallback();
       return;
     }
 
-    let node;
-
+    let msg;
+    let options = {
+      onClickObjectActor: this._onClickObjectActor,
+      errorMessage: errorMessage,
+      _afterMessageElement: aAfterNode,
+    };
+
+    let msg = new Messages.JavaScriptEvalOutput(aResponse, options);
     if (errorMessage) {
-      node = this.writeOutput(errorMessage, CATEGORY_OUTPUT, SEVERITY_ERROR,
-                              aAfterNode, aResponse.timestamp);
-    }
-    else if (inspectable) {
-      node = this.writeOutputJS(resultString,
-                                this._evalOutputClick.bind(this, aResponse),
-                                aAfterNode, aResponse.timestamp);
+      options.severity = "error";
     }
     else {
-      node = this.writeOutput(resultString, CATEGORY_OUTPUT, SEVERITY_LOG,
-                              aAfterNode, aResponse.timestamp);
-    }
+      if (inspectable) {
+        options.onClickObjectActor = this._onClickObjectActor;
+      }
+      msg = new Messages.Simple(resultString, options);
+    }
+
+    this.hud.output.addMessage(msg);
 
     if (aCallback) {
       let oldFlushCallback = this.hud._flushCallback;
       this.hud._flushCallback = () => {
         aCallback(node);
         if (oldFlushCallback) {
           oldFlushCallback();
           this.hud._flushCallback = oldFlushCallback;
         }
         else {
           this.hud._flushCallback = null;
         }
       };
     }
 
-    node._objectActors = new Set();
+    msg._objectActors = new Set();
 
     let error = aResponse.exception;
     if (WebConsoleUtils.isActorGrip(error)) {
-      node._objectActors.add(error.actor);
+      msg._objectActors.add(error.actor);
     }
 
     if (WebConsoleUtils.isActorGrip(result)) {
-      node._objectActors.add(result.actor);
+      msg._objectActors.add(result.actor);
 
       if (result.type == "longString") {
+        return; // FIXME
         // Add an ellipsis to expand the short string if the object is not
         // inspectable.
 
         let body = node.getElementsByClassName("body")[0];
         let ellipsis = this.hud.document.createElementNS(XHTML_NS, "a");
         ellipsis.classList.add("longStringEllipsis");
         ellipsis.textContent = l10n.getStr("longStringEllipsis");
         ellipsis.href = "#";
@@ -4467,27 +4469,32 @@ JSTerm.prototype = {
   updateCompleteNode: function JSTF_updateCompleteNode(aSuffix)
   {
     // completion prefix = input, with non-control chars replaced by spaces
     let prefix = aSuffix ? this.inputNode.value.replace(/[\S]/g, " ") : "";
     this.completeNode.value = prefix + aSuffix;
   },
 
   /**
-   * The click event handler for evaluation results in the output.
+   * The click event handler for objects shown inline.
    *
    * @private
-   * @param object aResponse
-   *        The JavaScript evaluation response received from the server.
+   * @param object aObjectActor
+   *        The object actor grip.
+   * @param nsIDOMNode [aAnchor]
+   *        Optional object inspector anchor element. This is the clickable element
+   *        in the message we display.
    */
-  _evalOutputClick: function JST__evalOutputClick(aResponse)
+  _onClickObjectActor: function JST__onClickObjectActor(aObjectActor, aAnchor)
   {
+    let label = aAnchor ? aAnchor.textContent :
+                VariablesView.getString(aObjectActor);
     this.openVariablesView({
-      label: VariablesView.getString(aResponse.result),
-      objectActor: aResponse.result,
+      label: label,
+      objectActor: aObjectActor,
       autofocus: true,
     });
   },
 
   /**
    * Destroy the sidebar.
    * @private
    */
