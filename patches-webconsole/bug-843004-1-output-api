# HG changeset patch
# Parent 53627e59f76187a4df6d86750c4538c497a44b1c
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1384980395 -7200

Bug 843004 - Part 1: use the ConsoleOutput API for eval results and for console API messages; r=robcee

diff --git a/browser/devtools/webconsole/console-output.js b/browser/devtools/webconsole/console-output.js
--- a/browser/devtools/webconsole/console-output.js
+++ b/browser/devtools/webconsole/console-output.js
@@ -1,18 +1,26 @@
 /* vim: set ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
+const {Cc, Ci, Cu} = require("chrome");
+
+loader.lazyImporter(this, "VariablesView", "resource:///modules/devtools/VariablesView.jsm");
+
 const Heritage = require("sdk/core/heritage");
 const XHTML_NS = "http://www.w3.org/1999/xhtml";
 const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
+const STRINGS_URI = "chrome://browser/locale/devtools/webconsole.properties";
+
+const WebConsoleUtils = require("devtools/toolkit/webconsole/utils").Utils;
+const l10n = new WebConsoleUtils.l10n(STRINGS_URI);
 
 // Constants for compatibility with the Web Console output implementation before
 // bug 778766.
 // TODO: remove these once bug 778766 is fixed.
 const COMPAT = {
   // The various categories of messages.
   CATEGORIES: {
     NETWORK: 0,
@@ -26,18 +34,67 @@ const COMPAT = {
 
   // The possible message severities.
   SEVERITIES: {
     ERROR: 0,
     WARNING: 1,
     INFO: 2,
     LOG: 3,
   },
+
+  // The preference keys to use for each category/severity combination, indexed
+  // first by category (rows) and then by severity (columns).
+  //
+  // Most of these rather idiosyncratic names are historical and predate the
+  // division of message type into "category" and "severity".
+  PREFERENCE_KEYS: [
+    // Error        Warning       Info    Log
+    [ "network",    "netwarn",    null,   "networkinfo", ],  // Network
+    [ "csserror",   "cssparser",  null,   null,          ],  // CSS
+    [ "exception",  "jswarn",     null,   "jslog",       ],  // JS
+    [ "error",      "warn",       "info", "log",         ],  // Web Developer
+    [ null,         null,         null,   null,          ],  // Input
+    [ null,         null,         null,   null,          ],  // Output
+    [ "secerror",   "secwarn",    null,   null,          ],  // Security
+  ],
+
+  // The fragment of a CSS class name that identifies each category.
+  CATEGORY_CLASS_FRAGMENTS: [ "network", "cssparser", "exception", "console",
+                              "input", "output", "security" ],
+
+  // The fragment of a CSS class name that identifies each severity.
+  SEVERITY_CLASS_FRAGMENTS: [ "error", "warn", "info", "log" ],
+
+  // The indent of a console group in pixels.
+  GROUP_INDENT: 12,
 };
 
+// A map from the console API call levels to the Web Console severities.
+const CONSOLE_API_LEVELS_TO_SEVERITIES = {
+  error: "error",
+  warn: "warning",
+  info: "info",
+  log: "log",
+  trace: "log",
+  debug: "log",
+  dir: "log",
+  group: "log",
+  groupCollapsed: "log",
+  groupEnd: "log",
+  time: "log",
+  timeEnd: "log"
+};
+
+// Array of known message source URLs we need to hide from output.
+const IGNORED_SOURCE_URLS = ["debugger eval code", "self-hosted"];
+
+// The maximum length of strings to be displayed by the Web Console.
+const MAX_LONG_STRING_LENGTH = 200000;
+
+
 /**
  * The ConsoleOutput object is used to manage output of messages in the Web
  * Console.
  *
  * @constructor
  * @param object owner
  *        The console output owner. This usually the WebConsoleFrame instance.
  *        Any other object can be used, as long as it has the following
@@ -203,16 +260,43 @@ ConsoleOutput.prototype = {
   {
     let selection = this.window.getSelection();
     selection.removeAllRanges();
     let range = this.document.createRange();
     range.selectNodeContents(elem);
     selection.addRange(range);
   },
 
+  openLink: function()
+  {
+    this.owner.owner.openLink.apply(this.owner.owner, arguments);
+  },
+
+  openVariablesView: function()
+  {
+    this.owner.jsterm.openVariablesView.apply(this.owner.jsterm, arguments);
+  },
+
+  /**
+   * Inform user that the string he tries to view is too long.
+   *
+   * @private
+   * @return object
+   *         The new Message object.
+   */
+  _logWarningAboutStringTooLong: function()
+  {
+    let msg = new Messages.Simple(l10n.getStr("longStringTooLong"), {
+      category: "output",
+      severity: "warning",
+    });
+    this.addMessage(msg);
+    return msg;
+  },
+
   /**
    * Destroy this ConsoleOutput instance.
    */
   destroy: function()
   {
     this.owner = null;
   },
 }; // ConsoleOutput.prototype
@@ -227,16 +311,18 @@ let Messages = {};
  * The BaseMessage object is used for all types of messages. Every kind of
  * message should use this object as its base.
  *
  * @constructor
  */
 Messages.BaseMessage = function()
 {
   this.widgets = new Set();
+  this._onClickAnchor = this._onClickAnchor.bind(this);
+  this._repeatID = gSequenceId();
 };
 
 Messages.BaseMessage.prototype = {
   /**
    * Reference to the ConsoleOutput owner.
    *
    * @type object|null
    *       This is |null| if the message is not yet initialized.
@@ -263,16 +349,24 @@ Messages.BaseMessage.prototype = {
    * Tells if this message is visible or not.
    * @type boolean
    */
   get visible() {
     return this.element && this.element.parentNode;
   },
 
   /**
+   * The owner DOM document.
+   * @type DOMElement
+   */
+  get document() {
+    return this.output.document;
+  },
+
+  /**
    * Holds the text-only representation of the message.
    * @type string
    */
   textContent: "",
 
   /**
    * Set of widgets included in this message.
    * @type Set
@@ -282,16 +376,18 @@ Messages.BaseMessage.prototype = {
   // Properties that allow compatibility with the current Web Console output
   // implementation.
   _categoryCompat: null,
   _severityCompat: null,
   _categoryNameCompat: null,
   _severityNameCompat: null,
   _filterKeyCompat: null,
 
+  _repeatID: 0,
+
   /**
    * Initialize the message.
    *
    * @param object output
    *        The ConsoleOutput owner.
    * @param object [parent=null]
    *        Optional: a different message object that owns this instance.
    * @return this
@@ -299,32 +395,42 @@ Messages.BaseMessage.prototype = {
   init: function(output, parent=null)
   {
     this.output = output;
     this.parent = parent;
     return this;
   },
 
   /**
+   * Non-unique ID for this message object used for tracking duplicate messages.
+   * Different message kinds can identify themselves based their own criteria.
+   * @return string|number
+   */
+  getRepeatID: function()
+  {
+    return this._repeatID;
+  },
+
+  /**
    * Render the message. After this method is invoked the |element| property
    * will point to the DOM element of this message.
    * @return this
    */
   render: function()
   {
     if (!this.element) {
       this.element = this._renderCompat();
     }
     return this;
   },
 
   /**
    * Prepare the message container for the Web Console, such that it is
    * compatible with the current implementation.
-   * TODO: remove this once bug 778766.
+   * TODO: remove this once bug 778766 is fixed.
    */
   _renderCompat: function()
   {
     let doc = this.output.document;
     let container = doc.createElementNS(XHTML_NS, "div");
     container.id = "console-msg-" + gSequenceId();
     container.className = "message";
     container.category = this._categoryCompat;
@@ -333,40 +439,106 @@ Messages.BaseMessage.prototype = {
     container.setAttribute("severity", this._severityNameCompat);
     container.setAttribute("filter", this._filterKeyCompat);
     container.clipboardText = this.textContent;
     container.timestamp = this.timestamp;
     container._messageObject = this;
 
     return container;
   },
+
+  _addLinkCallback: function(element, callback = this._onClickAnchor)
+  {
+    // This is going into the WebConsoleFrame object instance that owns
+    // the ConsoleOutput object. The WebConsoleFrame owner is the WebConsole
+    // object instance from hudservice.js.
+    // TODO: move _addMessageLinkCallback() into ConsoleOutput once bug 778766
+    // is fixed.
+    this.output.owner._addMessageLinkCallback(element, callback);
+  },
+
+  _onClickAnchor: function(event)
+  {
+    this.output.openLink(event.target.href);
+  },
+
+  /**
+   * The click event handler for objects shown inline.
+   *
+   * @private
+   * @param object aObjectActor
+   *        The object actor grip.
+   * @param nsIDOMNode [aAnchor]
+   *        Optional object inspector anchor element. This is the clickable element
+   *        in the message we display.
+   */
+  _onClickObjectActor: function(objectActor, event)
+  {
+    let label = event && event.target ? event.target.textContent :
+                VariablesView.getString(objectActor);
+    this.output.openVariablesView({
+      label: label,
+      objectActor: objectActor,
+      autofocus: true,
+    });
+  },
+
+  _onClickLongString: function(longStringActor, formatter, event)
+  {
+    let ellipsis = event.target;
+    if (!formatter) {
+      formatter = function(s) s;
+    }
+
+    let longString = this.output.owner.webConsoleClient.longString(longStringActor);
+    let toIndex = Math.min(longString.length, MAX_LONG_STRING_LENGTH);
+
+    longString.substring(longString.initial.length, toIndex, (response) => {
+      if (response.error) {
+        Cu.reportError("LongString substring failure: " + response.error);
+        return;
+      }
+
+      let prev = ellipsis.previousSibling;
+      prev.textContent = formatter(longString.initial + response.substring);
+      ellipsis.remove();
+
+      this.output.owner.emit("messages-updated", new Set([this.element]));
+
+      if (toIndex != longString.length) {
+        this.output._logWarningAboutStringTooLong();
+      }
+    });
+  },
 }; // Messages.BaseMessage.prototype
 
 
 /**
  * The NavigationMarker is used to show a page load event.
  *
  * @constructor
  * @extends Messages.BaseMessage
  * @param string url
  *        The URL to display.
  * @param number timestamp
  *        The message date and time, milliseconds elapsed since 1 January 1970
  *        00:00:00 UTC.
  */
 Messages.NavigationMarker = function(url, timestamp)
 {
-  Messages.BaseMessage.apply(this, arguments);
+  Messages.BaseMessage.call(this);
   this._url = url;
   this.textContent = "------ " + url;
   this.timestamp = timestamp;
 };
 
 Messages.NavigationMarker.prototype = Heritage.extend(Messages.BaseMessage.prototype,
 {
+  _url: null,
+
   /**
    * Message timestamp.
    *
    * @type number
    *       Milliseconds elapsed since 1 January 1970 00:00:00 UTC.
    */
   timestamp: 0,
 
@@ -394,37 +566,488 @@ Messages.NavigationMarker.prototype = He
 
     let doc = this.output.document;
     let urlnode = doc.createElementNS(XHTML_NS, "a");
     urlnode.className = "url";
     urlnode.textContent = url;
     urlnode.title = this._url;
     urlnode.href = this._url;
     urlnode.draggable = false;
-
-    // This is going into the WebConsoleFrame object instance that owns
-    // the ConsoleOutput object. The WebConsoleFrame owner is the WebConsole
-    // object instance from hudservice.js.
-    // TODO: move _addMessageLinkCallback() into ConsoleOutput once bug 778766
-    // is fixed.
-    this.output.owner._addMessageLinkCallback(urlnode, () => {
-      this.output.owner.owner.openLink(this._url);
-    });
+    this._addLinkCallback(urlnode);
 
     let render = Messages.BaseMessage.prototype.render.bind(this);
     render().element.appendChild(urlnode);
     this.element.classList.add("navigation-marker");
     this.element.url = this._url;
     this.element.appendChild(doc.createTextNode("\n"));
 
     return this;
   },
 }); // Messages.NavigationMarker.prototype
 
 
+/**
+ * The Simple message is used to show any basic message in the Web Console.
+ *
+ * @constructor
+ * @extends Messages.BaseMessage
+ * @param string|DOMElement message
+ *        The message to display.
+ * @param object [options]
+ *        Options for this message:
+ *        - category: (string) category that this message belongs to. Defaults
+ *        to no category.
+ *        - severity: (string) severity of the message. Defaults to no severity.
+ *        - timestamp: (number) date and time when the message was recorded.
+ *        Defaults to |Date.now()|.
+ *        - link: (string) if provided, the message will be wrapped in an anchor
+ *        pointing to the given URL here.
+ *        - linkCallback: (function) if provided, the message will be wrapped in
+ *        an anchor. The |linkCallback| function will be added as click event
+ *        handler.
+ *        - location: object that tells the message source: url, line, column
+ *        and lineText.
+ *        - className: (string) additional element class names for styling
+ *        purposes.
+ *        - private: (boolean) mark this as a private message.
+ *        - filterDuplicates: (boolean) true if you do want this message to be
+ *        filtered as a potential duplicate message, false otherwise.
+ */
+// TODO: fix/update comments
+Messages.Simple = function(message, options = {})
+{
+  Messages.BaseMessage.call(this);
+
+  this.category = options.category;
+  this.severity = options.severity;
+  this.location = options.location;
+  this.timestamp = options.timestamp || Date.now();
+  this.private = !!options.private;
+
+  this._filterDuplicates = options.filterDuplicates;
+  if (this._filterDuplicates) {
+    this._repeatID = "";
+  }
+
+  this._message = message;
+  this._className = options.className;
+  this._link = options.link;
+  this._linkCallback = options.linkCallback;
+};
+
+Messages.Simple.prototype = Heritage.extend(Messages.BaseMessage.prototype,
+{
+  category: null,
+  severity: null,
+  location: null,
+  private: false,
+  _link: null,
+  _linkCallback: null,
+  _afterMessage: null,
+  _objectActors: null,
+  _groupDepthCompat: 0,
+  _filterDuplicates: false,
+
+  /**
+   * Message timestamp.
+   *
+   * @type number
+   *       Milliseconds elapsed since 1 January 1970 00:00:00 UTC.
+   */
+  timestamp: 0,
+
+  get _categoryCompat() {
+    return this.category ?
+           COMPAT.CATEGORIES[this.category.toUpperCase()] : null;
+  },
+  get _severityCompat() {
+    return this.severity ?
+           COMPAT.SEVERITIES[this.severity.toUpperCase()] : null;
+  },
+  get _categoryNameCompat() {
+    return this.category ?
+           COMPAT.CATEGORY_CLASS_FRAGMENTS[this._categoryCompat] : null;
+  },
+  get _severityNameCompat() {
+    return this.severity ?
+           COMPAT.SEVERITY_CLASS_FRAGMENTS[this._severityCompat] : null;
+  },
+
+  get _filterKeyCompat() {
+    return this._categoryCompat !== null && this._severityCompat !== null ?
+           COMPAT.PREFERENCE_KEYS[this._categoryCompat][this._severityCompat] :
+           null;
+  },
+
+  init: function()
+  {
+    Messages.BaseMessage.prototype.init.apply(this, arguments);
+    this._groupDepthCompat = this.output.owner.groupDepth;
+    return this;
+  },
+
+  getRepeatID: function()
+  {
+    if (!this._filterDuplicates) {
+      return this._repeatID;
+    }
+
+    let uid = [this._repeatID, this.category, this.severity, this._link,
+               this._className, this._linkCallback, this.private,
+               this._groupDepthCompat];
+    if (this.location) {
+      let {url, line, column, lineText} = this.location;
+      uid.push(url, line, column, lineText);
+    }
+    return uid.join(":");
+  },
+
+  /**
+   * Prepare the DOM element for this message.
+   * @return this
+   */
+  render: function()
+  {
+    if (this.element) {
+      return this;
+    }
+
+    let timestamp = new Widgets.MessageTimestamp(this, this.timestamp).render();
+    this.widgets.add(timestamp);
+
+    let icon = this.document.createElementNS(XHTML_NS, "span");
+    icon.className = "icon";
+
+    let body = this._renderBody();
+    this._repeatID += ":" + body.textContent;
+
+    let repeatNode = this._renderRepeatNode();
+    let location = this._renderLocation();
+
+    Messages.BaseMessage.prototype.render.call(this);
+    this.element.appendChild(timestamp.element);
+    this.element.appendChild(icon);
+    this.element.appendChild(body);
+    if (repeatNode) {
+      this.element.appendChild(repeatNode);
+    }
+    if (location) {
+      this.element.appendChild(location);
+    }
+    this.element.appendChild(this.document.createTextNode("\n"));
+
+    if (this.private) {
+      this.element.setAttribute("private", true);
+    }
+
+    if (this._afterMessage) {
+      this.element._outputAfterNode = this._afterMessage.element;
+      this._afterMessage = null;
+    }
+
+    // TODO: handle object releasing in a more elegant way once all console
+    // messages use the new API - bug 778766.
+    this.element._objectActors = this._objectActors;
+    this._objectActors = null;
+
+    return this;
+  },
+
+  _renderBody: function()
+  {
+    let body = this.document.createElementNS(XHTML_NS, "span");
+    body.className = "body devtools-monospace";
+    if (this._className) {
+      body.className += " " + this._className;
+    }
+
+    let anchor, container = body;
+    if (this._link || this._linkCallback) {
+      container = anchor = this.document.createElementNS(XHTML_NS, "a");
+      anchor.href = this._link || "#";
+      anchor.draggable = false;
+      this._addLinkCallback(anchor, this._linkCallback);
+      body.appendChild(anchor);
+    }
+
+    if (this._message instanceof Ci.nsIDOMNode) {
+      container.appendChild(this._message);
+    } else {
+      container.textContent = this._message;
+    }
+
+    return body;
+  },
+
+  _renderRepeatNode: function()
+  {
+    if (!this._filterDuplicates) {
+      return null;
+    }
+
+    let repeatNode = this.document.createElementNS(XHTML_NS, "span");
+    repeatNode.setAttribute("value", "1");
+    repeatNode.className = "repeats";
+    repeatNode.textContent = 1;
+    repeatNode._uid = this.getRepeatID();
+    return repeatNode;
+  },
+
+  _renderLocation: function()
+  {
+    if (!this.location) {
+      return null;
+    }
+
+    let {url, line} = this.location;
+    if (IGNORED_SOURCE_URLS.indexOf(url) != -1) {
+      return null;
+    }
+
+    // The ConsoleOutput owner is a WebConsoleFrame instance from webconsole.js.
+    // TODO: move createLocationNode() into this file when bug 778766 is fixed.
+    return this.output.owner.createLocationNode(url, line);
+  },
+}); // Messages.Simple.prototype
+
+
+/**
+ * The Extended message.
+ *
+ * @constructor
+ * @extends Messages.Simple
+ * @param object result
+ *        The message to display.
+ */
+// TODO update comments
+Messages.Extended = function(messagePieces, options = {})
+{
+  Messages.Simple.call(this, null, options);
+
+  this._messagePieces = messagePieces;
+
+  if ("quoteStrings" in options) {
+    this._quoteStrings = options.quoteStrings;
+  }
+
+  this._repeatID += ":" + this._quoteStrings;
+};
+
+Messages.Extended.prototype = Heritage.extend(Messages.Simple.prototype,
+{
+  _messagePieces: null,
+  _quoteStrings: true,
+
+  render: function()
+  {
+    let result = this.document.createDocumentFragment();
+
+    for (let i = 0; i < this._messagePieces.length; i++) {
+      let separator = i > 0 ? this._renderBodyPieceSeparator() : null;
+      if (separator) {
+        result.appendChild(separator);
+      }
+
+      let piece = this._messagePieces[i];
+      result.appendChild(this._renderBodyPiece(piece));
+    }
+
+    this._message = result;
+    this._messagePieces = null;
+    return Messages.Simple.prototype.render.call(this);
+  },
+
+  _renderBodyPieceSeparator: function() { return null; },
+
+  _renderBodyPiece: function(piece)
+  {
+    if (piece instanceof Ci.nsIDOMNode) {
+      return piece;
+    } else if (typeof piece == "function") {
+      return piece(this);
+    }
+
+    let result = this.document.createDocumentFragment();
+    let isPrimitive = VariablesView.isPrimitive({ value: piece });
+    let isActorGrip = WebConsoleUtils.isActorGrip(piece);
+    let str;
+    if (!this._quoteStrings && typeof piece == "string") {
+      str = piece;
+    } else {
+      str = VariablesView.getString(piece);
+    }
+
+    // TODO: split into widgets
+
+    if (piece && !isPrimitive && isActorGrip) {
+      let anchor = result = this.document.createElementNS(XHTML_NS, "a");
+      anchor.href = "#";
+      anchor.draggable = false;
+      anchor.textContent = str;
+      this._addLinkCallback(anchor, this._onClickObjectActor.bind(this, piece));
+      this._repeatID += ":" + piece.actor;
+    } else if (isPrimitive) {
+      result.textContent = str;
+
+      if (piece.type == "longString") {
+        let ellipsis = this.document.createElementNS(XHTML_NS, "a");
+        ellipsis.className = "longStringEllipsis";
+        ellipsis.textContent = l10n.getStr("longStringEllipsis");
+        ellipsis.href = "#";
+        ellipsis.draggable = false;
+
+        let formatter = function(s) '"' + s + '"';
+        let onclick = this._onClickLongString.bind(this, piece, formatter);
+        this._addLinkCallback(ellipsis, onclick);
+
+        result.appendChild(ellipsis);
+
+        this._repeatID += ":" + piece.actor;
+      }
+    } else {
+      result.textContent = piece;
+    }
+
+    return result;
+  },
+}); // Messages.Extended.prototype
+
+
+
+/**
+ * The JavaScriptEvalOutput message.
+ *
+ * @constructor
+ * @extends Messages.Extended
+ * @param object result
+ *        The message to display.
+ */
+Messages.JavaScriptEvalOutput = function(evalResponse, {errorMessage})
+{
+  let severity = "log", msg, quoteStrings = true;
+
+  if (errorMessage) {
+    severity = "error";
+    msg = errorMessage;
+    quoteStrings = false;
+  } else {
+    msg = evalResponse.result;
+  }
+
+  let options = {
+    timestamp: evalResponse.timestamp,
+    category: "output",
+    severity: severity,
+    quoteStrings: quoteStrings,
+  };
+  Messages.Extended.call(this, [msg], options);
+};
+
+Messages.JavaScriptEvalOutput.prototype = Messages.Extended.prototype;
+
+/**
+ * The ConsoleGeneric message is used for console API calls.
+ *
+ * @constructor
+ * @extends Messages.Extended
+ * @param object result
+ *        The message to display.
+ */
+Messages.ConsoleGeneric = function(packet)
+{
+  let options = {
+    timestamp: packet.timeStamp,
+    category: "webdev",
+    severity: CONSOLE_API_LEVELS_TO_SEVERITIES[packet.level],
+    private: packet.private,
+    filterDuplicates: true,
+    location: {
+      url: packet.filename,
+      line: packet.lineNumber,
+    },
+  };
+  Messages.Extended.call(this, packet.arguments, options);
+  this._repeatID += ":" + packet.level;
+};
+
+Messages.ConsoleGeneric.prototype = Heritage.extend(Messages.Extended.prototype,
+{
+  _renderBodyPieceSeparator: function()
+  {
+    return this.document.createTextNode(" ");
+  },
+}); // Messages.ConsoleGeneric.prototype
+
+
+let Widgets = {};
+
+/**
+ * The base widget class.
+ *
+ * @constructor
+ * @param object message
+ *        The owning message.
+ */
+Widgets.BaseWidget = function(message)
+{
+  this.message = message;
+};
+
+Widgets.BaseWidget.prototype = {
+  message: null,
+  element: null,
+  textContent: "",
+
+  get document() {
+    return this.message.document;
+  },
+
+  render: function() { },
+  destroy: function() { },
+};
+
+/**
+ * The timestamp widget.
+ *
+ * @constructor
+ * @param object message
+ *        The owning message.
+ * @param number timestamp
+ *        The UNIX timestamp to display.
+ */
+Widgets.MessageTimestamp = function(message, timestamp)
+{
+  Widgets.BaseWidget.call(this, message);
+  this.timestamp = timestamp;
+};
+
+Widgets.MessageTimestamp.prototype = Heritage.extend(Widgets.BaseWidget.prototype,
+{
+  render: function()
+  {
+    if (this.element) {
+      return this;
+    }
+
+    this.textContent = l10n.timestampString(this.timestamp);
+    this.element = this.document.createElementNS(XHTML_NS, "span");
+    this.element.className = "timestamp devtools-monospace";
+    this.element.textContent = this.textContent + " ";
+
+    // Apply the current group by indenting appropriately.
+    // TODO: remove this once bug 778766 is fixed.
+    this.element.style.marginRight = this.message._groupDepthCompat *
+                                     COMPAT.GROUP_INDENT + "px";
+
+    return this;
+  },
+});
+
+
 function gSequenceId()
 {
   return gSequenceId.n++;
 }
 gSequenceId.n = 0;
 
 exports.ConsoleOutput = ConsoleOutput;
 exports.Messages = Messages;
+exports.Widgets = Widgets;
diff --git a/browser/devtools/webconsole/hudservice.js b/browser/devtools/webconsole/hudservice.js
--- a/browser/devtools/webconsole/hudservice.js
+++ b/browser/devtools/webconsole/hudservice.js
@@ -6,24 +6,24 @@
 
 "use strict";
 
 const {Cc, Ci, Cu} = require("chrome");
 
 let WebConsoleUtils = require("devtools/toolkit/webconsole/utils").Utils;
 let Heritage = require("sdk/core/heritage");
 
-loader.lazyGetter(this, "promise", () => require("sdk/core/promise"));
 loader.lazyGetter(this, "Telemetry", () => require("devtools/shared/telemetry"));
 loader.lazyGetter(this, "WebConsoleFrame", () => require("devtools/webconsole/webconsole").WebConsoleFrame);
 loader.lazyImporter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
 loader.lazyImporter(this, "devtools", "resource://gre/modules/devtools/Loader.jsm");
 loader.lazyImporter(this, "Services", "resource://gre/modules/Services.jsm");
 loader.lazyImporter(this, "DebuggerServer", "resource://gre/modules/devtools/dbg-server.jsm");
 loader.lazyImporter(this, "DebuggerClient", "resource://gre/modules/devtools/dbg-client.jsm");
+loader.lazyImporter(this, "promise", "resource://gre/modules/Promise.jsm", "Promise");
 
 const STRINGS_URI = "chrome://browser/locale/devtools/webconsole.properties";
 let l10n = new WebConsoleUtils.l10n(STRINGS_URI);
 
 const BROWSER_CONSOLE_WINDOW_FEATURES = "chrome,titlebar,toolbar,centerscreen,resizable,dialog=no";
 
 // The preference prefix for all of the Browser Console filters.
 const BROWSER_CONSOLE_FILTER_PREFS_PREFIX = "devtools.browserconsole.filter.";
diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -9,17 +9,16 @@
 const {Cc, Ci, Cu} = require("chrome");
 
 let WebConsoleUtils = require("devtools/toolkit/webconsole/utils").Utils;
 
 loader.lazyServiceGetter(this, "clipboardHelper",
                          "@mozilla.org/widget/clipboardhelper;1",
                          "nsIClipboardHelper");
 loader.lazyImporter(this, "Services", "resource://gre/modules/Services.jsm");
-loader.lazyGetter(this, "promise", () => require("sdk/core/promise"));
 loader.lazyGetter(this, "EventEmitter", () => require("devtools/shared/event-emitter"));
 loader.lazyGetter(this, "AutocompletePopup",
                   () => require("devtools/shared/autocomplete-popup").AutocompletePopup);
 loader.lazyGetter(this, "ToolSidebar",
                   () => require("devtools/framework/sidebar").ToolSidebar);
 loader.lazyGetter(this, "NetworkPanel",
                   () => require("devtools/webconsole/network-panel").NetworkPanel);
 loader.lazyGetter(this, "ConsoleOutput",
@@ -27,16 +26,17 @@ loader.lazyGetter(this, "ConsoleOutput",
 loader.lazyGetter(this, "Messages",
                   () => require("devtools/webconsole/console-output").Messages);
 loader.lazyImporter(this, "EnvironmentClient", "resource://gre/modules/devtools/dbg-client.jsm");
 loader.lazyImporter(this, "ObjectClient", "resource://gre/modules/devtools/dbg-client.jsm");
 loader.lazyImporter(this, "VariablesView", "resource:///modules/devtools/VariablesView.jsm");
 loader.lazyImporter(this, "VariablesViewController", "resource:///modules/devtools/VariablesViewController.jsm");
 loader.lazyImporter(this, "PluralForm", "resource://gre/modules/PluralForm.jsm");
 loader.lazyImporter(this, "gDevTools", "resource:///modules/devtools/gDevTools.jsm");
+loader.lazyImporter(this, "promise", "resource://gre/modules/Promise.jsm", "Promise");
 
 const STRINGS_URI = "chrome://browser/locale/devtools/webconsole.properties";
 let l10n = new WebConsoleUtils.l10n(STRINGS_URI);
 
 const XHTML_NS = "http://www.w3.org/1999/xhtml";
 
 const MIXED_CONTENT_LEARN_MORE = "https://developer.mozilla.org/docs/Security/MixedContent";
 
@@ -47,20 +47,16 @@ const STRICT_TRANSPORT_SECURITY_LEARN_MO
 const HELP_URL = "https://developer.mozilla.org/docs/Tools/Web_Console/Helpers";
 
 const VARIABLES_VIEW_URL = "chrome://browser/content/devtools/widgets/VariablesView.xul";
 
 const CONSOLE_DIR_VIEW_HEIGHT = 0.6;
 
 const IGNORED_SOURCE_URLS = ["debugger eval code", "self-hosted"];
 
-// The amount of time in milliseconds that must pass between messages to
-// trigger the display of a new group.
-const NEW_GROUP_DELAY = 5000;
-
 // The amount of time in milliseconds that we wait before performing a live
 // search.
 const SEARCH_DELAY = 200;
 
 // The number of lines that are displayed in the console output by default, for
 // each category. The user can change this number by adjusting the hidden
 // "devtools.hud.loglimit.{network,cssparser,exception,console}" preferences.
 const DEFAULT_LOG_LIMIT = 200;
@@ -161,19 +157,16 @@ const OUTPUT_INTERVAL = 50; // milliseco
 const THROTTLE_UPDATES = 1000; // milliseconds
 
 // The preference prefix for all of the Web Console filters.
 const FILTER_PREFS_PREFIX = "devtools.webconsole.filter.";
 
 // The minimum font size.
 const MIN_FONT_SIZE = 10;
 
-// The maximum length of strings to be displayed by the Web Console.
-const MAX_LONG_STRING_LENGTH = 200000;
-
 const PREF_CONNECTION_TIMEOUT = "devtools.debugger.remote-timeout";
 const PREF_PERSISTLOG = "devtools.webconsole.persistlog";
 const PREF_MESSAGE_TIMESTAMP = "devtools.webconsole.timestampMessages";
 
 /**
  * A WebConsoleFrame instance is an interactive console initialized *per target*
  * that displays console log data as well as provides an interactive terminal to
  * manipulate the target's document content.
@@ -1157,30 +1150,35 @@ WebConsoleFrame.prototype = {
   {
     let body = null;
     let clipboardText = null;
     let sourceURL = aMessage.filename;
     let sourceLine = aMessage.lineNumber;
     let level = aMessage.level;
     let args = aMessage.arguments;
     let objectActors = new Set();
+    let node = null;
 
     // Gather the actor IDs.
     args.forEach((aValue) => {
       if (WebConsoleUtils.isActorGrip(aValue)) {
         objectActors.add(aValue.actor);
       }
     });
 
     switch (level) {
       case "log":
       case "info":
       case "warn":
       case "error":
-      case "debug":
+      case "debug": {
+        let msg = new Messages.ConsoleGeneric(aMessage);
+        node = msg.init(this.output).render().element;
+        break;
+      }
       case "dir": {
         body = { arguments: args };
         let clipboardArray = [];
         args.forEach((aValue) => {
           clipboardArray.push(VariablesView.getString(aValue));
           if (aValue && typeof aValue == "object" &&
               aValue.type == "longString") {
             clipboardArray.push(l10n.getStr("longStringEllipsis"));
@@ -1278,28 +1276,32 @@ WebConsoleFrame.prototype = {
         }
         objectActors.clear();
     }
 
     if (level == "groupEnd") {
       return null; // no need to continue
     }
 
-    let node = this.createMessageNode(CATEGORY_WEBDEV, LEVELS[level], body,
-                                      sourceURL, sourceLine, clipboardText,
-                                      level, aMessage.timeStamp);
-    if (aMessage.private) {
-      node.setAttribute("private", true);
+    if (!node) {
+      node = this.createMessageNode(CATEGORY_WEBDEV, LEVELS[level], body,
+                                    sourceURL, sourceLine, clipboardText,
+                                    level, aMessage.timeStamp);
+      if (aMessage.private) {
+        node.setAttribute("private", true);
+      }
     }
 
     if (objectActors.size > 0) {
       node._objectActors = objectActors;
 
-      let repeatNode = node.getElementsByClassName("repeats")[0];
-      repeatNode._uid += [...objectActors].join("-");
+      if (!node._messageObject) {
+        let repeatNode = node.getElementsByClassName("repeats")[0];
+        repeatNode._uid += [...objectActors].join("-");
+      }
     }
 
     if (level == "trace") {
       node._stacktrace = aMessage.stacktrace;
     }
 
     return node;
   },
@@ -1312,36 +1314,16 @@ WebConsoleFrame.prototype = {
    *        The console API message received from the server.
    */
   handleConsoleAPICall: function WCF_handleConsoleAPICall(aMessage)
   {
     this.outputMessage(CATEGORY_WEBDEV, this.logConsoleAPIMessage, [aMessage]);
   },
 
   /**
-   * The click event handler for objects shown inline coming from the
-   * window.console API.
-   *
-   * @private
-   * @param nsIDOMNode aAnchor
-   *        The object inspector anchor element. This is the clickable element
-   *        in the console.log message we display.
-   * @param object aObjectActor
-   *        The object actor grip.
-   */
-  _consoleLogClick: function WCF__consoleLogClick(aAnchor, aObjectActor)
-  {
-    this.jsterm.openVariablesView({
-      label: aAnchor.textContent,
-      objectActor: aObjectActor,
-      autofocus: true,
-    });
-  },
-
-  /**
    * Reports an error in the page source, either JavaScript or CSS.
    *
    * @param nsIScriptError aScriptError
    *        The error message to report.
    * @return nsIDOMElement|undefined
    *         The message element to display in the Web Console output.
    */
   reportPageError: function WCF_reportPageError(aCategory, aScriptError)
@@ -1535,17 +1517,17 @@ WebConsoleFrame.prototype = {
     mixedContentWarningNode.title = MIXED_CONTENT_LEARN_MORE;
     mixedContentWarningNode.href = MIXED_CONTENT_LEARN_MORE;
     mixedContentWarningNode.className = "learn-more-link";
     mixedContentWarningNode.textContent = mixedContentWarning;
     mixedContentWarningNode.draggable = false;
 
     aLinkNode.appendChild(mixedContentWarningNode);
 
-    this._addMessageLinkCallback(mixedContentWarningNode, (aNode, aEvent) => {
+    this._addMessageLinkCallback(mixedContentWarningNode, (aEvent) => {
       aEvent.stopPropagation();
       this.owner.openLink(MIXED_CONTENT_LEARN_MORE);
     });
   },
 
   /**
    * Adds a more info link node to messages based on the nsIScriptError object
    * that we need to report to the console
@@ -1596,17 +1578,17 @@ WebConsoleFrame.prototype = {
 
     let warningNode = this.document.createElementNS(XHTML_NS, "a");
     warningNode.title = aURL;
     warningNode.href = aURL;
     warningNode.draggable = false;
     warningNode.textContent = moreInfoLabel;
     warningNode.className = "learn-more-link";
 
-    this._addMessageLinkCallback(warningNode, (aNode, aEvent) => {
+    this._addMessageLinkCallback(warningNode, (aEvent) => {
       aEvent.stopPropagation();
       this.owner.openLink(aURL);
     });
 
     aNode.appendChild(warningNode);
   },
 
   /**
@@ -1690,26 +1672,16 @@ WebConsoleFrame.prototype = {
   logWarningAboutReplacedAPI: function WCF_logWarningAboutReplacedAPI()
   {
     let node = this.createMessageNode(CATEGORY_JS, SEVERITY_WARNING,
                                       l10n.getStr("ConsoleAPIDisabled"));
     this.outputMessage(CATEGORY_JS, node);
   },
 
   /**
-   * Inform user that the string he tries to view is too long.
-   */
-  logWarningAboutStringTooLong: function WCF_logWarningAboutStringTooLong()
-  {
-    let node = this.createMessageNode(CATEGORY_JS, SEVERITY_WARNING,
-                                      l10n.getStr("longStringTooLong"));
-    this.outputMessage(CATEGORY_JS, node);
-  },
-
-  /**
    * Handle the network events coming from the remote Web Console.
    *
    * @param object aActor
    *        The NetworkEventActor grip.
    */
   handleNetworkEvent: function WCF_handleNetworkEvent(aActor)
   {
     let networkInfo = {
@@ -2297,24 +2269,40 @@ WebConsoleFrame.prototype = {
    * Prune an item from the output queue.
    *
    * @private
    * @param array aItem
    *        The item you want to remove from the output queue.
    */
   _pruneItemFromQueue: function WCF__pruneItemFromQueue(aItem)
   {
+    // TODO: handle object releasing in a more elegant way once all console
+    // messages use the new API - bug 778766.
+
     let [category, methodOrNode, args] = aItem;
     if (typeof methodOrNode != "function" && methodOrNode._objectActors) {
       for (let actor of methodOrNode._objectActors) {
         this._releaseObject(actor);
       }
       methodOrNode._objectActors.clear();
     }
 
+    if (methodOrNode == this.output._flushMessageQueue &&
+        args[0]._objectActors) {
+      for (let arg of args) {
+        if (!arg._objectActors) {
+          continue;
+        }
+        for (let actor of arg._objectActors) {
+          this._releaseObject(actor);
+        }
+        arg._objectActors.clear();
+      }
+    }
+
     if (category == CATEGORY_NETWORK) {
       let connectionId = null;
       if (methodOrNode == this.logNetEvent) {
         connectionId = args[0];
       }
       else if (typeof methodOrNode != "function") {
         connectionId = methodOrNode._connectionId;
       }
@@ -2477,20 +2465,16 @@ WebConsoleFrame.prototype = {
     if (aBody instanceof Ci.nsIDOMNode) {
       bodyNode.appendChild(aBody);
     }
     else {
       let str = undefined;
       if (aLevel == "dir") {
         str = VariablesView.getString(aBody.arguments[0]);
       }
-      else if (["log", "info", "warn", "error", "debug"].indexOf(aLevel) > -1 &&
-               typeof aBody == "object") {
-        this._makeConsoleLogMessageBody(node, bodyNode, aBody);
-      }
       else {
         str = aBody;
       }
 
       if (str !== undefined) {
         aBody = this.document.createTextNode(str);
         bodyNode.appendChild(aBody);
       }
@@ -2557,136 +2541,16 @@ WebConsoleFrame.prototype = {
       node.appendChild(locationNode);
     }
     node.appendChild(this.document.createTextNode("\n"));
 
     return node;
   },
 
   /**
-   * Make the message body for console.log() calls.
-   *
-   * @private
-   * @param nsIDOMElement aMessage
-   *        The message element that holds the output for the given call.
-   * @param nsIDOMElement aContainer
-   *        The specific element that will hold each part of the console.log
-   *        output.
-   * @param object aBody
-   *        The object given by this.logConsoleAPIMessage(). This object holds
-   *        the call information that we need to display - mainly the arguments
-   *        array of the given API call.
-   */
-  _makeConsoleLogMessageBody:
-  function WCF__makeConsoleLogMessageBody(aMessage, aContainer, aBody)
-  {
-    Object.defineProperty(aMessage, "_panelOpen", {
-      get: function() {
-        let nodes = aContainer.getElementsByTagName("a");
-        return Array.prototype.some.call(nodes, function(aNode) {
-          return aNode._panelOpen;
-        });
-      },
-      enumerable: true,
-      configurable: false
-    });
-
-    aBody.arguments.forEach(function(aItem) {
-      if (aContainer.firstChild) {
-        aContainer.appendChild(this.document.createTextNode(" "));
-      }
-
-      let text = VariablesView.getString(aItem);
-      let inspectable = !VariablesView.isPrimitive({ value: aItem });
-
-      if (aItem && typeof aItem != "object" || !inspectable) {
-        aContainer.appendChild(this.document.createTextNode(text));
-
-        if (aItem.type && aItem.type == "longString") {
-          let ellipsis = this.document.createElementNS(XHTML_NS, "a");
-          ellipsis.classList.add("longStringEllipsis");
-          ellipsis.textContent = l10n.getStr("longStringEllipsis");
-          ellipsis.href = "#";
-          ellipsis.draggable = false;
-
-          let formatter = function(s) '"' + s + '"';
-
-          this._addMessageLinkCallback(ellipsis,
-            this._longStringClick.bind(this, aMessage, aItem, formatter));
-
-          aContainer.appendChild(ellipsis);
-        }
-        return;
-      }
-
-      // For inspectable objects.
-      let elem = this.document.createElementNS(XHTML_NS, "a");
-      elem.setAttribute("aria-haspopup", "true");
-      elem.textContent = text;
-      elem.href = "#";
-      elem.draggable = false;
-
-      this._addMessageLinkCallback(elem,
-        this._consoleLogClick.bind(this, elem, aItem));
-
-      aContainer.appendChild(elem);
-    }, this);
-  },
-
-  /**
-   * Click event handler for the ellipsis shown immediately after a long string.
-   * This method retrieves the full string and updates the console output to
-   * show it.
-   *
-   * @private
-   * @param nsIDOMElement aMessage
-   *        The message element.
-   * @param object aActor
-   *        The LongStringActor instance we work with.
-   * @param [function] aFormatter
-   *        Optional function you can use to format the string received from the
-   *        server, before being displayed in the console.
-   * @param nsIDOMElement aEllipsis
-   *        The DOM element the user can click on to expand the string.
-   */
-  _longStringClick:
-  function WCF__longStringClick(aMessage, aActor, aFormatter, aEllipsis)
-  {
-    if (!aFormatter) {
-      aFormatter = function(s) s;
-    }
-
-    let longString = this.webConsoleClient.longString(aActor);
-    let toIndex = Math.min(longString.length, MAX_LONG_STRING_LENGTH);
-    longString.substring(longString.initial.length, toIndex,
-      function WCF__onSubstring(aResponse) {
-        if (aResponse.error) {
-          Cu.reportError("WCF__longStringClick substring failure: " +
-                         aResponse.error);
-          return;
-        }
-
-        let node = aEllipsis.previousSibling;
-        node.textContent = aFormatter(longString.initial + aResponse.substring);
-        aEllipsis.parentNode.removeChild(aEllipsis);
-
-        if (aMessage.category == CATEGORY_WEBDEV ||
-            aMessage.category == CATEGORY_OUTPUT) {
-          aMessage.clipboardText = aMessage.textContent;
-        }
-
-        this.emit("messages-updated", new Set([aMessage]));
-
-        if (toIndex != longString.length) {
-          this.logWarningAboutStringTooLong();
-        }
-      }.bind(this));
-  },
-
-  /**
    * Creates the anchor that displays the textual location of an incoming
    * message.
    *
    * @param string aSourceURL
    *        The URL of the source file responsible for the error.
    * @param number aSourceLine [optional]
    *        The line number on which the error occurred. If zero or omitted,
    *        there is no line number associated with this message.
@@ -2802,17 +2666,17 @@ WebConsoleFrame.prototype = {
 
       // If this event started with a mousedown event and it ends at a different
       // location, we consider this text selection.
       if (mousedown && this._startX != aEvent.clientX &&
           this._startY != aEvent.clientY) {
         return;
       }
 
-      aCallback(this, aEvent);
+      aCallback.call(this, aEvent);
     }, false);
   },
 
   /**
    * Handler for the pref-changed event coming from the toolbox.
    * Currently this function only handles the timestamps preferences.
    *
    * @private
@@ -3183,57 +3047,52 @@ JSTerm.prototype = {
 
     this.lastInputValue && this.setInputValue(this.lastInputValue);
   },
 
   /**
    * The JavaScript evaluation response handler.
    *
    * @private
-   * @param nsIDOMElement [aAfterNode]
-   *        Optional DOM element after which the evaluation result will be
+   * @param object [aAfterMessage]
+   *        Optional message after which the evaluation result will be
    *        inserted.
    * @param function [aCallback]
    *        Optional function to invoke when the evaluation result is added to
    *        the output.
    * @param object aResponse
    *        The message received from the server.
    */
   _executeResultCallback:
-  function JST__executeResultCallback(aAfterNode, aCallback, aResponse)
+  function JST__executeResultCallback(aAfterMessage, aCallback, aResponse)
   {
     if (!this.hud) {
       return;
     }
     if (aResponse.error) {
       Cu.reportError("Evaluation error " + aResponse.error + ": " +
                      aResponse.message);
       return;
     }
     let errorMessage = aResponse.exceptionMessage;
     let result = aResponse.result;
-    let inspectable = false;
-    if (result && !VariablesView.isPrimitive({ value: result })) {
-      inspectable = true;
-    }
     let helperResult = aResponse.helperResult;
     let helperHasRawOutput = !!(helperResult || {}).rawOutput;
-    let resultString = VariablesView.getString(result);
 
     if (helperResult && helperResult.type) {
       switch (helperResult.type) {
         case "clearOutput":
           this.clearOutput();
           break;
         case "inspectObject":
-          if (aAfterNode) {
-            if (!aAfterNode._objectActors) {
-              aAfterNode._objectActors = new Set();
+          if (aAfterMessage) {
+            if (!aAfterMessage._objectActors) {
+              aAfterMessage._objectActors = new Set();
             }
-            aAfterNode._objectActors.add(helperResult.object.actor);
+            aAfterMessage._objectActors.add(helperResult.object.actor);
           }
           this.openVariablesView({
             label: VariablesView.getString(helperResult.object),
             objectActor: helperResult.object,
           });
           break;
         case "error":
           try {
@@ -3252,76 +3111,43 @@ JSTerm.prototype = {
     // Hide undefined results coming from JSTerm helper functions.
     if (!errorMessage && result && typeof result == "object" &&
         result.type == "undefined" &&
         helperResult && !helperHasRawOutput) {
       aCallback && aCallback();
       return;
     }
 
-    let node;
-
-    if (errorMessage) {
-      node = this.writeOutput(errorMessage, CATEGORY_OUTPUT, SEVERITY_ERROR,
-                              aAfterNode, aResponse.timestamp);
-    }
-    else if (inspectable) {
-      node = this.writeOutputJS(resultString,
-                                this._evalOutputClick.bind(this, aResponse),
-                                aAfterNode, aResponse.timestamp);
-    }
-    else {
-      node = this.writeOutput(resultString, CATEGORY_OUTPUT, SEVERITY_LOG,
-                              aAfterNode, aResponse.timestamp);
-    }
+    let msg = new Messages.JavaScriptEvalOutput(aResponse,
+                                                { errorMessage: errorMessage });
+    this.hud.output.addMessage(msg);
 
     if (aCallback) {
       let oldFlushCallback = this.hud._flushCallback;
       this.hud._flushCallback = () => {
-        aCallback(node);
+        aCallback(msg.element);
         if (oldFlushCallback) {
           oldFlushCallback();
           this.hud._flushCallback = oldFlushCallback;
         }
         else {
           this.hud._flushCallback = null;
         }
       };
     }
 
-    node._objectActors = new Set();
-
-    let error = aResponse.exception;
-    if (WebConsoleUtils.isActorGrip(error)) {
-      node._objectActors.add(error.actor);
+    msg._afterMessage = aAfterMessage;
+    msg._objectActors = new Set();
+
+    if (WebConsoleUtils.isActorGrip(aResponse.exception)) {
+      msg._objectActors.add(aResponse.exception.actor);
     }
 
     if (WebConsoleUtils.isActorGrip(result)) {
-      node._objectActors.add(result.actor);
-
-      if (result.type == "longString") {
-        // Add an ellipsis to expand the short string if the object is not
-        // inspectable.
-
-        let body = node.getElementsByClassName("body")[0];
-        let ellipsis = this.hud.document.createElementNS(XHTML_NS, "a");
-        ellipsis.classList.add("longStringEllipsis");
-        ellipsis.textContent = l10n.getStr("longStringEllipsis");
-        ellipsis.href = "#";
-        ellipsis.draggable = false;
-
-        let formatter = function(s) '"' + s + '"';
-        let onclick = this.hud._longStringClick.bind(this.hud, node, result,
-                                                    formatter);
-        this.hud._addMessageLinkCallback(ellipsis, onclick);
-
-        body.appendChild(ellipsis);
-
-        node.clipboardText += " " + ellipsis.textContent;
-      }
+      msg._objectActors.add(result.actor);
     }
   },
 
   /**
    * Execute a string. Execution happens asynchronously in the content process.
    *
    * @param string [aExecuteString]
    *        The string you want to execute. If this is not provided, the current
@@ -3332,18 +3158,22 @@ JSTerm.prototype = {
   execute: function JST_execute(aExecuteString, aCallback)
   {
     // attempt to execute the content of the inputNode
     aExecuteString = aExecuteString || this.inputNode.value;
     if (!aExecuteString) {
       return;
     }
 
-    let node = this.writeOutput(aExecuteString, CATEGORY_INPUT, SEVERITY_LOG);
-    let onResult = this._executeResultCallback.bind(this, node, aCallback);
+    let message = new Messages.Simple(aExecuteString, {
+      category: "input",
+      severity: "log",
+    });
+    this.hud.output.addMessage(message);
+    let onResult = this._executeResultCallback.bind(this, message, aCallback);
 
     let options = { frame: this.SELECTED_FRAME };
     this.requestEvaluation(aExecuteString, options).then(onResult, onResult);
 
     // Append a new value in the history of executed code, or overwrite the most
     // recent entry. The most recent entry may contain the last edited input
     // value that was not evaluated yet.
     this.history[this.historyIndex++] = aExecuteString;
@@ -3769,24 +3599,26 @@ JSTerm.prototype = {
     if (aResponse.error) {
       Cu.reportError("Web Console evaluation failed. " + aResponse.error + ":" +
                      aResponse.message);
 
       aCallback && aCallback(aResponse);
       return;
     }
 
-    let exception = aResponse.exception;
-    if (exception) {
-      let node = this.writeOutput(aResponse.exceptionMessage,
-                                  CATEGORY_OUTPUT, SEVERITY_ERROR,
-                                  null, aResponse.timestamp);
-      node._objectActors = new Set();
-      if (WebConsoleUtils.isActorGrip(exception)) {
-        node._objectActors.add(exception.actor);
+    if (aResponse.exceptionMessage) {
+      let message = new Messages.Simple(aResponse.exceptionMessage, {
+        category: "output",
+        severity: "error",
+        timestamp: aResponse.timestamp,
+      });
+      this.hud.output.addMessage(message);
+      message._objectActors = new Set();
+      if (WebConsoleUtils.isActorGrip(aResponse.exception)) {
+        message._objectActors.add(aResponse.exception.actor);
       }
     }
 
     let helper = aResponse.helperResult || { type: null };
     let helperGrip = null;
     if (helper.type == "inspectObject") {
       helperGrip = helper.object;
     }
@@ -3797,84 +3629,16 @@ JSTerm.prototype = {
         this.hud._releaseObject(grip.actor);
       }
     }
 
     aCallback && aCallback(aResponse);
   },
 
 
-
-  /**
-   * Writes a JS object to the JSTerm outputNode.
-   *
-   * @param string aOutputMessage
-   *        The message to display.
-   * @param function [aCallback]
-   *        Optional function to invoke when users click the message.
-   * @param nsIDOMNode [aNodeAfter]
-   *        Optional DOM node after which you want to insert the new message.
-   *        This is used when execution results need to be inserted immediately
-   *        after the user input.
-   * @param number [aTimestamp]
-   *        Optional timestamp to show for the output message (millisconds since
-   *        the UNIX epoch). If no timestamp is provided then Date.now() is
-   *        used.
-   * @return nsIDOMNode
-   *         The new message node.
-   */
-  writeOutputJS:
-  function JST_writeOutputJS(aOutputMessage, aCallback, aNodeAfter, aTimestamp)
-  {
-    let link = null;
-    if (aCallback) {
-      link = this.hud.document.createElementNS(XHTML_NS, "a");
-      link.setAttribute("aria-haspopup", true);
-      link.textContent = aOutputMessage;
-      link.href = "#";
-      link.draggable = false;
-      this.hud._addMessageLinkCallback(link, aCallback);
-    }
-
-    return this.writeOutput(link || aOutputMessage, CATEGORY_OUTPUT,
-                            SEVERITY_LOG, aNodeAfter, aTimestamp);
-  },
-
-  /**
-   * Writes a message to the HUD that originates from the interactive
-   * JavaScript console.
-   *
-   * @param nsIDOMNode|string aOutputMessage
-   *        The message to display.
-   * @param number aCategory
-   *        The category of message: one of the CATEGORY_ constants.
-   * @param number aSeverity
-   *        The severity of message: one of the SEVERITY_ constants.
-   * @param nsIDOMNode [aNodeAfter]
-   *        Optional DOM node after which you want to insert the new message.
-   *        This is used when execution results need to be inserted immediately
-   *        after the user input.
-   * @param number [aTimestamp]
-   *        Optional timestamp to show for the output message (millisconds since
-   *        the UNIX epoch). If no timestamp is provided then Date.now() is
-   *        used.
-   * @return nsIDOMNode
-   *         The new message node.
-   */
-  writeOutput:
-  function JST_writeOutput(aOutputMessage, aCategory, aSeverity, aNodeAfter,
-                           aTimestamp)
-  {
-    let node = this.hud.createMessageNode(aCategory, aSeverity, aOutputMessage,
-                                          null, null, null, null, aTimestamp);
-    node._outputAfterNode = aNodeAfter;
-    this.hud.outputMessage(aCategory, node);
-    return node;
-  },
-
   /**
    * Clear the Web Console output.
    *
    * This method emits the "messages-cleared" notification.
    *
    * @param boolean aClearStorage
    *        True if you want to clear the console messages storage associated to
    *        this Web Console.
@@ -4567,31 +4331,16 @@ JSTerm.prototype = {
    */
   updateCompleteNode: function JSTF_updateCompleteNode(aSuffix)
   {
     // completion prefix = input, with non-control chars replaced by spaces
     let prefix = aSuffix ? this.inputNode.value.replace(/[\S]/g, " ") : "";
     this.completeNode.value = prefix + aSuffix;
   },
 
-  /**
-   * The click event handler for evaluation results in the output.
-   *
-   * @private
-   * @param object aResponse
-   *        The JavaScript evaluation response received from the server.
-   */
-  _evalOutputClick: function JST__evalOutputClick(aResponse)
-  {
-    this.openVariablesView({
-      label: VariablesView.getString(aResponse.result),
-      objectActor: aResponse.result,
-      autofocus: true,
-    });
-  },
 
   /**
    * Destroy the sidebar.
    * @private
    */
   _sidebarDestroy: function JST__sidebarDestroy()
   {
     if (this._variablesView) {
