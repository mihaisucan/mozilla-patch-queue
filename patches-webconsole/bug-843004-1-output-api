# HG changeset patch
# Parent e3be443ea09325e1655a7a9a9fd2e360c31b56d6
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1380139721 -10800

Bug 843004 - Part 1: use the ConsoleOutput API for eval results and for console API messages; r=robcee

diff --git a/browser/devtools/webconsole/console-output.js b/browser/devtools/webconsole/console-output.js
--- a/browser/devtools/webconsole/console-output.js
+++ b/browser/devtools/webconsole/console-output.js
@@ -1,15 +1,17 @@
 /* vim: set ts=2 et sw=2 tw=80: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
+const {Cc, Ci, Cu} = require("chrome");
+
 const Heritage = require("sdk/core/heritage");
 const XHTML_NS = "http://www.w3.org/1999/xhtml";
 const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
 
 // Constants for compatibility with the Web Console output implementation before
 // bug 778766.
 // TODO: remove these once bug 778766 is fixed.
 const COMPAT = {
@@ -26,16 +28,19 @@ const COMPAT = {
 
   // The possible message severities.
   SEVERITIES: {
     ERROR: 0,
     WARNING: 1,
     INFO: 2,
     LOG: 3,
   },
+
+// The indent of a console group in pixels.
+  GROUP_INDENT: 12,
 };
 
 /**
  * The ConsoleOutput object is used to manage output of messages in the Web
  * Console.
  *
  * @constructor
  * @param object owner
@@ -263,16 +268,24 @@ Messages.BaseMessage.prototype = {
    * Tells if this message is visible or not.
    * @type boolean
    */
   get visible() {
     return this.element && this.element.parentNode;
   },
 
   /**
+   * The owner DOM document.
+   * @type DOMElement
+   */
+  get document() {
+    return this.output.document;
+  },
+
+  /**
    * Holds the text-only representation of the message.
    * @type string
    */
   textContent: "",
 
   /**
    * Set of widgets included in this message.
    * @type Set
@@ -314,17 +327,17 @@ Messages.BaseMessage.prototype = {
       this.element = this._renderCompat();
     }
     return this;
   },
 
   /**
    * Prepare the message container for the Web Console, such that it is
    * compatible with the current implementation.
-   * TODO: remove this once bug 778766.
+   * TODO: remove this once bug 778766 is fixed.
    */
   _renderCompat: function()
   {
     let doc = this.output.document;
     let container = doc.createElementNS(XHTML_NS, "div");
     container.id = "console-msg-" + gSequenceId();
     container.className = "message";
     container.category = this._categoryCompat;
@@ -349,17 +362,17 @@ Messages.BaseMessage.prototype = {
  * @param string url
  *        The URL to display.
  * @param number timestamp
  *        The message date and time, milliseconds elapsed since 1 January 1970
  *        00:00:00 UTC.
  */
 Messages.NavigationMarker = function(url, timestamp)
 {
-  Messages.BaseMessage.apply(this, arguments);
+  Messages.BaseMessage.call(this);
   this._url = url;
   this.textContent = "------ " + url;
   this.timestamp = timestamp;
 };
 
 Messages.NavigationMarker.prototype = Heritage.extend(Messages.BaseMessage.prototype,
 {
   /**
@@ -415,16 +428,233 @@ Messages.NavigationMarker.prototype = He
     this.element.url = this._url;
     this.element.appendChild(doc.createTextNode("\n"));
 
     return this;
   },
 }); // Messages.NavigationMarker.prototype
 
 
+/**
+ * The Simple message is used to show any basic message in the Web Console.
+ *
+ * @constructor
+ * @extends Messages.BaseMessage
+ * @param string|DOMElement message
+ *        The message to display.
+ * @param object [options]
+ *        Options for this message:
+ *        - html: (boolean) tells if |message| is an HTML string or not.
+ *        Defaults to |false|.
+ *        - category: (string) category that this message belongs to. Defaults
+ *        to no category.
+ *        - severity: (string) severity of the message. Defaults to no severity.
+ *        - timestamp: (number) date and time when the message was recorded.
+ *        Defaults to |Date.now()|.
+ *        - link: (string) if provided, the message will be wrapped in an anchor
+ *        pointing to the given URL here.
+ *        - linkCallback: (function) if provided, the message will be wrapped in
+ *        an anchor. The |linkCallback| function will be added as click event
+ *        handler.
+ *        - location: object that tells the message source: url, line, column
+ *        and lineText.
+ *        - className: (string) additional element class names for styling
+ *        purposes.
+ *        - _groupDepthCompat: (number) group depth.
+ *        - _afterMessageElement: (DOMElement) add this message element after
+ *        the given element.
+ */
+Messages.Simple = function(message, options = {})
+{
+  Messages.BaseMessage.call(this);
+
+  this.category = options.category;
+  this.severity = options.severity;
+  this.location = options.location;
+  this.timestamp = options.timestamp || Date.now();
+
+  this._message = message;
+  this._messageIsHTML = options.html;
+  this._className = options.className;
+};
+
+Messages.Simple.prototype = Heritage.extend(Messages.BaseMessage.prototype,
+{
+  /**
+   * Message timestamp.
+   *
+   * @type number
+   *       Milliseconds elapsed since 1 January 1970 00:00:00 UTC.
+   */
+  timestamp: 0,
+
+  _categoryCompat: COMPAT.CATEGORIES.NETWORK,
+  _severityCompat: COMPAT.SEVERITIES.LOG,
+  _categoryNameCompat: "network",
+  _severityNameCompat: "info",
+  _filterKeyCompat: "networkinfo",
+
+  /**
+   * Prepare the DOM element for this message.
+   * @return this
+   */
+  render: function()
+  {
+    if (this.element) {
+      return this;
+    }
+
+    let timestamp = new Widgets.MessageTimestamp(this, this.timestamp).render();
+    this.widgets.add(timestamp);
+
+    let icon = this.document.createElementNS(XHTML_NS, "span");
+    icon.className = "icon";
+
+    let body = this._renderBody();
+    let location = this._renderLocation();
+
+    Messages.BaseMessage.prototype.render.call(this);
+    this.element.appendChild(timestamp.element);
+    this.element.appendChild(icon);
+    this.element.appendChild(body);
+    if (location) {
+      this.element.appendChild(location);
+    }
+    this.element.appendChild(this.document.createTextNode("\n"));
+
+    return this;
+  },
+
+  _renderBody: function()
+  {
+    let body = this.document.createElementNS(XHTML_NS, "span");
+    body.className = "body devtools-monospace";
+    if (this._className) {
+      body.className += " " + this._className;
+    }
+
+    if (this._message instanceof Ci.nsIDOMElement) {
+      body.appendChild(this._message);
+    } else if (this._messageIsHTML) {
+      body.innerHTML = this._message;
+    } else {
+      body.textContent = this._message;
+    }
+
+    return body;
+  },
+
+  _renderLocation: function()
+  {
+    if (!this.location) {
+      return null;
+    }
+
+    let {url, line} = this.location;
+
+    // The ConsoleOutput owner is a WebConsoleFrame instance from webconsole.js.
+    // TODO: move createLocationNode() into this file when bug 778766 is fixed.
+    return this.output.owner.createLocationNode(url, line);
+  },
+}); // Messages.Simple.prototype
+
+
+
+/**
+ * The JavaScriptEvalOutput message.
+ *
+ * @constructor
+ * @extends Messages.Simple
+ * @param object result
+ *        The message to display.
+ */
+Messages.JavaScriptEvalOutput = function(result, error)
+{
+  let options = {
+    category: "output",
+    severity: severity,
+  };
+  Messages.Simple.call(this, message, options);
+
+  this.category = options.category;
+  this.severity = options.severity;
+  this.timestamp = options.timestamp || Date.now();
+};
+
+Messages.JavaScriptEvalOutput.prototype = Heritage.extend(Messages.Simple.prototype,
+{
+}); // Messages.JavaScriptEvalOutput.prototype
+
+
+let Widgets = {};
+
+/**
+ * The base widget class.
+ *
+ * @constructor
+ * @param object message
+ *        The owning message.
+ */
+Widgets.BaseWidget = function(message)
+{
+  this.message = message;
+};
+
+Widgets.BaseWidget.prototype = {
+  message: null,
+  element: null,
+  textContent: "",
+
+  get document() {
+    return this.message.document;
+  },
+
+  render: function() { },
+  destroy: function() { },
+};
+
+/**
+ * The timestamp widget.
+ *
+ * @constructor
+ * @param object message
+ *        The owning message.
+ * @param number timestamp
+ *        The UNIX timestamp to display.
+ */
+Widgets.MessageTimestamp = function(message, timestamp)
+{
+  Widgets.BaseWidget.call(this, message);
+  this.timestamp = timestamp;
+};
+
+Widgets.MessageTimestamp.prototype = Heritage.extend(Widgets.BaseWidget.prototype,
+{
+  render: function()
+  {
+    if (this.element) {
+      return this;
+    }
+
+    this.textContent = l10n.timestampString(this.timestamp);
+    this.element = this.document.createElementNS(XHTML_NS, "span");
+    this.element.className = "timestamp devtools-monospace";
+    this.element.textContent = this.textContent + " ";
+
+    // Apply the current group by indenting appropriately.
+    // TODO: remove this once bug 778766 is fixed.
+    this.element.style.marginRight = this.message._groupDepthCompat *
+                                     COMPAT.GROUP_INDENT + "px";
+
+    return this;
+  },
+});
+
+
 function gSequenceId()
 {
   return gSequenceId.n++;
 }
 gSequenceId.n = 0;
 
 exports.ConsoleOutput = ConsoleOutput;
 exports.Messages = Messages;
+exports.Widgets = Widgets;
diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -45,20 +45,16 @@ const STRICT_TRANSPORT_SECURITY_LEARN_MO
 const HELP_URL = "https://developer.mozilla.org/docs/Tools/Web_Console/Helpers";
 
 const VARIABLES_VIEW_URL = "chrome://browser/content/devtools/widgets/VariablesView.xul";
 
 const CONSOLE_DIR_VIEW_HEIGHT = 0.6;
 
 const IGNORED_SOURCE_URLS = ["debugger eval code", "self-hosted"];
 
-// The amount of time in milliseconds that must pass between messages to
-// trigger the display of a new group.
-const NEW_GROUP_DELAY = 5000;
-
 // The amount of time in milliseconds that we wait before performing a live
 // search.
 const SEARCH_DELAY = 200;
 
 // The number of lines that are displayed in the console output by default, for
 // each category. The user can change this number by adjusting the hidden
 // "devtools.hud.loglimit.{network,cssparser,exception,console}" preferences.
 const DEFAULT_LOG_LIMIT = 200;
@@ -3085,55 +3081,60 @@ JSTerm.prototype = {
     // Hide undefined results coming from JSTerm helper functions.
     if (!errorMessage && result && typeof result == "object" &&
         result.type == "undefined" &&
         helperResult && !helperHasRawOutput) {
       aCallback && aCallback();
       return;
     }
 
-    let node;
+    let msg;
+    let options = {
+      timestamp: aResponse.timestamp,
+      category: "output",
+      severity: "log",
+      _afterMessageElement: aAfterNode,
+    };
 
     if (errorMessage) {
-      node = this.writeOutput(errorMessage, CATEGORY_OUTPUT, SEVERITY_ERROR,
-                              aAfterNode, aResponse.timestamp);
-    }
-    else if (inspectable) {
-      node = this.writeOutputJS(resultString,
-                                this._evalOutputClick.bind(this, aResponse),
-                                aAfterNode, aResponse.timestamp);
+      options.severity = "error";
+      msg = new Messages.Simple(errorMessage, options);
     }
     else {
-      node = this.writeOutput(resultString, CATEGORY_OUTPUT, SEVERITY_LOG,
-                              aAfterNode, aResponse.timestamp);
-    }
+      if (inspectable) {
+        options.linkCallback = this._evalOutputClick.bind(this, aResponse);
+      }
+      msg = new Messages.Simple(resultString, options);
+    }
+
+    this.output.addMessage(msg);
 
     if (aCallback) {
       let oldFlushCallback = this.hud._flushCallback;
       this.hud._flushCallback = () => {
         aCallback(node);
         if (oldFlushCallback) {
           oldFlushCallback();
           this.hud._flushCallback = oldFlushCallback;
         }
         else {
           this.hud._flushCallback = null;
         }
       };
     }
 
-    node._objectActors = new Set();
+    msg._objectActors = new Set();
 
     let error = aResponse.exception;
     if (WebConsoleUtils.isActorGrip(error)) {
-      node._objectActors.add(error.actor);
+      msg._objectActors.add(error.actor);
     }
 
     if (WebConsoleUtils.isActorGrip(result)) {
-      node._objectActors.add(result.actor);
+      msg._objectActors.add(result.actor);
 
       if (result.type == "longString") {
         // Add an ellipsis to expand the short string if the object is not
         // inspectable.
 
         let body = node.getElementsByClassName("body")[0];
         let ellipsis = this.hud.document.createElementNS(XHTML_NS, "a");
         ellipsis.classList.add("longStringEllipsis");
