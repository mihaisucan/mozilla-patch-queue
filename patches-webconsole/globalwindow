# HG changeset patch
# Parent f3a770796e1dd444be06b6808c1dbde43c08ae4a
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1348825440 -3600

diff --git a/browser/devtools/webconsole/HUDService.jsm b/browser/devtools/webconsole/HUDService.jsm
--- a/browser/devtools/webconsole/HUDService.jsm
+++ b/browser/devtools/webconsole/HUDService.jsm
@@ -55,16 +55,18 @@ const MINIMUM_CONSOLE_HEIGHT = 150;
 const MINIMUM_PAGE_HEIGHT = 50;
 
 // The default console height, as a ratio from the content window inner height.
 const DEFAULT_CONSOLE_HEIGHT = 0.33;
 
 // points to the file to load in the Web Console iframe.
 const UI_IFRAME_URL = "chrome://browser/content/devtools/webconsole.xul";
 
+const UI_WINDOW_FEATURES = "chrome,titlebar,toolbar,centerscreen,resizable,dialog=no";
+
 ///////////////////////////////////////////////////////////////////////////
 //// The HUD service
 
 function HUD_SERVICE()
 {
   // These methods access the "this" object, but they're registered as
   // event listeners. So we hammer in the "this" binding.
   this.onTabClose = this.onTabClose.bind(this);
@@ -614,59 +616,52 @@ WebConsole.prototype = {
     catch (ex) {}
 
     let left = 0;
     try {
       left = Services.prefs.getIntPref("devtools.webconsole.left");
     }
     catch (ex) {}
 
-    let panel = this.chromeDocument.createElementNS(XUL_NS, "panel");
+    //let panel = this.chromeDocument.createElementNS(XUL_NS, "panel");
+    let win = Services.ww.openWindow(null, UI_IFRAME_URL, "_blank",
+                                     UI_WINDOW_FEATURES, null);
 
     let config = { id: "console_window_" + this.hudId,
                    label: this.getPanelTitle(),
                    titlebar: "normal",
                    noautohide: "true",
                    norestorefocus: "true",
                    close: "true",
                    flex: "1",
                    hudId: this.hudId,
                    width: width,
                    position: "overlap",
                    top: top,
                    left: left,
                  };
 
-    for (let attr in config) {
-      panel.setAttribute(attr, config[attr]);
-    }
+    let onPopupShown = (function HUD_onPopupShown() {
+      win.removeEventListener("load", onPopupShown, false);
+      dump("window onload\n");
 
-    panel.classList.add("web-console-panel");
-
-    let onPopupShown = (function HUD_onPopupShown() {
-      panel.removeEventListener("popupshown", onPopupShown, false);
+      this.iframeWindow = win.wrappedJSObject;
+      this.ui.positionConsole("window", this.iframeWindow);
+      this._currentUIPosition = "window";
 
       // Make sure that the HUDBox size updates when the panel is resized.
 
-      let height = panel.clientHeight;
-
-      this.iframe.style.height = "auto";
-      this.iframe.flex = 1;
-
-      panel.setAttribute("height", height);
+      //this.iframe.style.height = "auto";
+      //this.iframe.flex = 1;
     }).bind(this);
 
-    panel.addEventListener("popupshown", onPopupShown,false);
+    win.addEventListener("load", onPopupShown, false);
 
     let onPopupHidden = (function HUD_onPopupHidden(aEvent) {
-      if (aEvent.target != panel) {
-        return;
-      }
-
-      panel.removeEventListener("popuphidden", onPopupHidden, false);
+      win.removeEventListener("close", onPopupHidden, false);
 
       let width = 0;
       try {
         width = Services.prefs.getIntPref("devtools.webconsole.width");
       }
       catch (ex) { }
 
       if (width > 0) {
@@ -674,52 +669,56 @@ WebConsole.prototype = {
       }
 
       // Are we destroying the HUD or repositioning it?
       if (this.consoleWindowUnregisterOnHide) {
         HUDService.deactivateHUDForContext(this.tab, false);
       }
     }).bind(this);
 
-    panel.addEventListener("popuphidden", onPopupHidden, false);
+    win.addEventListener("close", onPopupHidden, false);
 
     let lastIndex = -1;
 
     if (this.outputNode && this.outputNode.getIndexOfFirstVisibleRow) {
       lastIndex = this.outputNode.getIndexOfFirstVisibleRow() +
                   this.outputNode.getNumberOfVisibleRows() - 1;
     }
 
     if (this.splitter.parentNode) {
       this.splitter.parentNode.removeChild(this.splitter);
     }
 
     this._beforePositionConsole("window", lastIndex);
 
-    panel.appendChild(this.iframe);
+    //panel.appendChild(this.iframe);
 
     let space = this.chromeDocument.createElement("spacer");
     space.flex = 1;
 
     let bottomBox = this.chromeDocument.createElement("hbox");
 
     let resizer = this.chromeDocument.createElement("resizer");
     resizer.setAttribute("dir", "bottomend");
     resizer.setAttribute("element", config.id);
 
     bottomBox.appendChild(space);
     bottomBox.appendChild(resizer);
 
-    panel.appendChild(bottomBox);
+    //panel.appendChild(bottomBox);
 
-    this.mainPopupSet.appendChild(panel);
+    //this.mainPopupSet.appendChild(panel);
 
-    panel.openPopup(null, "overlay", left, top, false, false);
+    //panel.openPopup(null, "overlay", left, top, false, false);
 
-    this.consolePanel = panel;
+    if (this.iframe.parentNode) {
+      this.iframe.parentNode.removeChild(this.iframe);
+    }
+
+    this.consolePanel = win;
     this.consoleWindowUnregisterOnHide = true;
   },
 
   /**
    * Retrieve the Web Console panel title.
    *
    * @return string
    *         The Web Console panel title.
@@ -789,18 +788,17 @@ WebConsole.prototype = {
     else {
       nBox.insertBefore(this.splitter, node);
       nBox.insertBefore(this.iframe, this.splitter);
     }
 
     if (this.consolePanel) {
       // must destroy the consolePanel
       this.consoleWindowUnregisterOnHide = false;
-      this.consolePanel.hidePopup();
-      this.consolePanel.parentNode.removeChild(this.consolePanel);
+      this.consolePanel.close();
       this.consolePanel = null;   // remove this as we're not in panel anymore
       this.iframe.removeAttribute("flex");
       this.iframe.removeAttribute("height");
       this.iframe.style.height = height + "px";
     }
   },
 
   /**
@@ -815,29 +813,29 @@ WebConsole.prototype = {
   _beforePositionConsole:
   function WC__beforePositionConsole(aPosition, aLastIndex)
   {
     if (!this.ui) {
       return;
     }
 
     let onLoad = function() {
-      this.iframe.removeEventListener("load", onLoad, true);
-      this.iframeWindow = this.iframe.contentWindow.wrappedJSObject;
+      this.consolePanel.removeEventListener("load", onLoad, true);
+      //this.iframeWindow = this.iframe.contentWindow.wrappedJSObject;
       this.ui.positionConsole(aPosition, this.iframeWindow);
 
       if (aLastIndex > -1 && aLastIndex < this.outputNode.getRowCount()) {
         this.outputNode.ensureIndexIsVisible(aLastIndex);
       }
 
       this._currentUIPosition = aPosition;
       Services.prefs.setCharPref("devtools.webconsole.position", aPosition);
     }.bind(this);
 
-    this.iframe.addEventListener("load", onLoad, true);
+    //this.consolePanel.addEventListener("load", onLoad, true);
   },
 
   /**
    * The JSTerm object that manages the console's input.
    * @see webconsole.js::JSTerm
    * @type object
    */
   get jsterm()
@@ -871,17 +869,17 @@ WebConsole.prototype = {
    * @param string aURI
    *        New page location.
    * @param string aTitle
    *        New page title.
    */
   onLocationChange: function WC_onLocationChange(aURI, aTitle)
   {
     if (this.consolePanel) {
-      this.consolePanel.label = this.getPanelTitle();
+      this.consolePanel.title = this.getPanelTitle();
     }
   },
 
   /**
    * Alias for the WebConsoleFrame.setFilterState() method.
    * @see webconsole.js::WebConsoleFrame.setFilterState()
    */
   setFilterState: function WC_setFilterState()
@@ -920,19 +918,18 @@ WebConsole.prototype = {
       if (panel != this.consolePanel) {
         panel.hidePopup();
       }
     }
 
     let onDestroy = function WC_onDestroyUI() {
       // Remove the iframe and the consolePanel if the Web Console is inside a
       // floating panel.
-      if (this.consolePanel && this.consolePanel.parentNode) {
-        this.consolePanel.hidePopup();
-        this.consolePanel.parentNode.removeChild(this.consolePanel);
+      if (this.consolePanel) {
+        this.consolePanel.close();
         this.consolePanel = null;
       }
 
       if (this.iframe.parentNode) {
         this.iframe.parentNode.removeChild(this.iframe);
       }
 
       if (this.splitter.parentNode) {
@@ -977,17 +974,17 @@ var HeadsUpDisplayUICommands = {
     var tabId = gBrowser.getNotificationBox(linkedBrowser).getAttribute("id");
     var hudId = "hud_" + tabId;
     var ownerDocument = gBrowser.selectedTab.ownerDocument;
     var hud = ownerDocument.getElementById(hudId);
     var hudRef = HUDService.hudReferences[hudId];
 
     if (hudRef && hud) {
       if (hudRef.consolePanel) {
-        hudRef.consolePanel.hidePopup();
+        hudRef.consolePanel.close();
       }
       else {
         HUDService.storeHeight(hudId);
 
         HUDService.animate(hudId, ANIMATE_OUT, function() {
           // If the user closes the console while the console is animating away,
           // then these callbacks will queue up, but all the callbacks after the
           // first will have no console to operate on. This test handles this
