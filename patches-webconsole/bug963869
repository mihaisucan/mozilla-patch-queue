# HG changeset patch
# Parent 598eff91dfdcd38cc8aae1bdd05484ded9f74f0c
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1391634361 -7200

Bug 963869 - Fix for intermittent TEST-UNEXPECTED-FAIL | browser_console_dead_objects.js | Test timed out; r=me; try: -b do -p linux,linux64,macosx64,win32,win64 -u mochitest-bc -t none

diff --git a/browser/devtools/webconsole/test/browser.ini b/browser/devtools/webconsole/test/browser.ini
--- a/browser/devtools/webconsole/test/browser.ini
+++ b/browser/devtools/webconsole/test/browser.ini
@@ -115,17 +115,16 @@ support-files =
 [browser_bug_871156_ctrlw_close_tab.js]
 [browser_cached_messages.js]
 [browser_console.js]
 [browser_console_addonsdk_loader_exception.js]
 [browser_console_clear_on_reload.js]
 [browser_console_click_focus.js]
 [browser_console_consolejsm_output.js]
 [browser_console_dead_objects.js]
-skip-if = true # bug 963869
 [browser_console_error_source_click.js]
 [browser_console_filters.js]
 [browser_console_iframe_messages.js]
 [browser_console_keyboard_accessibility.js]
 [browser_console_log_inspectable_object.js]
 [browser_console_native_getters.js]
 [browser_console_navigation_marker.js]
 [browser_console_nsiconsolemessage.js]
diff --git a/browser/devtools/webconsole/test/browser_console_dead_objects.js b/browser/devtools/webconsole/test/browser_console_dead_objects.js
--- a/browser/devtools/webconsole/test/browser_console_dead_objects.js
+++ b/browser/devtools/webconsole/test/browser_console_dead_objects.js
@@ -1,86 +1,81 @@
 /*
  * Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
 // Check that Dead Objects do not break the Web/Browser Consoles. See bug 883649.
+// This test does:
+// - opens a new tab,
+// - opens the Browser Console,
+// - stores a reference to the content document of the tab on the chrome window object,
+// - closes the tab,
+// - tries to use the object that was pointing to the now-defunct content
+// document. This is the dead object.
 
 const TEST_URI = "data:text/html;charset=utf8,<p>dead objects!";
 
 function test()
 {
   let hud = null;
 
-  addTab(TEST_URI);
-  browser.addEventListener("load", function onLoad() {
-    browser.removeEventListener("load", onLoad, true);
+  Task.spawn(runner).then(finishTest);
+
+  function* runner() {
+    let {tab} = yield loadTab(TEST_URI);
+
     info("open the browser console");
-    HUDService.toggleBrowserConsole().then(onBrowserConsoleOpen);
-  }, true);
 
-  function onBrowserConsoleOpen(aHud)
-  {
-    hud = aHud;
+    hud = yield HUDService.toggleBrowserConsole();
     ok(hud, "browser console opened");
 
     hud.jsterm.clearOutput();
-    hud.jsterm.execute("Cu = Components.utils;" +
-                       "Cu.import('resource://gre/modules/Services.jsm');" +
-                       "chromeWindow = Services.wm.getMostRecentWindow('navigator:browser');" +
-                       "foobarzTezt = chromeWindow.content.document;" +
-                       "delete chromeWindow", onAddVariable);
-  }
 
-  function onAddVariable()
-  {
+    // Add the reference to the content document.
+
+    yield execute("Cu = Components.utils;" +
+                  "Cu.import('resource://gre/modules/Services.jsm');" +
+                  "chromeWindow = Services.wm.getMostRecentWindow('navigator:browser');" +
+                  "foobarzTezt = chromeWindow.content.document;" +
+                  "delete chromeWindow");
+
     gBrowser.removeCurrentTab();
 
-    hud.jsterm.execute("foobarzTezt", onReadVariable);
-  }
+    let msg = yield execute("foobarzTezt");
 
-  function onReadVariable(msg)
-  {
     isnot(hud.outputNode.textContent.indexOf("[object DeadObject]"), -1,
           "dead object found");
 
-    hud.jsterm.setInputValue("foobarzTezt");
+    hud.jsterm.setInputValue("foobarzTezt.h");
+    hud.jsterm.complete(hud.jsterm.COMPLETE_HINT_ONLY);
 
-    for (let c of ".hello") {
-      EventUtils.synthesizeKey(c, {}, hud.iframeWindow);
-    }
+    yield execute();
 
-    hud.jsterm.execute(null, () => {
-      // executeSoon() is needed to get out of the execute() event loop.
-      executeSoon(onReadProperty.bind(null, msg));
-    });
-  }
-
-  function onReadProperty(deadObjectMessage)
-  {
     isnot(hud.outputNode.textContent.indexOf("can't access dead object"), -1,
           "'cannot access dead object' message found");
 
     // Click the second execute output.
-    let clickable = deadObjectMessage.querySelector("a");
+    let clickable = msg.querySelector("a");
     ok(clickable, "clickable object found");
     isnot(clickable.textContent.indexOf("[object DeadObject]"), -1,
           "message text check");
 
-    hud.jsterm.once("variablesview-fetched", onFetched);
-    EventUtils.synthesizeMouse(clickable, 2, 2, {}, hud.iframeWindow);
+    executeSoon(() => {
+      EventUtils.synthesizeMouse(clickable, 2, 2, {}, hud.iframeWindow);
+    });
+
+    yield hud.jsterm.once("variablesview-fetched");
+    ok(true, "variables view fetched");
+
+    msg = yield execute("delete window.foobarzTezt; 2013-26");
+
+    isnot(msg.textContent.indexOf("1987"), -1, "result message found");
   }
 
-  function onFetched()
-  {
-    ok(true, "variables view fetched");
-    hud.jsterm.execute("delete window.foobarzTezt; 2013-26", onCalcResult);
-  }
-
-  function onCalcResult()
-  {
-    isnot(hud.outputNode.textContent.indexOf("1987"), -1, "result message found");
-
-    // executeSoon() is needed to get out of the execute() event loop.
-    executeSoon(finishTest);
+  function execute(str) {
+    let deferred = promise.defer();
+    hud.jsterm.execute(str, (msg) => {
+      deferred.resolve(msg);
+    });
+    return deferred.promise;
   }
 }
