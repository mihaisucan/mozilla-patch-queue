# HG changeset patch
# User Victor Porof <vporof@mozilla.com>
# Date 1358875490 -7200
# Node ID 5ff300a5d67b72a57e0aacd1a1f86e877dd6fbd7
# Parent  1bc9ef10c2613b04763583d361f6ee902b5fd43a
Bug 832473 - Variables View: empty variable is rendered wrongly if it is added within scope with label, r=past

diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-data.js b/browser/devtools/debugger/test/browser_dbg_propertyview-data.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-data.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-data.js
@@ -69,8 +69,34 @@ function testVariablesView()
   testSecondLevelContents();
   testThirdLevelContents();
   testIntegrity(arr, obj);
 
+  let fooScope = gVariablesView.addScope("foo");
+  let anonymousVar = fooScope.addVar();
+
+  let anonymousScope = gVariablesView.addScope();
+  let barVar = anonymousScope.addVar("bar");
+
+  is(fooScope.header, true,
+    "A named scope should have a header visible.");
+  is(fooScope.target.hasAttribute("non-header"), false,
+    "The non-header attribute should not be applied to scopes with headers.");
+
+  is(anonymousScope.header, false,
+    "An anonymous scope should have a header visible.");
+  is(anonymousScope.target.hasAttribute("non-header"), true,
+    "The non-header attribute should not be applied to scopes without headers.");
+
+  is(barVar.header, true,
+    "A named variable should have a header visible.");
+  is(barVar.target.hasAttribute("non-header"), false,
+    "The non-header attribute should not be applied to variables with headers.");
+
+  is(anonymousVar.header, false,
+    "An anonymous variable should have a header visible.");
+  is(anonymousVar.target.hasAttribute("non-header"), true,
+    "The non-header attribute should not be applied to variables without headers.");
+
   gVariablesView.clearHierarchy();
   is (gVariablesView._prevHierarchy.size, 0,
     "The previous hierarchy should have been cleared.");
   is (gVariablesView._currHierarchy.size, 0,
@@ -102,20 +128,20 @@ function testHeader() {
 
   gScope.showHeader();
   gVariable.showHeader();
 
-  is(gScope.header, true,
-    "The scope title header should now be visible");
-  is(gVariable.header, true,
-    "The variable title header should now be visible");
+  is(gScope.header, false,
+    "The scope title header should still not be visible");
+  is(gVariable.header, false,
+    "The variable title header should still not be visible");
 
   gScope.hideHeader();
   gVariable.hideHeader();
 
   is(gScope.header, false,
-    "The scope title header should now be hidden");
+    "The scope title header should now still be hidden");
   is(gVariable.header, false,
-    "The variable title header should now be hidden");
+    "The variable title header should now still be hidden");
 }
 
 function testFirstLevelContents() {
   let someProp0 = gVariable.get("someProp0");
diff --git a/browser/devtools/shared/VariablesView.jsm b/browser/devtools/shared/VariablesView.jsm
--- a/browser/devtools/shared/VariablesView.jsm
+++ b/browser/devtools/shared/VariablesView.jsm
@@ -697,9 +697,9 @@ Scope.prototype = {
   /**
    * Shows the scope's title header.
    */
   showHeader: function S_showHeader() {
-    if (this._isHeaderVisible) {
+    if (this._isHeaderVisible || !this._nameString) {
       return;
     }
     this._target.removeAttribute("non-header");
     this._isHeaderVisible = true;
@@ -1385,9 +1385,11 @@ create({ constructor: Variable, proto: S
    */
   get setter() this._initialDescriptor.set,
 
   /**
-   * Sets the specific grip for this variable.
+   * Sets the specific grip for this variable (applies the text content and
+   * class name to the value label).
+   *
    * The grip should contain the value or the type & class, as defined in the
    * remote debugger protocol. For convenience, undefined and null are
    * both considered types.
    *
@@ -1400,25 +1402,20 @@ create({ constructor: Variable, proto: S
    *             - { type: "null" }
    *             - { type: "object", class: "Object" }
    */
   _setGrip: function V__setGrip(aGrip) {
+    // Don't allow displaying grip information if there's no name available.
+    if (!this._nameString) {
+      return;
+    }
+
     if (aGrip === undefined) {
       aGrip = { type: "undefined" };
     }
     if (aGrip === null) {
       aGrip = { type: "null" };
     }
-    this._applyGrip(aGrip);
-  },
 
-  /**
-   * Applies the necessary text content and class name to a value node based
-   * on a grip.
-   *
-   * @param any aGrip
-   *        @see Variable._setGrip
-   */
-  _applyGrip: function V__applyGrip(aGrip) {
     let prevGrip = this._valueGrip;
     if (prevGrip) {
       this._valueLabel.classList.remove(VariablesView.getClass(prevGrip));
     }
@@ -1440,13 +1437,18 @@ create({ constructor: Variable, proto: S
    */
   _init: function V__init(aName, aDescriptor) {
     this._idString = generateId(this._nameString = aName);
     this._displayScope(aName, "variable");
-    this._displayVariable();
-    this._customizeVariable();
-    this._prepareTooltip();
-    this._setAttributes();
-    this._addEventListeners();
+
+    // Don't allow displaying variable information there's no name available.
+    if (this._nameString) {
+      this._displayVariable();
+      this._customizeVariable();
+      this._prepareTooltip();
+      this._setAttributes();
+      this._addEventListeners();
+    }
+
     this._onInit(this.ownerView._store.size < LAZY_APPEND_BATCH);
   },
 
   /**
@@ -1846,13 +1848,18 @@ create({ constructor: Property, proto: V
    */
   _init: function P__init(aName, aDescriptor) {
     this._idString = generateId(this._nameString = aName);
     this._displayScope(aName, "property");
-    this._displayVariable();
-    this._customizeVariable();
-    this._prepareTooltip();
-    this._setAttributes();
-    this._addEventListeners();
+
+    // Don't allow displaying property information there's no name available.
+    if (this._nameString) {
+      this._displayVariable();
+      this._customizeVariable();
+      this._prepareTooltip();
+      this._setAttributes();
+      this._addEventListeners();
+    }
+
     this._onInit(this.ownerView._store.size < LAZY_APPEND_BATCH);
   },
 
   /**
