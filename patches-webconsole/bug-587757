# HG changeset patch
# Parent 7cc974e3a6a3a8e3fb08cbef3638e0685d0481c4
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1363367007 25200
Bug 587757 - (global-console) Implement Browser Console

diff --git a/browser/base/content/browser-appmenu.inc b/browser/base/content/browser-appmenu.inc
--- a/browser/base/content/browser-appmenu.inc
+++ b/browser/base/content/browser-appmenu.inc
@@ -144,16 +144,18 @@
         <menupopup id="appmenu_webDeveloper_popup">
           <menuitem id="appmenu_devToolbox"
                     observes="devtoolsMenuBroadcaster_DevToolbox"/>
           <menuseparator id="appmenu_devtools_separator"/>
           <menuitem id="appmenu_devToolbar"
                     observes="devtoolsMenuBroadcaster_DevToolbar"/>
           <menuitem id="appmenu_chromeDebugger"
                     observes="devtoolsMenuBroadcaster_ChromeDebugger"/>
+          <menuitem id="appmenu_browserConsole"
+                    observes="devtoolsMenuBroadcaster_BrowserConsole"/>
           <menuitem id="appmenu_responsiveUI"
                     observes="devtoolsMenuBroadcaster_ResponsiveUI"/>
           <menuitem id="appmenu_scratchpad"
                     observes="devtoolsMenuBroadcaster_Scratchpad"/>
           <menuitem id="appmenu_pageSource"
                     observes="devtoolsMenuBroadcaster_PageSource"/>
           <menuitem id="appmenu_errorConsole"
                     observes="devtoolsMenuBroadcaster_ErrorConsole"/>
diff --git a/browser/base/content/browser-menubar.inc b/browser/base/content/browser-menubar.inc
--- a/browser/base/content/browser-menubar.inc
+++ b/browser/base/content/browser-menubar.inc
@@ -571,16 +571,18 @@
                             observes="devtoolsMenuBroadcaster_DevToolbox"
                             accesskey="&devToolboxMenuItem.accesskey;"/>
                   <menuseparator id="menu_devtools_separator"/>
                   <menuitem id="menu_devToolbar"
                             observes="devtoolsMenuBroadcaster_DevToolbar"
                             accesskey="&devToolbarMenu.accesskey;"/>
                   <menuitem id="menu_chromeDebugger"
                             observes="devtoolsMenuBroadcaster_ChromeDebugger"/>
+                  <menuitem id="menu_browserConsole"
+                            observes="devtoolsMenuBroadcaster_BrowserConsole"/>
                   <menuitem id="menu_responsiveUI"
                             observes="devtoolsMenuBroadcaster_ResponsiveUI"
                             accesskey="&responsiveDesignTool.accesskey;"/>
                   <menuitem id="menu_scratchpad"
                             observes="devtoolsMenuBroadcaster_Scratchpad"
                             accesskey="&scratchpad.accesskey;"/>
                   <menuitem id="menu_pageSource"
                             observes="devtoolsMenuBroadcaster_PageSource"
diff --git a/browser/base/content/browser-sets.inc b/browser/base/content/browser-sets.inc
--- a/browser/base/content/browser-sets.inc
+++ b/browser/base/content/browser-sets.inc
@@ -91,16 +91,17 @@
     <command id="Browser:RestoreLastSession" oncommand="restoreLastSession();" disabled="true"/>
 
     <command id="Tools:Search" oncommand="BrowserSearch.webSearch();"/>
     <command id="Tools:Downloads" oncommand="BrowserDownloadsUI();"/>
     <command id="Tools:DevToolbox" oncommand="gDevToolsBrowser.toggleToolboxCommand(gBrowser);"/>
     <command id="Tools:DevToolbar" oncommand="DeveloperToolbar.toggle();" disabled="true" hidden="true"/>
     <command id="Tools:DevToolbarFocus" oncommand="DeveloperToolbar.focusToggle();" disabled="true"/>
     <command id="Tools:ChromeDebugger" oncommand="DebuggerUI.toggleChromeDebugger();" disabled="true" hidden="true"/>
+    <command id="Tools:BrowserConsole" oncommand="HUDConsoleUI.toggleBrowserConsole();" disabled="true" hidden="true"/>
     <command id="Tools:Scratchpad" oncommand="Scratchpad.openScratchpad();" disabled="true" hidden="true"/>
     <command id="Tools:ResponsiveUI" oncommand="ResponsiveUI.toggle();" disabled="true" hidden="true"/>
     <command id="Tools:Addons" oncommand="BrowserOpenAddonsMgr();"/>
     <command id="Tools:ErrorConsole" oncommand="toJavaScriptConsole()" disabled="true" hidden="true"/>
     <command id="Tools:DevToolsConnect" oncommand="gDevToolsBrowser.openConnectScreen(gBrowser)" disabled="true" hidden="true"/>
     <command id="Tools:Sanitize"
      oncommand="Cc['@mozilla.org/browser/browserglue;1'].getService(Ci.nsIBrowserGlue).sanitize(window);"/>
     <command id="Tools:PrivateBrowsing"
@@ -179,16 +180,19 @@
     <broadcaster id="devtoolsMenuBroadcaster_DevToolbar"
                  label="&devToolbarMenu.label;"
                  type="checkbox" autocheck="false"
                  command="Tools:DevToolbar"
                  key="key_devToolbar"/>
     <broadcaster id="devtoolsMenuBroadcaster_ChromeDebugger"
                  label="&chromeDebuggerMenu.label;"
                  command="Tools:ChromeDebugger"/>
+    <broadcaster id="devtoolsMenuBroadcaster_BrowserConsole"
+                 label="&browserConsoleCmd.label;"
+                 command="Tools:BrowserConsole"/>
     <broadcaster id="devtoolsMenuBroadcaster_Scratchpad"
                  label="&scratchpad.label;"
                  command="Tools:Scratchpad"
                  key="key_scratchpad"/>
     <broadcaster id="devtoolsMenuBroadcaster_ResponsiveUI"
                  label="&responsiveDesignTool.label;"
                  type="checkbox" autocheck="false"
                  command="Tools:ResponsiveUI"
diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -1549,29 +1549,37 @@ var gBrowserInit = {
 
       // Show the toolbar if it was previously visible
       if (gPrefService.getBoolPref("devtools.toolbar.visible")) {
         DeveloperToolbar.show(false);
       }
     }
 
     // Enable Chrome Debugger?
-    let enabled = gPrefService.getBoolPref("devtools.chrome.enabled") &&
+    let chromeEnabled = gPrefService.getBoolPref("devtools.chrome.enabled");
+    let enabled = chromeEnabled &&
                   gPrefService.getBoolPref("devtools.debugger.chrome-enabled") &&
                   gPrefService.getBoolPref("devtools.debugger.remote-enabled");
     if (enabled) {
       let cmd = document.getElementById("Tools:ChromeDebugger");
       cmd.removeAttribute("disabled");
       cmd.removeAttribute("hidden");
     }
 
+    // Enable the Browser Console?
+    if (chromeEnabled) {
+      let cmd = document.getElementById("Tools:BrowserConsole");
+      cmd.removeAttribute("disabled");
+      cmd.removeAttribute("hidden");
+    }
+
     // Enable Error Console?
     // Temporarily enabled. See bug 798925.
     let consoleEnabled = true || gPrefService.getBoolPref("devtools.errorconsole.enabled") ||
-                         gPrefService.getBoolPref("devtools.chrome.enabled");
+                         chromeEnabled;
     if (consoleEnabled) {
       let cmd = document.getElementById("Tools:ErrorConsole");
       cmd.removeAttribute("disabled");
       cmd.removeAttribute("hidden");
     }
 
     // Enable Scratchpad in the UI, if the preference allows this.
     let scratchpadEnabled = gPrefService.getBoolPref(Scratchpad.prefEnabledName);
diff --git a/browser/devtools/webconsole/HUDService.jsm b/browser/devtools/webconsole/HUDService.jsm
--- a/browser/devtools/webconsole/HUDService.jsm
+++ b/browser/devtools/webconsole/HUDService.jsm
@@ -5,38 +5,48 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const Cc = Components.classes;
 const Ci = Components.interfaces;
 const Cu = Components.utils;
 
-const CONSOLEAPI_CLASS_ID = "{b49c18f8-3379-4fc0-8c90-d7772c1a9ff3}";
 
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "gDevTools",
     "resource:///modules/devtools/gDevTools.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "TargetFactory",
     "resource:///modules/devtools/Target.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "Services",
     "resource://gre/modules/Services.jsm");
 
+XPCOMUtils.defineLazyModuleGetter(this, "DebuggerServer",
+  "resource://gre/modules/devtools/dbg-server.jsm");
+
+XPCOMUtils.defineLazyModuleGetter(this, "DebuggerClient",
+  "resource://gre/modules/devtools/dbg-client.jsm");
+
 XPCOMUtils.defineLazyModuleGetter(this, "WebConsoleUtils",
     "resource://gre/modules/devtools/WebConsoleUtils.jsm");
 
+XPCOMUtils.defineLazyModuleGetter(this, "webConsoleDefinition",
+    "resource:///modules/devtools/ToolDefinitions.jsm");
+
 XPCOMUtils.defineLazyModuleGetter(this, "Promise",
     "resource://gre/modules/commonjs/sdk/core/promise.js");
 
 const STRINGS_URI = "chrome://browser/locale/devtools/webconsole.properties";
 let l10n = new WebConsoleUtils.l10n(STRINGS_URI);
 
+const BROWSER_CONSOLE_WINDOW_FEATURES = "chrome,titlebar,toolbar,centerscreen,resizable,dialog=no";
+
 this.EXPORTED_SYMBOLS = ["HUDService"];
 
 ///////////////////////////////////////////////////////////////////////////
 //// The HUD service
 
 function HUD_SERVICE()
 {
   this.hudReferences = {};
@@ -68,26 +78,25 @@ HUD_SERVICE.prototype =
     return Services.wm.getMostRecentWindow("navigator:browser");
   },
 
   /**
    * Open a Web Console for the given target.
    *
    * @see devtools/framework/Target.jsm for details about targets.
    *
-   * @param object aTarget
-   *        The target that the web console will connect to.
-   * @param nsIDOMElement aIframe
-   *        The iframe element into which to place the web console.
+   * @param object aOptions
+   *        The options for opening the web console, see the WebConsole
+   *        constructor.
    * @return object
    *         A Promise object for the opening of the new WebConsole instance.
    */
-  openWebConsole: function HS_openWebConsole(aTarget, aIframe)
+  openWebConsole: function HS_openWebConsole(aOptions)
   {
-    let hud = new WebConsole(aTarget, aIframe);
+    let hud = new WebConsole(aOptions);
     this.hudReferences[hud.hudId] = hud;
     return hud.init();
   },
 
   /**
    * Returns the HeadsUpDisplay object associated to a content window.
    *
    * @param nsIDOMWindow aContentWindow
@@ -142,43 +151,49 @@ HUD_SERVICE.prototype =
 /**
  * A WebConsole instance is an interactive console initialized *per target*
  * that displays console log data as well as provides an interactive terminal to
  * manipulate the target's document content.
  *
  * This object only wraps the iframe that holds the Web Console UI.
  *
  * @constructor
- * @param object aTarget
- *        The target that the web console will connect to.
- * @param nsIDOMElement aIframe
- *        iframe into which we should create the WebConsole UI.
+ *
+ * @param object aOptions
+ *        The options for opening the web console:
+ *        - target: the target that the web console will connect to.
+ *        - window: the window where the web console UI is already loaded.
+ *        - chromeWindow: the window of the web console owner.
+ *        - browserConsole: boolean that tells if this is a browser
+ *        console or not.
  */
-function WebConsole(aTarget, aIframe)
+function WebConsole(aOptions)
 {
-  this.iframe = aIframe;
-  this.iframe.className = "web-console-frame";
-  this.chromeDocument = this.iframe.ownerDocument;
-  this.chromeWindow = this.chromeDocument.defaultView;
+  this.iframeWindow = aOptions.window;
+  this.chromeWindow = aOptions.chromeWindow;
   this.hudId = "hud_" + Date.now();
-  this.target = aTarget;
+  this.target = aOptions.target;
+  this._browserConsole = aOptions.browserConsole;
 
   this.browserWindow = this.chromeWindow.top;
-  let element = this.browserWindow.document.documentElement;
-  if (element.getAttribute("windowtype") != "navigator:browser") {
+
+  let element = this.browserWindow ?
+                this.browserWindow.document.documentElement : null;
+  if (element &&
+      element.getAttribute("windowtype") != "navigator:browser") {
     this.browserWindow = HUDService.currentContext();
   }
 }
 
 WebConsole.prototype = {
+  iframeWindow: null,
   chromeWindow: null,
-  chromeDocument: null,
   hudId: null,
   target: null,
-  iframe: null,
+  _browserConsole: false,
   _destroyer: null,
 
   /**
    * Getter for HUDService.lastFinishedRequestCallback.
    *
    * @see HUDService.lastFinishedRequestCallback
    * @type function
    */
@@ -207,47 +222,21 @@ WebConsole.prototype = {
   /**
    * Initialize the Web Console instance.
    *
    * @return object
    *         A Promise for the initialization.
    */
   init: function WC_init()
   {
-    let deferred = Promise.defer();
-
-    let onIframeLoad = function() {
-      this.iframe.removeEventListener("load", onIframeLoad, true);
-      initUI();
-    }.bind(this);
-
-    let initUI = function() {
-      this.iframeWindow = this.iframe.contentWindow.wrappedJSObject;
-      this.ui = new this.iframeWindow.WebConsoleFrame(this);
-      this.ui.init().then(onSuccess, onFailure);
-    }.bind(this);
-
-    let onSuccess = function() {
-      deferred.resolve(this);
-    }.bind(this);
-
-    let onFailure = function(aReason) {
-      deferred.reject(aReason);
-    };
-
-    let win, doc;
-    if ((win = this.iframe.contentWindow) &&
-        (doc = win.document) &&
-        doc.readyState == "complete") {
-      initUI();
-    }
-    else {
-      this.iframe.addEventListener("load", onIframeLoad, true);
-    }
-    return deferred.promise;
+    Promise._reportErrors = true;
+    this.ui = new this.iframeWindow.WebConsoleFrame(this);
+    return this.ui.init().then(function() {
+      return this;
+    }.bind(this));
   },
 
   /**
    * Retrieve the Web Console panel title.
    *
    * @return string
    *         The Web Console panel title.
    */
@@ -355,16 +344,20 @@ WebConsole.prototype = {
    */
   viewSourceInDebugger:
   function WC_viewSourceInDebugger(aSourceURL, aSourceLine)
   {
     let self = this;
     let panelWin = null;
     let debuggerWasOpen = true;
     let toolbox = gDevTools.getToolbox(this.target);
+    if (!toolbox) {
+      self.viewSource(aSourceURL, aSourceLine);
+      return;
+    }
 
     if (!toolbox.getPanel("jsdebugger")) {
       debuggerWasOpen = false;
       let toolboxWin = toolbox.doc.defaultView;
       toolboxWin.addEventListener("Debugger:AfterSourcesAdded",
                                   function afterSourcesAdded() {
         toolboxWin.removeEventListener("Debugger:AfterSourcesAdded",
                                        afterSourcesAdded);
@@ -431,16 +424,23 @@ WebConsole.prototype = {
       try {
         let tabWindow = this.target.isLocalTab ? this.target.window : null;
         tabWindow && tabWindow.focus();
       }
       catch (ex) {
         // Tab focus can fail if the tab or target is closed.
       }
 
+      this.iframeWindow = null;
+      this.chromeWindow = null;
+
+      if (this._browserConsole) {
+        HeadsUpDisplayUICommands._browserConsoleID = null;
+      }
+
       let id = WebConsoleUtils.supportsString(this.hudId);
       Services.obs.notifyObservers(id, "web-console-destroyed", null);
       this._destroyer.resolve(null);
     }.bind(this);
 
     if (this.ui) {
       this.ui.destroy().then(onDestroy);
     }
@@ -452,16 +452,19 @@ WebConsole.prototype = {
   },
 };
 
 //////////////////////////////////////////////////////////////////////////
 // HeadsUpDisplayUICommands
 //////////////////////////////////////////////////////////////////////////
 
 var HeadsUpDisplayUICommands = {
+  _browserConsoleID: null,
+  _browserConsoleDefer: null,
+
   /**
    * Toggle the Web Console for the current tab.
    *
    * @return object
    *         A Promise for either the opening of the toolbox that holds the Web
    *         Console, or a Promise for the closing of the toolbox.
    */
   toggleHUD: function UIC_toggleHUD()
@@ -488,11 +491,97 @@ var HeadsUpDisplayUICommands = {
     if (!tab || !TargetFactory.isKnownTab(tab)) {
       return null;
     }
     let target = TargetFactory.forTab(tab);
     let toolbox = gDevTools.getToolbox(target);
     let panel = toolbox ? toolbox.getPanel("webconsole") : null;
     return panel ? panel.hud : null;
   },
+
+  /**
+   * Toggle the Browser Console.
+   */
+  toggleBrowserConsole: function UIC_toggleBrowserConsole()
+  {
+    if (this._browserConsoleID) {
+      let hud = HUDService.getHudReferenceById(this._browserConsoleID);
+      return hud.destroy();
+    }
+
+    if (this._browserConsoleDefer) {
+      return this._browserConsoleDefer.promise;
+    }
+
+    this._browserConsoleDefer = Promise.defer();
+
+    function connect()
+    {
+      let deferred = Promise.defer();
+
+      if (!DebuggerServer.initialized) {
+        DebuggerServer.init();
+        DebuggerServer.addBrowserActors();
+      }
+
+      let client = new DebuggerClient(DebuggerServer.connectPipe());
+      client.connect(function() {
+        client.listTabs(function(aResponse) {
+          deferred.resolve({form: aResponse, client: client});
+        });
+      });
+
+      return deferred.promise;
+    }
+
+    let target;
+    function getTarget(aConnection)
+    {
+      let options = {
+        form: aConnection.form,
+        client: aConnection.client,
+        chrome: true,
+      };
+
+      target = TargetFactory.forTab(options);
+      return target.makeRemote(options);
+    }
+
+    function openWindow()
+    {
+      let deferred = Promise.defer();
+
+      let win = Services.ww.openWindow(null, webConsoleDefinition.url, "_blank",
+                                       BROWSER_CONSOLE_WINDOW_FEATURES, null);
+      win.addEventListener("load", function onLoad() {
+        win.removeEventListener("load", onLoad);
+        deferred.resolve(win);
+      });
+
+      return deferred.promise;
+    }
+
+    let self = this;
+    connect().then(getTarget).then(openWindow).then(function(aWindow) {
+      let options = {
+        target: target,
+        window: aWindow,
+        chromeWindow: aWindow,
+        browserConsole: true,
+      };
+
+      HUDService.openWebConsole(options).then(function(aWebConsole) {
+        self._browserConsoleID = aWebConsole.hudId;
+
+        self._browserConsoleDefer.resolve(aWebConsole);
+        self._browserConsoleDefer = null;
+      });
+    });
+
+    return this._browserConsoleDefer.promise;
+  },
+
+  get browserConsole() {
+    return HUDService.getHudReferenceById(this._browserConsoleID);
+  },
 };
 
 const HUDService = new HUD_SERVICE();
diff --git a/browser/devtools/webconsole/WebConsolePanel.jsm b/browser/devtools/webconsole/WebConsolePanel.jsm
--- a/browser/devtools/webconsole/WebConsolePanel.jsm
+++ b/browser/devtools/webconsole/WebConsolePanel.jsm
@@ -36,29 +36,52 @@ WebConsolePanel.prototype = {
    *
    * @return object
    *         A Promise that is resolved when the Web Console completes opening.
    */
   open: function WCP_open()
   {
     let parentDoc = this._toolbox.doc;
     let iframe = parentDoc.getElementById("toolbox-panel-iframe-webconsole");
-    let promise;
+    iframe.className = "web-console-frame";
+
+    let deferredIframe = Promise.defer();
+
+    let onIframeLoad = function() {
+      iframe.removeEventListener("load", onIframeLoad, true);
+      deferredIframe.resolve(null);
+    }.bind(this);
+
+    let win, doc;
+    if ((win = iframe.contentWindow) &&
+        (doc = win.document) &&
+        doc.readyState == "complete") {
+      deferredIframe.resolve(null);
+    }
+    else {
+      iframe.addEventListener("load", onIframeLoad, true);
+    }
 
     // Local debugging needs to make the target remote.
+    let promiseTarget;
     if (!this.target.isRemote) {
-      promise = this.target.makeRemote();
+      promiseTarget = this.target.makeRemote();
     } else {
-      promise = Promise.resolve(this.target);
+      promiseTarget = Promise.resolve(this.target);
     }
 
-    return promise
+    return deferredIframe.promise.then(function() promiseTarget)
       .then(function(aTarget) {
         this._frameWindow._remoteTarget = aTarget;
-        return HUDService.openWebConsole(this.target, iframe);
+        let options = {
+          target: this.target,
+          window: iframe.contentWindow.wrappedJSObject,
+          chromeWindow: iframe.ownerDocument.defaultView,
+        };
+        return HUDService.openWebConsole(options);
       }.bind(this))
       .then(function onSuccess(aWebConsole) {
         this.hud = aWebConsole;
         this._isReady = true;
         this.emit("ready");
         return this;
       }.bind(this), function onError(aReason) {
         let msg = "WebConsolePanel open failed. " +
diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_602572_log_bodies_checkbox.js b/browser/devtools/webconsole/test/browser_webconsole_bug_602572_log_bodies_checkbox.js
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_602572_log_bodies_checkbox.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_bug_602572_log_bodies_checkbox.js
@@ -15,28 +15,26 @@ function test()
   // open tab 1
   addTab("data:text/html;charset=utf-8,Web Console test for bug 602572: log bodies checkbox. tab 1");
   tabs.push(tab);
 
   browser.addEventListener("load", function onLoad1(aEvent) {
     browser.removeEventListener(aEvent.type, onLoad1, true);
 
     openConsole(null, function(aHud) {
-      info("iframe1 height " + aHud.iframe.clientHeight);
       info("iframe1 root height " + aHud.ui.rootElement.clientHeight);
 
       // open tab 2
       addTab("data:text/html;charset=utf-8,Web Console test for bug 602572: log bodies checkbox. tab 2");
       tabs.push(tab);
 
       browser.addEventListener("load", function onLoad2(aEvent) {
         browser.removeEventListener(aEvent.type, onLoad2, true);
 
         openConsole(null, function(aHud) {
-          info("iframe2 height " + aHud.iframe.clientHeight);
           info("iframe2 root height " + aHud.ui.rootElement.clientHeight);
           waitForFocus(startTest, aHud.iframeWindow);
         });
       }, true);
     });
   }, true);
 }
 
@@ -110,17 +108,16 @@ function onpopupshown2b(aEvent)
     // Switch to tab 1 and open the Web Console context menu from there.
     gBrowser.selectedTab = tabs[runCount*2];
     waitForFocus(function() {
       // Find the relevant elements in the Web Console of tab 1.
       let win1 = tabs[runCount*2].linkedBrowser.contentWindow;
       let hudId1 = HUDService.getHudIdByWindow(win1);
       huds[0] = HUDService.hudReferences[hudId1];
 
-      info("iframe1 height " + huds[0].iframe.clientHeight);
       info("iframe1 root height " + huds[0].ui.rootElement.clientHeight);
 
       menuitems[0] = huds[0].ui.rootElement.querySelector("#saveBodies");
       menupopups[0] = huds[0].ui.rootElement.querySelector("menupopup");
 
       menupopups[0].addEventListener("popupshown", onpopupshown1, false);
       menupopups[0].openPopup();
     }, tabs[runCount*2].linkedBrowser.contentWindow);
diff --git a/browser/devtools/webconsole/test/browser_webconsole_chrome.js b/browser/devtools/webconsole/test/browser_webconsole_chrome.js
--- a/browser/devtools/webconsole/test/browser_webconsole_chrome.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_chrome.js
@@ -11,17 +11,17 @@ function test() {
     browser.removeEventListener("load", onLoad, true);
     openConsole(null, testChrome);
   }, true);
 }
 
 function testChrome(hud) {
   ok(hud, "we have a console");
 
-  ok(hud.iframe, "we have the console iframe");
+  ok(hud.iframeWindow, "we have the console UI window");
 
   let jsterm = hud.jsterm;
   ok(jsterm, "we have a jsterm");
 
   let input = jsterm.inputNode;
   ok(hud.outputNode, "we have an output node");
 
   // Test typing 'docu'.
diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -398,16 +398,24 @@ WebConsoleFrame.prototype = {
   _initUI: function WCF__initUI()
   {
     // Remember that this script is loaded in the webconsole.xul context:
     // |window| is the iframe global.
     this.window = window;
     this.document = this.window.document;
     this.rootElement = this.document.documentElement;
 
+    if (this.owner._browserConsole) {
+      let title = this.rootElement.getAttribute("browserConsoleTitle");
+      this.rootElement.setAttribute("title", title);
+
+      let onClose = this.owner.destroy.bind(this.owner);
+      this.window.addEventListener("unload", onClose);
+    }
+
     this._initDefaultFilterPrefs();
 
     // Register the controller to handle "select all" properly.
     this._commandController = new CommandController(this);
     this.window.controllers.insertControllerAt(0, this._commandController);
 
     let doc = this.document;
 
@@ -2725,17 +2733,17 @@ JSTerm.prototype = {
   COMPLETE_BACKWARD: 1,
   COMPLETE_HINT_ONLY: 2,
 
   /**
    * Initialize the JSTerminal UI.
    */
   init: function JST_init()
   {
-    let chromeDocument = this.hud.owner.chromeDocument;
+    let chromeDocument = this.hud.owner.chromeWindow.document;
     let autocompleteOptions = {
       onSelect: this.onAutocompleteSelect.bind(this),
       onClick: this.acceptProposedCompletion.bind(this),
       panelId: "webConsole_autocompletePopup",
       listBoxId: "webConsole_autocompletePopupListBox",
       position: "before_start",
       theme: "light",
       direction: "ltr",
@@ -3754,17 +3762,17 @@ JSTerm.prototype = {
   destroy: function JST_destroy()
   {
     this.clearCompletion();
     this.clearOutput();
 
     this.autocompletePopup.destroy();
     this.autocompletePopup = null;
 
-    let popup = this.hud.owner.chromeDocument
+    let popup = this.hud.owner.chromeWindow.document
                 .getElementById("webConsole_autocompletePopup");
     if (popup) {
       popup.parentNode.removeChild(popup);
     }
 
     this.inputNode.removeEventListener("keypress", this._keyPress, false);
     this.inputNode.removeEventListener("input", this._inputEventHandler, false);
     this.inputNode.removeEventListener("keyup", this._inputEventHandler, false);
@@ -3932,16 +3940,18 @@ CommandController.prototype = {
         let selectedItem = this.owner.outputNode.selectedItem;
         return selectedItem && selectedItem.url;
       }
       case "cmd_fontSizeEnlarge":
       case "cmd_fontSizeReduce":
       case "cmd_fontSizeReset":
       case "cmd_selectAll":
         return true;
+      case "cmd_close":
+        return this.owner.owner._browserConsole;
     }
   },
 
   doCommand: function CommandController_doCommand(aCommand)
   {
     switch (aCommand) {
       case "cmd_copy":
         this.copy();
@@ -3959,16 +3969,19 @@ CommandController.prototype = {
         this.owner.changeFontSize("+");
         break;
       case "cmd_fontSizeReduce":
         this.owner.changeFontSize("-");
         break;
       case "cmd_fontSizeReset":
         this.owner.changeFontSize("");
         break;
+      case "cmd_close":
+        this.owner.window.close();
+        break;
     }
   }
 };
 
 ///////////////////////////////////////////////////////////////////////////////
 // Web Console connection proxy
 ///////////////////////////////////////////////////////////////////////////////
 
diff --git a/browser/devtools/webconsole/webconsole.xul b/browser/devtools/webconsole/webconsole.xul
--- a/browser/devtools/webconsole/webconsole.xul
+++ b/browser/devtools/webconsole/webconsole.xul
@@ -8,18 +8,23 @@
 ]>
 <?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/devtools/common.css"
                  type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/devtools/webconsole.css"
                  type="text/css"?>
 <?xul-overlay href="chrome://global/content/editMenuOverlay.xul"?>
 <window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
+        id="devtools-webconsole"
+        macanimationtype="document"
+        fullscreenbutton="true"
         title="&window.title;"
+        browserConsoleTitle="&browserConsole.title;"
         windowtype="devtools:webconsole"
+        width="900" height="350"
         persist="screenX screenY width height sizemode">
   <script type="text/javascript" src="chrome://global/content/globalOverlay.js"/>
   <script type="text/javascript" src="webconsole.js"/>
 
   <commandset id="editMenuCommands"/>
 
   <commandset id="consoleCommands"
               commandupdater="true"
@@ -27,25 +32,27 @@
               oncommandupdate="goUpdateConsoleCommands();">
     <command id="consoleCmd_openURL"
              oncommand="goDoCommand('consoleCmd_openURL');"/>
     <command id="consoleCmd_copyURL"
              oncommand="goDoCommand('consoleCmd_copyURL');"/>
     <command id="cmd_fullZoomEnlarge" oncommand="goDoCommand('cmd_fontSizeEnlarge');"/>
     <command id="cmd_fullZoomReduce" oncommand="goDoCommand('cmd_fontSizeReduce');"/>
     <command id="cmd_fullZoomReset" oncommand="goDoCommand('cmd_fontSizeReset');"/>
+    <command id="cmd_close" oncommand="goDoCommand('cmd_close');"/>
   </commandset>
-  <keyset id="fontSizeChangeSet">
+  <keyset id="consoleKeys">
     <key id="key_fullZoomReduce"  key="&fullZoomReduceCmd.commandkey;" command="cmd_fullZoomReduce"  modifiers="accel"/>
     <key key="&fullZoomReduceCmd.commandkey2;"  command="cmd_fullZoomReduce" modifiers="accel"/>
     <key id="key_fullZoomEnlarge" key="&fullZoomEnlargeCmd.commandkey;" command="cmd_fullZoomEnlarge" modifiers="accel"/>
     <key key="&fullZoomEnlargeCmd.commandkey2;" command="cmd_fullZoomEnlarge" modifiers="accel"/>
     <key key="&fullZoomEnlargeCmd.commandkey3;" command="cmd_fullZoomEnlarge" modifiers="accel"/>
     <key id="key_fullZoomReset" key="&fullZoomResetCmd.commandkey;" command="cmd_fullZoomReset" modifiers="accel"/>
     <key key="&fullZoomResetCmd.commandkey2;" command="cmd_fullZoomReset" modifiers="accel"/>
+    <key key="&closeCmd.key;" command="cmd_close" modifiers="accel"/>
   </keyset>
   <keyset id="editMenuKeys"/>
 
   <popupset id="mainPopupSet">
     <menupopup id="output-contextmenu"
                onpopupshowing="ConsoleContextMenu.build(event);">
       <menuitem id="saveBodiesContextMenu" type="checkbox" label="&saveBodies.label;"
                 accesskey="&saveBodies.accesskey;"/>
diff --git a/browser/locales/en-US/chrome/browser/browser.dtd b/browser/locales/en-US/chrome/browser/browser.dtd
--- a/browser/locales/en-US/chrome/browser/browser.dtd
+++ b/browser/locales/en-US/chrome/browser/browser.dtd
@@ -202,16 +202,18 @@ These should match what Safari and other
 <!ENTITY devtoolsConnect.accesskey    "e">
 
 <!ENTITY errorConsoleCmd.label        "Error Console">
 <!ENTITY errorConsoleCmd.accesskey    "C">
 <!ENTITY errorConsoleCmd.commandkey   "j">
 
 <!ENTITY remoteWebConsoleCmd.label    "Remote Web Console">
 
+<!ENTITY browserConsoleCmd.label      "Browser Console">
+
 <!ENTITY inspectContextMenu.label     "Inspect Element">
 <!ENTITY inspectContextMenu.accesskey "Q">
 
 <!ENTITY responsiveDesignTool.label   "Responsive Design View">
 <!ENTITY responsiveDesignTool.accesskey "R">
 <!ENTITY responsiveDesignTool.commandkey "M">
 
 <!-- LOCALIZATION NOTE (scratchpad.label): This menu item label appears
diff --git a/browser/locales/en-US/chrome/browser/devtools/webConsole.dtd b/browser/locales/en-US/chrome/browser/devtools/webConsole.dtd
--- a/browser/locales/en-US/chrome/browser/devtools/webConsole.dtd
+++ b/browser/locales/en-US/chrome/browser/devtools/webConsole.dtd
@@ -4,16 +4,17 @@
 
 <!-- LOCALIZATION NOTE : FILE The correct localization of this file might be to
   - keep it in English, or another language commonly spoken among web developers.
   - You want to make that choice consistent across the developer tools.
   - A good criteria is the language in which you'd find the best
   - documentation on web development on the web. -->
 
 <!ENTITY window.title "Web Console">
+<!ENTITY browserConsole.title "Browser Console">
 
 <!ENTITY networkPanel.requestURLColon             "Request URL:">
 <!ENTITY networkPanel.requestMethodColon          "Request Method:">
 <!ENTITY networkPanel.statusCodeColon             "Status Code:">
 
 <!ENTITY networkPanel.requestHeaders              "Request Headers">
 <!ENTITY networkPanel.requestCookie               "Sent Cookie">
 <!ENTITY networkPanel.requestBody                 "Request Body">
@@ -71,8 +72,10 @@
 <!ENTITY fullZoomReduceCmd.commandkey   "-">
 <!ENTITY fullZoomReduceCmd.commandkey2  "">
 
 <!ENTITY fullZoomResetCmd.commandkey    "0">
 <!ENTITY fullZoomResetCmd.commandkey2   "">
 
 <!ENTITY copyURLCmd.label     "Copy Link Location">
 <!ENTITY copyURLCmd.accesskey "a">
+
+<!ENTITY closeCmd.key  "W">
