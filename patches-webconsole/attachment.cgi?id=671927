# HG changeset patch
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1350566587 -10800
# Node ID 3b9c0e85761a2b4a287d2a775621bc7d954f64a4
# Parent 1c7fddce3438b177bc8365407a0b86a328a1e9d3
[mq]: bug-802246

diff --git a/toolkit/devtools/webconsole/WebConsoleUtils.jsm b/toolkit/devtools/webconsole/WebConsoleUtils.jsm
--- a/toolkit/devtools/webconsole/WebConsoleUtils.jsm
+++ b/toolkit/devtools/webconsole/WebConsoleUtils.jsm
@@ -1280,25 +1280,34 @@ PageErrorListener.prototype =
   observe: function PEL_observe(aScriptError)
   {
     if (!this.listener ||
         !(aScriptError instanceof Ci.nsIScriptError)) {
       return;
     }
 
     if (this.window) {
+      dump("aScriptError outerWindowID " + aScriptError.outerWindowID + " innerWindowID " + aScriptError.innerWindowID + " category " + aScriptError.category + "\n");
+
       if (!aScriptError.outerWindowID ||
           !this.isCategoryAllowed(aScriptError.category)) {
         return;
       }
 
       let errorWindow =
         WebConsoleUtils.getWindowByOuterId(aScriptError.outerWindowID,
                                            this.window);
+      if (errorWindow) {
+        dump("aScriptError window " + errorWindow.location + " " + errorWindow.top.location + "\n");
+      }
+      else {
+        dump("aScriptError no window\n");
+      }
       if (!errorWindow || errorWindow.top != this.window) {
+        dump("aScriptError window doesn't match\n");
         return;
       }
     }
 
     this.listener.onPageError(aScriptError);
   },
 
   /**
@@ -1434,19 +1443,28 @@ ConsoleAPIListener.prototype =
   observe: function CAL_observe(aMessage, aTopic)
   {
     if (!this.owner) {
       return;
     }
 
     let apiMessage = aMessage.wrappedJSObject;
     if (this.window) {
+      dump("console api " + apiMessage.level + " outer id " + apiMessage.ID + "\n");
       let msgWindow = WebConsoleUtils.getWindowByOuterId(apiMessage.ID,
                                                          this.window);
+      if (msgWindow) {
+        dump("msgWindow " + msgWindow.location + " " + msgWindow.top.location + "\n");
+      }
+      else {
+        dump("no msgWindow\n");
+      }
+
       if (!msgWindow || msgWindow.top != this.window) {
+        dump("msgWindow doesn't match\n");
         // Not the same window!
         return;
       }
     }
 
     this.owner.onConsoleAPICall(apiMessage);
   },
 
@@ -2102,17 +2120,24 @@ NetworkMonitor.prototype = {
       return;
     }
 
     let channel = aSubject.QueryInterface(Ci.nsIHttpChannel);
 
     if (this.window) {
       // Try to get the source window of the request.
       let win = NetworkHelper.getWindowForRequest(channel);
+      if (win) {
+        dump("NM__httpResponseExaminer win " + win.location + " " + win.top.location + "\n");
+      }
+      else {
+        dump("NM__httpResponseExaminer no win\n");
+      }
       if (!win || win.top !== this.window) {
+        dump("NM__httpResponseExaminer win doesn't match\n");
         return;
       }
     }
 
     let response = {
       id: gSequenceId(),
       channel: channel,
       headers: [],
@@ -2250,19 +2275,26 @@ NetworkMonitor.prototype = {
   {
     let win = null;
     try {
       win = NetworkHelper.getWindowForRequest(aChannel);
     }
     catch (ex) {
       // getWindowForRequest() throws on b2g.
     }
+    if (win) {
+      dump("NM__onRequestHeader win " + win.location + " " + win.top.location + "\n");
+    }
+    else {
+      dump("NM__onRequestHeader no win\n");
+    }
 
     // Try to get the source window of the request.
     if (this.window && (!win || win.top !== this.window)) {
+      dump("NM__onRequestHeader win doesn't match\n");
       return;
     }
 
     let httpActivity = this.createActivityObject(aChannel);
 
     // see NM__onRequestBodySent()
     httpActivity.charset = win ? win.document.characterSet : null;
 
