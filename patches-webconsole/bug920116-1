# HG changeset patch
# Parent 6c37a8480f1b98e016f33921cbd10d8d4fa58938
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1397160157 -10800

Bug 920116 - Part 1: add full stacktrace to console.error/exception/assert() in the Console API; r=bz

diff --git a/dom/base/Console.cpp b/dom/base/Console.cpp
--- a/dom/base/Console.cpp
+++ b/dom/base/Console.cpp
@@ -786,18 +786,18 @@ Console::Method(JSContext* aCx, MethodNa
     }
 
     nsCOMPtr<nsILoadContext> loadContext = do_QueryInterface(webNav);
     MOZ_ASSERT(loadContext);
 
     loadContext->GetUsePrivateBrowsing(&callData->mPrivate);
   }
 
-  uint32_t maxDepth = aMethodName == MethodTrace ?
-                       DEFAULT_MAX_STACKTRACE_DEPTH : 1;
+  uint32_t maxDepth = ShouldIncludeStackrace(aMethodName) ?
+                      DEFAULT_MAX_STACKTRACE_DEPTH : 1;
   nsCOMPtr<nsIStackFrame> stack = CreateStack(aCx, maxDepth);
 
   if (!stack) {
     Throw(aCx, NS_ERROR_FAILURE);
     return;
   }
 
   // nsIStackFrame is not thread-safe so we take what we need and we store in
@@ -972,17 +972,17 @@ Console::ProcessCallData(ConsoleCallData
       ProcessArguments(cx, aData->mArguments, event.mArguments.Value());
       break;
 
     default:
       event.mArguments.Construct();
       ArgumentsToValueList(aData->mArguments, event.mArguments.Value());
   }
 
-  if (aData->mMethodName == MethodTrace) {
+  if (ShouldIncludeStackrace(aData->mMethodName)) {
     event.mStacktrace.Construct();
     event.mStacktrace.Value().SwapElements(aData->mStack);
   }
 
   else if (aData->mMethodName == MethodGroup ||
            aData->mMethodName == MethodGroupCollapsed ||
            aData->mMethodName == MethodGroupEnd) {
     ComposeGroupName(cx, aData->mArguments, event.mGroupName);
@@ -1440,10 +1440,24 @@ Console::IncreaseCounter(JSContext* aCx,
 void
 Console::ClearConsoleData()
 {
   while (ConsoleCallData* data = mQueuedCalls.popFirst()) {
     delete data;
   }
 }
 
+bool
+Console::ShouldIncludeStackrace(MethodName aMethodName)
+{
+  switch (aMethodName) {
+    case MethodError:
+    case MethodException:
+    case MethodAssert:
+    case MethodTrace:
+      return true;
+    default:
+      return false;
+  }
+}
+
 } // namespace dom
 } // namespace mozilla
diff --git a/dom/base/Console.h b/dom/base/Console.h
--- a/dom/base/Console.h
+++ b/dom/base/Console.h
@@ -179,16 +179,19 @@ private:
 
   JS::Value
   IncreaseCounter(JSContext* aCx, const ConsoleStackEntry& aFrame,
                    const nsTArray<JS::Heap<JS::Value>>& aArguments);
 
   void
   ClearConsoleData();
 
+  bool
+  ShouldIncludeStackrace(MethodName aMethodName);
+
   nsCOMPtr<nsPIDOMWindow> mWindow;
   nsCOMPtr<nsITimer> mTimer;
   nsCOMPtr<nsIConsoleAPIStorage> mStorage;
 
   LinkedList<ConsoleCallData> mQueuedCalls;
   nsDataHashtable<nsStringHashKey, DOMHighResTimeStamp> mTimerRegistry;
   nsDataHashtable<nsStringHashKey, uint32_t> mCounterRegistry;
 
