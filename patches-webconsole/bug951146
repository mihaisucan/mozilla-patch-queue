# HG changeset patch
# Parent 3211b32d0322faf888d4baac830f6fe11475a51a
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1389905360 -7200

Bug 951146 - Fix for intermittent browser_webconsole_console_logging_api.js | Timed out while waiting for: 1 message shown for exception (logging turned on); r=me; try: -b do -p linux,linux64,macosx64,win32,win64 -u mochitest-bc -t none

diff --git a/browser/devtools/webconsole/test/browser.ini b/browser/devtools/webconsole/test/browser.ini
--- a/browser/devtools/webconsole/test/browser.ini
+++ b/browser/devtools/webconsole/test/browser.ini
@@ -224,17 +224,16 @@ run-if = os == "mac"
 [browser_webconsole_bug_846918_hsts_invalid-headers.js]
 [browser_webconsole_cached_autocomplete.js]
 [browser_webconsole_change_font_size.js]
 [browser_webconsole_chrome.js]
 [browser_webconsole_closure_inspection.js]
 [browser_webconsole_completion.js]
 [browser_webconsole_console_extras.js]
 [browser_webconsole_console_logging_api.js]
-skip-if = os == "linux" # Intermittent failures, bug 951146
 [browser_webconsole_execution_scope.js]
 [browser_webconsole_for_of.js]
 [browser_webconsole_history.js]
 [browser_webconsole_input_field_focus_on_panel_select.js]
 [browser_webconsole_js_input_expansion.js]
 [browser_webconsole_jsterm.js]
 [browser_webconsole_live_filtering_of_message_types.js]
 [browser_webconsole_live_filtering_on_search_strings.js]
diff --git a/browser/devtools/webconsole/test/browser_webconsole_console_logging_api.js b/browser/devtools/webconsole/test/browser_webconsole_console_logging_api.js
--- a/browser/devtools/webconsole/test/browser_webconsole_console_logging_api.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_console_logging_api.js
@@ -2,157 +2,108 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 // Tests that the basic console.log()-style APIs and filtering work.
 
 const TEST_URI = "http://example.com/browser/browser/devtools/webconsole/test/test-console.html";
 
-let testDriver = null;
-let subtestDriver = null;
+let hud, outputNode;
 
 function test() {
   addTab(TEST_URI);
+  browser.addEventListener("load", function onLoad() {
+    browser.removeEventListener("load", onLoad, true);
+    Task.spawn(runner);
+  }, true);
 
-  browser.addEventListener("DOMContentLoaded", onLoad, false);
+  function* runner() {
+    hud = yield openConsole();
+    outputNode = hud.outputNode;
+
+    let methods = ["log", "info", "warn", "error", "exception", "debug"];
+    for (let method of methods) {
+      yield testMethod(method);
+    }
+
+    executeSoon(finishTest);
+  }
 }
 
-function onLoad() {
-  browser.removeEventListener("DOMContentLoaded", onLoad, false);
-
-  openConsole(null, function(aHud) {
-    hud = aHud;
-    hudId = hud.hudId;
-    outputNode = hud.outputNode;
-    testDriver = testGen();
-    testDriver.next();
-  });
-}
-
-function testGen() {
-  subtestGen("log");
-  yield undefined;
-
-  subtestGen("info");
-  yield undefined;
-
-  subtestGen("warn");
-  yield undefined;
-
-  subtestGen("error");
-  yield undefined;
-
-  subtestGen("exception");
-  yield undefined;
-
-  subtestGen("debug"); // bug 616742
-  yield undefined;
-
-  testDriver = subtestDriver = null;
-  finishTest();
-
-  yield undefined;
-}
-
-function subtestGen(aMethod) {
-  subtestDriver = testConsoleLoggingAPI(aMethod);
-  subtestDriver.next();
-}
-
-function testConsoleLoggingAPI(aMethod) {
-  let console = content.wrappedJSObject.console;
+function* testMethod(aMethod) {
+  let console = content.console;
 
   hud.jsterm.clearOutput();
 
-  setStringFilter("foo");
   console[aMethod]("foo-bar-baz");
-  console[aMethod]("bar-baz");
+  console[aMethod]("baar-baz");
 
-  function nextTest() {
-    subtestDriver.next();
-  }
-
-  waitForSuccess({
-    name: "1 hidden " + aMethod + " node via string filtering",
-    validatorFn: function()
-    {
-      return outputNode.querySelectorAll(".filtered-by-string").length == 1;
-    },
-    successFn: nextTest,
-    failureFn: nextTest,
+  yield waitForMessages({
+    webconsole: hud,
+    messages: [{
+      text: "foo-bar-baz",
+    }, {
+      text: "baar-baz",
+    }],
   });
 
-  yield undefined;
+  setStringFilter("foo");
+
+  is(outputNode.querySelectorAll(".filtered-by-string").length, 1,
+     "1 hidden " + aMethod + " node via string filtering")
 
   hud.jsterm.clearOutput();
 
   // now toggle the current method off - make sure no visible message
+  // TODO: move all filtering tests into a separate test file: see bug 608135
 
-  // TODO: move all filtering tests into a separate test file: see bug 608135
+  console[aMethod]("foo-bar-baz");
+  yield waitForMessages({
+    webconsole: hud,
+    messages: [{
+      text: "foo-bar-baz",
+    }],
+  });
+
   setStringFilter("");
   let filter;
   switch(aMethod) {
     case "debug":
       filter = "log";
       break;
     case "exception":
       filter = "error";
       break;
     default:
       filter = aMethod;
       break;
   }
+
   hud.setFilterState(filter, false);
-  console[aMethod]("foo-bar-baz");
 
-  waitForSuccess({
-    name: "1 message hidden for " + aMethod + " (logging turned off)",
-    validatorFn: function()
-    {
-      return outputNode.querySelectorAll(".filtered-by-type").length == 1;
-    },
-    successFn: nextTest,
-    failureFn: nextTest,
-  });
+  is(outputNode.querySelectorAll(".filtered-by-type").length, 1,
+     "1 message hidden for " + aMethod + " (logging turned off)")
 
-  yield undefined;
+  hud.setFilterState(filter, true);
+
+  is(outputNode.querySelectorAll(".message:not(.filtered-by-type)").length, 1,
+     "1 message shown for " + aMethod + " (logging turned on)")
 
   hud.jsterm.clearOutput();
-  hud.setFilterState(filter, true);
-  console[aMethod]("foo-bar-baz");
-
-  waitForSuccess({
-    name: "1 message shown for " + aMethod + " (logging turned on)",
-    validatorFn: function()
-    {
-      return outputNode.querySelectorAll(".message:not(.filtered-by-type)").length == 1;
-    },
-    successFn: nextTest,
-    failureFn: nextTest,
-  });
-
-  yield undefined;
-
-  hud.jsterm.clearOutput();
-  setStringFilter("");
 
   // test for multiple arguments.
   console[aMethod]("foo", "bar");
 
-  waitForMessages({
+  yield waitForMessages({
     webconsole: hud,
     messages: [{
       text: '"foo" "bar"',
       category: CATEGORY_WEBDEV,
     }],
-  }).then(nextTest);
-
-  yield undefined;
-  testDriver.next();
-  yield undefined;
+  })
 }
 
 function setStringFilter(aValue) {
   hud.ui.filterBox.value = aValue;
   hud.ui.adjustVisibilityOnSearchStringChange();
 }
 
