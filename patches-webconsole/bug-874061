# HG changeset patch
# Parent dea12c804f3056cdfa8bdf8cecba2bb4e8349b5a
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1369473936 -10800

Bug 874061 - Figure out private browsing and the browser console; r=robcee f=ehsan

diff --git a/browser/devtools/webconsole/test/Makefile.in b/browser/devtools/webconsole/test/Makefile.in
--- a/browser/devtools/webconsole/test/Makefile.in
+++ b/browser/devtools/webconsole/test/Makefile.in
@@ -125,16 +125,17 @@ MOCHITEST_BROWSER_FILES = \
 	browser_webconsole_bug_837351_securityerrors.js \
 	browser_bug_865871_variables_view_close_on_esc_key.js \
 	browser_bug_865288_repeat_different_objects.js \
 	browser_jsterm_inspect.js \
 	browser_bug_869003_inspect_cross_domain_object.js \
 	browser_bug_862916_console_dir_and_filter_off.js \
 	browser_console_native_getters.js \
 	browser_bug_871156_ctrlw_close_tab.js \
+	browser_console_private_browsing.js \
 	head.js \
 	$(NULL)
 
 ifeq ($(OS_ARCH), Darwin)
 MOCHITEST_BROWSER_FILES += \
 	browser_webconsole_bug_804845_ctrl_key_nav.js \
         $(NULL)
 endif
diff --git a/browser/devtools/webconsole/test/browser_console_private_browsing.js b/browser/devtools/webconsole/test/browser_console_private_browsing.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/webconsole/test/browser_console_private_browsing.js
@@ -0,0 +1,195 @@
+/*
+ * Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/
+ */
+
+// Bug 874061: test for how the browser and web consoles display messages coming
+// from private windows. See bug for description of expected behavior.
+
+function test()
+{
+  const TEST_URI = "data:text/html;charset=utf8,<p>hello world! bug 874061" +
+                   "<button onclick='console.log(\"foobar bug 874061\");" +
+                   "fooBazBaz.yummy()'>click</button>";
+  let ConsoleAPIStorage = Cu.import("resource://gre/modules/ConsoleAPIStorage.jsm", {}).ConsoleAPIStorage;
+  let privateWindow, privateBrowser, privateTab, privateContent;
+  let hud, expectedMessages, nonPrivateMessage;
+
+  start();
+
+  function start()
+  {
+    gBrowser.selectedTab = gBrowser.addTab("data:text/html;charset=utf8," +
+                                           "<p>hello world! I am not private!");
+    gBrowser.selectedBrowser.addEventListener("load", onLoadTab, true);
+  }
+
+  function onLoadTab()
+  {
+    gBrowser.selectedBrowser.removeEventListener("load", onLoadTab, true);
+    info("onLoadTab()");
+
+    // Make sure we have a clean state to start with.
+    Services.console.reset();
+    ConsoleAPIStorage.clearEvents();
+
+    // Add a non-private message to the browser console.
+    content.console.log("bug874061-not-private");
+
+    nonPrivateMessage = {
+      name: "console message from a non-private window",
+      text: "bug874061-not-private",
+      category: CATEGORY_WEBDEV,
+      severity: SEVERITY_LOG,
+    };
+
+    privateWindow = OpenBrowserWindow({ private: true });
+    ok(privateWindow, "new private window");
+    ok(PrivateBrowsingUtils.isWindowPrivate(privateWindow), "window is private");
+
+    whenDelayedStartupFinished(privateWindow, onPrivateWindowReady);
+  }
+
+  function onPrivateWindowReady()
+  {
+    info("private browser window opened");
+    privateBrowser = privateWindow.gBrowser;
+
+    privateTab = privateBrowser.selectedTab = privateBrowser.addTab(TEST_URI);
+    privateBrowser.selectedBrowser.addEventListener("load", function onLoad() {
+      info("private tab opened");
+      privateBrowser.selectedBrowser.removeEventListener("load", onLoad, true);
+      privateContent = privateBrowser.selectedBrowser.contentWindow;
+      ok(PrivateBrowsingUtils.isWindowPrivate(privateContent), "tab window is private");
+      openConsole(privateTab, consoleOpened);
+    }, true);
+  }
+
+  function addMessages()
+  {
+    let button = privateContent.document.querySelector("button");
+    ok(button, "button in page");
+    EventUtils.synthesizeMouse(button, 2, 2, {}, privateContent);
+  }
+
+  function consoleOpened(aHud)
+  {
+    hud = aHud;
+    ok(hud, "web console opened");
+
+    addMessages();
+    expectedMessages = [
+      {
+        name: "script error",
+        text: "fooBazBaz is not defined",
+        category: CATEGORY_JS,
+        severity: SEVERITY_ERROR,
+      },
+      {
+        name: "console message",
+        text: "foobar bug 874061",
+        category: CATEGORY_WEBDEV,
+        severity: SEVERITY_LOG,
+      },
+    ];
+
+    // Make sure messages are displayed in the web console as they happen, even
+    // if this is a private tab.
+    waitForMessages({
+      webconsole: hud,
+      messages: expectedMessages,
+    }).then(testCachedMessages);
+  }
+
+  function testCachedMessages()
+  {
+    info("testCachedMessages()");
+    closeConsole(privateTab, () => {
+      info("web console closed");
+      openConsole(privateTab, consoleReopened);
+    });
+  }
+
+  function consoleReopened(aHud)
+  {
+    hud = aHud;
+    ok(hud, "web console reopened");
+
+    // Make sure that cached messages are displayed in the web console, even
+    // if this is a private tab.
+    waitForMessages({
+      webconsole: hud,
+      messages: expectedMessages,
+    }).then(testBrowserConsole);
+  }
+
+  function testBrowserConsole()
+  {
+    info("testBrowserConsole()");
+    closeConsole(privateTab, () => {
+      info("web console closed");
+      privateWindow.HUDConsoleUI.toggleBrowserConsole().then(onBrowserConsoleOpen);
+    });
+  }
+
+  // Make sure that the cached messages from private tabs are not displayed in
+  // the browser console.
+  function checkNoPrivateMessages()
+  {
+    let text = hud.outputNode.textContent;
+    is(text.indexOf("fooBazBaz"), -1, "no exception displayed");
+    is(text.indexOf("bug 874061"), -1, "no console message displayed");
+  }
+
+  function onBrowserConsoleOpen(aHud)
+  {
+    hud = aHud;
+    ok(hud, "browser console opened");
+
+    checkNoPrivateMessages();
+    addMessages();
+    expectedMessages.push(nonPrivateMessage);
+
+    // Make sure that live messages are displayed in the browser console, even
+    // from private tabs.
+    waitForMessages({
+      webconsole: hud,
+      messages: expectedMessages,
+    }).then(testPrivateWindowClose);
+  }
+
+  function testPrivateWindowClose()
+  {
+    info("close the private window and check if the private messages are removed");
+    hud.jsterm.once("private-messages-cleared", () => {
+      isnot(hud.outputNode.textContent.indexOf("bug874061-not-private"), -1,
+            "non-private messages are still shown after private window closed");
+      checkNoPrivateMessages();
+
+      info("close the browser console");
+      privateWindow.HUDConsoleUI.toggleBrowserConsole().then(() => {
+        info("reopen the browser console");
+        executeSoon(() =>
+          HUDConsoleUI.toggleBrowserConsole().then(onBrowserConsoleReopen));
+      });
+    });
+    privateWindow.BrowserTryToCloseWindow();
+  }
+
+  function onBrowserConsoleReopen(aHud)
+  {
+    hud = aHud;
+    ok(hud, "browser console reopened");
+
+    // Make sure that the non-private message is still shown after reopen.
+    waitForMessages({
+      webconsole: hud,
+      messages: [nonPrivateMessage],
+    }).then(() => {
+      // Make sure that no private message is displayed after closing the private
+      // window and reopening the Browser Console.
+      checkNoPrivateMessages();
+      executeSoon(finishTest);
+    });
+  }
+}
diff --git a/browser/devtools/webconsole/test/head.js b/browser/devtools/webconsole/test/head.js
--- a/browser/devtools/webconsole/test/head.js
+++ b/browser/devtools/webconsole/test/head.js
@@ -1217,8 +1217,18 @@ function scrollOutputToNode(aNode)
   while (richListBoxNode.tagName != "richlistbox") {
     richListBoxNode = richListBoxNode.parentNode;
   }
 
   let boxObject = richListBoxNode.scrollBoxObject;
   let nsIScrollBoxObject = boxObject.QueryInterface(Ci.nsIScrollBoxObject);
   nsIScrollBoxObject.ensureElementIsVisible(aNode);
 }
+
+function whenDelayedStartupFinished(aWindow, aCallback)
+{
+  Services.obs.addObserver(function observer(aSubject, aTopic) {
+    if (aWindow == aSubject) {
+      Services.obs.removeObserver(observer, aTopic);
+      executeSoon(aCallback);
+    }
+  }, "browser-delayed-startup-finished", false);
+}
diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -1094,16 +1094,19 @@ WebConsoleFrame.prototype = {
 
     if (level == "groupEnd") {
       return null; // no need to continue
     }
 
     let node = this.createMessageNode(CATEGORY_WEBDEV, LEVELS[level], body,
                                       sourceURL, sourceLine, clipboardText,
                                       level, aMessage.timeStamp);
+    if (aMessage.private) {
+      node.setAttribute("private", true);
+    }
 
     if (objectActors.size > 0) {
       node._objectActors = objectActors;
 
       let repeatNode = node.querySelector(".webconsole-msg-repeat");
       repeatNode._uid += [...objectActors].join("-");
     }
 
@@ -1171,16 +1174,19 @@ WebConsoleFrame.prototype = {
       severity = SEVERITY_WARNING;
     }
 
     let node = this.createMessageNode(aCategory, severity,
                                       aScriptError.errorMessage,
                                       aScriptError.sourceName,
                                       aScriptError.lineNumber, null, null,
                                       aScriptError.timeStamp);
+    if (aScriptError.private) {
+      node.setAttribute("private", true);
+    }
     return node;
   },
 
   /**
    * Handle PageError objects received from the server. This method outputs the
    * given error.
    *
    * @param nsIScriptError aPageError
@@ -1250,16 +1256,19 @@ WebConsoleFrame.prototype = {
     statusNode.classList.add("webconsole-msg-body-piece");
     statusNode.classList.add("webconsole-msg-status");
     linkNode.appendChild(statusNode);
 
     let clipboardText = request.method + " " + request.url;
 
     let messageNode = this.createMessageNode(CATEGORY_NETWORK, severity,
                                              msgNode, null, null, clipboardText);
+    if (networkInfo.private) {
+      messageNode.setAttribute("private", true);
+    }
 
     messageNode._connectionId = aActorId;
     messageNode.url = request.url;
 
     this.makeOutputMessageLink(messageNode, function WCF_net_message_link() {
       if (!messageNode._panelOpen) {
         this.openNetworkPanel(messageNode, networkInfo);
       }
@@ -1375,16 +1384,17 @@ WebConsoleFrame.prototype = {
       startedDateTime: aActor.startedDateTime,
       request: {
         url: aActor.url,
         method: aActor.method,
       },
       response: {},
       timings: {},
       updates: [], // track the list of network event updates
+      private: aActor.private,
     };
 
     this._networkRequests[aActor.actor] = networkInfo;
     this.outputMessage(CATEGORY_NETWORK, this.logNetEvent, [aActor.actor]);
   },
 
   /**
    * Handle network event updates coming from the server.
@@ -3667,16 +3677,28 @@ JSTerm.prototype = {
     hud._repeatNodes = {};
 
     if (aClearStorage) {
       this.webConsoleClient.clearMessagesCache();
     }
   },
 
   /**
+   * Remove all of the private messages from the Web Console output.
+   */
+  clearPrivateMessages: function JST_clearPrivateMessages()
+  {
+    let nodes = this.hud.outputNode.querySelectorAll("richlistitem[private]");
+    for (let node of nodes) {
+      this.hud.removeOutputMessage(node);
+    }
+    this.emit("private-messages-cleared");
+  },
+
+  /**
    * Updates the size of the input field (command line) to fit its contents.
    *
    * @returns void
    */
   resizeInput: function JST_resizeInput()
   {
     let inputNode = this.inputNode;
 
@@ -4511,16 +4533,17 @@ function WebConsoleConnectionProxy(aWebC
   this._onConsoleAPICall = this._onConsoleAPICall.bind(this);
   this._onNetworkEvent = this._onNetworkEvent.bind(this);
   this._onNetworkEventUpdate = this._onNetworkEventUpdate.bind(this);
   this._onFileActivity = this._onFileActivity.bind(this);
   this._onTabNavigated = this._onTabNavigated.bind(this);
   this._onAttachConsole = this._onAttachConsole.bind(this);
   this._onCachedMessages = this._onCachedMessages.bind(this);
   this._connectionTimeout = this._connectionTimeout.bind(this);
+  this._onLastPrivateContextExited = this._onLastPrivateContextExited.bind(this);
 }
 
 WebConsoleConnectionProxy.prototype = {
   /**
    * The owning Web Console instance.
    *
    * @see WebConsoleFrame
    * @type object
@@ -4611,16 +4634,17 @@ WebConsoleConnectionProxy.prototype = {
 
     let client = this.client = this.target.client;
 
     client.addListener("pageError", this._onPageError);
     client.addListener("consoleAPICall", this._onConsoleAPICall);
     client.addListener("networkEvent", this._onNetworkEvent);
     client.addListener("networkEventUpdate", this._onNetworkEventUpdate);
     client.addListener("fileActivity", this._onFileActivity);
+    client.addListener("lastPrivateContextExited", this._onLastPrivateContextExited);
     this.target.on("will-navigate", this._onTabNavigated);
     this.target.on("navigate", this._onTabNavigated);
 
     this._consoleActor = this.target.form.consoleActor;
     if (!this.target.chrome) {
       let tab = this.target.form;
       this.owner.onLocationChange(tab.url, tab.title);
     }
@@ -4796,16 +4820,34 @@ WebConsoleConnectionProxy.prototype = {
   _onFileActivity: function WCCP__onFileActivity(aType, aPacket)
   {
     if (this.owner && aPacket.from == this._consoleActor) {
       this.owner.handleFileActivity(aPacket.uri);
     }
   },
 
   /**
+   * The "lastPrivateContextExited" message type handler. When this message is
+   * received the Web Console UI is cleared.
+   *
+   * @private
+   * @param string aType
+   *        Message type.
+   * @param object aPacket
+   *        The message received from the server.
+   */
+  _onLastPrivateContextExited:
+  function WCCP__onLastPrivateContextExited(aType, aPacket)
+  {
+    if (this.owner && aPacket.from == this._consoleActor) {
+      this.owner.jsterm.clearPrivateMessages();
+    }
+  },
+
+  /**
    * The "will-navigate" and "navigate" event handlers. We redirect any message
    * to the UI for displaying.
    *
    * @private
    * @param string aEvent
    *        Event type.
    * @param object aPacket
    *        The message received from the server.
@@ -4857,16 +4899,17 @@ WebConsoleConnectionProxy.prototype = {
       return this._disconnecter.promise;
     }
 
     this.client.removeListener("pageError", this._onPageError);
     this.client.removeListener("consoleAPICall", this._onConsoleAPICall);
     this.client.removeListener("networkEvent", this._onNetworkEvent);
     this.client.removeListener("networkEventUpdate", this._onNetworkEventUpdate);
     this.client.removeListener("fileActivity", this._onFileActivity);
+    this.client.removeListener("lastPrivateContextExited", this._onLastPrivateContextExited);
     this.target.off("will-navigate", this._onTabNavigated);
     this.target.off("navigate", this._onTabNavigated);
 
     this.client = null;
     this.webConsoleClient = null;
     this.target = null;
     this.connected = false;
     this.owner = null;
diff --git a/dom/base/ConsoleAPI.js b/dom/base/ConsoleAPI.js
--- a/dom/base/ConsoleAPI.js
+++ b/dom/base/ConsoleAPI.js
@@ -206,17 +206,17 @@ ConsoleAPI.prototype = {
    *        The console method the code has invoked.
    * @param object aArguments
    *        The arguments passed to the console method.
    */
   queueCall: function CA_queueCall(aMethod, aArguments)
   {
     let window = this._window.get();
     let metaForCall = {
-      isPrivate: PrivateBrowsingUtils.isWindowPrivate(window),
+      private: PrivateBrowsingUtils.isWindowPrivate(window),
       timeStamp: Date.now(),
       stack: this.getStackTrace(aMethod != "trace" ? 1 : null),
     };
 
     if (aMethod == "time" || aMethod == "timeEnd") {
       metaForCall.monotonicTimer = window.performance.now();
     }
 
@@ -265,16 +265,17 @@ ConsoleAPI.prototype = {
       ID: this._outerID,
       innerID: this._innerID,
       level: method,
       filename: frame.filename,
       lineNumber: frame.lineNumber,
       functionName: frame.functionName,
       timeStamp: meta.timeStamp,
       arguments: args,
+      private: meta.private,
     };
 
     switch (method) {
       case "log":
       case "info":
       case "warn":
       case "error":
       case "debug":
@@ -303,39 +304,32 @@ ConsoleAPI.prototype = {
       case "timeEnd":
         consoleEvent.timer = this.stopTimer(args[0], meta.monotonicTimer);
         break;
       default:
         // unknown console API method!
         return;
     }
 
-    this.notifyObservers(method, consoleEvent, meta.isPrivate);
+    this.notifyObservers(method, consoleEvent);
   },
 
   /**
    * Notify all observers of any console API call.
    *
    * @param string aLevel
    *        The message level.
    * @param object aConsoleEvent
    *        The console event object to send to observers for the given console
    *        API call.
-   * @param boolean aPrivate
-   *        Tells whether the window is in private browsing mode.
    */
-  notifyObservers: function CA_notifyObservers(aLevel, aConsoleEvent, aPrivate)
+  notifyObservers: function CA_notifyObservers(aLevel, aConsoleEvent)
   {
     aConsoleEvent.wrappedJSObject = aConsoleEvent;
-
-    // Store non-private messages for which the inner window was not destroyed.
-    if (!aPrivate) {
-      ConsoleAPIStorage.recordEvent(this._innerID, aConsoleEvent);
-    }
-
+    ConsoleAPIStorage.recordEvent(this._innerID, aConsoleEvent);
     Services.obs.notifyObservers(aConsoleEvent, "console-api-log-event",
                                  this._outerID);
   },
 
   /**
    * Process the console API call arguments in order to perform printf-like
    * string substitution.
    *
diff --git a/dom/tests/browser/browser_ConsoleStoragePBTest_perwindowpb.js b/dom/tests/browser/browser_ConsoleStoragePBTest_perwindowpb.js
--- a/dom/tests/browser/browser_ConsoleStoragePBTest_perwindowpb.js
+++ b/dom/tests/browser/browser_ConsoleStoragePBTest_perwindowpb.js
@@ -48,17 +48,18 @@ function test() {
         }
       };
 
       aWindow.Services.obs.addObserver(
         consoleObserver, "console-api-log-event", false);
       aWindow.console.log("foo bar baz (private: " + aIsPrivateMode + ")");
     }, true);
 
-    storageShouldOccur = !aIsPrivateMode;
+    // We expect that console API messages are always stored.
+    storageShouldOccur = true;
     innerID = getInnerWindowId(aWindow);
     beforeEvents = CSS.ConsoleAPIStorage.getEvents(innerID);
     aWindow.gBrowser.selectedBrowser.loadURI(testURI);
   }
 
   function testOnWindow(aOptions, aCallback) {
     whenNewWindowLoaded(aOptions, function(aWin) {
       windowsToClose.push(aWin);
diff --git a/toolkit/devtools/client/dbg-client.jsm b/toolkit/devtools/client/dbg-client.jsm
--- a/toolkit/devtools/client/dbg-client.jsm
+++ b/toolkit/devtools/client/dbg-client.jsm
@@ -169,16 +169,17 @@ const ThreadStateTypes = {
 /**
  * Set of protocol messages that are sent by the server without a prior request
  * by the client.
  */
 const UnsolicitedNotifications = {
   "consoleAPICall": "consoleAPICall",
   "eventNotification": "eventNotification",
   "fileActivity": "fileActivity",
+  "lastPrivateContextExited": "lastPrivateContextExited",
   "networkEvent": "networkEvent",
   "networkEventUpdate": "networkEventUpdate",
   "newGlobal": "newGlobal",
   "newScript": "newScript",
   "newSource": "newSource",
   "tabDetached": "tabDetached",
   "tabNavigated": "tabNavigated",
   "pageError": "pageError",
diff --git a/toolkit/devtools/server/actors/webconsole.js b/toolkit/devtools/server/actors/webconsole.js
--- a/toolkit/devtools/server/actors/webconsole.js
+++ b/toolkit/devtools/server/actors/webconsole.js
@@ -89,16 +89,20 @@ function WebConsoleActor(aConnection, aP
 
   this._protoChains = new Map();
   this._dbgGlobals = new Map();
   this._getDebuggerGlobal(this.window);
 
   this._onObserverNotification = this._onObserverNotification.bind(this);
   Services.obs.addObserver(this._onObserverNotification,
                            "inner-window-destroyed", false);
+  if (this._isGlobalActor) {
+    Services.obs.addObserver(this._onObserverNotification,
+                             "last-pb-context-exited", false);
+  }
 }
 
 WebConsoleActor.prototype =
 {
   /**
    * Debugger instance.
    *
    * @see jsdebugger.jsm
@@ -238,16 +242,20 @@ WebConsoleActor.prototype =
     }
     if (this.consoleProgressListener) {
       this.consoleProgressListener.destroy();
       this.consoleProgressListener = null;
     }
     this.conn.removeActorPool(this._actorPool);
     Services.obs.removeObserver(this._onObserverNotification,
                                 "inner-window-destroyed");
+    if (this._isGlobalActor) {
+      Services.obs.removeObserver(this._onObserverNotification,
+                                  "last-pb-context-exited");
+    }
     this._actorPool = null;
     this._protoChains.clear();
     this._dbgGlobals.clear();
     this._jstermHelpers = null;
     this.dbg.enabled = false;
     this.dbg = null;
     this._globalWindowId = 0;
     this.conn = this._window = null;
@@ -494,32 +502,34 @@ WebConsoleActor.prototype =
 
     let messages = [];
 
     while (types.length > 0) {
       let type = types.shift();
       switch (type) {
         case "ConsoleAPI":
           if (this.consoleAPIListener) {
-            let cache = this.consoleAPIListener.getCachedMessages();
-            cache.forEach(function(aMessage) {
+            let cache = this.consoleAPIListener
+                        .getCachedMessages(!this._isGlobalActor);
+            cache.forEach((aMessage) => {
               let message = this.prepareConsoleMessageForRemote(aMessage);
               message._type = type;
               messages.push(message);
-            }, this);
+            });
           }
           break;
         case "PageError":
           if (this.pageErrorListener) {
-            let cache = this.pageErrorListener.getCachedMessages();
-            cache.forEach(function(aMessage) {
+            let cache = this.pageErrorListener
+                        .getCachedMessages(!this._isGlobalActor);
+            cache.forEach((aMessage) => {
               let message = this.preparePageErrorForRemote(aMessage);
               message._type = type;
               messages.push(message);
-            }, this);
+            });
           }
           break;
       }
     }
 
     messages.sort(function(a, b) { return a.timeStamp - b.timeStamp; });
 
     return {
@@ -899,16 +909,17 @@ WebConsoleActor.prototype =
       lineNumber: aPageError.lineNumber,
       columnNumber: aPageError.columnNumber,
       category: aPageError.category,
       timeStamp: aPageError.timeStamp,
       warning: !!(aPageError.flags & aPageError.warningFlag),
       error: !!(aPageError.flags & aPageError.errorFlag),
       exception: !!(aPageError.flags & aPageError.exceptionFlag),
       strict: !!(aPageError.flags & aPageError.strictFlag),
+      private: aPageError.isFromPrivateWindow,
     };
   },
 
   /**
    * Handler for window.console API calls received from the ConsoleAPIListener.
    * This method sends the object to the remote Web Console client.
    *
    * @see ConsoleAPIListener
@@ -985,16 +996,18 @@ WebConsoleActor.prototype =
    * @return object
    *         The object that can be sent to the remote client.
    */
   prepareConsoleMessageForRemote:
   function WCA_prepareConsoleMessageForRemote(aMessage)
   {
     let result = WebConsoleUtils.cloneObject(aMessage);
     delete result.wrappedJSObject;
+    delete result.ID;
+    delete result.innerID;
 
     result.arguments = Array.map(aMessage.arguments || [], (aObj) => {
       let dbgObj = this.makeDebuggeeValue(aObj, true);
       return this.createValueGrip(dbgObj);
     });
 
     return result;
   },
@@ -1024,22 +1037,35 @@ WebConsoleActor.prototype =
   /**
    * Notification observer for the "inner-window-destroyed" topic. This function
    * cleans up |this._dbgGlobals| when needed.
    *
    * @private
    * @param object aSubject
    *        Notification subject - in this case it is the inner window ID that
    *        was destroyed.
+   * @param string aTopic
+   *        Notification topic.
    */
-  _onObserverNotification: function WCA__onObserverNotification(aSubject)
+  _onObserverNotification: function WCA__onObserverNotification(aSubject, aTopic)
   {
-    let windowId = aSubject.QueryInterface(Ci.nsISupportsPRUint64).data;
-    if (this._dbgGlobals.has(windowId)) {
-      this._dbgGlobals.delete(windowId);
+    switch (aTopic) {
+      case "inner-window-destroyed": {
+        let windowId = aSubject.QueryInterface(Ci.nsISupportsPRUint64).data;
+        if (this._dbgGlobals.has(windowId)) {
+          this._dbgGlobals.delete(windowId);
+        }
+        break;
+      }
+      case "last-pb-context-exited":
+        this.conn.send({
+          from: this.actorID,
+          type: "lastPrivateContextExited",
+        });
+        break;
     }
   },
 };
 
 WebConsoleActor.prototype.requestTypes =
 {
   startListeners: WebConsoleActor.prototype.onStartListeners,
   stopListeners: WebConsoleActor.prototype.onStopListeners,
@@ -1083,16 +1109,17 @@ function NetworkEventActor(aNetworkEvent
     content: {},
   };
 
   this._timings = {};
   this._longStringActors = new Set();
 
   this._discardRequestBody = aNetworkEvent.discardRequestBody;
   this._discardResponseBody = aNetworkEvent.discardResponseBody;
+  this._private = aNetworkEvent.private;
 }
 
 NetworkEventActor.prototype =
 {
   _request: null,
   _response: null,
   _timings: null,
   _longStringActors: null,
@@ -1104,17 +1131,18 @@ NetworkEventActor.prototype =
    */
   grip: function NEA_grip()
   {
     return {
       actor: this.actorID,
       startedDateTime: this._startedDateTime,
       url: this._request.url,
       method: this._request.method,
-      isXHR: this._isXHR
+      isXHR: this._isXHR,
+      private: this._private,
     };
   },
 
   /**
    * Releases this actor from the pool.
    */
   release: function NEA_release()
   {
diff --git a/toolkit/devtools/webconsole/NetworkHelper.jsm b/toolkit/devtools/webconsole/NetworkHelper.jsm
--- a/toolkit/devtools/webconsole/NetworkHelper.jsm
+++ b/toolkit/devtools/webconsole/NetworkHelper.jsm
@@ -204,17 +204,20 @@ this.NetworkHelper =
    *
    * @param nsIHttpChannel aRequest
    * @returns nsIDOMWindow or null
    */
   getWindowForRequest: function NH_getWindowForRequest(aRequest)
   {
     try {
       return this.getRequestLoadContext(aRequest).associatedWindow;
-    } catch (ex) { }
+    } catch (ex) {
+      // TODO: bug 802246 - getWindowForRequest() throws on b2g: there is no
+      // associatedWindow property.
+    }
     return null;
   },
 
   /**
    * Gets the nsILoadContext that is associated with aRequest.
    *
    * @param nsIHttpChannel aRequest
    * @returns nsILoadContext or null
diff --git a/toolkit/devtools/webconsole/WebConsoleUtils.jsm b/toolkit/devtools/webconsole/WebConsoleUtils.jsm
--- a/toolkit/devtools/webconsole/WebConsoleUtils.jsm
+++ b/toolkit/devtools/webconsole/WebConsoleUtils.jsm
@@ -19,16 +19,19 @@ XPCOMUtils.defineLazyModuleGetter(this, 
                                   "resource://gre/modules/ConsoleAPIStorage.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "NetUtil",
                                   "resource://gre/modules/NetUtil.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "NetworkHelper",
                                   "resource://gre/modules/devtools/NetworkHelper.jsm");
 
+XPCOMUtils.defineLazyModuleGetter(this, "PrivateBrowsingUtils",
+                                  "resource://gre/modules/PrivateBrowsingUtils.jsm");
+
 XPCOMUtils.defineLazyServiceGetter(this, "gActivityDistributor",
                                    "@mozilla.org/network/http-activity-distributor;1",
                                    "nsIHttpActivityDistributor");
 
 // TODO: Bug 842672 - toolkit/ imports modules from browser/.
 // Note that these are only used in JSTermHelpers, see $0 and pprint().
 XPCOMUtils.defineLazyModuleGetter(this, "gDevTools",
                                   "resource:///modules/devtools/gDevTools.jsm");
@@ -971,33 +974,42 @@ PageErrorListener.prototype =
     }
 
     return true;
   },
 
   /**
    * Get the cached page errors for the current inner window.
    *
+   * @param boolean [aIncludePrivate=false]
+   *        Tells if you want to also retrieve messages coming from private
+   *        windows. Defaults to false.
    * @return array
-   *         The array of cached messages. Each element is an nsIScriptError
-   *         with an added _type property so the remote Web Console instance can
-   *         tell the difference between various types of cached messages.
+   *         The array of cached messages.
    */
-  getCachedMessages: function PEL_getCachedMessages()
+  getCachedMessages: function PEL_getCachedMessages(aIncludePrivate = false)
   {
     let innerWindowId = this.window ?
                         WebConsoleUtils.getInnerWindowId(this.window) : null;
     let errors = Services.console.getMessageArray() || [];
 
-    return errors.filter(function(aError) {
-      return aError instanceof Ci.nsIScriptError &&
-             (!innerWindowId ||
-              (aError.innerWindowID == innerWindowId &&
-               this.isCategoryAllowed(aError.category)));
-    }, this);
+    return errors.filter((aError) => {
+      if (!(aError instanceof Ci.nsIScriptError)) {
+        return false;
+      }
+      if (!aIncludePrivate && aError.isFromPrivateWindow) {
+        return false;
+      }
+      if (innerWindowId &&
+          (aError.innerWindowID != innerWindowId ||
+           !this.isCategoryAllowed(aError.category))) {
+        return false;
+      }
+      return true;
+    });
   },
 
   /**
    * Remove the nsIConsoleService listener.
    */
   destroy: function PEL_destroy()
   {
     Services.console.unregisterListener(this);
@@ -1085,25 +1097,32 @@ ConsoleAPIListener.prototype =
     }
 
     this.owner.onConsoleAPICall(apiMessage);
   },
 
   /**
    * Get the cached messages for the current inner window.
    *
+   * @param boolean [aIncludePrivate=false]
+   *        Tells if you want to also retrieve messages coming from private
+   *        windows. Defaults to false.
    * @return array
-   *         The array of cached messages. Each element is a Console API
-   *         prepared to be sent to the remote Web Console instance.
+   *         The array of cached messages.
    */
-  getCachedMessages: function CAL_getCachedMessages()
+  getCachedMessages: function CAL_getCachedMessages(aIncludePrivate = false)
   {
     let innerWindowId = this.window ?
                         WebConsoleUtils.getInnerWindowId(this.window) : null;
-    return ConsoleAPIStorage.getEvents(innerWindowId);
+    return ConsoleAPIStorage.getEvents(innerWindowId).filter((aMessage) => {
+      if (!aIncludePrivate && aMessage.private) {
+        return false;
+      }
+      return true;
+    });
   },
 
   /**
    * Destroy the console API listener.
    */
   destroy: function CAL_destroy()
   {
     Services.obs.removeObserver(this, "console-api-log-event");
@@ -1900,54 +1919,50 @@ NetworkMonitor.prototype = {
    * @param nsIHttpChannel aChannel
    * @param number aTimestamp
    * @param string aExtraStringData
    * @return void
    */
   _onRequestHeader:
   function NM__onRequestHeader(aChannel, aTimestamp, aExtraStringData)
   {
-    let win = null;
-    try {
-      win = NetworkHelper.getWindowForRequest(aChannel);
-    }
-    catch (ex) {
-      // getWindowForRequest() throws on b2g.
-    }
+    let win = NetworkHelper.getWindowForRequest(aChannel);
 
     // Try to get the source window of the request.
     if (this.window && (!win || win.top !== this.window)) {
       return;
     }
 
     let httpActivity = this.createActivityObject(aChannel);
 
     // see NM__onRequestBodySent()
     httpActivity.charset = win ? win.document.characterSet : null;
+    httpActivity.private = win ? PrivateBrowsingUtils.isWindowPrivate(win) : false;
 
     httpActivity.timings.REQUEST_HEADER = {
       first: aTimestamp,
       last: aTimestamp
     };
 
     let httpVersionMaj = {};
     let httpVersionMin = {};
     let event = {};
     event.startedDateTime = new Date(Math.round(aTimestamp / 1000)).toISOString();
     event.headersSize = aExtraStringData.length;
     event.method = aChannel.requestMethod;
     event.url = aChannel.URI.spec;
+    event.private = httpActivity.private;
 
     // Determine if this is an XHR request.
     try {
       let callbacks = aChannel.notificationCallbacks;
       let xhrRequest = callbacks ? callbacks.getInterface(Ci.nsIXMLHttpRequest) : null;
-      event.isXHR = !!xhrRequest;
+      httpActivity.isXHR = event.isXHR = !!xhrRequest;
     } catch (e) {
-      event.isXHR = false;
+      httpActivity.isXHR = event.isXHR = false;
     }
 
     // Determine the HTTP version.
     aChannel.QueryInterface(Ci.nsIHttpChannelInternal);
     aChannel.getRequestVersion(httpVersionMaj, httpVersionMin);
 
     event.httpVersion = "HTTP/" + httpVersionMaj.value + "." +
                                   httpVersionMin.value;
