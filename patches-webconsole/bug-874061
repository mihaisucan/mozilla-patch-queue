# HG changeset patch
# Parent 4ac6c72b06c838aaabe8c8cb6c0a69047d23fc54
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1369162662 -10800

Bug 874061 - Figure out private browsing and the browser console; r=robcee; try: -b do -p linux,linux64,macosx64,win32,win64 -u mochitest-bc -t none

diff --git a/browser/devtools/webconsole/test/Makefile.in b/browser/devtools/webconsole/test/Makefile.in
--- a/browser/devtools/webconsole/test/Makefile.in
+++ b/browser/devtools/webconsole/test/Makefile.in
@@ -125,16 +125,17 @@ MOCHITEST_BROWSER_FILES = \
 	browser_webconsole_bug_837351_securityerrors.js \
 	browser_bug_865871_variables_view_close_on_esc_key.js \
 	browser_bug_865288_repeat_different_objects.js \
 	browser_jsterm_inspect.js \
 	browser_bug_869003_inspect_cross_domain_object.js \
 	browser_bug_862916_console_dir_and_filter_off.js \
 	browser_console_native_getters.js \
 	browser_bug_871156_ctrlw_close_tab.js \
+	browser_console_private_browsing.js \
 	head.js \
 	$(NULL)
 
 ifeq ($(OS_ARCH), Darwin)
 MOCHITEST_BROWSER_FILES += \
 	browser_webconsole_bug_804845_ctrl_key_nav.js \
         $(NULL)
 endif
diff --git a/browser/devtools/webconsole/test/browser_console_private_browsing.js b/browser/devtools/webconsole/test/browser_console_private_browsing.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/webconsole/test/browser_console_private_browsing.js
@@ -0,0 +1,151 @@
+/*
+ * Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/
+ */
+
+// Bug 874061: test for how the browser and web consoles display messages coming
+// from private windows. See bug for description of expected behavior.
+
+function test()
+{
+  const TEST_URI = "data:text/html;charset=utf8,<p>hello world! bug 874061" +
+                   "<button onclick='console.log(\"foobar bug 874061\");" +
+                   "fooBazBaz.yummy()'>click</button>";
+
+  let win = OpenBrowserWindow({ private: true });
+  ok(win, "new window");
+  ok(PrivateBrowsingUtils.isWindowPrivate(win), "window is private");
+
+  // Make sure we have a clean state to start with.
+  let ConsoleAPIStorage = Cu.import("resource://gre/modules/ConsoleAPIStorage.jsm", {}).ConsoleAPIStorage;
+  Services.console.reset();
+  ConsoleAPIStorage.clearEvents();
+
+  let gBrowser, content, hud, expectedMessages;
+  whenDelayedStartupFinished(win, () => {
+    gBrowser = win.gBrowser;
+    info("private browser window opened");
+
+    gBrowser.selectedTab = gBrowser.addTab(TEST_URI);
+    gBrowser.selectedBrowser.addEventListener("load", function onLoad() {
+      info("private tab opened");
+      gBrowser.selectedBrowser.removeEventListener("load", onLoad, true);
+      content = gBrowser.selectedBrowser.contentWindow;
+      ok(PrivateBrowsingUtils.isWindowPrivate(content), "tab window is private");
+      openConsole(gBrowser.selectedTab, consoleOpened);
+    }, true);
+  });
+
+  function addMessages()
+  {
+    let button = content.document.querySelector("button");
+    ok(button, "button in page");
+
+    EventUtils.synthesizeMouse(button, 2, 2, {}, content);
+
+    expectedMessages = [
+      {
+        name: "script error",
+        text: "fooBazBaz is not defined",
+        category: CATEGORY_JS,
+        severity: SEVERITY_ERROR,
+      },
+      {
+        name: "console message",
+        text: "foobar bug 874061",
+        category: CATEGORY_WEBDEV,
+        severity: SEVERITY_LOG,
+      },
+    ];
+  }
+
+  function consoleOpened(aHud)
+  {
+    hud = aHud;
+    ok(hud, "Web Console opened");
+
+    addMessages();
+
+    // Make sure messages are displayed in the web console as they happen, even
+    // if this is a private tab.
+    waitForMessages({
+      webconsole: hud,
+      messages: expectedMessages,
+    }).then(testCachedMessages);
+  }
+
+  function testCachedMessages()
+  {
+    closeConsole(gBrowser.selectedTab, () => {
+      info("web console closed");
+      openConsole(gBrowser.selectedTab, consoleReopened);
+    });
+  }
+
+  function consoleReopened(aHud)
+  {
+    hud = aHud;
+    ok(hud, "web console reopened");
+
+    // Make sure that cached messages are displayed in the web console, even
+    // if this is a private tab.
+    waitForMessages({
+      webconsole: hud,
+      messages: expectedMessages,
+    }).then(testBrowserConsole);
+  }
+
+  function testBrowserConsole()
+  {
+    info("testBrowserConsole()");
+    closeConsole(gBrowser.selectedTab, () => {
+      info("web console closed");
+      win.HUDConsoleUI.toggleBrowserConsole().then(onBrowserConsoleOpen);
+    });
+  }
+
+  function checkNoPrivateMessages()
+  {
+    // Make sure that the cached messages from private tabs are not displayed in
+    // the browser console.
+    let text = hud.outputNode.textContent;
+    is(text.indexOf("fooBazBaz"), -1, "no exception displayed");
+    is(text.indexOf("bug 874061"), -1, "no console message displayed");
+  }
+
+  function onBrowserConsoleOpen(aHud)
+  {
+    hud = aHud;
+    ok(hud, "browser console opened");
+
+    checkNoPrivateMessages();
+    addMessages();
+
+    // Make sure that live messages are displayed in the browser console, even
+    // from private tabs.
+    waitForMessages({
+      webconsole: hud,
+      messages: expectedMessages,
+    }).then(() => {
+      info("close the browser console and the private window");
+      win.HUDConsoleUI.toggleBrowserConsole().then(() => {
+        win.close();
+        info("reopen the browser console");
+        executeSoon(() =>
+          HUDConsoleUI.toggleBrowserConsole().then(onBrowserConsoleReopen));
+      });
+    });
+  }
+
+  function onBrowserConsoleReopen(aHud)
+  {
+    hud = aHud;
+    ok(hud, "browser console reopened");
+
+    // Make sure that no private message is displayed after closing the private
+    // window and reopening the Browser Console.
+    checkNoPrivateMessages();
+
+    executeSoon(finishTest);
+  }
+}
diff --git a/browser/devtools/webconsole/test/head.js b/browser/devtools/webconsole/test/head.js
--- a/browser/devtools/webconsole/test/head.js
+++ b/browser/devtools/webconsole/test/head.js
@@ -1217,8 +1217,18 @@ function scrollOutputToNode(aNode)
   while (richListBoxNode.tagName != "richlistbox") {
     richListBoxNode = richListBoxNode.parentNode;
   }
 
   let boxObject = richListBoxNode.scrollBoxObject;
   let nsIScrollBoxObject = boxObject.QueryInterface(Ci.nsIScrollBoxObject);
   nsIScrollBoxObject.ensureElementIsVisible(aNode);
 }
+
+function whenDelayedStartupFinished(aWindow, aCallback)
+{
+  Services.obs.addObserver(function observer(aSubject, aTopic) {
+    if (aWindow == aSubject) {
+      Services.obs.removeObserver(observer, aTopic);
+      executeSoon(aCallback);
+    }
+  }, "browser-delayed-startup-finished", false);
+}
diff --git a/dom/base/ConsoleAPI.js b/dom/base/ConsoleAPI.js
--- a/dom/base/ConsoleAPI.js
+++ b/dom/base/ConsoleAPI.js
@@ -265,16 +265,17 @@ ConsoleAPI.prototype = {
       ID: this._outerID,
       innerID: this._innerID,
       level: method,
       filename: frame.filename,
       lineNumber: frame.lineNumber,
       functionName: frame.functionName,
       timeStamp: meta.timeStamp,
       arguments: args,
+      isPrivate: meta.isPrivate,
     };
 
     switch (method) {
       case "log":
       case "info":
       case "warn":
       case "error":
       case "debug":
@@ -303,39 +304,32 @@ ConsoleAPI.prototype = {
       case "timeEnd":
         consoleEvent.timer = this.stopTimer(args[0], meta.monotonicTimer);
         break;
       default:
         // unknown console API method!
         return;
     }
 
-    this.notifyObservers(method, consoleEvent, meta.isPrivate);
+    this.notifyObservers(method, consoleEvent);
   },
 
   /**
    * Notify all observers of any console API call.
    *
    * @param string aLevel
    *        The message level.
    * @param object aConsoleEvent
    *        The console event object to send to observers for the given console
    *        API call.
-   * @param boolean aPrivate
-   *        Tells whether the window is in private browsing mode.
    */
-  notifyObservers: function CA_notifyObservers(aLevel, aConsoleEvent, aPrivate)
+  notifyObservers: function CA_notifyObservers(aLevel, aConsoleEvent)
   {
     aConsoleEvent.wrappedJSObject = aConsoleEvent;
-
-    // Store non-private messages for which the inner window was not destroyed.
-    if (!aPrivate) {
-      ConsoleAPIStorage.recordEvent(this._innerID, aConsoleEvent);
-    }
-
+    ConsoleAPIStorage.recordEvent(this._innerID, aConsoleEvent);
     Services.obs.notifyObservers(aConsoleEvent, "console-api-log-event",
                                  this._outerID);
   },
 
   /**
    * Process the console API call arguments in order to perform printf-like
    * string substitution.
    *
diff --git a/toolkit/devtools/webconsole/WebConsoleUtils.jsm b/toolkit/devtools/webconsole/WebConsoleUtils.jsm
--- a/toolkit/devtools/webconsole/WebConsoleUtils.jsm
+++ b/toolkit/devtools/webconsole/WebConsoleUtils.jsm
@@ -971,33 +971,42 @@ PageErrorListener.prototype =
     }
 
     return true;
   },
 
   /**
    * Get the cached page errors for the current inner window.
    *
+   * @param boolean [aIncludePrivate=false]
+   *        Tells if you want to also retrieve messages coming from private
+   *        windows. Defaults to false.
    * @return array
-   *         The array of cached messages. Each element is an nsIScriptError
-   *         with an added _type property so the remote Web Console instance can
-   *         tell the difference between various types of cached messages.
+   *         The array of cached messages.
    */
-  getCachedMessages: function PEL_getCachedMessages()
+  getCachedMessages: function PEL_getCachedMessages(aIncludePrivate = false)
   {
     let innerWindowId = this.window ?
                         WebConsoleUtils.getInnerWindowId(this.window) : null;
     let errors = Services.console.getMessageArray() || [];
 
-    return errors.filter(function(aError) {
-      return aError instanceof Ci.nsIScriptError &&
-             (!innerWindowId ||
-              (aError.innerWindowID == innerWindowId &&
-               this.isCategoryAllowed(aError.category)));
-    }, this);
+    return errors.filter((aError) => {
+      if (!(aError instanceof Ci.nsIScriptError)) {
+        return false;
+      }
+      if (!aIncludePrivate && aError.isFromPrivateWindow) {
+        return false;
+      }
+      if (innerWindowId &&
+          (aError.innerWindowID != innerWindowId ||
+           !this.isCategoryAllowed(aError.category))) {
+        return false;
+      }
+      return true;
+    });
   },
 
   /**
    * Remove the nsIConsoleService listener.
    */
   destroy: function PEL_destroy()
   {
     Services.console.unregisterListener(this);
@@ -1085,25 +1094,32 @@ ConsoleAPIListener.prototype =
     }
 
     this.owner.onConsoleAPICall(apiMessage);
   },
 
   /**
    * Get the cached messages for the current inner window.
    *
+   * @param boolean [aIncludePrivate=false]
+   *        Tells if you want to also retrieve messages coming from private
+   *        windows. Defaults to false.
    * @return array
-   *         The array of cached messages. Each element is a Console API
-   *         prepared to be sent to the remote Web Console instance.
+   *         The array of cached messages.
    */
-  getCachedMessages: function CAL_getCachedMessages()
+  getCachedMessages: function CAL_getCachedMessages(aIncludePrivate = false)
   {
     let innerWindowId = this.window ?
                         WebConsoleUtils.getInnerWindowId(this.window) : null;
-    return ConsoleAPIStorage.getEvents(innerWindowId);
+    return ConsoleAPIStorage.getEvents(innerWindowId).filter((aMessage) => {
+      if (!aIncludePrivate && aMessage.isPrivate) {
+        return false;
+      }
+      return true;
+    });
   },
 
   /**
    * Destroy the console API listener.
    */
   destroy: function CAL_destroy()
   {
     Services.obs.removeObserver(this, "console-api-log-event");
diff --git a/toolkit/devtools/webconsole/dbg-webconsole-actors.js b/toolkit/devtools/webconsole/dbg-webconsole-actors.js
--- a/toolkit/devtools/webconsole/dbg-webconsole-actors.js
+++ b/toolkit/devtools/webconsole/dbg-webconsole-actors.js
@@ -494,32 +494,34 @@ WebConsoleActor.prototype =
 
     let messages = [];
 
     while (types.length > 0) {
       let type = types.shift();
       switch (type) {
         case "ConsoleAPI":
           if (this.consoleAPIListener) {
-            let cache = this.consoleAPIListener.getCachedMessages();
-            cache.forEach(function(aMessage) {
+            let cache = this.consoleAPIListener
+                        .getCachedMessages(!this._isGlobalActor);
+            cache.forEach((aMessage) => {
               let message = this.prepareConsoleMessageForRemote(aMessage);
               message._type = type;
               messages.push(message);
-            }, this);
+            });
           }
           break;
         case "PageError":
           if (this.pageErrorListener) {
-            let cache = this.pageErrorListener.getCachedMessages();
-            cache.forEach(function(aMessage) {
+            let cache = this.pageErrorListener
+                        .getCachedMessages(!this._isGlobalActor);
+            cache.forEach((aMessage) => {
               let message = this.preparePageErrorForRemote(aMessage);
               message._type = type;
               messages.push(message);
-            }, this);
+            });
           }
           break;
       }
     }
 
     messages.sort(function(a, b) { return a.timeStamp - b.timeStamp; });
 
     return {
