# HG changeset patch
# Parent bbc2b4a574557c7180b18841d9df11cf9337d20f
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1369081775 -10800

Bug 874061 - Figure out private browsing and the browser console; r=robcee

diff --git a/dom/base/ConsoleAPI.js b/dom/base/ConsoleAPI.js
--- a/dom/base/ConsoleAPI.js
+++ b/dom/base/ConsoleAPI.js
@@ -265,16 +265,17 @@ ConsoleAPI.prototype = {
       ID: this._outerID,
       innerID: this._innerID,
       level: method,
       filename: frame.filename,
       lineNumber: frame.lineNumber,
       functionName: frame.functionName,
       timeStamp: meta.timeStamp,
       arguments: args,
+      isPrivate: meta.isPrivate,
     };
 
     switch (method) {
       case "log":
       case "info":
       case "warn":
       case "error":
       case "debug":
@@ -303,39 +304,32 @@ ConsoleAPI.prototype = {
       case "timeEnd":
         consoleEvent.timer = this.stopTimer(args[0], meta.monotonicTimer);
         break;
       default:
         // unknown console API method!
         return;
     }
 
-    this.notifyObservers(method, consoleEvent, meta.isPrivate);
+    this.notifyObservers(method, consoleEvent);
   },
 
   /**
    * Notify all observers of any console API call.
    *
    * @param string aLevel
    *        The message level.
    * @param object aConsoleEvent
    *        The console event object to send to observers for the given console
    *        API call.
-   * @param boolean aPrivate
-   *        Tells whether the window is in private browsing mode.
    */
-  notifyObservers: function CA_notifyObservers(aLevel, aConsoleEvent, aPrivate)
+  notifyObservers: function CA_notifyObservers(aLevel, aConsoleEvent)
   {
     aConsoleEvent.wrappedJSObject = aConsoleEvent;
-
-    // Store non-private messages for which the inner window was not destroyed.
-    if (!aPrivate) {
-      ConsoleAPIStorage.recordEvent(this._innerID, aConsoleEvent);
-    }
-
+    ConsoleAPIStorage.recordEvent(this._innerID, aConsoleEvent);
     Services.obs.notifyObservers(aConsoleEvent, "console-api-log-event",
                                  this._outerID);
   },
 
   /**
    * Process the console API call arguments in order to perform printf-like
    * string substitution.
    *
diff --git a/toolkit/devtools/webconsole/WebConsoleUtils.jsm b/toolkit/devtools/webconsole/WebConsoleUtils.jsm
--- a/toolkit/devtools/webconsole/WebConsoleUtils.jsm
+++ b/toolkit/devtools/webconsole/WebConsoleUtils.jsm
@@ -971,33 +971,42 @@ PageErrorListener.prototype =
     }
 
     return true;
   },
 
   /**
    * Get the cached page errors for the current inner window.
    *
+   * @param boolean [aIncludePrivate=false]
+   *        Tells if you want to also retrieve messages coming from private
+   *        windows. Defaults to false.
    * @return array
-   *         The array of cached messages. Each element is an nsIScriptError
-   *         with an added _type property so the remote Web Console instance can
-   *         tell the difference between various types of cached messages.
+   *         The array of cached messages.
    */
-  getCachedMessages: function PEL_getCachedMessages()
+  getCachedMessages: function PEL_getCachedMessages(aIncludePrivate = false)
   {
     let innerWindowId = this.window ?
                         WebConsoleUtils.getInnerWindowId(this.window) : null;
     let errors = Services.console.getMessageArray() || [];
 
-    return errors.filter(function(aError) {
-      return aError instanceof Ci.nsIScriptError &&
-             (!innerWindowId ||
-              (aError.innerWindowID == innerWindowId &&
-               this.isCategoryAllowed(aError.category)));
-    }, this);
+    return errors.filter((aError) => {
+      if (!(aError instanceof Ci.nsIScriptError)) {
+        return false;
+      }
+      if (!aIncludePrivate && aError.isFromPrivateWindow) {
+        return false;
+      }
+      if (innerWindowId &&
+          (aError.innerWindowID != innerWindowId ||
+           !this.isCategoryAllowed(aError.category))) {
+        return false;
+      }
+      return true;
+    });
   },
 
   /**
    * Remove the nsIConsoleService listener.
    */
   destroy: function PEL_destroy()
   {
     Services.console.unregisterListener(this);
@@ -1085,25 +1094,32 @@ ConsoleAPIListener.prototype =
     }
 
     this.owner.onConsoleAPICall(apiMessage);
   },
 
   /**
    * Get the cached messages for the current inner window.
    *
+   * @param boolean [aIncludePrivate=false]
+   *        Tells if you want to also retrieve messages coming from private
+   *        windows. Defaults to false.
    * @return array
-   *         The array of cached messages. Each element is a Console API
-   *         prepared to be sent to the remote Web Console instance.
+   *         The array of cached messages.
    */
-  getCachedMessages: function CAL_getCachedMessages()
+  getCachedMessages: function CAL_getCachedMessages(aIncludePrivate = false)
   {
     let innerWindowId = this.window ?
                         WebConsoleUtils.getInnerWindowId(this.window) : null;
-    return ConsoleAPIStorage.getEvents(innerWindowId);
+    return ConsoleAPIStorage.getEvents(innerWindowId).filter((aMessage) => {
+      if (!aIncludePrivate && aMessage.isFromPrivateWindow) {
+        return false;
+      }
+      return true;
+    });
   },
 
   /**
    * Destroy the console API listener.
    */
   destroy: function CAL_destroy()
   {
     Services.obs.removeObserver(this, "console-api-log-event");
diff --git a/toolkit/devtools/webconsole/dbg-webconsole-actors.js b/toolkit/devtools/webconsole/dbg-webconsole-actors.js
--- a/toolkit/devtools/webconsole/dbg-webconsole-actors.js
+++ b/toolkit/devtools/webconsole/dbg-webconsole-actors.js
@@ -494,32 +494,34 @@ WebConsoleActor.prototype =
 
     let messages = [];
 
     while (types.length > 0) {
       let type = types.shift();
       switch (type) {
         case "ConsoleAPI":
           if (this.consoleAPIListener) {
-            let cache = this.consoleAPIListener.getCachedMessages();
-            cache.forEach(function(aMessage) {
+            let cache = this.consoleAPIListener
+                        .getCachedMessages(!this._isGlobalActor);
+            cache.forEach((aMessage) => {
               let message = this.prepareConsoleMessageForRemote(aMessage);
               message._type = type;
               messages.push(message);
-            }, this);
+            });
           }
           break;
         case "PageError":
           if (this.pageErrorListener) {
-            let cache = this.pageErrorListener.getCachedMessages();
-            cache.forEach(function(aMessage) {
+            let cache = this.pageErrorListener
+                        .getCachedMessages(!this._isGlobalActor);
+            cache.forEach((aMessage) => {
               let message = this.preparePageErrorForRemote(aMessage);
               message._type = type;
               messages.push(message);
-            }, this);
+            });
           }
           break;
       }
     }
 
     messages.sort(function(a, b) { return a.timeStamp - b.timeStamp; });
 
     return {
