# HG changeset patch
# Parent b9308534435279bdcd22f79d431b91b76ba5c6fe
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1362595524 -7200

diff --git a/browser/devtools/inspector/InspectorPanel.jsm b/browser/devtools/inspector/InspectorPanel.jsm
--- a/browser/devtools/inspector/InspectorPanel.jsm
+++ b/browser/devtools/inspector/InspectorPanel.jsm
@@ -43,18 +43,16 @@ this.InspectorPanel = function Inspector
   EventEmitter.decorate(this);
 }
 
 InspectorPanel.prototype = {
   /**
    * open is effectively an asynchronous constructor
    */
   open: function InspectorPanel_open() {
-    let deferred = Promise.defer();
-
     this.preventNavigateAway = this.preventNavigateAway.bind(this);
     this.onNavigatedAway = this.onNavigatedAway.bind(this);
     this.target.on("will-navigate", this.preventNavigateAway);
     this.target.on("navigate", this.onNavigatedAway);
 
     this.nodemenu = this.panelDoc.getElementById("inspector-node-popup");
     this.lastNodemenuItem = this.nodemenu.lastChild;
     this._setupNodeMenu = this._setupNodeMenu.bind(this);
@@ -125,42 +123,45 @@ InspectorPanel.prototype = {
 
       }.bind(this);
       this.target.on("thread-paused", this.updateDebuggerPausedWarning);
       this.target.on("thread-resumed", this.updateDebuggerPausedWarning);
       this._toolbox.on("select", this.updateDebuggerPausedWarning);
       this.updateDebuggerPausedWarning();
     }
 
+    let markuploaded = Promise.defer();
+
     this._initMarkup();
     this.isReady = false;
 
     this.once("markuploaded", function() {
-      this.isReady = true;
-
       // All the components are initialized. Let's select a node.
       if (this.target.isLocalTab) {
         let root = this.browser.contentDocument.documentElement;
         this._selection.setNode(root);
       } else if (this.target.window) {
         let root = this.target.window.document.documentElement;
         this._selection.setNode(root);
       }
 
       if (this.highlighter) {
         this.highlighter.unlock();
       }
 
-      this.emit("ready");
-      deferred.resolve(this);
+      markuploaded.resolve(null);
     }.bind(this));
 
-    this.setupSidebar();
-
-    return deferred.promise;
+    return markuploaded.promise.then(function() {
+      return this.setupSidebar();
+    }.bind(this)).then(function() {
+      this.isReady = true;
+      this.emit("ready");
+      return this;
+    }.bind(this));
   },
 
   /**
    * Selection object (read only)
    */
   get selection() {
     return this._selection;
   },
@@ -192,30 +193,47 @@ InspectorPanel.prototype = {
    * notification.
    */
   markDirty: function InspectorPanel_markDirty() {
     this.isDirty = true;
   },
 
   /**
    * Build the sidebar.
+   *
+   * @return object
+   *         A Promise that is resolved once all the sidebar tabs are ready.
    */
   setupSidebar: function InspectorPanel_setupSidebar() {
+    let deferred = Promise.defer();
+
     let tabbox = this.panelDoc.querySelector("#inspector-sidebar");
     this.sidebar = new ToolSidebar(tabbox, this);
 
     let defaultTab = Services.prefs.getCharPref("devtools.inspector.activeSidebar");
 
     this._setDefaultSidebar = function(event, toolId) {
       Services.prefs.setCharPref("devtools.inspector.activeSidebar", toolId);
     }.bind(this);
 
     this.sidebar.on("select", this._setDefaultSidebar);
     this.toggleHighlighter = this.toggleHighlighter.bind(this);
 
+    let tabsReady = 0;
+    let onTabReady = function _onTabReady() {
+      tabsReady++;
+      if (tabsReady == 3) {
+        deferred.resolve(null);
+      }
+    };
+
+    this.sidebar.once("ruleview-ready", onTabReady);
+    this.sidebar.once("computedview-ready", onTabReady);
+    this.sidebar.once("layoutview-ready", onTabReady);
+
     this.sidebar.addTab("ruleview",
                         "chrome://browser/content/devtools/cssruleview.xul",
                         "ruleview" == defaultTab);
 
     this.sidebar.addTab("computedview",
                         "chrome://browser/content/devtools/csshtmltree.xul",
                         "computedview" == defaultTab);
 
@@ -223,16 +241,18 @@ InspectorPanel.prototype = {
                         "chrome://browser/content/devtools/layoutview/view.xhtml",
                         "layoutview" == defaultTab);
 
     let ruleViewTab = this.sidebar.getTab("ruleview");
     ruleViewTab.addEventListener("mouseover", this.toggleHighlighter, false);
     ruleViewTab.addEventListener("mouseout", this.toggleHighlighter, false);
 
     this.sidebar.show();
+
+    return deferred.promise;
   },
 
   /**
    * Reset the inspector on navigate away.
    */
   onNavigatedAway: function InspectorPanel_onNavigatedAway(event, newWindow) {
     this.selection.setNode(null);
     this._destroyMarkup();
diff --git a/browser/devtools/inspector/test/browser_inspector_changes.js b/browser/devtools/inspector/test/browser_inspector_changes.js
--- a/browser/devtools/inspector/test/browser_inspector_changes.js
+++ b/browser/devtools/inspector/test/browser_inspector_changes.js
@@ -25,30 +25,29 @@ function test() {
         return view;
       }
     }
     return null;
   }
 
   function runInspectorTests(aInspector)
   {
+    info("runInspectorTests");
     inspector = aInspector;
-    inspector.sidebar.once("computedview-ready", function() {
-      info("Computed View ready");
-      inspector.sidebar.select("computedview");
 
-      testDiv = doc.getElementById("testdiv");
+    inspector.sidebar.select("computedview");
 
-      testDiv.style.fontSize = "10px";
+    testDiv = doc.getElementById("testdiv");
 
-      // Start up the style inspector panel...
-      Services.obs.addObserver(stylePanelTests, "StyleInspector-populated", false);
+    testDiv.style.fontSize = "10px";
 
-      inspector.selection.setNode(testDiv);
-    });
+    // Start up the style inspector panel...
+    Services.obs.addObserver(stylePanelTests, "StyleInspector-populated", false);
+
+    inspector.selection.setNode(testDiv);
   }
 
   function stylePanelTests()
   {
     Services.obs.removeObserver(stylePanelTests, "StyleInspector-populated");
 
     let computedview = inspector.sidebar.getWindowForTab("computedview").computedview;
     ok(computedview, "Style Panel has a cssHtmlTree");
diff --git a/browser/devtools/inspector/test/browser_inspector_pseudoclass_lock.js b/browser/devtools/inspector/test/browser_inspector_pseudoclass_lock.js
--- a/browser/devtools/inspector/test/browser_inspector_pseudoclass_lock.js
+++ b/browser/devtools/inspector/test/browser_inspector_pseudoclass_lock.js
@@ -51,17 +51,17 @@ function createDocument()
 
   openInspector(selectNode);
 }
 
 function selectNode(aInspector)
 {
   inspector = aInspector;
   inspector.selection.setNode(div);
-  inspector.sidebar.once("ruleview-ready", function() {
+  executeSoon(function() {
     ruleview = inspector.sidebar.getWindowForTab("ruleview").ruleview.view;
     inspector.sidebar.select("ruleview");
     performTests();
   });
 }
 
 function performTests()
 {
diff --git a/browser/devtools/layoutview/test/browser_layoutview.js b/browser/devtools/layoutview/test/browser_layoutview.js
--- a/browser/devtools/layoutview/test/browser_layoutview.js
+++ b/browser/devtools/layoutview/test/browser_layoutview.js
@@ -74,17 +74,17 @@ function test() {
 
   function openLayoutView(aInspector) {
     inspector = aInspector;
 
     info("Inspector open");
 
     inspector.selection.setNode(node);
     inspector.sidebar.select("layoutview");
-    inspector.sidebar.once("layoutview-ready", viewReady);
+    executeSoon(viewReady);
   }
 
   function viewReady() {
     info("Layout view ready");
 
     view = inspector.sidebar.getWindowForTab("layoutview");
 
     ok(!!view.layoutview, "LayoutView document is alive.");
diff --git a/browser/devtools/responsivedesign/test/browser_responsivecomputedview.js b/browser/devtools/responsivedesign/test/browser_responsivecomputedview.js
--- a/browser/devtools/responsivedesign/test/browser_responsivecomputedview.js
+++ b/browser/devtools/responsivedesign/test/browser_responsivecomputedview.js
@@ -58,20 +58,18 @@ function test() {
 
   function onInspectorUIOpen(aInspector) {
     inspector = aInspector;
     ok(inspector, "Got inspector instance");
     inspector.sidebar.select("computedview");
 
     let div = content.document.getElementsByTagName("div")[0];
 
-    inspector.sidebar.once("computedview-ready", function() {
-      Services.obs.addObserver(testShrink, "StyleInspector-populated", false);
-      inspector.selection.setNode(div);
-    });
+    Services.obs.addObserver(testShrink, "StyleInspector-populated", false);
+    inspector.selection.setNode(div);
   }
 
   function testShrink() {
     Services.obs.removeObserver(testShrink, "StyleInspector-populated", false);
 
     computedView = inspector.sidebar.getWindowForTab("computedview").computedview.view;
     ok(computedView, "We have access to the Computed View object");
 
diff --git a/browser/devtools/responsivedesign/test/browser_responsiveruleview.js b/browser/devtools/responsivedesign/test/browser_responsiveruleview.js
--- a/browser/devtools/responsivedesign/test/browser_responsiveruleview.js
+++ b/browser/devtools/responsivedesign/test/browser_responsiveruleview.js
@@ -53,20 +53,18 @@ function test() {
 
   function onInspectorUIOpen(aInspector) {
     inspector = aInspector;
     ok(inspector, "Got inspector instance");
     inspector.sidebar.select("ruleview");
 
     let div = content.document.getElementsByTagName("div")[0];
 
-    inspector.sidebar.once("ruleview-ready", function() {
-      Services.obs.addObserver(testShrink, "StyleInspector-populated", false);
-      inspector.selection.setNode(div);
-    });
+    Services.obs.addObserver(testShrink, "StyleInspector-populated", false);
+    inspector.selection.setNode(div);
   }
 
   function testShrink() {
     Services.obs.removeObserver(testShrink, "StyleInspector-populated");
 
     ruleView = inspector.sidebar.getWindowForTab("ruleview").ruleview.view;
 
     is(numberOfRules(), 2, "Should have two rules initially.");
diff --git a/browser/devtools/styleinspector/test/browser_bug683672.js b/browser/devtools/styleinspector/test/browser_bug683672.js
--- a/browser/devtools/styleinspector/test/browser_bug683672.js
+++ b/browser/devtools/styleinspector/test/browser_bug683672.js
@@ -34,17 +34,17 @@ function selectNode(aInspector)
 {
   inspector = aInspector;
 
   div = content.document.getElementById("test");
   ok(div, "captain, we have the div");
 
   inspector.selection.setNode(div);
 
-  inspector.sidebar.once("computedview-ready", function() {
+  executeSoon(function() {
     computedView = getComputedView(inspector);
 
     inspector.sidebar.select("computedview");
     runTests();
   });
 }
 
 function runTests()
diff --git a/browser/devtools/styleinspector/test/browser_bug722196_property_view_media_queries.js b/browser/devtools/styleinspector/test/browser_bug722196_property_view_media_queries.js
--- a/browser/devtools/styleinspector/test/browser_bug722196_property_view_media_queries.js
+++ b/browser/devtools/styleinspector/test/browser_bug722196_property_view_media_queries.js
@@ -28,17 +28,17 @@ function docLoaded()
 
 function selectNode(aInspector)
 {
   var div = doc.querySelector("div");
   ok(div, "captain, we have the div");
 
   aInspector.selection.setNode(div);
 
-  aInspector.sidebar.once("computedview-ready", function() {
+  executeSoon(function() {
     aInspector.sidebar.select("computedview");
     computedView = getComputedView(aInspector);
     checkSheets();
   });
 }
 
 function checkSheets()
 {
diff --git a/browser/devtools/styleinspector/test/browser_bug_692400_element_style.js b/browser/devtools/styleinspector/test/browser_bug_692400_element_style.js
--- a/browser/devtools/styleinspector/test/browser_bug_692400_element_style.js
+++ b/browser/devtools/styleinspector/test/browser_bug_692400_element_style.js
@@ -19,22 +19,20 @@ function createDocument()
 
 function openComputedView(aInspector)
 {
   let div = doc.querySelector("div");
   ok(div, "captain, we have the test div");
 
   aInspector.selection.setNode(div);
 
-  aInspector.sidebar.once("computedview-ready", function() {
-    aInspector.sidebar.select("computedview");
-    computedView = getComputedView(aInspector);
+  Services.obs.addObserver(SI_checkText, "StyleInspector-populated", false);
 
-    Services.obs.addObserver(SI_checkText, "StyleInspector-populated", false);
-  });
+  aInspector.sidebar.select("computedview");
+  computedView = getComputedView(aInspector);
 }
 
 function SI_checkText()
 {
   Services.obs.removeObserver(SI_checkText, "StyleInspector-populated", false);
 
   let propertyView = null;
   computedView.propertyViews.some(function(aView) {
diff --git a/browser/devtools/styleinspector/test/browser_computedview_734259_style_editor_link.js b/browser/devtools/styleinspector/test/browser_computedview_734259_style_editor_link.js
--- a/browser/devtools/styleinspector/test/browser_computedview_734259_style_editor_link.js
+++ b/browser/devtools/styleinspector/test/browser_computedview_734259_style_editor_link.js
@@ -35,23 +35,21 @@ function selectNode(aInspector)
 {
   inspector = aInspector;
 
   let span = doc.querySelector("span");
   ok(span, "captain, we have the span");
 
   aInspector.selection.setNode(span);
 
-  aInspector.sidebar.once("computedview-ready", function() {
-    aInspector.sidebar.select("computedview");
+  aInspector.sidebar.select("computedview");
 
-    computedView = getComputedView(aInspector);
+  computedView = getComputedView(aInspector);
 
-    Services.obs.addObserver(testInlineStyle, "StyleInspector-populated", false);
-  });
+  Services.obs.addObserver(testInlineStyle, "StyleInspector-populated", false);
 }
 
 function testInlineStyle()
 {
   Services.obs.removeObserver(testInlineStyle, "StyleInspector-populated", false);
 
   info("expanding property");
   expandProperty(0, function propertyExpanded() {
diff --git a/browser/devtools/styleinspector/test/browser_computedview_bug_703643_context_menu_copy.js b/browser/devtools/styleinspector/test/browser_computedview_bug_703643_context_menu_copy.js
--- a/browser/devtools/styleinspector/test/browser_computedview_bug_703643_context_menu_copy.js
+++ b/browser/devtools/styleinspector/test/browser_computedview_bug_703643_context_menu_copy.js
@@ -37,25 +37,23 @@ function createDocument()
 
 function selectNode(aInspector)
 {
   let span = doc.querySelector("span");
   ok(span, "captain, we have the span");
 
   aInspector.selection.setNode(span);
 
-  aInspector.sidebar.once("computedview-ready", function() {
-    aInspector.sidebar.select("computedview");
+  aInspector.sidebar.select("computedview");
 
-    computedView = getComputedView(aInspector);
-    win = aInspector.sidebar.getWindowForTab("computedview");
+  computedView = getComputedView(aInspector);
+  win = aInspector.sidebar.getWindowForTab("computedview");
 
-    Services.obs.addObserver(runStyleInspectorTests,
-      "StyleInspector-populated", false);
-  });
+  Services.obs.addObserver(runStyleInspectorTests,
+    "StyleInspector-populated", false);
 }
 
 
 function runStyleInspectorTests()
 {
   Services.obs.removeObserver(runStyleInspectorTests,
     "StyleInspector-populated", false);
 
diff --git a/browser/devtools/styleinspector/test/browser_styleinspector.js b/browser/devtools/styleinspector/test/browser_styleinspector.js
--- a/browser/devtools/styleinspector/test/browser_styleinspector.js
+++ b/browser/devtools/styleinspector/test/browser_styleinspector.js
@@ -30,17 +30,17 @@ function createDocument()
 
   openInspector(openComputedView);
 }
 
 function openComputedView(aInspector)
 {
   inspector = aInspector;
 
-  inspector.sidebar.once("computedview-ready", function() {
+  executeSoon(function() {
     computedView = getComputedView(inspector);
 
     inspector.sidebar.select("computedview");
     runStyleInspectorTests();
   });
 }
 
 function runStyleInspectorTests()
diff --git a/browser/devtools/styleinspector/test/browser_styleinspector_bug_672744_search_filter.js b/browser/devtools/styleinspector/test/browser_styleinspector_bug_672744_search_filter.js
--- a/browser/devtools/styleinspector/test/browser_styleinspector_bug_672744_search_filter.js
+++ b/browser/devtools/styleinspector/test/browser_styleinspector_bug_672744_search_filter.js
@@ -18,32 +18,21 @@ function createDocument()
 
   openInspector(openComputedView);
 }
 
 function openComputedView(aInspector)
 {
   inspector = aInspector;
 
-  inspector.sidebar.once("computedview-ready", function() {
-    inspector.sidebar.select("computedview");
-    computedView = getComputedView(inspector);
+  inspector.sidebar.select("computedview");
+  computedView = getComputedView(inspector);
 
-    runStyleInspectorTests();
-  });
-}
+  Services.obs.addObserver(SI_toggleDefaultStyles, "StyleInspector-populated", false);
 
-function runStyleInspectorTests()
-{
-  Services.obs.addObserver(SI_toggleDefaultStyles, "StyleInspector-populated", false);
-  SI_inspectNode();
-}
-
-function SI_inspectNode()
-{
   var span = doc.querySelector("#matches");
   ok(span, "captain, we have the matches span");
 
   inspector.selection.setNode(span);
 
   is(span, computedView.viewedElement,
     "style inspector node matches the selected node");
   is(computedView.viewedElement, computedView.cssLogic.viewedElement,
diff --git a/browser/devtools/styleinspector/test/browser_styleinspector_bug_672746_default_styles.js b/browser/devtools/styleinspector/test/browser_styleinspector_bug_672746_default_styles.js
--- a/browser/devtools/styleinspector/test/browser_styleinspector_bug_672746_default_styles.js
+++ b/browser/devtools/styleinspector/test/browser_styleinspector_bug_672746_default_styles.js
@@ -18,32 +18,21 @@ function createDocument()
 
   openInspector(openComputedView);
 }
 
 function openComputedView(aInspector)
 {
   inspector = aInspector;
 
-  inspector.sidebar.once("computedview-ready", function() {
-    inspector.sidebar.select("computedview");
-    computedView = getComputedView(inspector);
+  inspector.sidebar.select("computedview");
+  computedView = getComputedView(inspector);
 
-    runStyleInspectorTests();
-  });
-}
+  Services.obs.addObserver(SI_check, "StyleInspector-populated", false);
 
-function runStyleInspectorTests()
-{
-  Services.obs.addObserver(SI_check, "StyleInspector-populated", false);
-  SI_inspectNode();
-}
-
-function SI_inspectNode()
-{
   let span = doc.querySelector("#matches");
   ok(span, "captain, we have the matches span");
 
   inspector.selection.setNode(span);
 
   is(span, computedView.viewedElement,
     "style inspector node matches the selected node");
   is(computedView.viewedElement, computedView.cssLogic.viewedElement,
diff --git a/browser/devtools/styleinspector/test/browser_styleinspector_bug_689759_no_results_placeholder.js b/browser/devtools/styleinspector/test/browser_styleinspector_bug_689759_no_results_placeholder.js
--- a/browser/devtools/styleinspector/test/browser_styleinspector_bug_689759_no_results_placeholder.js
+++ b/browser/devtools/styleinspector/test/browser_styleinspector_bug_689759_no_results_placeholder.js
@@ -17,27 +17,19 @@ function createDocument()
 
   openInspector(openComputedView);
 }
 
 function openComputedView(aInspector)
 {
   inspector = aInspector;
 
-  inspector.sidebar.once("computedview-ready", function() {
-    inspector.sidebar.select("computedview");
-    computedView = getComputedView(inspector);
+  inspector.sidebar.select("computedview");
+  computedView = getComputedView(inspector);
 
-    runStyleInspectorTests();
-  });
-}
-
-
-function runStyleInspectorTests()
-{
   Services.obs.addObserver(SI_AddFilterText, "StyleInspector-populated", false);
 
   let span = doc.querySelector("#matches");
   ok(span, "captain, we have the matches span");
 
   inspector.selection.setNode(span);
 
   is(span, computedView.viewedElement,
