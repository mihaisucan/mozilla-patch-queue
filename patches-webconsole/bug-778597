# HG changeset patch
# Parent e5000bb5fa0380000530ef64cc42f32aae7b5e7a
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1343845958 -10800

Bug 778597 - Intermittent browser_webconsole_position_ui.js | Timed out while waiting for: web console position changed to 'window'; try: -b do -p linux,linuxqt,linux64,macosx64,win32,win64,macosx -u mochitest-o -t none

diff --git a/browser/devtools/webconsole/HUDService.jsm b/browser/devtools/webconsole/HUDService.jsm
--- a/browser/devtools/webconsole/HUDService.jsm
+++ b/browser/devtools/webconsole/HUDService.jsm
@@ -606,29 +606,30 @@ WebConsole.prototype = {
     this.iframe.setAttribute("animated", "true");
     this.iframe.setAttribute("tooltip", "aHTMLTooltip");
     this.iframe.style.height = 0;
     this.iframe.addEventListener("load", this._onIframeLoad, true);
     this.iframe.setAttribute("src", UI_IFRAME_URL);
 
     let position = Services.prefs.getCharPref("devtools.webconsole.position");
     this.positionConsole(position);
-    this._currentUIPosition = position;
   },
 
   /**
    * The "load" event handler for the Web Console iframe.
    * @private
    */
   _onIframeLoad: function WC__onIframeLoad()
   {
     this.iframe.removeEventListener("load", this._onIframeLoad, true);
 
+    let position = Services.prefs.getCharPref("devtools.webconsole.position");
+
     this.iframeWindow = this.iframe.contentWindow.wrappedJSObject;
-    this.ui = new this.iframeWindow.WebConsoleFrame(this, this._currentUIPosition);
+    this.ui = new this.iframeWindow.WebConsoleFrame(this, position);
     this._setupMessageManager();
   },
 
   /**
    * Create a panel to open the web console if it should float above
    * the content in its own window.
    * @private
    */
@@ -690,18 +691,16 @@ WebConsole.prototype = {
       // Make sure that the HUDBox size updates when the panel is resized.
 
       let height = panel.clientHeight;
 
       this.iframe.style.height = "auto";
       this.iframe.flex = 1;
 
       panel.setAttribute("height", height);
-
-      this._afterPositionConsole("window", lastIndex);
     }).bind(this);
 
     panel.addEventListener("popupshown", onPopupShown,false);
 
     let onPopupHidden = (function HUD_onPopupHidden(aEvent) {
       if (aEvent.target != panel) {
         return;
       }
@@ -731,16 +730,19 @@ WebConsole.prototype = {
     if (this.outputNode && this.outputNode.getIndexOfFirstVisibleRow) {
       lastIndex = this.outputNode.getIndexOfFirstVisibleRow() +
                   this.outputNode.getNumberOfVisibleRows() - 1;
     }
 
     if (this.splitter.parentNode) {
       this.splitter.parentNode.removeChild(this.splitter);
     }
+
+    this._beforePositionConsole("window", lastIndex);
+
     panel.appendChild(this.iframe);
 
     let space = this.chromeDocument.createElement("spacer");
     space.flex = 1;
 
     let bottomBox = this.chromeDocument.createElement("hbox");
 
     let resizer = this.chromeDocument.createElement("resizer");
@@ -817,16 +819,18 @@ WebConsole.prototype = {
                   this.outputNode.getNumberOfVisibleRows() - 1;
     }
 
     // remove the console and splitter and reposition
     if (this.splitter.parentNode) {
       this.splitter.parentNode.removeChild(this.splitter);
     }
 
+    this._beforePositionConsole(aPosition, lastIndex);
+
     if (aPosition == "below") {
       nBox.appendChild(this.splitter);
       nBox.appendChild(this.iframe);
     }
     else {
       nBox.insertBefore(this.splitter, node);
       nBox.insertBefore(this.iframe, this.splitter);
     }
@@ -836,31 +840,29 @@ WebConsole.prototype = {
       this.consoleWindowUnregisterOnHide = false;
       this.consolePanel.hidePopup();
       this.consolePanel.parentNode.removeChild(this.consolePanel);
       this.consolePanel = null;   // remove this as we're not in panel anymore
       this.iframe.removeAttribute("flex");
       this.iframe.removeAttribute("height");
       this.iframe.style.height = height + "px";
     }
-
-    this._afterPositionConsole(aPosition, lastIndex);
   },
 
   /**
-   * Common code that needs to execute after the Web Console is repositioned.
+   * Common code that needs to execute before the Web Console is repositioned.
    * @private
    * @param string aPosition
    *        The new position: "above", "below" or "window".
    * @param number aLastIndex
    *        The last visible message in the console output before repositioning
    *        occurred.
    */
-  _afterPositionConsole:
-  function WC__afterPositionConsole(aPosition, aLastIndex)
+  _beforePositionConsole:
+  function WC__beforePositionConsole(aPosition, aLastIndex)
   {
     if (!this.ui) {
       return;
     }
 
     let onLoad = function() {
       this.iframe.removeEventListener("load", onLoad, true);
       this.iframeWindow = this.iframe.contentWindow.wrappedJSObject;
diff --git a/browser/devtools/webconsole/test/browser_webconsole_position_ui.js b/browser/devtools/webconsole/test/browser_webconsole_position_ui.js
--- a/browser/devtools/webconsole/test/browser_webconsole_position_ui.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_position_ui.js
@@ -32,17 +32,17 @@ function testEnd() {
 
 function waitForPosition(aPosition, aCallback) {
   waitForSuccess({
     name: "web console position changed to '" + aPosition + "'",
     validatorFn: function()
     {
       return hudRef._currentUIPosition == aPosition;
     },
-    successFn: aCallback,
+    successFn: executeSoon.bind(null, aCallback),
     failureFn: finishTest,
   });
 }
 
 function consoleOpened(aHudRef) {
   hudRef = aHudRef;
   testMenuitems();
 
@@ -50,19 +50,20 @@ function consoleOpened(aHudRef) {
 
   is(hudBox.parentNode.childNodes[2].getAttribute("id"), hudRef.hudId,
      "initial console position is correct");
 
   is(hudRef.ui.positionMenuitems.below.getAttribute("checked"), "true",
      "position menu checkbox is below");
   is(Services.prefs.getCharPref(POSITION_PREF), "below", "pref is below");
 
-  hudRef.positionConsole("above");
-
-  waitForPosition("above", onPositionAbove);
+  executeSoon(function() {
+    hudRef.positionConsole("above");
+    waitForPosition("above", onPositionAbove);
+  });
 }
 
 function onPositionAbove() {
   let hudBox = hudRef.iframe;
 
   let id = hudBox.parentNode.childNodes[0].getAttribute("id");
   is(id, hudRef.hudId, "above position is correct");
 
@@ -76,18 +77,20 @@ function onPositionAbove() {
   hudBox.style.height = boxHeight + "px";
 
   boxHeight = hudBox.clientHeight;
 
   Services.prefs.setIntPref(WIDTH_PREF, panelWidth);
   Services.prefs.setIntPref(TOP_PREF, 50);
   Services.prefs.setIntPref(LEFT_PREF, 51);
 
-  hudRef.positionConsole("window");
-  waitForPosition("window", onPositionWindow);
+  executeSoon(function() {
+    hudRef.positionConsole("window");
+    waitForPosition("window", onPositionWindow);
+  });
 }
 
 function onPositionWindow() {
   let hudBox = hudRef.iframe;
 
   let id = hudBox.parentNode.getAttribute("id");
   is(id, "console_window_" + hudRef.hudId, "window position is correct");
   is(Services.prefs.getCharPref(POSITION_PREF), "window", "pref is window");
