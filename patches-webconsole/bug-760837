# HG changeset patch
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1338714435 -10800
# Node ID bc31fccf76227370cf7af65edd8242dfbb75399f
# Parent 03222ef5322f2472cc449f650acc2cebb205c2a4
Bug 760837 - Intermittent browser_webconsole_bug_595934_message_categories.js | expectUncaughtException was called but no uncaught exception was detected

diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_595934_message_categories.js b/browser/devtools/webconsole/test/browser_webconsole_bug_595934_message_categories.js
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_595934_message_categories.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_bug_595934_message_categories.js
@@ -35,78 +35,79 @@ const TESTS = [
     category: "HTML",
     matchString: "multipart/form-data",
     onload: function() {
       let form = content.document.querySelector("form");
       form.submit();
     },
   },
   { // #5
+    file: "test-bug-595934-workers.html",
+    category: "Web Worker",
+    matchString: "fooBarWorker",
+    expectError: true,
+  },
+  { // #6
     file: "test-bug-595934-malformedxml.xhtml",
     category: "malformed-xml",
     matchString: "no element found",
   },
-  { // #6
+  { // #7
     file: "test-bug-595934-svg.xhtml",
     category: "SVG",
     matchString: "fooBarSVG",
   },
-  { // #7
+  { // #8
     file: "test-bug-595934-dom-html-external.html",
     category: "DOM:HTML",
     matchString: "document.all",
   },
-  { // #8
+  { // #9
     file: "test-bug-595934-dom-events-external2.html",
     category: "DOM Events",
     matchString: "preventBubble()",
   },
-  { // #9
+  { // #10
     file: "test-bug-595934-canvas.html",
     category: "Canvas",
     matchString: "strokeStyle",
   },
-  { // #10
+  { // #11
     file: "test-bug-595934-css-parser.html",
     category: "CSS Parser",
     matchString: "foobarCssParser",
   },
-  { // #11
+  { // #12
     file: "test-bug-595934-malformedxml-external.html",
     category: "malformed-xml",
     matchString: "</html>",
   },
-  { // #12
+  { // #14
     file: "test-bug-595934-empty-getelementbyid.html",
     category: "DOM",
     matchString: "getElementById",
   },
-  { // #13
+  { // #15
     file: "test-bug-595934-canvas-css.html",
     category: "CSS Parser",
     matchString: "foobarCanvasCssParser",
   },
-  { // #14
+  { // #16
     file: "test-bug-595934-image.html",
     category: "Image",
     matchString: "corrupt",
   },
-  // TODO: disabled due to Bug 760837 - intermittent failures.
-  //{ // #15
-  //  file: "test-bug-595934-workers.html",
-  //  category: "Web Worker",
-  //  matchString: "fooBarWorker",
-  //  expectError: true,
-  //},
 ];
 
 let pos = -1;
 
 let foundCategory = false;
 let foundText = false;
+let pageLoaded = false;
+let pageError = false;
 let output = null;
 let jsterm = null;
 let testEnded = false;
 
 let TestObserver = {
   QueryInterface: XPCOMUtils.generateQI([Ci.nsIObserver]),
 
   observe: function test_observe(aSubject)
@@ -115,25 +116,21 @@ let TestObserver = {
       return;
     }
 
     is(aSubject.category, TESTS[pos].category,
       "test #" + pos + ": error category '" + TESTS[pos].category + "'");
 
     if (aSubject.category == TESTS[pos].category) {
       foundCategory = true;
-      if (foundText) {
-        executeSoon(testNext);
-      }
     }
     else {
       ok(false, aSubject.sourceName + ':' + aSubject.lineNumber + '; ' +
                 aSubject.errorMessage);
       testEnded = true;
-      executeSoon(finishTest);
     }
   }
 };
 
 function consoleOpened(hud) {
   output = hud.outputNode;
   output.addEventListener("DOMNodeInserted", onDOMNodeInserted, false);
   jsterm = hud.jsterm;
@@ -144,33 +141,57 @@ function consoleOpened(hud) {
 
   executeSoon(testNext);
 }
 
 function testNext() {
   jsterm.clearOutput();
   foundCategory = false;
   foundText = false;
+  pageLoaded = false;
+  pageError = false;
 
   pos++;
   if (pos < TESTS.length) {
+    waitForSuccess({
+      name: "test #" + pos + " succesful finish",
+      validatorFn: function()
+      {
+        return foundCategory && foundText && pageLoaded && pageError;
+      },
+      successFn: testNext,
+      failureFn: function() {
+        info("foundCategory " + foundCategory + " foundText " + foundText +
+             "pageLoaded " + pageLoaded + " pageError " + pageError);
+        finishTest();
+      },
+    });
+
     let test = TESTS[pos];
     let testLocation = TESTS_PATH + test.file;
-    if (test.onload) {
-      browser.addEventListener("load", function onLoad(aEvent) {
-        if (content.location.href == testLocation) {
-          browser.removeEventListener(aEvent.type, onLoad, true);
-          test.onload(aEvent);
-        }
-      }, true);
-    }
+    browser.addEventListener("load", function onLoad(aEvent) {
+      if (content.location.href != testLocation) {
+        return;
+      }
+      browser.removeEventListener(aEvent.type, onLoad, true);
 
-    if (test.expectError) {
-      expectUncaughtException();
-    }
+      pageLoaded = true;
+      test.onload && test.onload(aEvent);
+
+      if (test.expectError) {
+        content.addEventListener("error", function _onError() {
+          content.removeEventListener("error", _onError);
+          pageError = true;
+        });
+        expectUncaughtException();
+      }
+      else {
+        pageError = true;
+      }
+    }, true);
 
     content.location = testLocation;
   }
   else {
     testEnded = true;
     executeSoon(finishTest);
   }
 }
@@ -182,20 +203,16 @@ function testEnd() {
 }
 
 function onDOMNodeInserted(aEvent) {
   let textContent = output.textContent;
   foundText = textContent.indexOf(TESTS[pos].matchString) > -1;
   if (foundText) {
     ok(foundText, "test #" + pos + ": message found '" + TESTS[pos].matchString + "'");
   }
-
-  if (foundCategory) {
-    executeSoon(testNext);
-  }
 }
 
 function test() {
   addTab("data:text/html;charset=utf-8,Web Console test for bug 595934 - message categories coverage.");
   browser.addEventListener("load", function onLoad() {
     browser.removeEventListener("load", onLoad, true);
     openConsole(null, consoleOpened);
   }, true);
