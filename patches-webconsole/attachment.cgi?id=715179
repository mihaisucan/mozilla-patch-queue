# HG changeset patch
# User Girish Sharma <scrapmachines@gmail.com>
# Date 1355699444 -19800
# Node ID fd3947b899dc714b4b249e102f503b62744d0d13
# Parent  31e89328fe12042f5affd2905d280ef412086c8f
Bug 766001 - In the webconsole, when you click on the filename/line-number of a js-error or message, the debugger should open instead of view source, r=past, msucan

diff --git a/browser/devtools/webconsole/HUDService.jsm b/browser/devtools/webconsole/HUDService.jsm
--- a/browser/devtools/webconsole/HUDService.jsm
+++ b/browser/devtools/webconsole/HUDService.jsm
@@ -27,16 +27,21 @@ XPCOMUtils.defineLazyModuleGetter(this, 
     "resource://gre/modules/devtools/WebConsoleUtils.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "Promise",
     "resource://gre/modules/commonjs/sdk/core/promise.js");
 
 const STRINGS_URI = "chrome://browser/locale/devtools/webconsole.properties";
 let l10n = new WebConsoleUtils.l10n(STRINGS_URI);
 
+// The time interval (in ms) that the web console will wait for the debugger to
+// display the specified script. After that, the script will be displayed in
+// View Source.
+const SCRIPT_LOAD_WAITING_TIME = 500;
+
 this.EXPORTED_SYMBOLS = ["HUDService"];
 
 ///////////////////////////////////////////////////////////////////////////
 //// The HUD service
 
 function HUD_SERVICE()
 {
   this.hudReferences = {};
@@ -349,16 +354,85 @@ WebConsole.prototype = {
         return;
       }
     }
     // Open view source if style editor fails.
     this.viewSource(aSourceURL, aSourceLine);
   },
 
   /**
+   * Tries to open a JavaScript file related to the web page for the web console
+   * instance in the Script Debugger. If the file is not found, it is opened in
+   * source view instead.
+   *
+   * @param string aSourceURL
+   *        The URL of the file.
+   * @param integer aSourceLine
+   *        The line number which you want to place the caret.
+   */
+  viewSourceInDebugger:
+  function WC_viewSourceInDebugger(aSourceURL, aSourceLine)
+  {
+    let window = this.chromeWindow;
+    let self = this;
+    let panelWin = null;
+    let timeout = null;
+    let alreadyLoaded = true;
+
+    if (!gDevTools.getToolbox(this.target).getPanel("jsdebugger")) {
+      alreadyLoaded = false;
+    }
+
+    gDevTools.showToolbox(this.target, "jsdebugger")
+             .then(function onDebuggerOpen(toolbox) {
+      panelWin = toolbox.getCurrentPanel().panelWin;
+      if (!alreadyLoaded) {
+        panelWin.addEventListener("Debugger:AfterScriptsAdded",
+                                  function afterScriptsAdded() {
+          panelWin.removeEventListener("Debugger:AfterScriptsAdded",
+                                       afterScriptsAdded);
+          loadScript();
+        });
+      }
+      else {
+        loadScript();
+      }
+    });
+
+    function loadScript() {
+      let gView = panelWin.DebuggerView;
+      if (gView.Sources && gView.Sources.selectedValue == aSourceURL) {
+        gView.editor.setCaretPosition(aSourceLine - 1);
+        return;
+      }
+      // Hope for the requested script to be present in the debugger after a
+      // certain amount of time, otherwise fallback and open view source.
+      timeout = window.setTimeout(onTimeout, SCRIPT_LOAD_WAITING_TIME);
+
+      panelWin.addEventListener("Debugger:SourceShown", onSource, false);
+      panelWin.DebuggerView.Sources.preferredSource = aSourceURL;
+    }
+
+    function onSource(aEvent) {
+      if (aEvent.detail.url != aSourceURL) {
+        return;
+      }
+      window.clearTimeout(timeout);
+      panelWin.removeEventListener("Debugger:SourceShown", onSource, false);
+      panelWin.editor.setCaretPosition(aSourceLine - 1);
+    }
+
+    function onTimeout() {
+      panelWin.removeEventListener("Debugger:SourceShown", onSource, false);
+      gDevTools.showToolbox(self.target, "webconsole");
+      self.viewSource(aSourceURL, aSourceLine);
+    }
+  },
+
+  /**
    * Destroy the object. Call this method to avoid memory leaks when the Web
    * Console is closed.
    *
    * @return object
    *         A Promise object that is resolved once the Web Console is closed.
    */
   destroy: function WC_destroy()
   {
diff --git a/browser/devtools/webconsole/test/Makefile.in b/browser/devtools/webconsole/test/Makefile.in
--- a/browser/devtools/webconsole/test/Makefile.in
+++ b/browser/devtools/webconsole/test/Makefile.in
@@ -99,16 +99,17 @@ MOCHITEST_BROWSER_FILES = \
 	browser_webconsole_bug_659907_console_dir.js \
 	browser_webconsole_bug_664131_console_group.js \
 	browser_webconsole_bug_704295.js \
 	browser_webconsole_bug_658368_time_methods.js \
 	browser_webconsole_bug_764572_output_open_url.js \
 	browser_webconsole_bug_622303_persistent_filters.js \
 	browser_webconsole_bug_770099_bad_policyuri.js \
 	browser_webconsole_bug_770099_violation.js \
+	browser_webconsole_bug_766001_JS_Console_in_Debugger.js \
 	browser_webconsole_bug_782653_CSS_links_in_Style_Editor.js \
 	browser_cached_messages.js \
 	browser_bug664688_sandbox_update_after_navigation.js \
 	browser_result_format_as_string.js \
 	browser_webconsole_bug_737873_mixedcontent.js \
 	browser_output_breaks_after_console_dir_uninspectable.js \
 	browser_console_log_inspectable_object.js \
 	browser_bug_638949_copy_link_location.js \
@@ -199,11 +200,14 @@ MOCHITEST_BROWSER_FILES += \
 	test-for-of.html \
 	test_bug_770099_violation.html \
 	test_bug_770099_violation.html^headers^ \
 	test_bug_770099_bad_policy_uri.html \
 	test_bug_770099_bad_policy_uri.html^headers^ \
 	test-result-format-as-string.html \
 	test-bug-737873-mixedcontent.html \
 	test-repeated-messages.html \
+	test-bug-766001-console-log.js \
+	test-bug-766001-js-console-links.html \
+	test-bug-766001-js-errors.js \
 	$(NULL)
 
 include $(topsrcdir)/config/rules.mk
diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_766001_JS_Console_in_Debugger.js b/browser/devtools/webconsole/test/browser_webconsole_bug_766001_JS_Console_in_Debugger.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/webconsole/test/browser_webconsole_bug_766001_JS_Console_in_Debugger.js
@@ -0,0 +1,161 @@
+/* vim:set ts=2 sw=2 sts=2 et: */
+/* ***** BEGIN LICENSE BLOCK *****
+ * Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/
+ * ***** END LICENSE BLOCK ***** */
+
+const TEST_URI = "http://example.com/browser/browser/devtools/webconsole/test" +
+                 "/test-bug-766001-js-console-links.html";
+
+let nodes, hud, dbg, sourceViewOpened = false;
+
+function test()
+{
+  expectUncaughtException();
+  requestLongerTimeout(2);
+  addTab(TEST_URI);
+  browser.addEventListener("load", function onLoad() {
+    browser.removeEventListener("load", onLoad, true);
+    openConsole(null, testViewSource);
+  }, true);
+}
+
+function testViewSource(aHud)
+{
+  hud = aHud;
+
+  registerCleanupFunction(function() {
+    Services.ww.unregisterNotification(observer);
+    nodes = hud = dbg = sourceViewOpened = null;
+  });
+
+  let JSSelector = ".webconsole-msg-exception .webconsole-location";
+  let consoleSelector = ".webconsole-msg-console .webconsole-location";
+
+  waitForSuccess({
+    name: "find the location node",
+    validatorFn: function()
+    {
+      return hud.outputNode.querySelector(JSSelector) &&
+             hud.outputNode.querySelector(consoleSelector);
+    },
+    successFn: function()
+    {
+      nodes = [hud.outputNode.querySelector(JSSelector),
+               hud.outputNode.querySelector(consoleSelector)];
+
+      let target = TargetFactory.forTab(gBrowser.selectedTab);
+      let toolbox = gDevTools.getToolbox(target);
+      toolbox.once("jsdebugger-selected", onDebuggerReady);
+
+      Services.ww.registerNotification(observer);
+      EventUtils.sendMouseEvent({ type: "click" }, nodes[0]);
+    },
+    failureFn: finishTest,
+  });
+}
+
+function onDebuggerReady(aEvent, aPanel)
+{
+  info(aEvent + " event fired");
+
+  dbg = aPanel;
+
+  let src = nodes[0].getAttribute("title");
+  ok(src, "source url found");
+  let line = nodes[0].sourceLine;
+  ok(line, "found source line");
+
+  checkDebuggerForSourceAndLine(src, line - 1, function() {
+    info("first check done");
+
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    let toolbox = gDevTools.getToolbox(target);
+
+    let src = nodes[1].getAttribute("title");
+    ok(src, "source url found");
+    let line = nodes[1].sourceLine;
+    ok(line, "found source line");
+
+    gDevTools.showToolbox(target, "webconsole").then(function() {
+      info("webconsole selected");
+
+      toolbox.once("jsdebugger-selected", function(aEvent) {
+        info(aEvent + " event fired");
+
+        checkDebuggerForSourceAndLine(src, line - 1, function() {
+          info("second check done");
+
+          let src = nodes[0].getAttribute("title");
+          ok(src, "source url found");
+          let line = nodes[0].sourceLine;
+          ok(line, "found source line");
+
+          gDevTools.showToolbox(target, "webconsole").then(function() {
+            info("webconsole selected");
+
+            toolbox.once("jsdebugger-selected", function(aEvent) {
+              info(aEvent + " event fired");
+
+              checkDebuggerForSourceAndLine(src, line - 1, function() {
+                info("third check done");
+                finishTest();
+              });
+            });
+
+            EventUtils.sendMouseEvent({ type: "click" }, nodes[0]);
+          });
+        });
+      });
+
+      EventUtils.sendMouseEvent({ type: "click" }, nodes[1]);
+    });
+  });
+}
+
+let observer = {
+  observe: function(aSubject, aTopic, aData) {
+    if (aTopic != "domwindowopened") {
+      return;
+    }
+
+    ok(true, "the view source window was opened in response to clicking " +
+       "the location node");
+    sourceViewOpened = true;
+    // executeSoon() is necessary to avoid crashing Firefox. See bug 611543.
+    executeSoon(function() {
+      aSubject.close();
+    });
+  }
+};
+
+function checkDebuggerForSourceAndLine(aSourceURL, aSourceLine, aCallback)
+{
+  let foundEditor = null;
+  waitForSuccess({
+    name: "correct source and line test for debugger",
+    validatorFn: function()
+    {
+      if (sourceViewOpened) {
+        sourceViewOpened = false;
+        return true;
+      }
+      let gView = dbg.panelWin.DebuggerView;
+      if (gView && gView.Sources) {
+        if (gView.Sources.selectedValue == aSourceURL) {
+          if (gView.editor &&
+              gView.editor.getCaretPosition().line == aSourceLine) {
+            return true;
+          }
+        }
+      }
+      return false;
+    },
+    successFn: function()
+    {
+      aCallback && executeSoon(aCallback);
+    },
+    failureFn: finishTest,
+    timeout: 10000,
+  });
+}
diff --git a/browser/devtools/webconsole/test/test-bug-766001-console-log.js b/browser/devtools/webconsole/test/test-bug-766001-console-log.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/webconsole/test/test-bug-766001-console-log.js
@@ -0,0 +1,9 @@
+/*
+ * Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/
+ */
+
+window.addEventListener("load", function() {
+  console.log("Blah Blah");
+}, false);
+
diff --git a/browser/devtools/webconsole/test/test-bug-766001-js-console-links.html b/browser/devtools/webconsole/test/test-bug-766001-js-console-links.html
new file mode 100644
--- /dev/null
+++ b/browser/devtools/webconsole/test/test-bug-766001-js-console-links.html
@@ -0,0 +1,14 @@
+<!DOCTYPE html>
+<html lang="en">
+  <head>
+    <meta charset="utf-8">
+    <title>Web Console test for bug 766001 : Open JS/Console call Links in Debugger</title>
+<!-- Any copyright is dedicated to the Public Domain.
+     http://creativecommons.org/publicdomain/zero/1.0/ -->
+    <script type="text/javascript" src="test-bug-766001-js-errors.js"></script>
+    <script type="text/javascript" src="test-bug-766001-console-log.js"></script>
+  </head>
+  <body>
+    <p>Web Console test for bug 766001 : Open JS/Consoel call Links in Debugger.</p>
+  </body>
+</html>
diff --git a/browser/devtools/webconsole/test/test-bug-766001-js-errors.js b/browser/devtools/webconsole/test/test-bug-766001-js-errors.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/webconsole/test/test-bug-766001-js-errors.js
@@ -0,0 +1,9 @@
+/*
+ * Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/
+ */
+
+window.addEventListener("load", function() {
+  document.bar();
+}, false);
+
diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -2414,16 +2414,20 @@ WebConsoleFrame.prototype = {
             win.focus();
             return;
           }
         }
       }
       else if (locationNode.parentNode.category == CATEGORY_CSS) {
         this.owner.viewSourceInStyleEditor(aSourceURL, aSourceLine);
       }
+      else if (locationNode.parentNode.category == CATEGORY_JS ||
+               locationNode.parentNode.category == CATEGORY_WEBDEV) {
+        this.owner.viewSourceInDebugger(aSourceURL, aSourceLine);
+      }
       else {
         this.owner.viewSource(aSourceURL, aSourceLine);
       }
     }.bind(this), true);
 
     return locationNode;
   },
 
