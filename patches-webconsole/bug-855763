# HG changeset patch
# Parent 1e16b3af2489340594279ec5e4335618c7689666
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1366367637 -10800

Bug 855763 - [Responsive Mode] Fix for intermittent browser_responsiveuiaddcustompreset.js | Test timed out, | Found a tab after previous test timed out: data:text/html,foo, browser_Services.js | Services.prompt is an nsIPromptService; r=jwalker

diff --git a/browser/devtools/responsivedesign/test/browser_responsiveuiaddcustompreset.js b/browser/devtools/responsivedesign/test/browser_responsiveuiaddcustompreset.js
--- a/browser/devtools/responsivedesign/test/browser_responsiveuiaddcustompreset.js
+++ b/browser/devtools/responsivedesign/test/browser_responsiveuiaddcustompreset.js
@@ -8,30 +8,39 @@ function test() {
   waitForExplicitFinish();
 
   gBrowser.selectedTab = gBrowser.addTab();
   gBrowser.selectedBrowser.addEventListener("load", function onload() {
     gBrowser.selectedBrowser.removeEventListener("load", onload, true);
     waitForFocus(startTest, content);
   }, true);
 
-  content.location = "data:text/html,foo";
+  content.location = "data:text/html;charset=utf8,test custom presets in responsive mode";
+
+  // This test uses executeSoon() when responsive mode is initialized and when
+  // it is destroyed such that we get out of the init/destroy loops. If we try
+  // to init/destroy immediately, without waiting for the next loop, we get
+  // intermittent test failures.
 
   function startTest() {
     // Mocking prompt
     oldPrompt = Services.prompt;
     Services.prompt = {
       value: "",
       returnBool: true,
       prompt: function(aParent, aDialogTitle, aText, aValue, aCheckMsg, aCheckState) {
         aValue.value = this.value;
         return this.returnBool;
       }
     };
 
+    registerCleanupFunction(() => Services.prompt = oldPrompt);
+
+    info("test started, waiting for responsive mode to activate");
+
     document.getElementById("Tools:ResponsiveUI").removeAttribute("disabled");
     mgr.once("on", onUIOpen);
     synthesizeKeyFromKeyTag("key_responsiveUI");
   }
 
   function onUIOpen() {
     // Is it open?
     let container = gBrowser.getBrowserContainer();
@@ -62,16 +71,17 @@ function test() {
 
     // Adds the custom preset with "Testing preset"
     Services.prompt.value = "Testing preset";
     Services.prompt.returnBool = true;
     instance.addbutton.doCommand();
 
     instance.menulist.selectedIndex = 1;
 
+    info("waiting for responsive mode to turn off");
     mgr.once("off", restart);
 
     // We're still in the loop of initializing the responsive mode.
     // Let's wait next loop to stop it.
     executeSoon(function() {
       EventUtils.synthesizeKey("VK_ESCAPE", {});
     });
   }
@@ -112,42 +122,50 @@ function test() {
     instance.menulist.selectedIndex = 2;
     deletedPresetA = instance.menulist.selectedItem.getAttribute("label");
     instance.removebutton.doCommand();
 
     instance.menulist.selectedIndex = 2;
     deletedPresetB = instance.menulist.selectedItem.getAttribute("label");
     instance.removebutton.doCommand();
 
-    EventUtils.synthesizeKey("VK_ESCAPE", {});
-    executeSoon(restartAgain);
+    info("waiting for responsive mode to turn off");
+    mgr.once("off", restartAgain);
+
+    // We're still in the loop of initializing the responsive mode.
+    // Let's wait next loop to stop it.
+    executeSoon(() => EventUtils.synthesizeKey("VK_ESCAPE", {}));
   }
 
   function restartAgain() {
-    synthesizeKeyFromKeyTag("key_responsiveUI");
-    instance = gBrowser.selectedTab.__responsiveUI;
-    executeSoon(testCustomPresetsNotInListAnymore);
+    info("waiting for responsive mode to turn on");
+    mgr.once("on", () => {
+      instance = gBrowser.selectedTab.__responsiveUI;
+      testCustomPresetsNotInListAnymore();
+    });
+
+    // We're still in the loop of destroying the responsive mode.
+    // Let's wait next loop to start it.
+    executeSoon(() => synthesizeKeyFromKeyTag("key_responsiveUI"));
   }
 
   function testCustomPresetsNotInListAnymore() {
     let customPresetIndex = getPresetIndex(deletedPresetA);
     is(customPresetIndex, -1, "deleted preset " + deletedPresetA + " is not in the list anymore");
 
     customPresetIndex = getPresetIndex(deletedPresetB);
     is(customPresetIndex, -1, "deleted preset " + deletedPresetB + " is not in the list anymore");
 
     executeSoon(finishUp);
   }
 
   function finishUp() {
     delete instance;
     gBrowser.removeCurrentTab();
 
-    Services.prompt = oldPrompt;
-
     finish();
   }
 
   function getPresetIndex(presetLabel) {
     function testOnePreset(c) {
       if (c == 0) {
         return -1;
       }
@@ -162,30 +180,20 @@ function test() {
     }
     return testOnePreset(instance.menulist.firstChild.childNodes.length - 4);
   }
 
   function synthesizeKeyFromKeyTag(aKeyId) {
     let key = document.getElementById(aKeyId);
     isnot(key, null, "Successfully retrieved the <key> node");
 
-    let modifiersAttr = key.getAttribute("modifiers");
-
     let name = null;
 
     if (key.getAttribute("keycode"))
       name = key.getAttribute("keycode");
     else if (key.getAttribute("key"))
       name = key.getAttribute("key");
 
     isnot(name, null, "Successfully retrieved keycode/key");
 
-    let modifiers = {
-      shiftKey: modifiersAttr.match("shift"),
-      ctrlKey: modifiersAttr.match("ctrl"),
-      altKey: modifiersAttr.match("alt"),
-      metaKey: modifiersAttr.match("meta"),
-      accelKey: modifiersAttr.match("accel")
-    }
-
-    EventUtils.synthesizeKey(name, modifiers);
+    key.doCommand();
   }
 }
