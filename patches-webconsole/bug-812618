# HG changeset patch
# Parent aed4d6e58abee49176a1806e152cf2540fc79ad2
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1372442193 -10800

Bug 812618 - Autocomplete at cursor location; r=robcee

diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_585991_autocomplete_keys.js b/browser/devtools/webconsole/test/browser_webconsole_bug_585991_autocomplete_keys.js
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_585991_autocomplete_keys.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_bug_585991_autocomplete_keys.js
@@ -274,10 +274,55 @@ function popupHideAfterReturnWithNoSelec
 
   ok(!popup.isOpen, "popup is not open after VK_RETURN");
 
   is(inputNode.value, "", "inputNode is empty after VK_RETURN");
   is(completeNode.value, "", "completeNode is empty");
   is(jsterm.history[jsterm.history.length-1], "window.testBug",
      "jsterm history is correct");
 
-  executeSoon(finishTest);
+  executeSoon(testCompletionInText);
 }
+
+function testCompletionInText()
+{
+  info("test that completion works inside text, see bug 812618");
+
+  popup._panel.addEventListener("popupshown", function onShown() {
+    popup._panel.removeEventListener("popupshown", onShown);
+
+    ok(popup.isOpen, "popup is open");
+    is(popup.itemCount, 2, "popup.itemCount is correct");
+
+    EventUtils.synthesizeKey("VK_DOWN", {});
+    EventUtils.synthesizeKey("VK_DOWN", {});
+    is(popup.selectedIndex, 0, "popup.selectedIndex is correct");
+    ok(!completeNode.value, "completeNode.value is empty");
+
+    let items = popup.getItems().reverse().map(e => e.label);
+    let sameItems = items.every((prop, index) =>
+      ["testBug873250a", "testBug873250b"][index] === prop);
+    ok(sameItems, "getItems returns the items we expect");
+
+    info("press Tab and wait for popup to hide");
+    popup._panel.addEventListener("popuphidden", popupHideAfterCompletionInText);
+    EventUtils.synthesizeKey("VK_TAB", {});
+  });
+
+  jsterm.setInputValue("dump(window.testBu)");
+  inputNode.selectionStart = inputNode.selectionEnd = 18;
+  EventUtils.synthesizeKey("g", {});
+}
+
+function popupHideAfterCompletionInText()
+{
+  // At this point the completion suggestion should be accepted.
+  popup._panel.removeEventListener("popuphidden", popupHideAfterCompletionInText);
+
+  ok(!popup.isOpen, "popup is not open");
+  is(inputNode.value, "dump(window.testBug873250b)",
+     "completion was successful after VK_TAB");
+  is(inputNode.selectionStart, 26, "cursor location is correct");
+  is(inputNode.selectionStart, inputNode.selectionEnd, "cursor location (confirmed)");
+  ok(!completeNode.value, "completeNode is empty");
+
+  finishTest();
+}
diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -4072,19 +4072,18 @@ JSTerm.prototype = {
     let inputNode = this.inputNode;
     let inputValue = inputNode.value;
     // If the inputNode has no value, then don't try to complete on it.
     if (!inputValue) {
       this.clearCompletion();
       return false;
     }
 
-    // Only complete if the selection is empty and at the end of the input.
-    if (inputNode.selectionStart == inputNode.selectionEnd &&
-        inputNode.selectionEnd != inputValue.length) {
+    // Only complete if the selection is empty.
+    if (inputNode.selectionStart != inputNode.selectionEnd) {
       this.clearCompletion();
       return false;
     }
 
     // Update the completion results.
     if (this.lastCompletion.value != inputValue) {
       this._updateCompletionResult(aType, aCallback);
       return false;
@@ -4210,16 +4209,21 @@ JSTerm.prototype = {
       popup.selectNextItem();
     }
 
     aCallback && aCallback(this);
   },
 
   onAutocompleteSelect: function JSTF_onAutocompleteSelect()
   {
+    // Render the suggestion only if the cursor is at the end of the input.
+    if (this.inputNode.selectionStart != this.inputNode.value.length) {
+      return;
+    }
+
     let currentItem = this.autocompletePopup.selectedItem;
     if (currentItem && this.lastCompletion.value) {
       let suffix = currentItem.label.substring(this.lastCompletion.
                                                matchProp.length);
       this.updateCompleteNode(suffix);
     }
     else {
       this.updateCompleteNode("");
@@ -4251,17 +4255,21 @@ JSTerm.prototype = {
   acceptProposedCompletion: function JSTF_acceptProposedCompletion()
   {
     let updated = false;
 
     let currentItem = this.autocompletePopup.selectedItem;
     if (currentItem && this.lastCompletion.value) {
       let suffix = currentItem.label.substring(this.lastCompletion.
                                                matchProp.length);
-      this.setInputValue(this.inputNode.value + suffix);
+      let cursor = this.inputNode.selectionStart;
+      let value = this.inputNode.value;
+      this.setInputValue(value.substr(0, cursor) + suffix + value.substr(cursor));
+      let newCursor = cursor + suffix.length;
+      this.inputNode.selectionStart = this.inputNode.selectionEnd = newCursor;
       updated = true;
     }
 
     this.clearCompletion();
 
     return updated;
   },
 
diff --git a/toolkit/devtools/server/actors/webconsole.js b/toolkit/devtools/server/actors/webconsole.js
--- a/toolkit/devtools/server/actors/webconsole.js
+++ b/toolkit/devtools/server/actors/webconsole.js
@@ -621,17 +621,18 @@ WebConsoleActor.prototype =
    *        The request message - what input to autocomplete.
    * @return object
    *         The response message - matched properties.
    */
   onAutocomplete: function WCA_onAutocomplete(aRequest)
   {
     // TODO: Bug 842682 - use the debugger API for autocomplete in the Web
     // Console, and provide suggestions from the selected debugger stack frame.
-    let result = JSPropertyProvider(this.window, aRequest.text) || {};
+    let result = JSPropertyProvider(this.window, aRequest.text,
+                                    aRequest.cursor) || {};
     return {
       from: this.actorID,
       matches: result.matches || [],
       matchProp: result.matchProp,
     };
   },
 
   /**
diff --git a/toolkit/devtools/webconsole/WebConsoleUtils.jsm b/toolkit/devtools/webconsole/WebConsoleUtils.jsm
--- a/toolkit/devtools/webconsole/WebConsoleUtils.jsm
+++ b/toolkit/devtools/webconsole/WebConsoleUtils.jsm
@@ -722,49 +722,56 @@ function findCompletionBeginning(aStr)
 }
 
 /**
  * Provides a list of properties, that are possible matches based on the passed
  * scope and inputValue.
  *
  * @param object aScope
  *        Scope to use for the completion.
- *
  * @param string aInputValue
  *        Value that should be completed.
- *
+ * @param number [aCursor=aInputValue.length]
+ *        Optional offset in the input where the cursor is located. If this is
+ *        omitted then the cursor is assumed to be at the end of the input
+ *        value.
  * @returns null or object
  *          If no completion valued could be computed, null is returned,
  *          otherwise a object with the following form is returned:
  *            {
  *              matches: [ string, string, string ],
  *              matchProp: Last part of the inputValue that was used to find
  *                         the matches-strings.
  *            }
  */
-function JSPropertyProvider(aScope, aInputValue)
+function JSPropertyProvider(aScope, aInputValue, aCursor)
 {
+  if (aCursor === undefined) {
+    aCursor = aInputValue.length;
+  }
+
+  let inputValue = aInputValue.substring(0, aCursor);
   let obj = WCU.unwrap(aScope);
 
-  // Analyse the aInputValue and find the beginning of the last part that
+  // Analyse the inputValue and find the beginning of the last part that
   // should be completed.
-  let beginning = findCompletionBeginning(aInputValue);
+  let beginning = findCompletionBeginning(inputValue);
 
   // There was an error analysing the string.
   if (beginning.err) {
     return null;
   }
 
   // If the current state is not STATE_NORMAL, then we are inside of an string
   // which means that no completion is possible.
   if (beginning.state != STATE_NORMAL) {
     return null;
   }
 
-  let completionPart = aInputValue.substring(beginning.startPos);
+  let completionPart = inputValue.substring(beginning.startPos);
 
   // Don't complete on just an empty string.
   if (completionPart.trim() == "") {
     return null;
   }
 
   let matches = null;
   let matchProp = "";
diff --git a/toolkit/devtools/webconsole/test/test_jsterm.html b/toolkit/devtools/webconsole/test/test_jsterm.html
--- a/toolkit/devtools/webconsole/test/test_jsterm.html
+++ b/toolkit/devtools/webconsole/test/test_jsterm.html
@@ -32,56 +32,91 @@ function onAttach(aState, aResponse)
   top.foobarObject.omg = 4;
   top.foobarObject.omgfoo = 5;
   top.foobarObject.strfoo = "foobarz";
   top.foobarObject.omgstr = "foobarz" +
     (new Array(DebuggerServer.LONG_STRING_LENGTH * 2)).join("abb");
 
   gState = aState;
 
-  let tests = [doAutocomplete1, doAutocomplete2, doSimpleEval, doWindowEval,
-    doEvalWithException, doEvalWithHelper, doEvalString, doEvalLongString];
+  let tests = [doAutocomplete1, doAutocomplete2, doAutocomplete3,
+               doAutocomplete4, doSimpleEval, doWindowEval, doEvalWithException,
+               doEvalWithHelper, doEvalString, doEvalLongString];
   runTests(tests, testEnd);
 }
 
 function doAutocomplete1()
 {
   info("test autocomplete for 'window.foo'");
-  gState.client.autocomplete("window.foo", 0, onAutocomplete1);
+  gState.client.autocomplete("window.foo", 10, onAutocomplete1);
 }
 
 function onAutocomplete1(aResponse)
 {
   let matches = aResponse.matches;
 
   is(aResponse.matchProp, "foo", "matchProp");
   is(matches.length, 1, "matches.length");
   is(matches[0], "foobarObject", "matches[0]");
 
   nextTest();
 }
 
 function doAutocomplete2()
 {
   info("test autocomplete for 'window.foobarObject.'");
-  gState.client.autocomplete("window.foobarObject.", 0, onAutocomplete2);
+  gState.client.autocomplete("window.foobarObject.", 20, onAutocomplete2);
 }
 
 function onAutocomplete2(aResponse)
 {
   let matches = aResponse.matches;
 
   ok(!aResponse.matchProp, "matchProp");
   is(matches.length, 7, "matches.length");
   checkObject(matches,
     ["foo", "foobar", "foobaz", "omg", "omgfoo", "omgstr", "strfoo"]);
 
   nextTest();
 }
 
+function doAutocomplete3()
+{
+  // Check that completion suggestions are offered inside the string.
+  info("test autocomplete for 'dump(window.foobarObject.)'");
+  gState.client.autocomplete("dump(window.foobarObject.)", 25, onAutocomplete3);
+}
+
+function onAutocomplete3(aResponse)
+{
+  let matches = aResponse.matches;
+
+  ok(!aResponse.matchProp, "matchProp");
+  is(matches.length, 7, "matches.length");
+  checkObject(matches,
+    ["foo", "foobar", "foobaz", "omg", "omgfoo", "omgstr", "strfoo"]);
+
+  nextTest();
+}
+
+function doAutocomplete4()
+{
+  // Check that completion requests can have no suggestions.
+  info("test autocomplete for 'dump(window.foobarObject.)'");
+  gState.client.autocomplete("dump(window.foobarObject.)", 26, onAutocomplete4);
+}
+
+function onAutocomplete4(aResponse)
+{
+  ok(!aResponse.matchProp, "matchProp");
+  is(aResponse.matches.length, 0, "matches.length");
+
+  nextTest();
+}
+
 function doSimpleEval()
 {
   info("test eval '2+2'");
   gState.client.evaluateJS("2+2", onSimpleEval);
 }
 
 function onSimpleEval(aResponse)
 {
