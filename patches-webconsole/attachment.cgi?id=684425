# HG changeset patch
# Parent 07b7102163286754af1da355e39ce59c117afae7
# User Joe Walker <jwalker@mozilla.com>
Bug 788977 - [toolbox] Land the developer tools window; r=harth,jwalker,mikeratcliffe,paul,dao

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -1005,21 +1005,26 @@ pref("services.sync.prefs.sync.xpinstall
 pref("devtools.errorconsole.enabled", false);
 
 // Developer toolbar and GCLI preferences
 pref("devtools.toolbar.enabled", true);
 pref("devtools.toolbar.visible", false);
 pref("devtools.gcli.allowSet", false);
 pref("devtools.commands.dir", "");
 
+// Toolbox preferences
+pref("devtools.toolbox.footer.height", 250);
+pref("devtools.toolbox.sidebar.width", 500);
+pref("devtools.toolbox.host", "bottom");
+pref("devtools.toolbox.selectedTool", "webconsole");
+pref("devtools.toolbox.toolbarSpec", '["tilt toggle","scratchpad","resize toggle"]');
+pref("devtools.toolbox.sideEnabled", false);
+
 // Enable the Inspector
 pref("devtools.inspector.enabled", true);
-pref("devtools.inspector.htmlHeight", 112);
-pref("devtools.inspector.htmlPanelOpen", false);
-pref("devtools.inspector.sidebarOpen", false);
 pref("devtools.inspector.activeSidebar", "ruleview");
 pref("devtools.inspector.markupPreview", false);
 
 // Enable the Layout View
 pref("devtools.layoutview.enabled", true);
 pref("devtools.layoutview.open", false);
 
 // Enable the Responsive UI tool
@@ -1041,27 +1046,21 @@ pref("devtools.debugger.ui.win-width", 9
 pref("devtools.debugger.ui.win-height", 400);
 pref("devtools.debugger.ui.stackframes-width", 200);
 pref("devtools.debugger.ui.variables-width", 300);
 pref("devtools.debugger.ui.panes-visible-on-startup", false);
 pref("devtools.debugger.ui.variables-sorting-enabled", true);
 pref("devtools.debugger.ui.variables-non-enum-visible", true);
 pref("devtools.debugger.ui.variables-searchbox-visible", false);
 
-// Enable the style inspector
-pref("devtools.styleinspector.enabled", true);
-
 // Enable the Tilt inspector
 pref("devtools.tilt.enabled", true);
 pref("devtools.tilt.intro_transition", true);
 pref("devtools.tilt.outro_transition", true);
 
-// Enable the rules view
-pref("devtools.ruleview.enabled", true);
-
 // Enable the Scratchpad tool.
 pref("devtools.scratchpad.enabled", true);
 
 // The maximum number of recently-opened files stored.
 // Setting this preference to 0 will not clear any recent files, but rather hide
 // the 'Open Recent'-menu.
 pref("devtools.scratchpad.recentFilesMax", 10);
 
@@ -1076,27 +1075,16 @@ pref("devtools.chrome.enabled", false);
 pref("devtools.gcli.hideIntro", false);
 
 // How eager are we to show help: never=1, sometimes=2, always=3
 pref("devtools.gcli.eagerHelper", 2);
 
 // Do we allow the 'pref set' command
 pref("devtools.gcli.allowSet", false);
 
-// The last Web Console height. This is initially 0 which means that the Web
-// Console will use the default height next time it shows.
-// Change to -1 if you do not want the Web Console to remember its last height.
-pref("devtools.hud.height", 0);
-
-// Remember the Web Console position. Possible values:
-//   above - above the web page,
-//   below - below the web page,
-//   window - in a separate window/popup panel.
-pref("devtools.webconsole.position", "below");
-
 // Remember the Web Console filters
 pref("devtools.webconsole.filter.network", true);
 pref("devtools.webconsole.filter.networkinfo", true);
 pref("devtools.webconsole.filter.csserror", true);
 pref("devtools.webconsole.filter.cssparser", true);
 pref("devtools.webconsole.filter.exception", true);
 pref("devtools.webconsole.filter.jswarn", true);
 pref("devtools.webconsole.filter.error", true);
diff --git a/browser/base/content/browser-appmenu.inc b/browser/base/content/browser-appmenu.inc
--- a/browser/base/content/browser-appmenu.inc
+++ b/browser/base/content/browser-appmenu.inc
@@ -145,30 +145,37 @@
                       label="&printSetupCmd.label;"
                       command="cmd_pageSetup"/>
           </menupopup>
       </splitmenu>
       <menuseparator class="appmenu-menuseparator"/>
       <menu id="appmenu_webDeveloper"
             label="&appMenuWebDeveloper.label;">
         <menupopup id="appmenu_webDeveloper_popup">
-          <menuitem id="appmenu_devToolbar" observes="devtoolsMenuBroadcaster_DevToolbar"/>
-          <menuitem id="appmenu_webConsole" observes="devtoolsMenuBroadcaster_WebConsole"/>
-          <menuitem id="appmenu_remoteWebConsole" observes="devtoolsMenuBroadcaster_RemoteWebConsole"/>
-          <menuitem id="appmenu_pageinspect" observes="devtoolsMenuBroadcaster_Inspect"/>
-          <menuitem id="appmenu_responsiveUI" observes="devtoolsMenuBroadcaster_ResponsiveUI"/>
-          <menuitem id="appmenu_debugger" observes="devtoolsMenuBroadcaster_Debugger"/>
-          <menuitem id="appmenu_remoteDebugger" observes="devtoolsMenuBroadcaster_RemoteDebugger"/>
-          <menuitem id="appmenu_chromeDebugger" observes="devtoolsMenuBroadcaster_ChromeDebugger"/>
-          <menuitem id="appmenu_scratchpad" observes="devtoolsMenuBroadcaster_Scratchpad"/>
-          <menuitem id="appmenu_styleeditor" observes="devtoolsMenuBroadcaster_StyleEditor"/>
-          <menuitem id="appmenu_pageSource" observes="devtoolsMenuBroadcaster_PageSource"/>
-          <menuitem id="appmenu_errorConsole" observes="devtoolsMenuBroadcaster_ErrorConsole"/>
+          <menuitem id="appmenu_devToolbox"
+                    observes="devtoolsMenuBroadcaster_DevToolbox"/>
+          <menuseparator id="appmenu_devtools_separator"/>
+          <menuitem id="appmenu_devToolbar"
+                    observes="devtoolsMenuBroadcaster_DevToolbar"/>
+          <menuitem id="appmenu_remoteWebConsole"
+                    observes="devtoolsMenuBroadcaster_RemoteWebConsole"/>
+          <menuitem id="appmenu_responsiveUI"
+                    observes="devtoolsMenuBroadcaster_ResponsiveUI"/>
+          <menuitem id="appmenu_scratchpad"
+                    observes="devtoolsMenuBroadcaster_Scratchpad"/>
+          <menuitem id="appmenu_pageSource"
+                    observes="devtoolsMenuBroadcaster_PageSource"/>
+          <menuitem id="appmenu_errorConsole"
+                    observes="devtoolsMenuBroadcaster_ErrorConsole"/>
+          <menuseparator id="appmenu_devToolsConnectSeparator"/>
+          <menuitem id="appmenu_devtools_connect"
+                    observes="devtoolsMenuBroadcaster_connect"/>
           <menuseparator id="appmenu_devToolsEndSeparator"/>
-          <menuitem id="appmenu_getMoreDevtools" observes="devtoolsMenuBroadcaster_GetMoreTools"/>
+          <menuitem id="appmenu_getMoreDevtools"
+                    observes="devtoolsMenuBroadcaster_GetMoreTools"/>
           <menuseparator/>
 #define ID_PREFIX appmenu_developer_
 #define OMIT_ACCESSKEYS
 #include browser-charsetmenu.inc
 #undef ID_PREFIX
 #undef OMIT_ACCESSKEYS
           <menuitem label="&goOfflineCmd.label;"
                     type="checkbox"
diff --git a/browser/base/content/browser-doctype.inc b/browser/base/content/browser-doctype.inc
--- a/browser/base/content/browser-doctype.inc
+++ b/browser/base/content/browser-doctype.inc
@@ -14,12 +14,10 @@
 <!ENTITY % placesDTD SYSTEM "chrome://browser/locale/places/places.dtd">
 %placesDTD;
 #ifdef MOZ_SAFE_BROWSING
 <!ENTITY % safebrowsingDTD SYSTEM "chrome://browser/locale/safebrowsing/phishing-afterload-warning-message.dtd">
 %safebrowsingDTD;
 #endif
 <!ENTITY % aboutHomeDTD SYSTEM "chrome://browser/locale/aboutHome.dtd">
 %aboutHomeDTD;
-<!ENTITY % debuggerDTD SYSTEM "chrome://browser/locale/devtools/debugger.dtd">
-%debuggerDTD;
 ]>
 
diff --git a/browser/base/content/browser-menubar.inc b/browser/base/content/browser-menubar.inc
--- a/browser/base/content/browser-menubar.inc
+++ b/browser/base/content/browser-menubar.inc
@@ -552,30 +552,44 @@
                         observes="sync-syncnow-state"
                         oncommand="gSyncUI.doSync(event);"/>
 #endif
               <menuseparator id="devToolsSeparator"/>
               <menu id="webDeveloperMenu"
                     label="&webDeveloperMenu.label;"
                     accesskey="&webDeveloperMenu.accesskey;">
                 <menupopup id="menuWebDeveloperPopup">
-                  <menuitem id="menu_devToolbar" observes="devtoolsMenuBroadcaster_DevToolbar" accesskey="&devToolbarMenu.accesskey;"/>
-                  <menuitem id="webConsole" observes="devtoolsMenuBroadcaster_WebConsole" accesskey="&webConsoleCmd.accesskey;"/>
-                  <menuitem id="menu_remoteWebConsole" observes="devtoolsMenuBroadcaster_RemoteWebConsole"/>
-                  <menuitem id="menu_pageinspect" observes="devtoolsMenuBroadcaster_Inspect" accesskey="&inspectMenu.accesskey;"/>
-                  <menuitem id="menu_responsiveUI" observes="devtoolsMenuBroadcaster_ResponsiveUI" accesskey="&responsiveDesignTool.accesskey;"/>
-                  <menuitem id="menu_debugger" observes="devtoolsMenuBroadcaster_Debugger" accesskey="&debuggerMenu.accesskey;"/>
-                  <menuitem id="menu_remoteDebugger" observes="devtoolsMenuBroadcaster_RemoteDebugger"/>
-                  <menuitem id="menu_chromeDebugger" observes="devtoolsMenuBroadcaster_ChromeDebugger"/>
-                  <menuitem id="menu_scratchpad" observes="devtoolsMenuBroadcaster_Scratchpad" accesskey="&scratchpad.accesskey;"/>
-                  <menuitem id="menu_styleeditor" observes="devtoolsMenuBroadcaster_StyleEditor" accesskey="&styleeditor.accesskey;"/>
-                  <menuitem id="menu_pageSource" observes="devtoolsMenuBroadcaster_PageSource" accesskey="&pageSourceCmd.accesskey;"/>
-                  <menuitem id="javascriptConsole" observes="devtoolsMenuBroadcaster_ErrorConsole" accesskey="&errorConsoleCmd.accesskey;"/>
+                  <menuitem id="menu_devToolbox"
+                            observes="devtoolsMenuBroadcaster_DevToolbox"
+                            accesskey="&devToolbox.accesskey;"/>
+                  <menuseparator id="menu_devtools_separator"/>
+                  <menuitem id="menu_devToolbar"
+                            observes="devtoolsMenuBroadcaster_DevToolbar"
+                            accesskey="&devToolbarMenu.accesskey;"/>
+                  <menuitem id="menu_remoteWebConsole"
+                            observes="devtoolsMenuBroadcaster_RemoteWebConsole"/>
+                  <menuitem id="menu_responsiveUI"
+                            observes="devtoolsMenuBroadcaster_ResponsiveUI"
+                            accesskey="&responsiveDesignTool.accesskey;"/>
+                  <menuitem id="menu_scratchpad"
+                            observes="devtoolsMenuBroadcaster_Scratchpad"
+                            accesskey="&scratchpad.accesskey;"/>
+                  <menuitem id="menu_pageSource"
+                            observes="devtoolsMenuBroadcaster_PageSource"
+                            accesskey="&pageSourceCmd.accesskey;"/>
+                  <menuitem id="javascriptConsole"
+                            observes="devtoolsMenuBroadcaster_ErrorConsole"
+                            accesskey="&errorConsoleCmd.accesskey;"/>
+                  <menuseparator id="menu_devToolsConnectSeparator"/>
+                  <menuitem id="menu_devtools_connect"
+                            observes="devtoolsMenuBroadcaster_connect"/>
                   <menuseparator id="devToolsEndSeparator"/>
-                  <menuitem id="getMoreDevtools" observes="devtoolsMenuBroadcaster_GetMoreTools" accesskey="&getMoreDevtoolsCmd.accesskey;"/>
+                  <menuitem id="getMoreDevtools"
+                            observes="devtoolsMenuBroadcaster_GetMoreTools"
+                            accesskey="&getMoreDevtoolsCmd.accesskey;"/>
                 </menupopup>
               </menu>
               <menuitem id="menu_pageInfo"
                         accesskey="&pageInfoCmd.accesskey;"
                         label="&pageInfoCmd.label;"
 #ifndef XP_WIN
                         key="key_viewInfo"
 #endif
diff --git a/browser/base/content/browser-sets.inc b/browser/base/content/browser-sets.inc
--- a/browser/base/content/browser-sets.inc
+++ b/browser/base/content/browser-sets.inc
@@ -83,29 +83,25 @@
     <command id="cmd_fullZoomReduce"  oncommand="FullZoom.reduce()"/>
     <command id="cmd_fullZoomEnlarge" oncommand="FullZoom.enlarge()"/>
     <command id="cmd_fullZoomReset"   oncommand="FullZoom.reset()"/>
     <command id="cmd_fullZoomToggle"  oncommand="ZoomManager.toggleZoom();"/>
     <command id="Browser:OpenLocation" oncommand="openLocation();"/>
 
     <command id="Tools:Search" oncommand="BrowserSearch.webSearch();"/>
     <command id="Tools:Downloads" oncommand="BrowserDownloadsUI();"/>
+    <command id="Tools:DevToolbox" oncommand="gDevTools.toggleToolboxCommand(gBrowser);"/>
     <command id="Tools:DevToolbar" oncommand="DeveloperToolbar.toggle();" disabled="true" hidden="true"/>
     <command id="Tools:DevToolbarFocus" oncommand="DeveloperToolbar.focusToggle();" disabled="true"/>
-    <command id="Tools:WebConsole" oncommand="HUDConsoleUI.toggleHUD();"/>
     <command id="Tools:RemoteWebConsole" oncommand="HUDConsoleUI.toggleRemoteHUD();" disabled="true" hidden="true"/>
-    <command id="Tools:Inspect" oncommand="InspectorUI.toggleInspectorUI();"/>
-    <command id="Tools:Debugger" oncommand="DebuggerUI.toggleDebugger();" disabled="true" hidden="true"/>
-    <command id="Tools:RemoteDebugger" oncommand="DebuggerUI.toggleRemoteDebugger();" disabled="true" hidden="true"/>
-    <command id="Tools:ChromeDebugger" oncommand="DebuggerUI.toggleChromeDebugger();" disabled="true" hidden="true"/>
     <command id="Tools:Scratchpad" oncommand="Scratchpad.openScratchpad();" disabled="true" hidden="true"/>
-    <command id="Tools:StyleEditor" oncommand="StyleEditor.toggle();" disabled="true" hidden="true"/>
     <command id="Tools:ResponsiveUI" oncommand="ResponsiveUI.toggle();" disabled="true" hidden="true"/>
     <command id="Tools:Addons" oncommand="BrowserOpenAddonsMgr();"/>
     <command id="Tools:ErrorConsole" oncommand="toJavaScriptConsole()" disabled="true" hidden="true"/>
+    <command id="Tools:DevToolsConnect" oncommand="DevToolsXULCommands.openConnectScreen(gBrowser)"/>
     <command id="Tools:Sanitize"
      oncommand="Cc['@mozilla.org/browser/browserglue;1'].getService(Ci.nsIBrowserGlue).sanitize(window);"/>
     <command id="Tools:PrivateBrowsing"
 #ifdef MOZ_PER_WINDOW_PRIVATE_BROWSING
       oncommand="OpenBrowserWindow({private: true});"/>
 #else
       oncommand="gPrivateBrowsingUI.toggleMode();"/>
 #endif
@@ -122,37 +118,16 @@
 
   <commandset id="placesCommands">
     <command id="Browser:ShowAllBookmarks"
              oncommand="PlacesCommandHook.showPlacesOrganizer('AllBookmarks');"/>
     <command id="Browser:ShowAllHistory"
              oncommand="PlacesCommandHook.showPlacesOrganizer('History');"/>
   </commandset>
 
-  <commandset id="inspectorCommands">
-    <command id="Inspector:Inspect"
-             oncommand="InspectorUI.toggleInspection();"/>
-    <command id="Inspector:Sidebar"
-             oncommand="InspectorUI.toggleSidebar();"/>
-    <command id="Inspector:Tilt"
-             oncommand="Tilt.initialize();"/>
-    <command id="Inspector:HTMLPanel"
-             oncommand="InspectorUI.toggleHTMLPanel();"/>
-    <command id="Inspector:CopyInner"
-             oncommand="InspectorUI.copyInnerHTML();"/>
-    <command id="Inspector:CopyOuter"
-             oncommand="InspectorUI.copyOuterHTML();"/>
-    <command id="Inspector:DeleteNode"
-             oncommand="InspectorUI.deleteNode();"/>
-    <command id="Inspector:ToggleVeil"
-             oncommand="InspectorUI.toggleVeil();"/>
-    <command id="Inspector:ToggleInfobar"
-             oncommand="InspectorUI.toggleInfobar();"/>
-  </commandset>
-
   <broadcasterset id="mainBroadcasterSet">
     <broadcaster id="viewBookmarksSidebar" autoCheck="false" label="&bookmarksButton.label;"
                  type="checkbox" group="sidebar" sidebarurl="chrome://browser/content/bookmarks/bookmarksPanel.xul"
                  oncommand="toggleSidebar('viewBookmarksSidebar');"/>
 
     <!-- for both places and non-places, the sidebar lives at
          chrome://browser/content/history/history-panel.xul so there are no
          problems when switching between versions -->
@@ -190,71 +165,52 @@
 #ifdef MOZ_SERVICES_SYNC
     <broadcaster id="sync-setup-state"/>
     <broadcaster id="sync-syncnow-state"/>
 #endif
     <broadcaster id="workOfflineMenuitemState"/>
     <broadcaster id="socialSidebarBroadcaster" hidden="true"/>
 
     <!-- DevTools broadcasters -->
+    <broadcaster id="devtoolsMenuBroadcaster_DevToolbox"
+                 label="&devToolbarToolsButton.label;"
+                 type="checkbox" autocheck="false"
+                 command="Tools:DevToolbox"/>
     <broadcaster id="devtoolsMenuBroadcaster_DevToolbar"
                  label="&devToolbarMenu.label;"
                  type="checkbox" autocheck="false"
                  command="Tools:DevToolbar"
                  key="key_devToolbar"/>
-    <broadcaster id="devtoolsMenuBroadcaster_WebConsole"
-                 label="&webConsoleCmd.label;"
-                 type="checkbox" autocheck="false"
-                 key="key_webConsole"
-                 command="Tools:WebConsole"/>
     <broadcaster id="devtoolsMenuBroadcaster_RemoteWebConsole"
                  label="&remoteWebConsoleCmd.label;"
                  type="checkbox" autocheck="false"
                  command="Tools:RemoteWebConsole"/>
-    <broadcaster id="devtoolsMenuBroadcaster_Inspect"
-                 label="&inspectMenu.label;"
-                 type="checkbox" autocheck="false"
-                 command="Tools:Inspect"
-                 key="key_inspect"/>
-    <broadcaster id="devtoolsMenuBroadcaster_Debugger"
-                 label="&debuggerMenu.label2;"
-                 type="checkbox" autocheck="false"
-                 command="Tools:Debugger"
-                 key="key_debugger"/>
-    <broadcaster id="devtoolsMenuBroadcaster_RemoteDebugger"
-                 label="&remoteDebuggerMenu.label;"
-                 command="Tools:RemoteDebugger"/>
-    <broadcaster id="devtoolsMenuBroadcaster_ChromeDebugger"
-                 label="&chromeDebuggerMenu.label;"
-                 command="Tools:ChromeDebugger"/>
     <broadcaster id="devtoolsMenuBroadcaster_Scratchpad"
                  label="&scratchpad.label;"
                  command="Tools:Scratchpad"
                  key="key_scratchpad"/>
-    <broadcaster id="devtoolsMenuBroadcaster_StyleEditor"
-                 label="&styleeditor.label;"
-                 type="checkbox" autocheck="false"
-                 command="Tools:StyleEditor"
-                 key="key_styleeditor"/>
     <broadcaster id="devtoolsMenuBroadcaster_ResponsiveUI"
                  label="&responsiveDesignTool.label;"
                  type="checkbox" autocheck="false"
                  command="Tools:ResponsiveUI"
                  key="key_responsiveUI"/>
     <broadcaster id="devtoolsMenuBroadcaster_PageSource"
                  label="&pageSourceCmd.label;"
                  key="key_viewSource"
                  command="View:PageSource"/>
     <broadcaster id="devtoolsMenuBroadcaster_ErrorConsole"
                  label="&errorConsoleCmd.label;"
                  key="key_errorConsole"
                  command="Tools:ErrorConsole"/>
     <broadcaster id="devtoolsMenuBroadcaster_GetMoreTools"
                  label="&getMoreDevtoolsCmd.label;"
                  oncommand="openUILinkIn('https://addons.mozilla.org/firefox/collections/mozilla/webdeveloper/', 'tab');"/>
+    <broadcaster id="devtoolsMenuBroadcaster_connect"
+                 label="&devtoolsConnect.label;"
+                 command="Tools:DevToolsConnect"/>
 
     <!-- SocialAPI broadcasters -->
     <broadcaster id="socialBroadcaster_userDetails"
                  notLoggedInLabel="&social.notLoggedIn.label;"/>
   </broadcasterset>
 
   <keyset id="mainKeyset">
     <key id="key_newNavigator"
@@ -266,17 +222,17 @@
          modifiers="accel"/>
 #ifndef XP_MACOSX
     <key id="focusURLBar2" key="&urlbar.accesskey;" command="Browser:OpenLocation"
          modifiers="alt"/>
 #endif
 
 #
 # Search Command Key Logic works like this:
-# 
+#
 # Unix: Ctrl+K (cross platform binding)
 #       Ctrl+J (in case of emacs Ctrl-K conflict)
 # Mac:  Cmd+K (cross platform binding)
 #       Cmd+Opt+F (platform convention)
 # Win:  Ctrl+K (cross platform binding)
 #       Ctrl+E (IE compat)
 #
 # We support Ctrl+K on all platforms now and advertise it in the menu since it is
@@ -298,48 +254,25 @@
     <key id="key_openDownloads" key="&downloadsUnix.commandkey;" command="Tools:Downloads" modifiers="accel,shift"/>
 #else
     <key id="key_openDownloads" key="&downloads.commandkey;" command="Tools:Downloads" modifiers="accel"/>
 #endif
     <key id="key_openAddons" key="&addons.commandkey;" command="Tools:Addons" modifiers="accel,shift"/>
     <key id="key_errorConsole" key="&errorConsoleCmd.commandkey;" command="Tools:ErrorConsole" modifiers="accel,shift"/>
     <key id="key_devToolbar" keycode="&devToolbar.keycode;" modifiers="shift"
          keytext="&devToolbar.keytext;" command="Tools:DevToolbarFocus"/>
-    <key id="key_webConsole" key="&webConsoleCmd.commandkey;" oncommand="HUDConsoleUI.toggleHUD();"
-#ifdef XP_MACOSX
-        modifiers="accel,alt"
-#else
-        modifiers="accel,shift"
-#endif
-    />
-    <key id="key_debugger" key="&debuggerMenu.commandkey;" command="Tools:Debugger"
-#ifdef XP_MACOSX
-        modifiers="accel,alt"
-#else
-        modifiers="accel,shift"
-#endif
-    />
-    <key id="key_inspect" key="&inspectMenu.commandkey;" command="Inspector:Inspect"
-#ifdef XP_MACOSX
-        modifiers="accel,alt"
-#else
-        modifiers="accel,shift"
-#endif
-    />
     <key id="key_responsiveUI" key="&responsiveDesignTool.commandkey;" command="Tools:ResponsiveUI"
 #ifdef XP_MACOSX
         modifiers="accel,alt"
 #else
         modifiers="accel,shift"
 #endif
     />
     <key id="key_scratchpad" keycode="&scratchpad.keycode;" modifiers="shift"
          keytext="&scratchpad.keytext;" command="Tools:Scratchpad"/>
-    <key id="key_styleeditor" keycode="&styleeditor.keycode;" modifiers="shift"
-         keytext="&styleeditor.keytext;" command="Tools:StyleEditor"/>
     <key id="openFileKb" key="&openFileCmd.commandkey;" command="Browser:OpenFile"  modifiers="accel"/>
     <key id="key_savePage" key="&savePageCmd.commandkey;" command="Browser:SavePage" modifiers="accel"/>
     <key id="printKb" key="&printCmd.commandkey;" command="cmd_print"  modifiers="accel"/>
     <key id="key_close" key="&closeCmd.key;" command="cmd_close" modifiers="accel"/>
     <key id="key_closeWindow" key="&closeCmd.key;" command="cmd_closeWindow" modifiers="accel,shift"/>
     <key id="key_undo"
          key="&undoCmd.key;"
          modifiers="accel"/>
diff --git a/browser/base/content/browser.css b/browser/base/content/browser.css
--- a/browser/base/content/browser.css
+++ b/browser/base/content/browser.css
@@ -557,20 +557,16 @@ statuspanel[inactive][previoustype=overL
 }
 
 .statuspanel-inner {
   height: 3em;
   width: 100%;
   -moz-box-align: end;
 }
 
-.styleInspector {
-  min-width: 350px;
-}
-
 .panel-inner-arrowcontentfooter[footertype="promobox"] {
   -moz-binding: url("chrome://browser/content/urlbarBindings.xml#promobox");
 }
 
 /* tabview menus */
 .tabview-menuitem {
   max-width: 32em;
 }
@@ -588,32 +584,26 @@ html|*#gcli-output-frame,
 }
 
 .gclitoolbar-input-node,
 .gclitoolbar-complete-node,
 .gclitoolbar-prompt {
   direction: ltr;
 }
 
-#developer-toolbar-webconsole[error-count] > .toolbarbutton-icon {
+#developer-toolbar-toolbox-button[error-count] > .toolbarbutton-icon {
   display: none;
 }
 
-#developer-toolbar-webconsole[error-count]:before {
+#developer-toolbar-toolbox-button[error-count]:before {
   content: attr(error-count);
   display: -moz-box;
   -moz-box-pack: center;
 }
 
-/* We don't show the Style Editor button in the developer toolbar for now.
-   See bug 771203 */
-#developer-toolbar-styleeditor {
-  display: none;
-}
-
 /* Responsive Mode */
 
 .browserContainer[responsivemode] {
   overflow: auto;
 }
 
 .devtools-responsiveui-toolbar:-moz-locale-dir(rtl) {
   -moz-box-pack: end;
diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -110,34 +110,22 @@ XPCOMUtils.defineLazyGetter(this, "Popup
 });
 
 XPCOMUtils.defineLazyGetter(this, "DeveloperToolbar", function() {
   let tmp = {};
   Cu.import("resource:///modules/devtools/DeveloperToolbar.jsm", tmp);
   return new tmp.DeveloperToolbar(window, document.getElementById("developer-toolbar"));
 });
 
-XPCOMUtils.defineLazyGetter(this, "InspectorUI", function() {
-  let tmp = {};
-  Cu.import("resource:///modules/inspector.jsm", tmp);
-  return new tmp.InspectorUI(window);
-});
-
 XPCOMUtils.defineLazyGetter(this, "DebuggerUI", function() {
   let tmp = {};
   Cu.import("resource:///modules/devtools/DebuggerUI.jsm", tmp);
   return new tmp.DebuggerUI(window);
 });
 
-XPCOMUtils.defineLazyGetter(this, "Tilt", function() {
-  let tmp = {};
-  Cu.import("resource:///modules/devtools/Tilt.jsm", tmp);
-  return new tmp.Tilt(window);
-});
-
 XPCOMUtils.defineLazyModuleGetter(this, "Social",
   "resource:///modules/Social.jsm");
 
 
 XPCOMUtils.defineLazyModuleGetter(this, "PageThumbs",
   "resource:///modules/PageThumbs.jsm");
 
 #ifdef MOZ_SAFE_BROWSING
@@ -1423,46 +1411,16 @@ var gBrowserInit = {
       document.getElementById("Tools:DevToolbarFocus").removeAttribute("disabled");
 
       // Show the toolbar if it was previously visible
       if (gPrefService.getBoolPref("devtools.toolbar.visible")) {
         DeveloperToolbar.show(false);
       }
     }
 
-    // Enable Debugger?
-    let enabled = gPrefService.getBoolPref("devtools.debugger.enabled");
-    if (enabled) {
-      let cmd = document.getElementById("Tools:Debugger");
-      cmd.removeAttribute("disabled");
-      cmd.removeAttribute("hidden");
-    }
-
-    // Enable Remote Debugger?
-    let enabled = gPrefService.getBoolPref("devtools.debugger.remote-enabled");
-    if (enabled) {
-      let cmd = document.getElementById("Tools:RemoteDebugger");
-      cmd.removeAttribute("disabled");
-      cmd.removeAttribute("hidden");
-
-      cmd = document.getElementById("Tools:RemoteWebConsole");
-      cmd.removeAttribute("disabled");
-      cmd.removeAttribute("hidden");
-    }
-
-    // Enable Chrome Debugger?
-    let enabled = gPrefService.getBoolPref("devtools.chrome.enabled") &&
-                  gPrefService.getBoolPref("devtools.debugger.chrome-enabled") &&
-                  gPrefService.getBoolPref("devtools.debugger.remote-enabled");
-    if (enabled) {
-      let cmd = document.getElementById("Tools:ChromeDebugger");
-      cmd.removeAttribute("disabled");
-      cmd.removeAttribute("hidden");
-    }
-
     // Enable Error Console?
     // Temporarily enabled. See bug 798925.
     let consoleEnabled = true || gPrefService.getBoolPref("devtools.errorconsole.enabled") ||
                          gPrefService.getBoolPref("devtools.chrome.enabled");
     if (consoleEnabled) {
       let cmd = document.getElementById("Tools:ErrorConsole");
       cmd.removeAttribute("disabled");
       cmd.removeAttribute("hidden");
@@ -1471,24 +1429,16 @@ var gBrowserInit = {
     // Enable Scratchpad in the UI, if the preference allows this.
     let scratchpadEnabled = gPrefService.getBoolPref(Scratchpad.prefEnabledName);
     if (scratchpadEnabled) {
       let cmd = document.getElementById("Tools:Scratchpad");
       cmd.removeAttribute("disabled");
       cmd.removeAttribute("hidden");
     }
 
-    // Enable Style Editor?
-    let styleEditorEnabled = gPrefService.getBoolPref(StyleEditor.prefEnabledName);
-    if (styleEditorEnabled) {
-      let cmd = document.getElementById("Tools:StyleEditor");
-      cmd.removeAttribute("disabled");
-      cmd.removeAttribute("hidden");
-    }
-
 #ifdef MENUBAR_CAN_AUTOHIDE
     // If the user (or the locale) hasn't enabled the top-level "Character
     // Encoding" menu via the "browser.menu.showCharacterEncoding" preference,
     // hide it.
     if ("true" != gPrefService.getComplexValue("browser.menu.showCharacterEncoding",
                                                Ci.nsIPrefLocalizedString).data)
       document.getElementById("appmenu_charsetMenu").hidden = true;
 #endif
@@ -1496,16 +1446,19 @@ var gBrowserInit = {
     // Enable Responsive UI?
     let responsiveUIEnabled = gPrefService.getBoolPref("devtools.responsiveUI.enabled");
     if (responsiveUIEnabled) {
       let cmd = document.getElementById("Tools:ResponsiveUI");
       cmd.removeAttribute("disabled");
       cmd.removeAttribute("hidden");
     }
 
+    // Add Devtools menuitems and listeners
+    gDevTools.registerBrowserWindow(window);
+
     let appMenuButton = document.getElementById("appmenu-button");
     let appMenuPopup = document.getElementById("appmenu-popup");
     if (appMenuButton && appMenuPopup) {
       let appMenuOpening = null;
       appMenuButton.addEventListener("mousedown", function(event) {
         if (event.button == 0)
           appMenuOpening = new Date();
       }, false);
@@ -1538,18 +1491,17 @@ var gBrowserInit = {
 
   onUnload: function() {
     // In certain scenarios it's possible for unload to be fired before onload,
     // (e.g. if the window is being closed after browser.js loads but before the
     // load completes). In that case, there's nothing to do here.
     if (!gStartupRan)
       return;
 
-    if (!__lookupGetter__("InspectorUI"))
-      InspectorUI.destroy();
+    gDevTools.forgetBrowserWindow(window);
 
     // First clean up services initialized in gBrowserInit.onLoad (or those whose
     // uninit methods don't depend on the services having been initialized).
     allTabs.uninit();
 
     CombinedStopReload.uninit();
 
     gGestureSupport.init(false);
@@ -1637,17 +1589,17 @@ var gBrowserInit = {
   // macBrowserOverlay
   nonBrowserWindowStartup: function() {
     // Disable inappropriate commands / submenus
     var disabledItems = ['Browser:SavePage',
                          'Browser:SendLink', 'cmd_pageSetup', 'cmd_print', 'cmd_find', 'cmd_findAgain',
                          'viewToolbarsMenu', 'viewSidebarMenuMenu', 'Browser:Reload',
                          'viewFullZoomMenu', 'pageStyleMenu', 'charsetMenu', 'View:PageSource', 'View:FullScreen',
                          'viewHistorySidebar', 'Browser:AddBookmarkAs', 'Browser:BookmarkAllTabs',
-                         'View:PageInfo', 'Tasks:InspectPage', 'Browser:ToggleTabView', 'Browser:ToggleAddonBar'];
+                         'View:PageInfo', 'Browser:ToggleTabView', 'Browser:ToggleAddonBar'];
     var element;
 
     for (let disabledItem of disabledItems) {
       element = document.getElementById(disabledItem);
       if (element)
         element.setAttribute("disabled", "true");
     }
 
@@ -7443,16 +7395,22 @@ var TabContextMenu = {
       PlacesCommandHook.updateBookmarkAllTabsCommand();
 
     // Hide "Move to Group" if it's a pinned tab.
     document.getElementById("context_tabViewMenu").hidden =
       (this.contextTab.pinned || !TabView.firstUseExperienced);
   }
 };
 
+XPCOMUtils.defineLazyModuleGetter(this, "gDevTools",
+                                  "resource:///modules/devtools/gDevTools.jsm");
+
+XPCOMUtils.defineLazyModuleGetter(this, "DevToolsXULCommands",
+                                  "resource:///modules/devtools/gDevTools.jsm");
+
 XPCOMUtils.defineLazyGetter(this, "HUDConsoleUI", function () {
   let tempScope = {};
   Cu.import("resource:///modules/HUDService.jsm", tempScope);
   try {
     return tempScope.HUDService.consoleUI;
   }
   catch (ex) {
     Components.utils.reportError(ex);
@@ -7539,51 +7497,16 @@ var ResponsiveUI = {
 };
 
 XPCOMUtils.defineLazyGetter(ResponsiveUI, "ResponsiveUIManager", function() {
   let tmp = {};
   Cu.import("resource:///modules/devtools/responsivedesign.jsm", tmp);
   return tmp.ResponsiveUIManager;
 });
 
-var StyleEditor = {
-  prefEnabledName: "devtools.styleeditor.enabled",
-  /**
-   * Opens the style editor. If the UI is already open, it will be focused.
-   *
-   * @param {CSSStyleSheet} [aSelectedStyleSheet] default Stylesheet.
-   * @param {Number} [aLine] Line to which the caret should be moved (one-indexed).
-   * @param {Number} [aCol] Column to which the caret should be moved (one-indexed).
-   */
-  openChrome: function SE_openChrome(aSelectedStyleSheet, aLine, aCol)
-  {
-    let contentWindow = gBrowser.selectedBrowser.contentWindow;
-    let win = this.StyleEditorManager.getEditorForWindow(contentWindow);
-    if (win) {
-      this.StyleEditorManager.selectEditor(win);
-      return win;
-    } else {
-      return this.StyleEditorManager.newEditor(contentWindow, window,
-                                               aSelectedStyleSheet, aLine, aCol);
-    }
-  },
-
-  toggle: function SE_toggle()
-  {
-    this.StyleEditorManager.toggleEditor(gBrowser.contentWindow, window);
-  }
-};
-
-XPCOMUtils.defineLazyGetter(StyleEditor, "StyleEditorManager", function() {
-  let tmp = {};
-  Cu.import("resource:///modules/devtools/StyleEditor.jsm", tmp);
-  return new tmp.StyleEditorManager(window);
-});
-
-
 XPCOMUtils.defineLazyGetter(window, "gShowPageResizers", function () {
 #ifdef XP_WIN
   // Only show resizers on Windows 2000 and XP
   let sysInfo = Components.classes["@mozilla.org/system-info;1"]
                           .getService(Components.interfaces.nsIPropertyBag2);
   return parseFloat(sysInfo.getProperty("version")) < 6;
 #else
   return false;
diff --git a/browser/base/content/browser.xul b/browser/base/content/browser.xul
--- a/browser/base/content/browser.xul
+++ b/browser/base/content/browser.xul
@@ -273,32 +273,16 @@
            onpopupshown="SocialFlyout.onShown()"
            onpopuphidden="SocialFlyout.onHidden()"
            side="right"
            type="arrow"
            hidden="true"
            noautofocus="true"
            position="topcenter topright"/>
 
-    <menupopup id="inspector-node-popup">
-      <menuitem id="inspectorHTMLCopyInner"
-                label="&inspectorHTMLCopyInner.label;"
-                accesskey="&inspectorHTMLCopyInner.accesskey;"
-                command="Inspector:CopyInner"/>
-      <menuitem id="inspectorHTMLCopyOuter"
-                label="&inspectorHTMLCopyOuter.label;"
-                accesskey="&inspectorHTMLCopyOuter.accesskey;"
-                command="Inspector:CopyOuter"/>
-      <menuseparator/>
-      <menuitem id="inspectorHTMLDelete"
-                label="&inspectorHTMLDelete.label;"
-                accesskey="&inspectorHTMLDelete.accesskey;"
-                command="Inspector:DeleteNode"/>
-    </menupopup>
-
     <menupopup id="toolbar-context-menu"
                onpopupshowing="onViewToolbarsPopupShowing(event);">
       <menuseparator/>
       <menuitem command="cmd_ToggleTabsOnTop"
                 type="checkbox"
                 label="&viewTabsOnTop.label;"
                 accesskey="&viewTabsOnTop.accesskey;"/>
       <menuitem command="cmd_CustomizeToolbars"
@@ -1059,29 +1043,16 @@
                   flex="1" contenttooltip="aHTMLTooltip"
                   tabcontainer="tabbrowser-tabs"
                   contentcontextmenu="contentAreaContextMenu"
                   autocompletepopup="PopupAutoComplete"
                   onclick="contentAreaClick(event, false);"/>
       <chatbar id="pinnedchats" layer="true" mousethrough="always" hidden="true"/>
       <statuspanel id="statusbar-display" inactive="true"/>
     </vbox>
-    <splitter id="devtools-side-splitter" hidden="true"/>
-    <vbox id="devtools-sidebar-box" hidden="true"
-          style="min-width: 18em; width: 22em; max-width: 42em;" persist="width">
-      <toolbar id="devtools-sidebar-toolbar"
-               class="devtools-toolbar"
-               nowindowdrag="true">
-        <spacer flex="1"/>
-        <toolbarbutton tooltiptext="&inspectSidebarCloseButton.tooltiptext;"
-                       class="devtools-closebutton"
-                       command="Inspector:Sidebar"/>
-      </toolbar>
-      <deck id="devtools-sidebar-deck" flex="1"/>
-    </vbox>
     <splitter id="social-sidebar-splitter"
               class="chromeclass-extrachrome sidebar-splitter"
               observes="socialSidebarBroadcaster"/>
     <vbox id="social-sidebar-box"
           class="chromeclass-extrachrome"
           observes="socialSidebarBroadcaster"
           persist="width">
       <browser id="social-sidebar-browser"
@@ -1110,108 +1081,35 @@
           </hbox>
           <checkbox id="full-screen-remember-decision"/>
         </vbox>
       </vbox>
     </hbox>
   </hbox>
 
   <vbox id="browser-bottombox" layer="true">
-    <toolbar id="inspector-toolbar"
-             class="devtools-toolbar"
-             nowindowdrag="true"
-             hidden="true">
-#ifdef XP_MACOSX
-      <toolbarbutton id="highlighter-closebutton"
-                     class="devtools-closebutton"
-                     oncommand="InspectorUI.closeInspectorUI(false);"
-                     tooltiptext="&inspectCloseButton.tooltiptext;"/>
-#endif
-      <toolbarbutton id="inspector-inspect-toolbutton"
-                     class="devtools-toolbarbutton"
-                     command="Inspector:Inspect"/>
-      <toolbarbutton id="inspector-treepanel-toolbutton"
-                     class="devtools-toolbarbutton"
-                     tabindex="0"
-                     aria-label="&markupButton.arialabel;"
-                     accesskey="&markupButton.accesskey;"
-                     command="Inspector:HTMLPanel"/>
-      <arrowscrollbox id="inspector-breadcrumbs"
-                      flex="1" orient="horizontal"
-                      clicktoscroll="true"/>
-      <hbox id="inspector-tools">
-        <toolbarbutton id="inspector-3D-button"
-                       class="devtools-toolbarbutton"
-                       hidden="true"
-                       label="&inspect3DViewButton.label;"
-                       accesskey="&inspect3DViewButton.accesskey;"
-                       tabindex="0"
-                       command="Inspector:Tilt"/>
-        <toolbarbutton id="inspector-style-button"
-                       class="devtools-toolbarbutton"
-                       label="&inspectStyleButton.label;"
-                       accesskey="&inspectStyleButton.accesskey;"
-                       tabindex="0"
-                       command="Inspector:Sidebar"/>
-        <!-- registered tools go here -->
-      </hbox>
-#ifndef XP_MACOSX
-      <toolbarbutton id="highlighter-closebutton"
-                     class="devtools-closebutton"
-                     oncommand="InspectorUI.closeInspectorUI(false);"
-                     tooltiptext="&inspectCloseButton.tooltiptext;"/>
-#endif
-    </toolbar>
-
     <toolbar id="developer-toolbar"
              class="devtools-toolbar"
              hidden="true">
 #ifdef XP_MACOSX
           <toolbarbutton id="developer-toolbar-closebutton"
                          class="devtools-closebutton"
                          oncommand="DeveloperToolbar.hide();"
                          tooltiptext="&devToolbarCloseButton.tooltiptext;"/>
 #endif
           <stack class="gclitoolbar-stack-node" flex="1">
             <hbox class="gclitoolbar-prompt">
               <label class="gclitoolbar-prompt-label">&#187;</label>
             </hbox>
             <hbox class="gclitoolbar-complete-node"/>
             <textbox class="gclitoolbar-input-node" rows="1"/>
           </stack>
-          <toolbarbutton id="developer-toolbar-webconsole"
+          <toolbarbutton id="developer-toolbar-toolbox-button"
                          class="developer-toolbar-button"
-                         observes="devtoolsMenuBroadcaster_WebConsole"/>
-          <toolbarbutton id="developer-toolbar-inspector"
-                         class="developer-toolbar-button"
-                         observes="devtoolsMenuBroadcaster_Inspect"/>
-          <toolbarbutton id="developer-toolbar-styleeditor"
-                         class="developer-toolbar-button"
-                         observes="devtoolsMenuBroadcaster_StyleEditor"/>
-          <toolbarbutton id="developer-toolbar-debugger"
-                         class="developer-toolbar-button"
-                         observes="devtoolsMenuBroadcaster_Debugger"/>
-          <toolbarbutton id="developer-toolbar-other-tools"
-                         type="menu"
-                         class="developer-toolbar-button"
-                         label="&devToolbarOtherToolsButton.label;">
-            <menupopup position="before_end">
-               <menuitem observes="devtoolsMenuBroadcaster_DevToolbar"/>
-               <menuitem observes="devtoolsMenuBroadcaster_ResponsiveUI"/>
-               <menuitem observes="devtoolsMenuBroadcaster_RemoteDebugger"/>
-               <menuitem observes="devtoolsMenuBroadcaster_ChromeDebugger"/>
-               <menuitem observes="devtoolsMenuBroadcaster_Scratchpad"/>
-               <menuitem observes="devtoolsMenuBroadcaster_StyleEditor"/>
-               <menuitem observes="devtoolsMenuBroadcaster_PageSource"/>
-               <menuitem observes="devtoolsMenuBroadcaster_ErrorConsole"/>
-               <menuseparator/>
-               <menuitem observes="devtoolsMenuBroadcaster_GetMoreTools"/>
-            </menupopup>
-          </toolbarbutton>
-
+                         observes="devtoolsMenuBroadcaster_DevToolbox"/>
 #ifndef XP_MACOSX
           <toolbarbutton id="developer-toolbar-closebutton"
                          class="devtools-closebutton"
                          oncommand="DeveloperToolbar.hide();"
                          tooltiptext="&devToolbarCloseButton.tooltiptext;"/>
 #endif
    </toolbar>
 
diff --git a/browser/base/content/highlighter.css b/browser/base/content/highlighter.css
--- a/browser/base/content/highlighter.css
+++ b/browser/base/content/highlighter.css
@@ -1,131 +1,104 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
  
-#highlighter-container {
+.highlighter-container {
   pointer-events: none;
 }
 
-#highlighter-controls {
+.highlighter-controls {
   position: absolute;
   top: 0;
   left: 0;
 }
 
-#highlighter-outline-container {
+.highlighter-outline-container {
   overflow: hidden;
   position: relative;
 }
 
-#highlighter-outline {
+.highlighter-outline {
   position: absolute;
 }
 
-#highlighter-outline[hidden] {
+.highlighter-outline[hidden] {
   opacity: 0;
   pointer-events: none;
   display: -moz-box;
 }
 
-#highlighter-outline:not([disable-transitions]) {
+.highlighter-outline:not([disable-transitions]) {
   transition-property: opacity, top, left, width, height;
   transition-duration: 0.1s;
   transition-timing-function: linear;
 }
 
-.inspector-breadcrumbs-button {
-  direction: ltr;
-}
-
 /*
  * Node Infobar
  */
 
-#highlighter-nodeinfobar-container {
+.highlighter-nodeinfobar-container {
   position: absolute;
   max-width: 95%;
 }
 
-#highlighter-nodeinfobar-container[hidden] {
+.highlighter-nodeinfobar-container[hidden] {
   opacity: 0;
   pointer-events: none;
   display: -moz-box;
 }
 
-#highlighter-nodeinfobar-container:not([disable-transitions]),
-#highlighter-nodeinfobar-container[disable-transitions][force-transitions] {
+.highlighter-nodeinfobar-container:not([disable-transitions]),
+.highlighter-nodeinfobar-container[disable-transitions][force-transitions] {
   transition-property: transform, opacity, top, left;
   transition-duration: 0.1s;
   transition-timing-function: linear;
 }
 
-#highlighter-nodeinfobar-text {
+.highlighter-nodeinfobar-text {
   overflow: hidden;
   white-space: nowrap;
   text-overflow: ellipsis;
   direction: ltr;
 }
 
 .highlighter-nodeinfobar-button > .toolbarbutton-text {
   display: none;
 }
 
-#highlighter-nodeinfobar-container:not([locked]):not(:hover) > #highlighter-nodeinfobar > .highlighter-nodeinfobar-button {
+.highlighter-nodeinfobar-container:not([locked]):not(:hover) > .highlighter-nodeinfobar > .highlighter-nodeinfobar-button {
   visibility: hidden;
 }
 
-#highlighter-nodeinfobar-container[locked] > #highlighter-nodeinfobar,
-#highlighter-nodeinfobar-container:not([locked]):hover > #highlighter-nodeinfobar {
+.highlighter-nodeinfobar-container[locked] > .highlighter-nodeinfobar,
+.highlighter-nodeinfobar-container:not([locked]):hover > .highlighter-nodeinfobar {
   pointer-events: auto;
 }
 
-html|*#highlighter-nodeinfobar-id,
-html|*#highlighter-nodeinfobar-classes,
-html|*#highlighter-nodeinfobar-pseudo-classes,
-html|*#highlighter-nodeinfobar-tagname {
+html|*.highlighter-nodeinfobar-id,
+html|*.highlighter-nodeinfobar-classes,
+html|*.highlighter-nodeinfobar-pseudo-classes,
+html|*.highlighter-nodeinfobar-tagname {
   -moz-user-select: text;
   cursor: text;
 }
 
 .highlighter-nodeinfobar-arrow {
   display: none;
 }
 
-#highlighter-nodeinfobar-container[position="top"]:not([hide-arrow]) > #highlighter-nodeinfobar-arrow-bottom {
+.highlighter-nodeinfobar-container[position="top"]:not([hide-arrow]) > .highlighter-nodeinfobar-arrow-bottom {
   display: block;
 }
 
-#highlighter-nodeinfobar-container[position="bottom"]:not([hide-arrow]) > #highlighter-nodeinfobar-arrow-top {
+.highlighter-nodeinfobar-container[position="bottom"]:not([hide-arrow]) > .highlighter-nodeinfobar-arrow-top {
   display: block;
 }
 
-#highlighter-nodeinfobar-container[disabled] {
+.highlighter-nodeinfobar-container[disabled] {
   visibility: hidden;
 }
 
-html|*#highlighter-nodeinfobar-tagname {
+html|*.highlighter-nodeinfobar-tagname {
   text-transform: lowercase;
 }
-
-.devtools-toolbarbutton:not([label]) > .toolbarbutton-text {
-  display: none;
-}
-
-#inspector-option-toolbarbutton > .toolbarbutton-menu-dropmarker {
-  display: none;
-}
-
-#inspector-layoutview-container > iframe {
-  /* header size */
-  height: 28px;
-}
-
-#inspector-layoutview-container:not([disable-transitions]) > iframe {
-  transition-property: height;
-  transition-duration: 0.2s;
-}
-
-#inspector-layoutview-container > iframe[open] {
-  /* header size + layout view size: 28px + 145px */
-  height: 173px;
-}
diff --git a/browser/base/content/nsContextMenu.js b/browser/base/content/nsContextMenu.js
--- a/browser/base/content/nsContextMenu.js
+++ b/browser/base/content/nsContextMenu.js
@@ -407,21 +407,29 @@ nsContextMenu.prototype = {
         this.setItemAttr("context-video-showstats", "disabled", hasError);
         this.setItemAttr("context-video-hidestats", "disabled", hasError);
       }
     }
     this.showItem("context-media-sep-commands",  onMedia);
   },
 
   inspectNode: function CM_inspectNode() {
-    if (InspectorUI.isTreePanelOpen) {
-      InspectorUI.inspectNode(this.target);
-      InspectorUI.stopInspecting();
+    let gBrowser = this.browser.ownerDocument.defaultView.gBrowser;
+    let imported = {};
+    Cu.import("resource:///modules/devtools/Target.jsm", imported);
+    var target = imported.TargetFactory.forTab(gBrowser.selectedTab);
+    let inspector = gDevTools.getPanelForTarget("inspector", target);
+    if (inspector && inspector.isReady) {
+      inspector.selection.setNode(this.target);
     } else {
-      InspectorUI.openInspectorUI(this.target);
+      let toolbox = gDevTools.openToolboxForTab(target, "inspector");
+      toolbox.once("inspector-ready", function(event, panel) {
+        let inspector = gDevTools.getPanelForTarget("inspector", target);
+        inspector.selection.setNode(this.target, "browser-context-menu");
+      }.bind(this));
     }
   },
 
   // Set various context menu attributes based on the state of the world.
   setTarget: function (aNode, aRangeParent, aRangeOffset) {
     const xulNS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
     if (aNode.namespaceURI == xulNS ||
         aNode.nodeType == Node.DOCUMENT_NODE ||
diff --git a/browser/devtools/Makefile.in b/browser/devtools/Makefile.in
--- a/browser/devtools/Makefile.in
+++ b/browser/devtools/Makefile.in
@@ -8,24 +8,25 @@ topsrcdir = @top_srcdir@
 srcdir    = @srcdir@
 VPATH   = @srcdir@
 
 include $(DEPTH)/config/autoconf.mk
 
 include $(topsrcdir)/config/config.mk
 
 DIRS = \
-  highlighter \
+  inspector \
   markupview \
   webconsole \
   commandline \
   sourceeditor \
   styleeditor \
   styleinspector \
   tilt \
   scratchpad \
   debugger \
   layoutview \
   shared \
   responsivedesign \
+  framework \
   $(NULL)
 
 include $(topsrcdir)/config/rules.mk
diff --git a/browser/devtools/commandline/CmdBreak.jsm b/browser/devtools/commandline/CmdBreak.jsm
--- a/browser/devtools/commandline/CmdBreak.jsm
+++ b/browser/devtools/commandline/CmdBreak.jsm
@@ -7,16 +7,22 @@ const { classes: Cc, interfaces: Ci, uti
 this.EXPORTED_SYMBOLS = [ ];
 
 Cu.import("resource:///modules/devtools/gcli.jsm");
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "HUDService",
                                   "resource:///modules/HUDService.jsm");
 
+XPCOMUtils.defineLazyModuleGetter(this, "TargetFactory",
+                                  "resource:///modules/devtools/Target.jsm");
+
+XPCOMUtils.defineLazyModuleGetter(this, "gDevTools",
+                                  "resource:///modules/devtools/gDevTools.jsm");
+
 /**
  * 'break' command
  */
 gcli.addCommand({
   name: "break",
   description: gcli.lookup("breakDesc"),
   manual: gcli.lookup("breakManual")
 });
@@ -25,22 +31,25 @@ gcli.addCommand({
 /**
  * 'break list' command
  */
 gcli.addCommand({
   name: "break list",
   description: gcli.lookup("breaklistDesc"),
   returnType: "html",
   exec: function(args, context) {
-    let win = HUDService.currentContext();
-    let dbg = win.DebuggerUI.getDebugger();
+    let gBrowser = context.environment.chromeDocument.defaultView.gBrowser;
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    let dbg = gDevTools.getPanelForTarget("jsdebugger", target);
+
     if (!dbg) {
       return gcli.lookup("breakaddDebuggerStopped");
     }
-    let breakpoints = dbg.breakpoints;
+
+    let breakpoints = dbg.getAllBreakpoints();
 
     if (Object.keys(breakpoints).length === 0) {
       return gcli.lookup("breaklistNone");
     }
 
     let reply = gcli.lookup("breaklistIntro");
     reply += "<ol>";
     for each (let breakpoint in breakpoints) {
@@ -71,21 +80,23 @@ gcli.addCommand({
   name: "break add line",
   description: gcli.lookup("breakaddlineDesc"),
   params: [
     {
       name: "file",
       type: {
         name: "selection",
         data: function() {
-          let win = HUDService.currentContext();
-          let dbg = win.DebuggerUI.getDebugger();
+          let gBrowser = HUDService.currentContext().gBrowser;
+          let target = TargetFactory.forTab(gBrowser.selectedTab);
+          let dbg = gDevTools.getPanelForTarget("jsdebugger", target);
+
           let files = [];
           if (dbg) {
-            let sourcesView = dbg.contentWindow.DebuggerView.Sources;
+            let sourcesView = dbg.panelWin.DebuggerView.Sources;
             for (let item in sourcesView) {
               files.push(item.value);
             }
           }
           return files;
         }
       },
       description: gcli.lookup("breakaddlineFileDesc")
@@ -94,18 +105,21 @@ gcli.addCommand({
       name: "line",
       type: { name: "number", min: 1, step: 10 },
       description: gcli.lookup("breakaddlineLineDesc")
     }
   ],
   returnType: "html",
   exec: function(args, context) {
     args.type = "line";
-    let win = HUDService.currentContext();
-    let dbg = win.DebuggerUI.getDebugger();
+
+    let gBrowser = context.environment.chromeDocument.defaultView.gBrowser;
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    let dbg = gDevTools.getPanelForTarget("jsdebugger", target);
+
     if (!dbg) {
       return gcli.lookup("breakaddDebuggerStopped");
     }
     var promise = context.createPromise();
     let position = { url: args.file, line: args.line };
     dbg.addBreakpoint(position, function(aBreakpoint, aError) {
       if (aError) {
         promise.resolve(gcli.lookupFormat("breakaddFailed", [aError]));
@@ -126,37 +140,41 @@ gcli.addCommand({
   description: gcli.lookup("breakdelDesc"),
   params: [
     {
       name: "breakid",
       type: {
         name: "number",
         min: 0,
         max: function() {
-          let win = HUDService.currentContext();
-          let dbg = win.DebuggerUI.getDebugger();
+          let gBrowser = context.environment.chromeDocument.defaultView.gBrowser;
+          let target = TargetFactory.forTab(gBrowser.selectedTab);
+          let dbg = gDevTools.getPanelForTarget("jsdebugger", target);
+
           if (!dbg) {
             return gcli.lookup("breakaddDebuggerStopped");
           }
-          return Object.keys(dbg.breakpoints).length - 1;
+          return Object.keys(dbg.getAllBreakpoints()).length - 1;
         },
       },
       description: gcli.lookup("breakdelBreakidDesc")
     }
   ],
   returnType: "html",
   exec: function(args, context) {
-    let win = HUDService.currentContext();
-    let dbg = win.DebuggerUI.getDebugger();
+    let gBrowser = context.environment.chromeDocument.defaultView.gBrowser;
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    let dbg = gDevTools.getPanelForTarget("jsdebugger", target);
+
     if (!dbg) {
       return gcli.lookup("breakaddDebuggerStopped");
     }
 
-    let breakpoints = dbg.breakpoints;
-    let id = Object.keys(dbg.breakpoints)[args.breakid];
+    let breakpoints = dbg.getAllBreakpoints();
+    let id = Object.keys(breakpoints)[args.breakid];
     if (!id || !(id in breakpoints)) {
       return gcli.lookup("breakNotFound");
     }
 
     let promise = context.createPromise();
     try {
       dbg.removeBreakpoint(breakpoints[id], function() {
         promise.resolve(gcli.lookup("breakdelRemoved"));
diff --git a/browser/devtools/commandline/CmdCalllog.jsm b/browser/devtools/commandline/CmdCalllog.jsm
--- a/browser/devtools/commandline/CmdCalllog.jsm
+++ b/browser/devtools/commandline/CmdCalllog.jsm
@@ -4,29 +4,32 @@
 
 const { classes: Cc, interfaces: Ci, utils: Cu } = Components;
 
 this.EXPORTED_SYMBOLS = [ ];
 
 Cu.import("resource:///modules/devtools/gcli.jsm");
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 
-XPCOMUtils.defineLazyModuleGetter(this, "HUDService",
-                                  "resource:///modules/HUDService.jsm");
+XPCOMUtils.defineLazyModuleGetter(this, "gDevTools",
+                                  "resource:///modules/devtools/gDevTools.jsm");
 
 XPCOMUtils.defineLazyGetter(this, "Debugger", function() {
   let JsDebugger = {};
   Components.utils.import("resource://gre/modules/jsdebugger.jsm", JsDebugger);
 
   let global = Components.utils.getGlobalForObject({});
   JsDebugger.addDebuggerToGlobal(global);
 
   return global.Debugger;
 });
 
+XPCOMUtils.defineLazyModuleGetter(this, "TargetFactory",
+                                  "resource:///modules/devtools/Target.jsm");
+
 let debuggers = [];
 
 /**
  * 'calllog' command
  */
 gcli.addCommand({
   name: "calllog",
   description: gcli.lookup("calllogDesc")
@@ -45,18 +48,19 @@ gcli.addCommand({
     let dbg = new Debugger(contentWindow);
     dbg.onEnterFrame = function(frame) {
       // BUG 773652 -  Make the output from the GCLI calllog command nicer
       contentWindow.console.log("Method call: " + this.callDescription(frame));
     }.bind(this);
 
     debuggers.push(dbg);
 
-    let tab = context.environment.chromeDocument.defaultView.gBrowser.selectedTab;
-    HUDService.activateHUDForContext(tab);
+    let gBrowser = context.environment.chromeDocument.defaultView.gBrowser;
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    gDevTools.openToolboxForTab(target, "webconsole");
 
     return gcli.lookup("calllogStartReply");
   },
 
   callDescription: function(frame) {
     let name = "<anonymous>";
     if (frame.callee.name) {
       name = frame.callee.name;
diff --git a/browser/devtools/commandline/CmdCalllogChrome.jsm b/browser/devtools/commandline/CmdCalllogChrome.jsm
--- a/browser/devtools/commandline/CmdCalllogChrome.jsm
+++ b/browser/devtools/commandline/CmdCalllogChrome.jsm
@@ -5,18 +5,20 @@
 
 this.EXPORTED_SYMBOLS = [ ];
 
 const { classes: Cc, interfaces: Ci, utils: Cu } = Components;
 
 Cu.import("resource:///modules/devtools/gcli.jsm");
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 
-XPCOMUtils.defineLazyModuleGetter(this, "HUDService",
-                                  "resource:///modules/HUDService.jsm");
+XPCOMUtils.defineLazyModuleGetter(this, "gDevTools",
+                                  "resource:///modules/devtools/gDevTools.jsm");
+XPCOMUtils.defineLazyModuleGetter(this, "TargetFactory",
+                                  "resource:///modules/devtools/Target.jsm");
 
 XPCOMUtils.defineLazyGetter(this, "Debugger", function() {
   let JsDebugger = {};
   Cu.import("resource://gre/modules/jsdebugger.jsm", JsDebugger);
 
   let global = Components.utils.getGlobalForObject({});
   JsDebugger.addDebuggerToGlobal(global);
 
@@ -103,18 +105,19 @@ gcli.addCommand({
     debuggers.push(dbg);
 
     dbg.onEnterFrame = function(frame) {
       // BUG 773652 -  Make the output from the GCLI calllog command nicer
       contentWindow.console.log(gcli.lookup("callLogChromeMethodCall") +
                                 ": " + this.callDescription(frame));
     }.bind(this);
 
-    let tab = context.environment.chromeDocument.defaultView.gBrowser.selectedTab;
-    HUDService.activateHUDForContext(tab);
+    let gBrowser = context.environment.chromeDocument.defaultView.gBrowser;
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    gDevTools.openToolboxForTab(target, "webconsole");
 
     return gcli.lookup("calllogChromeStartReply");
   },
 
   valueToString: function(value) {
     if (typeof value !== "object" || value === null)
       return uneval(value);
     return "[object " + value.class + "]";
diff --git a/browser/devtools/commandline/CmdConsole.jsm b/browser/devtools/commandline/CmdConsole.jsm
--- a/browser/devtools/commandline/CmdConsole.jsm
+++ b/browser/devtools/commandline/CmdConsole.jsm
@@ -6,16 +6,20 @@ const { classes: Cc, interfaces: Ci, uti
 
 this.EXPORTED_SYMBOLS = [ ];
 
 Cu.import("resource:///modules/devtools/gcli.jsm");
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "HUDService",
                                   "resource:///modules/HUDService.jsm");
+XPCOMUtils.defineLazyModuleGetter(this, "gDevTools",
+                                  "resource:///modules/devtools/gDevTools.jsm");
+XPCOMUtils.defineLazyModuleGetter(this, "TargetFactory",
+                                  "resource:///modules/devtools/Target.jsm");
 
 /**
  * 'console' command
  */
 gcli.addCommand({
   name: "console",
   description: gcli.lookup("consoleDesc"),
   manual: gcli.lookup("consoleManual")
@@ -39,24 +43,26 @@ gcli.addCommand({
 
 /**
  * 'console close' command
  */
 gcli.addCommand({
   name: "console close",
   description: gcli.lookup("consolecloseDesc"),
   exec: function Command_consoleClose(args, context) {
-    let tab = context.environment.chromeDocument.defaultView.gBrowser.selectedTab
-    HUDService.deactivateHUDForContext(tab);
+    let gBrowser = context.environment.chromeDocument.defaultView.gBrowser;
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    gDevTools.closeToolbox(target);
   }
 });
 
 /**
  * 'console open' command
  */
 gcli.addCommand({
   name: "console open",
   description: gcli.lookup("consoleopenDesc"),
   exec: function Command_consoleOpen(args, context) {
-    let tab = context.environment.chromeDocument.defaultView.gBrowser.selectedTab
-    HUDService.activateHUDForContext(tab);
+    let gBrowser = context.environment.chromeDocument.defaultView.gBrowser;
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    gDevTools.openToolboxForTab(target, "webconsole");
   }
 });
diff --git a/browser/devtools/commandline/CmdDbg.jsm b/browser/devtools/commandline/CmdDbg.jsm
--- a/browser/devtools/commandline/CmdDbg.jsm
+++ b/browser/devtools/commandline/CmdDbg.jsm
@@ -4,16 +4,21 @@
 
 const { classes: Cc, interfaces: Ci, utils: Cu } = Components;
 
 this.EXPORTED_SYMBOLS = [ ];
 
 Cu.import("resource:///modules/devtools/gcli.jsm");
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 
+XPCOMUtils.defineLazyModuleGetter(this, "gDevTools",
+                                  "resource:///modules/devtools/gDevTools.jsm");
+XPCOMUtils.defineLazyModuleGetter(this, "TargetFactory",
+                                  "resource:///modules/devtools/Target.jsm");
+
 /**
  * 'dbg' command
  */
 gcli.addCommand({
   name: "dbg",
   description: gcli.lookup("dbgDesc"),
   manual: gcli.lookup("dbgManual")
 });
@@ -21,84 +26,76 @@ gcli.addCommand({
 /**
  * 'dbg open' command
  */
 gcli.addCommand({
   name: "dbg open",
   description: gcli.lookup("dbgOpen"),
   params: [],
   exec: function (args, context) {
-    let win = context.environment.chromeDocument.defaultView;
-    let tab = win.gBrowser.selectedTab;
-    let dbg = win.DebuggerUI.findDebugger();
-
-    if (dbg) {
-      if (dbg.ownerTab !== tab) {
-        win.DebuggerUI.toggleDebugger();
-      }
-
-      return;
-    }
-
-    win.DebuggerUI.toggleDebugger();
+    let gBrowser = context.environment.chromeDocument.defaultView.gBrowser;
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    gDevTools.openToolboxForTab(target, "jsdebugger");
   }
 });
 
 /**
  * 'dbg close' command
  */
 gcli.addCommand({
   name: "dbg close",
   description: gcli.lookup("dbgClose"),
   params: [],
   exec: function (args, context) {
-    let win = context.environment.chromeDocument.defaultView;
-    let tab = win.gBrowser.selectedTab;
-    let dbg = win.DebuggerUI.findDebugger();
+    let gBrowser = context.environment.chromeDocument.defaultView.gBrowser;
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    let dbg = gDevTools.getPanelForTarget("jsdebugger", target);
 
-    if (dbg) {
-      dbg.close();
+    if (dbg /* FIXME: and debugger panel is currently active */) {
+      gDevTools.closeToolbox(target);
     }
   }
 });
 
 /**
  * 'dbg interrupt' command
  */
 gcli.addCommand({
   name: "dbg interrupt",
   description: gcli.lookup("dbgInterrupt"),
   params: [],
   exec: function(args, context) {
-    let win = context.environment.chromeDocument.defaultView;
-    let dbg = win.DebuggerUI.getDebugger();
+    let gBrowser = context.environment.chromeDocument.defaultView.gBrowser;
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    let dbg = gDevTools.getPanelForTarget("jsdebugger", target);
 
     if (dbg) {
-      let controller = dbg.contentWindow.DebuggerController;
+      let controller = dbg._controller;
       let thread = controller.activeThread;
       if (!thread.paused) {
         thread.interrupt();
       }
     }
   }
 });
 
 /**
  * 'dbg continue' command
  */
 gcli.addCommand({
   name: "dbg continue",
   description: gcli.lookup("dbgContinue"),
   params: [],
   exec: function(args, context) {
-    let win = context.environment.chromeDocument.defaultView;
-    let dbg = win.DebuggerUI.getDebugger();
+    let gBrowser = context.environment.chromeDocument.defaultView.gBrowser;
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    let dbg = gDevTools.getPanelForTarget("jsdebugger", target);
 
     if (dbg) {
-      let controller = dbg.contentWindow.DebuggerController;
+      let controller = dbg._controller;
       let thread = controller.activeThread;
       if (thread.paused) {
         thread.resume();
       }
     }
   }
 });
 
@@ -116,62 +113,65 @@ gcli.addCommand({
 /**
  * 'dbg step over' command
  */
 gcli.addCommand({
   name: "dbg step over",
   description: gcli.lookup("dbgStepOverDesc"),
   params: [],
   exec: function(args, context) {
-    let win = context.environment.chromeDocument.defaultView;
-    let dbg = win.DebuggerUI.getDebugger();
+    let gBrowser = context.environment.chromeDocument.defaultView.gBrowser;
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    let dbg = gDevTools.getPanelForTarget("jsdebugger", target);
 
     if (dbg) {
-      let controller = dbg.contentWindow.DebuggerController;
+      let controller = dbg._controller;
       let thread = controller.activeThread;
       if (thread.paused) {
         thread.stepOver();
       }
     }
   }
 });
 
 /**
  * 'dbg step in' command
  */
 gcli.addCommand({
   name: 'dbg step in',
   description: gcli.lookup("dbgStepInDesc"),
   params: [],
   exec: function(args, context) {
-    let win = context.environment.chromeDocument.defaultView;
-    let dbg = win.DebuggerUI.getDebugger();
+    let gBrowser = context.environment.chromeDocument.defaultView.gBrowser;
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    let dbg = gDevTools.getPanelForTarget("jsdebugger", target);
 
     if (dbg) {
-      let controller = dbg.contentWindow.DebuggerController;
+      let controller = dbg._controller;
       let thread = controller.activeThread;
       if (thread.paused) {
         thread.stepIn();
       }
     }
   }
 });
 
 /**
  * 'dbg step over' command
  */
 gcli.addCommand({
   name: 'dbg step out',
   description: gcli.lookup("dbgStepOutDesc"),
   params: [],
   exec: function(args, context) {
-    let win = context.environment.chromeDocument.defaultView;
-    let dbg = win.DebuggerUI.getDebugger();
+    let gBrowser = context.environment.chromeDocument.defaultView.gBrowser;
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    let dbg = gDevTools.getPanelForTarget("jsdebugger", target);
 
     if (dbg) {
-      let controller = dbg.contentWindow.DebuggerController;
+      let controller = dbg._controller;
       let thread = controller.activeThread;
       if (thread.paused) {
         thread.stepOut();
       }
     }
   }
 });
diff --git a/browser/devtools/commandline/Commands.jsm b/browser/devtools/commandline/Commands.jsm
--- a/browser/devtools/commandline/Commands.jsm
+++ b/browser/devtools/commandline/Commands.jsm
@@ -19,8 +19,9 @@ Cu.import("resource:///modules/devtools/
 Cu.import("resource:///modules/devtools/CmdExport.jsm");
 Cu.import("resource:///modules/devtools/CmdInspect.jsm");
 Cu.import("resource:///modules/devtools/CmdJsb.jsm");
 Cu.import("resource:///modules/devtools/CmdPagemod.jsm");
 Cu.import("resource:///modules/devtools/CmdResize.jsm");
 Cu.import("resource:///modules/devtools/CmdRestart.jsm");
 Cu.import("resource:///modules/devtools/CmdScreenshot.jsm");
 Cu.import("resource:///modules/devtools/CmdTilt.jsm");
+Cu.import("resource:///modules/devtools/CmdScratchpad.jsm");
diff --git a/browser/devtools/commandline/test/browser_dbg_cmd.js b/browser/devtools/commandline/test/browser_dbg_cmd.js
--- a/browser/devtools/commandline/test/browser_dbg_cmd.js
+++ b/browser/devtools/commandline/test/browser_dbg_cmd.js
@@ -1,82 +1,97 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+let tempScope = {};
+Cu.import("resource:///modules/devtools/Target.jsm", tempScope);
+let TargetFactory = tempScope.TargetFactory;
+
 function test() {
   const TEST_URI = "http://example.com/browser/browser/devtools/commandline/" +
                    "test/browser_dbg_cmd.html";
 
   DeveloperToolbarTest.test(TEST_URI, function() {
     testDbgCmd();
   });
 }
 
-function testDbgCmd() {
-  DeveloperToolbarTest.exec({
-    typed: "dbg open",
-    blankOutput: true
-  });
+function testCommands(dbg, cmd) {
+  // Wait for the initial resume...
+  dbg._controller.activeThread.addOneTimeListener("resumed", function () {
+    info("Starting tests.");
 
-  let pane = DebuggerUI.findDebugger();
-  ok(pane, "Debugger was opened.");
-  let frame = pane._frame;
+    let contentDoc = content.window.document;
+    let output = contentDoc.querySelector("input[type=text]");
+    let btnDoit = contentDoc.querySelector("input[type=button]");
 
-  frame.addEventListener("Debugger:Connected", function dbgConnected(aEvent) {
-    frame.removeEventListener("Debugger:Connected", dbgConnected, true);
-
-    // Wait for the initial resume...
-    aEvent.target.ownerDocument.defaultView.gClient
-        .addOneTimeListener("resumed", function() {
-
-      info("Starting tests.");
-
-      let contentDoc = content.window.document;
-      let output = contentDoc.querySelector("input[type=text]");
-      let btnDoit = contentDoc.querySelector("input[type=button]");
-
-      cmd("dbg interrupt", function() {
-        ok(true, "debugger is paused");
-        pane.contentWindow.gClient.addOneTimeListener("resumed", function() {
-          ok(true, "debugger continued");
-          pane.contentWindow.gClient.addOneTimeListener("paused", function() {
+    cmd("dbg interrupt", function() {
+      ok(true, "debugger is paused");
+      dbg._controller.activeThread.addOneTimeListener("resumed", function () {
+        ok(true, "debugger continued");
+        dbg._controller.activeThread.addOneTimeListener("paused", function() {
+          cmd("dbg step in", function() {
             cmd("dbg step in", function() {
               cmd("dbg step in", function() {
-                cmd("dbg step in", function() {
-                  is(output.value, "step in", "debugger stepped in");
-                  cmd("dbg step over", function() {
-                    is(output.value, "step over", "debugger stepped over");
-                    cmd("dbg step out", function() {
-                      is(output.value, "step out", "debugger stepped out");
+                is(output.value, "step in", "debugger stepped in");
+                cmd("dbg step over", function() {
+                  is(output.value, "step over", "debugger stepped over");
+                  cmd("dbg step out", function() {
+                    is(output.value, "step out", "debugger stepped out");
+                    cmd("dbg continue", function() {
                       cmd("dbg continue", function() {
-                        cmd("dbg continue", function() {
-                          is(output.value, "dbg continue", "debugger continued");
-                          DeveloperToolbarTest.exec({
-                            typed: "dbg close",
-                            blankOutput: true
-                          });
+                        is(output.value, "dbg continue", "debugger continued");
+                        DeveloperToolbarTest.exec({
+                          typed: "dbg close",
+                          blankOutput: true
+                        });
 
-                          let dbg = DebuggerUI.findDebugger();
-                          ok(!dbg, "Debugger was closed.");
-                          finish();
-                        });
+                        let target = TargetFactory.forTab(gBrowser.selectedTab);
+                        ok(!gDevTools.getToolboxForTarget(target),
+                          "Debugger was closed.");
+                        finish();
                       });
                     });
                   });
                 });
               });
             });
           });
-          EventUtils.sendMouseEvent({type:"click"}, btnDoit);
         });
-        DeveloperToolbarTest.exec({
-          typed: "dbg continue",
-          blankOutput: true
-        });
+        EventUtils.sendMouseEvent({type:"click"}, btnDoit);
+      });
+      DeveloperToolbarTest.exec({
+        typed: "dbg continue",
+        blankOutput: true
       });
     });
+  });
+}
+
+function testDbgCmd() {
+  DeveloperToolbarTest.exec({
+    typed: "dbg open",
+    blankOutput: true
+  });
+
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+  let toolbox = gDevTools.getToolboxForTarget(target);
+
+  toolbox.once("jsdebugger-ready", function dbgReady() {
+    let dbg = gDevTools.getPanelForTarget("jsdebugger", target);
+    ok(dbg, "DebuggerPanel exists");
 
     function cmd(aTyped, aCallback) {
-      pane.contentWindow.gClient.addOneTimeListener("paused", aCallback);
+      dbg._controller.activeThread.addOneTimeListener("paused", aCallback);
       DeveloperToolbarTest.exec({
         typed: aTyped,
         blankOutput: true
       });
     }
+
+    if (dbg._controller.activeThread) {
+      testCommands(dbg, cmd);
+    } else {
+      dbg.once("connected", testCommands.bind(null, dbg, cmd));
+    }
   });
 }
diff --git a/browser/devtools/commandline/test/browser_dbg_cmd_break.js b/browser/devtools/commandline/test/browser_dbg_cmd_break.js
--- a/browser/devtools/commandline/test/browser_dbg_cmd_break.js
+++ b/browser/devtools/commandline/test/browser_dbg_cmd_break.js
@@ -1,16 +1,20 @@
 /* Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // Tests that the break command works as it should
 
 const TEST_URI = "http://example.com/browser/browser/devtools/commandline/" +
                  "test/browser_dbg_cmd_break.html";
 
+let tempScope = {};
+Cu.import("resource:///modules/devtools/Target.jsm", tempScope);
+let TargetFactory = tempScope.TargetFactory;
+
 function test() {
   DeveloperToolbarTest.test(TEST_URI, [ testBreakCommands ]);
 }
 
 function testBreakCommands() {
   helpers.setInput('break');
   helpers.check({
     input:  'break',
@@ -30,91 +34,89 @@ function testBreakCommands() {
   helpers.setInput('break add line');
   helpers.check({
     input:  'break add line',
     hints:                ' <file> <line>',
     markup: 'VVVVVVVVVVVVVV',
     status: 'ERROR'
   });
 
-  let pane = DebuggerUI.toggleDebugger();
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+  let toolbox = gDevTools.openToolboxForTab(target, "jsdebugger");
+  toolbox.once("jsdebugger-ready", function dbgReady() {
+    let dbg = gDevTools.getPanelForTarget("jsdebugger", target);
+    ok(dbg, "DebuggerPanel exists");
+    dbg.once("connected", function() {
+      // Wait for the initial resume...
+      dbg.panelWin.gClient.addOneTimeListener("resumed", function() {
+        dbg._view.Variables.lazyEmpty = false;
 
-  var dbgConnected = DeveloperToolbarTest.checkCalled(function() {
-    pane._frame.removeEventListener("Debugger:Connected", dbgConnected, true);
-
-    // Wait for the initial resume.
-    let client = pane.contentWindow.gClient;
-
-    var resumed = DeveloperToolbarTest.checkCalled(function() {
-
-      var framesAdded = DeveloperToolbarTest.checkCalled(function() {
-        helpers.setInput('break add line ' + TEST_URI + ' ' + content.wrappedJSObject.line0);
-        helpers.check({
-          hints: '',
-          status: 'VALID',
-          args: {
-            file: { value: TEST_URI },
-            line: { value: content.wrappedJSObject.line0 },
-          }
-        });
-
-        DeveloperToolbarTest.exec({
-          args: {
-            type: 'line',
-            file: TEST_URI,
-            line: content.wrappedJSObject.line0
-          },
-          completed: false
-        });
-
-        helpers.setInput('break list');
-        helpers.check({
-          input:  'break list',
-          hints:            '',
-          markup: 'VVVVVVVVVV',
-          status: 'VALID'
-        });
-
-        DeveloperToolbarTest.exec();
-
-        var cleanup = DeveloperToolbarTest.checkCalled(function() {
-          helpers.setInput('break del 9');
+        var client = dbg.panelWin.gClient;
+        var framesAdded = DeveloperToolbarTest.checkCalled(function() {
+          helpers.setInput('break add line ' + TEST_URI + ' ' + content.wrappedJSObject.line0);
           helpers.check({
-            input:  'break del 9',
-            hints:             '',
-            markup: 'VVVVVVVVVVE',
-            status: 'ERROR',
-            args: {
-              breakid: { status: 'ERROR', message: '9 is greater than maximum allowed: 0.' },
-            }
-          });
-
-          helpers.setInput('break del 0');
-          helpers.check({
-            input:  'break del 0',
-            hints:             '',
-            markup: 'VVVVVVVVVVV',
+            hints: '',
             status: 'VALID',
             args: {
-              breakid: { value: 0 },
+              file: { value: TEST_URI },
+              line: { value: content.wrappedJSObject.line0 },
             }
           });
 
           DeveloperToolbarTest.exec({
-            args: { breakid: 0 },
+            args: {
+              type: 'line',
+              file: TEST_URI,
+              line: content.wrappedJSObject.line0
+            },
             completed: false
           });
+
+          helpers.setInput('break list');
+          helpers.check({
+            input:  'break list',
+            hints:            '',
+            markup: 'VVVVVVVVVV',
+            status: 'VALID'
+          });
+
+          DeveloperToolbarTest.exec();
+
+          var cleanup = DeveloperToolbarTest.checkCalled(function() {
+            helpers.setInput('break del 9');
+            helpers.check({
+              input:  'break del 9',
+              hints:             '',
+              markup: 'VVVVVVVVVVE',
+              status: 'ERROR',
+              args: {
+                breakid: { status: 'ERROR', message: '9 is greater than maximum allowed: 0.' },
+              }
+            });
+
+            helpers.setInput('break del 0');
+            helpers.check({
+              input:  'break del 0',
+              hints:             '',
+              markup: 'VVVVVVVVVVV',
+              status: 'VALID',
+              args: {
+                breakid: { value: 0 },
+              }
+            });
+
+            DeveloperToolbarTest.exec({
+              args: { breakid: 0 },
+              completed: false
+            });
+          });
+
+          client.activeThread.resume(cleanup);
         });
 
-        client.activeThread.resume(cleanup);
+        client.activeThread.addOneTimeListener("framesadded", framesAdded);
+
+        // Trigger newScript notifications using eval.
+        content.wrappedJSObject.firstCall();
       });
-
-      client.activeThread.addOneTimeListener("framesadded", framesAdded);
-
-      // Trigger newScript notifications using eval.
-      content.wrappedJSObject.firstCall();
     });
-
-    client.addOneTimeListener("resumed", resumed);
   });
-
-  pane._frame.addEventListener("Debugger:Connected", dbgConnected, true);
 }
diff --git a/browser/devtools/debugger/DebuggerPanel.jsm b/browser/devtools/debugger/DebuggerPanel.jsm
new file mode 100644
--- /dev/null
+++ b/browser/devtools/debugger/DebuggerPanel.jsm
@@ -0,0 +1,144 @@
+/* -*- Mode: javascript; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+"use strict";
+
+const { classes: Cc, interfaces: Ci, utils: Cu } = Components;
+
+this.EXPORTED_SYMBOLS = ["DebuggerDefinition"];
+
+const STRINGS_URI = "chrome://browser/locale/devtools/debugger.properties";
+
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+
+XPCOMUtils.defineLazyModuleGetter(this, "Services",
+                                  "resource://gre/modules/Services.jsm");
+XPCOMUtils.defineLazyModuleGetter(this, "EventEmitter",
+                                  "resource:///modules/devtools/EventEmitter.jsm");
+XPCOMUtils.defineLazyModuleGetter(this, "DebuggerServer",
+                                  "resource://gre/modules/devtools/dbg-server.jsm");
+XPCOMUtils.defineLazyModuleGetter(this, "gDevTools",
+                                  "resource:///modules/devtools/gDevTools.jsm");
+XPCOMUtils.defineLazyGetter(this, "_strings",
+  function() Services.strings.createBundle(STRINGS_URI));
+
+XPCOMUtils.defineLazyGetter(this, "osString", function() {
+  return Cc["@mozilla.org/xre/app-info;1"].getService(Ci.nsIXULRuntime).OS;
+});
+
+this.DebuggerDefinition = {
+  id: "jsdebugger",
+  key: l10n("open.commandkey"),
+  accesskey: l10n("debuggerMenu.accesskey"),
+  modifiers: osString == "Darwin" ? "accel,alt" : "accel,shift",
+  ordinal: 1,
+  killswitch: "devtools.debugger.enabled",
+  icon: "chrome://browser/skin/devtools/tools-icons-small.png",
+  url: "chrome://browser/content/debugger.xul",
+  label: l10n("ToolboxDebugger.label"),
+
+  isTargetSupported: function(target) {
+    return true;
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new DebuggerPanel(iframeWindow, toolbox);
+  }
+};
+
+
+function DebuggerPanel(iframeWindow, toolbox) {
+  this._toolbox = toolbox;
+  this._controller = iframeWindow.DebuggerController;
+  this._view = iframeWindow.DebuggerView;
+  this._controller._target = this.target;
+  this._bkp = this._controller.Breakpoints;
+  this.panelWin = iframeWindow;
+
+  this._ensureOnlyOneRunningDebugger();
+  if (!this.target.isRemote) {
+    if (!DebuggerServer.initialized) {
+      DebuggerServer.init();
+      DebuggerServer.addBrowserActors();
+    }
+  }
+
+  let onDebuggerLoaded = function () {
+    iframeWindow.removeEventListener("Debugger:Loaded", onDebuggerLoaded, true);
+    this.setReady();
+  }.bind(this);
+
+  let onDebuggerConnected = function () {
+    iframeWindow.removeEventListener("Debugger:Connected",
+      onDebuggerConnected, true);
+    this.emit("connected");
+  }.bind(this);
+
+  iframeWindow.addEventListener("Debugger:Loaded", onDebuggerLoaded, true);
+  iframeWindow.addEventListener("Debugger:Connected",
+    onDebuggerConnected, true);
+
+  new EventEmitter(this);
+}
+
+DebuggerPanel.prototype = {
+  // DevToolPanel API
+  get target() this._toolbox.target,
+
+  get isReady() this._isReady,
+
+  setReady: function() {
+    this._isReady = true;
+    this.emit("ready");
+  },
+
+  destroy: function() {
+    delete this._toolbox;
+    delete this._target;
+    delete this._controller;
+    delete this._view;
+    delete this._bkp;
+    delete this.panelWin;
+  },
+
+  // DebuggerPanel API
+
+  addBreakpoint: function() {
+    this._bkp.addBreakpoint.apply(this._bkp, arguments);
+  },
+
+  removeBreakpoint: function() {
+    this._bkp.removeBreakpoint.apply(this._bkp, arguments);
+  },
+
+  getBreakpoint: function() {
+    return this._bkp.getBreakpoint.apply(this._bkp, arguments);
+  },
+
+  getAllBreakpoints: function() {
+    return this._bkp.store;
+  },
+
+  // Private
+
+  _ensureOnlyOneRunningDebugger: function() {
+    // FIXME
+  },
+};
+
+/**
+ * Lookup l10n string from a string bundle.
+ * @param {string} aName The key to lookup.
+ * @returns A localized version of the given key.
+ */
+function l10n(aName)
+{
+  try {
+    return _strings.GetStringFromName(aName);
+  } catch (ex) {
+    Services.console.logStringMessage("Error reading '" + aName + "'");
+    throw new Error("l10n error with " + aName);
+  }
+}
diff --git a/browser/devtools/debugger/debugger-controller.js b/browser/devtools/debugger/debugger-controller.js
--- a/browser/devtools/debugger/debugger-controller.js
+++ b/browser/devtools/debugger/debugger-controller.js
@@ -43,16 +43,17 @@ let DebuggerController = {
   /**
    * Initializes the view and connects a debugger client to the server.
    */
   _startupDebugger: function DC__startupDebugger() {
     if (this._isInitialized) {
       return;
     }
     this._isInitialized = true;
+
     window.removeEventListener("load", this._startupDebugger, true);
 
     DebuggerView.initialize(function() {
       DebuggerView._isInitialized = true;
 
       window.dispatchEvent("Debugger:Loaded");
       this._connect();
     }.bind(this));
@@ -140,54 +141,74 @@ let DebuggerController = {
       Prefs.remoteHost + ":" + Prefs.remotePort);
   },
 
   /**
    * Initializes a debugger client and connects it to the debugger server,
    * wiring event handlers as necessary.
    */
   _connect: function DC__connect() {
-    if (window._isRemoteDebugger && !this._prepareConnection()) {
+    function callback() {
+      window.dispatchEvent("Debugger:Connected");
+    }
+
+    let client;
+    // Remote debugging gets the debuggee from a RemoteTarget object.
+    if (this._target.isRemote) {
+      client = this.client = this._target.client;
+
+      this._target.on("close", this._onTabDetached);
+      this._target.on("navigate", this._onTabNavigated);
+
+      if (this._target.chrome) {
+        let dbg = this._target.form.chromeDebugger;
+        this._startChromeDebugging(client, dbg, callback);
+      } else {
+        this._startDebuggingTab(client, this._target.form, callback);
+      }
       return;
     }
-    let transport = (window._isChromeDebugger || window._isRemoteDebugger)
-      ? debuggerSocketConnect(Prefs.remoteHost, Prefs.remotePort)
-      : DebuggerServer.connectPipe();
 
-    let client = this.client = new DebuggerClient(transport);
+    // Content debugging can connect directly to the page.
+    // TODO: convert this to use a TabTarget.
+    let transport = DebuggerServer.connectPipe();
+    client = this.client = new DebuggerClient(transport);
+
     client.addListener("tabNavigated", this._onTabNavigated);
     client.addListener("tabDetached", this._onTabDetached);
 
     client.connect(function(aType, aTraits) {
       client.listTabs(function(aResponse) {
         if (window._isChromeDebugger) {
           let dbg = aResponse.chromeDebugger;
-          this._startChromeDebugging(client, dbg);
+          this._startChromeDebugging(client, dbg, callback);
         } else {
           let tab = aResponse.tabs[aResponse.selected];
-          this._startDebuggingTab(client, tab);
+          this._startDebuggingTab(client, tab, callback);
         }
-        window.dispatchEvent("Debugger:Connected");
       }.bind(this));
     }.bind(this));
   },
 
   /**
    * Disconnects the debugger client and removes event handlers as necessary.
    */
   _disconnect: function DC__disconnect() {
     // Return early if the client didn't even have a chance to instantiate.
     if (!this.client) {
       return;
     }
     this.client.removeListener("tabNavigated", this._onTabNavigated);
     this.client.removeListener("tabDetached", this._onTabDetached);
-    this.client.close();
 
-    this.client = null;
+    if (!this._target.isRemote) {
+      this.client.close();
+      this.client = null;
+    }
+
     this.tabClient = null;
     this.activeThread = null;
   },
 
   /**
    * Called for each location change in the debugged tab.
    */
   _onTabNavigated: function DC__onTabNavigated() {
@@ -207,17 +228,18 @@ let DebuggerController = {
   /**
    * Sets up a debugging session.
    *
    * @param DebuggerClient aClient
    *        The debugger client.
    * @param object aTabGrip
    *        The remote protocol grip of the tab.
    */
-  _startDebuggingTab: function DC__startDebuggingTab(aClient, aTabGrip) {
+  _startDebuggingTab: function DC__startDebuggingTab
+      (aClient, aTabGrip, aCallback=function(){}) {
     if (!aClient) {
       Cu.reportError("No client found!");
       return;
     }
     this.client = aClient;
 
     aClient.attachTab(aTabGrip.actor, function(aResponse, aTabClient) {
       if (!aTabClient) {
@@ -233,29 +255,31 @@ let DebuggerController = {
         }
         this.activeThread = aThreadClient;
 
         this.ThreadState.connect();
         this.StackFrames.connect();
         this.SourceScripts.connect();
         aThreadClient.resume();
 
+        aCallback();
       }.bind(this));
     }.bind(this));
   },
 
   /**
    * Sets up a chrome debugging session.
    *
    * @param DebuggerClient aClient
    *        The debugger client.
    * @param object aChromeDebugger
    *        The remote protocol grip of the chrome debugger.
    */
-  _startChromeDebugging: function DC__startChromeDebugging(aClient, aChromeDebugger) {
+  _startChromeDebugging: function DC__startChromeDebugging
+      (aClient, aChromeDebugger, aCallback=function(){}) {
     if (!aClient) {
       Cu.reportError("No client found!");
       return;
     }
     this.client = aClient;
 
     aClient.attachThread(aChromeDebugger, function(aResponse, aThreadClient) {
       if (!aThreadClient) {
@@ -264,16 +288,17 @@ let DebuggerController = {
       }
       this.activeThread = aThreadClient;
 
       this.ThreadState.connect();
       this.StackFrames.connect();
       this.SourceScripts.connect();
       aThreadClient.resume();
 
+      aCallback();
     }.bind(this));
   },
 
   /**
    * Attempts to quit the current process if allowed.
    */
   _quitApp: function DC__quitApp() {
     let canceled = Cc["@mozilla.org/supports-PRBool;1"]
diff --git a/browser/devtools/debugger/debugger-toolbar.js b/browser/devtools/debugger/debugger-toolbar.js
--- a/browser/devtools/debugger/debugger-toolbar.js
+++ b/browser/devtools/debugger/debugger-toolbar.js
@@ -20,17 +20,16 @@ function ToolbarView() {
 }
 
 ToolbarView.prototype = {
   /**
    * Initialization function, called when the debugger is started.
    */
   initialize: function DVT_initialize() {
     dumpn("Initializing the ToolbarView");
-    this._closeButton = document.getElementById("close");
     this._togglePanesButton = document.getElementById("toggle-panes");
     this._resumeButton = document.getElementById("resume");
     this._stepOverButton = document.getElementById("step-over");
     this._stepInButton = document.getElementById("step-in");
     this._stepOutButton = document.getElementById("step-out");
     this._chromeGlobals = document.getElementById("chrome-globals");
     this._scripts = document.getElementById("sources");
 
@@ -39,56 +38,43 @@ ToolbarView.prototype = {
     let stepInKey = LayoutHelpers.prettyKey(document.getElementById("stepInKey"));
     let stepOutKey = LayoutHelpers.prettyKey(document.getElementById("stepOutKey"));
     this._resumeTooltip = L10N.getFormatStr("resumeButtonTooltip", [resumeKey]);
     this._pauseTooltip = L10N.getFormatStr("pauseButtonTooltip", [resumeKey]);
     this._stepOverTooltip = L10N.getFormatStr("stepOverTooltip", [stepOverKey]);
     this._stepInTooltip = L10N.getFormatStr("stepInTooltip", [stepInKey]);
     this._stepOutTooltip = L10N.getFormatStr("stepOutTooltip", [stepOutKey]);
 
-    this._closeButton.addEventListener("click", this._onCloseClick, false);
     this._togglePanesButton.addEventListener("mousedown", this._onTogglePanesPressed, false);
     this._resumeButton.addEventListener("mousedown", this._onResumePressed, false);
     this._stepOverButton.addEventListener("mousedown", this._onStepOverPressed, false);
     this._stepInButton.addEventListener("mousedown", this._onStepInPressed, false);
     this._stepOutButton.addEventListener("mousedown", this._onStepOutPressed, false);
 
     this._stepOverButton.setAttribute("tooltiptext", this._stepOverTooltip);
     this._stepInButton.setAttribute("tooltiptext", this._stepInTooltip);
     this._stepOutButton.setAttribute("tooltiptext", this._stepOutTooltip);
 
-    this.toggleCloseButton(!window._isRemoteDebugger && !window._isChromeDebugger);
     // TODO: bug 806775
     // this.toggleChromeGlobalsContainer(window._isChromeDebugger);
   },
 
   /**
    * Destruction function, called when the debugger is closed.
    */
   destroy: function DVT_destroy() {
     dumpn("Destroying the ToolbarView");
-    this._closeButton.removeEventListener("click", this._onCloseClick, false);
     this._togglePanesButton.removeEventListener("mousedown", this._onTogglePanesPressed, false);
     this._resumeButton.removeEventListener("mousedown", this._onResumePressed, false);
     this._stepOverButton.removeEventListener("mousedown", this._onStepOverPressed, false);
     this._stepInButton.removeEventListener("mousedown", this._onStepInPressed, false);
     this._stepOutButton.removeEventListener("mousedown", this._onStepOutPressed, false);
   },
 
   /**
-   * Sets the close button hidden or visible. It's hidden by default.
-   *
-   * @param boolean aVisibleFlag
-   *        Specifies the intended visibility.
-   */
-  toggleCloseButton: function DVT_toggleCloseButton(aVisibleFlag) {
-    this._closeButton.setAttribute("hidden", !aVisibleFlag);
-  },
-
-  /**
    * Sets the resume button state based on the debugger active thread.
    *
    * @param string aState
    *        Either "paused" or "attached".
    */
   toggleResumeButtonState: function DVT_toggleResumeButtonState(aState) {
     // If we're paused, check and show a resume label on the button.
     if (aState == "paused") {
@@ -172,17 +158,16 @@ ToolbarView.prototype = {
    * Listener handling the step out button click event.
    */
   _onStepOutPressed: function DVT__onStepOutPressed() {
     if (DebuggerController.activeThread.paused) {
       DebuggerController.activeThread.stepOut();
     }
   },
 
-  _closeButton: null,
   _togglePanesButton: null,
   _resumeButton: null,
   _stepOverButton: null,
   _stepInButton: null,
   _stepOutButton: null,
   _chromeGlobals: null,
   _sources: null,
   _resumeTooltip: "",
diff --git a/browser/devtools/debugger/debugger.xul b/browser/devtools/debugger/debugger.xul
--- a/browser/devtools/debugger/debugger.xul
+++ b/browser/devtools/debugger/debugger.xul
@@ -148,21 +148,16 @@
     <key id="addConditionalBreakpointKey"
          key="B"
          modifiers="accel shift"
          command="addConditionalBreakpointCommand"/>
   </keyset>
 
   <vbox id="body" flex="1">
     <toolbar id="dbg-toolbar" class="devtools-toolbar">
-#ifdef XP_MACOSX
-      <toolbarbutton id="close"
-                     class="devtools-closebutton"
-                     tooltiptext="&debuggerUI.closeButton.tooltip;"/>
-#endif
       <hbox id="debugger-controls">
         <toolbarbutton id="resume"
                        class="devtools-toolbarbutton"
                        tabindex="0"/>
         <toolbarbutton id="step-over"
                        class="devtools-toolbarbutton"
                        tabindex="0"/>
         <toolbarbutton id="step-in"
@@ -181,21 +176,16 @@
       <spacer flex="1"/>
       <toolbarbutton id="toggle-panes"
                      class="devtools-toolbarbutton"
                      tabindex="0"/>
       <toolbarbutton id="debugger-options"
                      class="devtools-option-toolbarbutton"
                      tooltiptext="&debuggerUI.optsButton.tooltip;"
                      popup="debuggerPrefsContextMenu"/>
-#ifndef XP_MACOSX
-      <toolbarbutton id="close"
-                     class="devtools-closebutton"
-                     tooltiptext="&debuggerUI.closeButton.tooltip;"/>
-#endif
     </toolbar>
 
     <panel id="searchbox-panel"
            type="arrow"
            noautofocus="true"
            position="before_start">
       <vbox>
         <label class="description" value="&debuggerUI.searchPanelTitle;"/>
diff --git a/browser/devtools/debugger/test/Makefile.in b/browser/devtools/debugger/test/Makefile.in
--- a/browser/devtools/debugger/test/Makefile.in
+++ b/browser/devtools/debugger/test/Makefile.in
@@ -7,19 +7,19 @@ topsrcdir       = @top_srcdir@
 srcdir          = @srcdir@
 VPATH           = @srcdir@
 relativesrcdir  = @relativesrcdir@
 
 include $(DEPTH)/config/autoconf.mk
 
 MOCHITEST_BROWSER_TESTS = \
 	browser_dbg_leaktest.js \
-	browser_dbg_createChrome.js \
-	browser_dbg_debugger-tab-switch.js \
-	browser_dbg_debugger-tab-switch-window.js \
+	$(warning browser_dbg_createChrome.js disabled until issue 156 is fixed) \
+	$(browser_dbg_debugger-tab-switch.js disabled until issues 106, 40 are fixed) \
+	$(browser_dbg_debugger-tab-switch-window.js disabled until issues 106, 40 are fixed) \
 	browser_dbg_debuggerstatement.js \
 	browser_dbg_listtabs.js \
 	browser_dbg_tabactor-01.js \
 	browser_dbg_tabactor-02.js \
 	browser_dbg_globalactor-01.js \
 	testactors.js \
 	browser_dbg_nav-01.js \
 	browser_dbg_propertyview-01.js \
@@ -40,17 +40,16 @@ MOCHITEST_BROWSER_TESTS = \
 	browser_dbg_propertyview-filter-04.js \
 	browser_dbg_propertyview-filter-05.js \
 	browser_dbg_propertyview-filter-06.js \
 	browser_dbg_propertyview-filter-07.js \
 	browser_dbg_propertyview-filter-08.js \
 	browser_dbg_propertyview-reexpand.js \
 	browser_dbg_reload-same-script.js \
 	browser_dbg_pane-collapse.js \
-	browser_dbg_panesize.js \
 	browser_dbg_panesize-inner.js \
 	browser_dbg_stack-01.js \
 	browser_dbg_stack-02.js \
 	browser_dbg_stack-03.js \
 	browser_dbg_stack-04.js \
 	browser_dbg_stack-05.js \
 	browser_dbg_location-changes.js \
 	browser_dbg_location-changes-new.js \
@@ -77,17 +76,16 @@ MOCHITEST_BROWSER_TESTS = \
 	browser_dbg_bug727429_watch-expressions-01.js \
 	browser_dbg_bug727429_watch-expressions-02.js \
 	browser_dbg_bug731394_editor-contextmenu.js \
 	browser_dbg_bug786070_hide_nonenums.js \
 	browser_dbg_displayName.js \
 	browser_dbg_iframes.js \
 	browser_dbg_pause-exceptions.js \
 	browser_dbg_multiple-windows.js \
-	browser_dbg_menustatus.js \
 	browser_dbg_bfcache.js \
 	browser_dbg_breakpoint-new-script.js \
 	browser_dbg_bug737803_editor_actual_location.js \
 	browser_dbg_progress-listener-bug.js \
 	browser_dbg_chrome-debugging.js \
 	$(filter disabled-for-intermittent-failures--bug-753225, browser_dbg_createRemote.js) \
 	head.js \
 	$(NULL)
diff --git a/browser/devtools/debugger/test/browser_dbg_bfcache.js b/browser/devtools/debugger/test/browser_dbg_bfcache.js
--- a/browser/devtools/debugger/test/browser_dbg_bfcache.js
+++ b/browser/devtools/debugger/test/browser_dbg_bfcache.js
@@ -15,17 +15,17 @@ var gDebugger = null;
 var gScripts = null;
 
 function test()
 {
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     testInitialLoad();
   });
 }
 
 function testInitialLoad() {
   gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
     executeSoon(function() {
diff --git a/browser/devtools/debugger/test/browser_dbg_breakpoint-new-script.js b/browser/devtools/debugger/test/browser_dbg_breakpoint-new-script.js
--- a/browser/devtools/debugger/test/browser_dbg_breakpoint-new-script.js
+++ b/browser/devtools/debugger/test/browser_dbg_breakpoint-new-script.js
@@ -12,17 +12,17 @@ var gTab = null;
 var gDebugger = null;
 var gDebuggee = null;
 
 function test()
 {
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gDebuggee = aDebuggee;
 
     testAddBreakpoint();
   });
 }
 
 function testAddBreakpoint()
 {
diff --git a/browser/devtools/debugger/test/browser_dbg_bug723069_editor-breakpoints.js b/browser/devtools/debugger/test/browser_dbg_bug723069_editor-breakpoints.js
--- a/browser/devtools/debugger/test/browser_dbg_bug723069_editor-breakpoints.js
+++ b/browser/devtools/debugger/test/browser_dbg_bug723069_editor-breakpoints.js
@@ -26,41 +26,41 @@ function test()
   let framesAdded = false;
   let resumed = false;
   let testStarted = false;
 
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     resumed = true;
 
+    gDebugger.addEventListener("Debugger:SourceShown", onScriptShown);
+
     gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
       framesAdded = true;
       executeSoon(startTest);
     });
 
     executeSoon(function() {
       gDebuggee.firstCall();
     });
   });
 
   function onScriptShown(aEvent)
   {
     scriptShown = aEvent.detail.url.indexOf("-02.js") != -1;
     executeSoon(startTest);
   }
 
-  window.addEventListener("Debugger:SourceShown", onScriptShown);
-
   function startTest()
   {
     if (scriptShown && framesAdded && resumed && !testStarted) {
-      window.removeEventListener("Debugger:SourceShown", onScriptShown);
+      gDebugger.removeEventListener("Debugger:SourceShown", onScriptShown);
       testStarted = true;
       Services.tm.currentThread.dispatch({ run: performTest }, 0);
     }
   }
 
   function performTest()
   {
     gScripts = gDebugger.DebuggerView.Sources;
@@ -72,17 +72,17 @@ function test()
 
     gEditor = gDebugger.editor;
 
     isnot(gEditor.getText().indexOf("debugger"), -1,
           "The correct script was loaded initially.");
     isnot(gScripts.selectedValue, gScripts.values[0],
           "the correct script is selected");
 
-    gBreakpoints = gPane.breakpoints;
+    gBreakpoints = gPane.getAllBreakpoints();
     is(Object.keys(gBreakpoints), 0, "no breakpoints");
     ok(!gPane.getBreakpoint("foo", 3), "getBreakpoint('foo', 3) returns falsey");
 
     is(gEditor.getBreakpoints().length, 0, "no breakpoints in the editor");
 
     gEditor.addEventListener(SourceEditor.EVENTS.BREAKPOINT_CHANGE,
                              onEditorBreakpointAddFirst);
     let location = {url: gScripts.selectedValue, line: 6};
@@ -122,17 +122,17 @@ function test()
        "breakpoint1 client line is correct");
 
     executeSoon(function() {
       ok(aBreakpointClient.actor in gBreakpoints,
          "breakpoint1 client found in the list of debugger breakpoints");
       is(Object.keys(gBreakpoints).length, 1,
          "the list of debugger breakpoints holds only one breakpoint");
       is(gPane.getBreakpoint(gScripts.selectedValue, 6), aBreakpointClient,
-         "getBreakpoint(selectedScript, 2) returns the correct breakpoint");
+         "getBreakpoint returns the correct breakpoint");
 
       info("remove the first breakpoint");
       gEditor.addEventListener(SourceEditor.EVENTS.BREAKPOINT_CHANGE,
                                onEditorBreakpointRemoveFirst);
       gPane.removeBreakpoint(aBreakpointClient, onBreakpointRemoveFirst);
     });
   }
 
diff --git a/browser/devtools/debugger/test/browser_dbg_bug723071_editor-breakpoints-pane.js b/browser/devtools/debugger/test/browser_dbg_bug723071_editor-breakpoints-pane.js
--- a/browser/devtools/debugger/test/browser_dbg_bug723071_editor-breakpoints-pane.js
+++ b/browser/devtools/debugger/test/browser_dbg_bug723071_editor-breakpoints-pane.js
@@ -24,41 +24,41 @@ function test()
   let framesAdded = false;
   let resumed = false;
   let testStarted = false;
 
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     resumed = true;
 
+    gDebugger.addEventListener("Debugger:SourceShown", onScriptShown);
+
     gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
       framesAdded = true;
       executeSoon(startTest);
     });
 
     executeSoon(function() {
       gDebuggee.firstCall();
     });
   });
 
   function onScriptShown(aEvent)
   {
     scriptShown = aEvent.detail.url.indexOf("-02.js") != -1;
     executeSoon(startTest);
   }
 
-  window.addEventListener("Debugger:SourceShown", onScriptShown);
-
   function startTest()
   {
     if (scriptShown && framesAdded && resumed && !testStarted) {
-      window.removeEventListener("Debugger:SourceShown", onScriptShown);
+      gDebugger.removeEventListener("Debugger:SourceShown", onScriptShown);
       testStarted = true;
       Services.tm.currentThread.dispatch({ run: performTest }, 0);
     }
   }
 
   let breakpointsAdded = 0;
   let breakpointsDisabled = 0;
   let breakpointsRemoved = 0;
@@ -74,17 +74,17 @@ function test()
 
     let editor = gDebugger.editor;
 
     isnot(editor.getText().indexOf("debugger"), -1,
           "The correct script was loaded initially.");
     isnot(gScripts.selectedValue, gScripts.values[0],
           "the correct script is selected");
 
-    gBreakpoints = gPane.breakpoints;
+    gBreakpoints = gPane.getAllBreakpoints();
     is(Object.keys(gBreakpoints), 0, "no breakpoints");
     ok(!gPane.getBreakpoint("chocolate", 3), "getBreakpoint('chocolate', 3) returns falsey");
 
     is(editor.getBreakpoints().length, 0, "no breakpoints in the editor");
 
     gBreakpointsContainer = gDebugger.DebuggerView.Breakpoints;
     gBreakpointsParent = gBreakpointsContainer._container._parent;
     gBreakpointsList = gBreakpointsContainer._container._list;
diff --git a/browser/devtools/debugger/test/browser_dbg_bug727429_watch-expressions-01.js b/browser/devtools/debugger/test/browser_dbg_bug727429_watch-expressions-01.js
--- a/browser/devtools/debugger/test/browser_dbg_bug727429_watch-expressions-01.js
+++ b/browser/devtools/debugger/test/browser_dbg_bug727429_watch-expressions-01.js
@@ -14,17 +14,17 @@ let gDebugger = null;
 let gWatch = null;
 
 function test()
 {
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gWatch = gDebugger.DebuggerView.WatchExpressions;
 
     gDebugger.DebuggerView.togglePanes({ visible: true, animated: false });
 
     executeSoon(function() {
       performTest();
     });
   });
diff --git a/browser/devtools/debugger/test/browser_dbg_bug727429_watch-expressions-02.js b/browser/devtools/debugger/test/browser_dbg_bug727429_watch-expressions-02.js
--- a/browser/devtools/debugger/test/browser_dbg_bug727429_watch-expressions-02.js
+++ b/browser/devtools/debugger/test/browser_dbg_bug727429_watch-expressions-02.js
@@ -15,17 +15,17 @@ let gWatch = null;
 let gVars = null;
 
 function test()
 {
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gWatch = gDebugger.DebuggerView.WatchExpressions;
     gVars = gDebugger.DebuggerView.Variables;
 
     gDebugger.DebuggerView.togglePanes({ visible: true, animated: false });
     addExpressions();
     performTest();
   });
 
diff --git a/browser/devtools/debugger/test/browser_dbg_bug731394_editor-contextmenu.js b/browser/devtools/debugger/test/browser_dbg_bug731394_editor-contextmenu.js
--- a/browser/devtools/debugger/test/browser_dbg_bug731394_editor-contextmenu.js
+++ b/browser/devtools/debugger/test/browser_dbg_bug731394_editor-contextmenu.js
@@ -23,17 +23,17 @@ function test()
   let framesAdded = false;
   let resumed = false;
   let testStarted = false;
 
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     resumed = true;
 
     gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
       framesAdded = true;
       executeSoon(startTest);
     });
 
     executeSoon(function() {
diff --git a/browser/devtools/debugger/test/browser_dbg_bug737803_editor_actual_location.js b/browser/devtools/debugger/test/browser_dbg_bug737803_editor_actual_location.js
--- a/browser/devtools/debugger/test/browser_dbg_bug737803_editor_actual_location.js
+++ b/browser/devtools/debugger/test/browser_dbg_bug737803_editor_actual_location.js
@@ -25,48 +25,48 @@ function test() {
   let framesAdded = false;
   let testStarted = false;
   let resumed = false;
 
   debug_tab_pane(TAB_URL, function (aTab, aDebuggee, aPane) {
     gTab = aTab;
     gPane = aPane;
     gDebuggee = aDebuggee;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     resumed = true;
 
+    gDebugger.addEventListener("Debugger:SourceShown", onScriptShown);
+
     gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function () {
       framesAdded = true;
       executeSoon(startTest);
     });
 
     executeSoon(function () {
       gDebuggee.firstCall();
     });
   });
 
   function onScriptShown(aEvent) {
     scriptShown = aEvent.detail.url.indexOf("-02.js") != -1;
     executeSoon(startTest);
   }
 
-  window.addEventListener("Debugger:SourceShown", onScriptShown);
-
   function startTest() {
     if (scriptShown && framesAdded && resumed && !testStarted) {
-      window.removeEventListener("Debugger:SourceShown", onScriptShown);
+      gDebugger.removeEventListener("Debugger:SourceShown", onScriptShown);
       testStarted = true;
       Services.tm.currentThread.dispatch({ run: performTest }, 0);
     }
   }
 
   function performTest() {
     gScripts = gDebugger.DebuggerView.Sources;
     gEditor = gDebugger.editor;
-    gBreakpoints = gPane.breakpoints;
+    gBreakpoints = gPane.getAllBreakpoints();
     is(Object.keys(gBreakpoints), 0, "There are no breakpoints");
 
     gEditor.addEventListener(SourceEditor.EVENTS.BREAKPOINT_CHANGE,
       onEditorBreakpointAdd);
 
     let location = { url: gScripts.selectedValue, line: 4 };
     executeSoon(function () {
       gPane.addBreakpoint(location, onBreakpointAdd);
diff --git a/browser/devtools/debugger/test/browser_dbg_bug740825_conditional-breakpoints-01.js b/browser/devtools/debugger/test/browser_dbg_bug740825_conditional-breakpoints-01.js
--- a/browser/devtools/debugger/test/browser_dbg_bug740825_conditional-breakpoints-01.js
+++ b/browser/devtools/debugger/test/browser_dbg_bug740825_conditional-breakpoints-01.js
@@ -24,17 +24,17 @@ function test()
   let framesAdded = false;
   let resumed = false;
   let testStarted = false;
 
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gBreakpoints = gDebugger.DebuggerController.Breakpoints;
     gBreakpointsPane = gDebugger.DebuggerView.Breakpoints;
 
     gDebugger.DebuggerView.togglePanes({ visible: true, animated: false });
     resumed = true;
 
     gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
       framesAdded = true;
@@ -74,17 +74,17 @@ function test()
 
     gEditor = gDebugger.editor;
 
     isnot(gEditor.getText().indexOf("ermahgerd"), -1,
           "The correct script was loaded initially.");
     is(gScripts.selectedValue, gScripts.values[0],
           "The correct script is selected");
 
-    gBreakpoints = gPane.breakpoints;
+    gBreakpoints = gPane.getAllBreakpoints();
     is(Object.keys(gBreakpoints).length, 13, "thirteen breakpoints");
     ok(!gPane.getBreakpoint("foo", 3), "getBreakpoint('foo', 3) returns falsey");
 
     is(gEditor.getBreakpoints().length, 13, "thirteen breakpoints in the editor");
 
     executeSoon(test1);
   }
 
diff --git a/browser/devtools/debugger/test/browser_dbg_bug740825_conditional-breakpoints-02.js b/browser/devtools/debugger/test/browser_dbg_bug740825_conditional-breakpoints-02.js
--- a/browser/devtools/debugger/test/browser_dbg_bug740825_conditional-breakpoints-02.js
+++ b/browser/devtools/debugger/test/browser_dbg_bug740825_conditional-breakpoints-02.js
@@ -28,17 +28,17 @@ function test()
   let framesAdded = false;
   let resumed = false;
   let testStarted = false;
 
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gBreakpoints = gDebugger.DebuggerController.Breakpoints;
     gBreakpointsPane = gDebugger.DebuggerView.Breakpoints;
 
     gDebugger.DebuggerView.togglePanes({ visible: true, animated: false });
     resumed = true;
 
     gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
       framesAdded = true;
@@ -78,17 +78,17 @@ function test()
 
     gEditor = gDebugger.editor;
 
     isnot(gEditor.getText().indexOf("ermahgerd"), -1,
           "The correct script was loaded initially.");
     is(gScripts.selectedValue, gScripts.values[0],
           "The correct script is selected");
 
-    gBreakpoints = gPane.breakpoints;
+    gBreakpoints = gPane.getAllBreakpoints();
     is(Object.keys(gBreakpoints), 0, "no breakpoints");
     ok(!gPane.getBreakpoint("foo", 3), "getBreakpoint('foo', 3) returns falsey");
 
     is(gEditor.getBreakpoints().length, 0, "no breakpoints in the editor");
 
     executeSoon(addBreakpoint1);
   }
 
diff --git a/browser/devtools/debugger/test/browser_dbg_bug786070_hide_nonenums.js b/browser/devtools/debugger/test/browser_dbg_bug786070_hide_nonenums.js
--- a/browser/devtools/debugger/test/browser_dbg_bug786070_hide_nonenums.js
+++ b/browser/devtools/debugger/test/browser_dbg_bug786070_hide_nonenums.js
@@ -8,17 +8,17 @@ var gTab = null;
 var gDebuggee = null;
 var gDebugger = null;
 
 function test() {
   debug_tab_pane(STACK_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     testNonEnumProperties();
   });
 }
 
 function testNonEnumProperties() {
   gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
     Services.tm.currentThread.dispatch({ run: function() {
diff --git a/browser/devtools/debugger/test/browser_dbg_clean-exit.js b/browser/devtools/debugger/test/browser_dbg_clean-exit.js
--- a/browser/devtools/debugger/test/browser_dbg_clean-exit.js
+++ b/browser/devtools/debugger/test/browser_dbg_clean-exit.js
@@ -10,17 +10,17 @@ var gTab = null;
 var gDebugger = null;
 
 const DEBUGGER_TAB_URL = EXAMPLE_URL + "browser_dbg_debuggerstatement.html";
 
 function test() {
   debug_tab_pane(DEBUGGER_TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     testCleanExit();
   });
 }
 
 function testCleanExit() {
   gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
     Services.tm.currentThread.dispatch({ run: function() {
diff --git a/browser/devtools/debugger/test/browser_dbg_createRemote.js b/browser/devtools/debugger/test/browser_dbg_createRemote.js
--- a/browser/devtools/debugger/test/browser_dbg_createRemote.js
+++ b/browser/devtools/debugger/test/browser_dbg_createRemote.js
@@ -13,17 +13,17 @@ var gRemoteTimeout = null;
 var gAutoConnect = null;
 
 const TEST_URL = EXAMPLE_URL + "browser_dbg_iframes.html";
 
 function test() {
   debug_remote(TEST_URL, function(aTab, aDebuggee, aWindow) {
     gTab = aTab;
     gWindow = aWindow;
-    let gDebugger = gWindow.contentWindow;
+    let gDebugger = gWindow.panelWin;
 
     info("Current remote window x: " +
       Services.prefs.getIntPref("devtools.debugger.ui.win-x"));
     info("Current remote window y: " +
       Services.prefs.getIntPref("devtools.debugger.ui.win-y"));
     info("Current remote window width: " +
       Services.prefs.getIntPref("devtools.debugger.ui.win-width"));
     info("Current remote window height: " +
diff --git a/browser/devtools/debugger/test/browser_dbg_displayName.js b/browser/devtools/debugger/test/browser_dbg_displayName.js
--- a/browser/devtools/debugger/test/browser_dbg_displayName.js
+++ b/browser/devtools/debugger/test/browser_dbg_displayName.js
@@ -13,17 +13,17 @@ var gDebugger = null;
 
 const TAB_URL = EXAMPLE_URL + "browser_dbg_displayName.html";
 
 function test() {
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     testAnonCall();
   });
 }
 
 function testAnonCall() {
   gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
     Services.tm.currentThread.dispatch({ run: function() {
diff --git a/browser/devtools/debugger/test/browser_dbg_iframes.js b/browser/devtools/debugger/test/browser_dbg_iframes.js
--- a/browser/devtools/debugger/test/browser_dbg_iframes.js
+++ b/browser/devtools/debugger/test/browser_dbg_iframes.js
@@ -9,20 +9,17 @@ var gPane = null;
 var gTab = null;
 
 const TEST_URL = EXAMPLE_URL + "browser_dbg_iframes.html";
 
 function test() {
   debug_tab_pane(TEST_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gPane = aPane;
-    let gDebugger = gPane.contentWindow;
-
-    is(gDebugger.document.getElementById("close").getAttribute("hidden"), "false",
-      "The close button should be visible in a normal content debugger.");
+    let gDebugger = gPane.panelWin;
 
     is(gDebugger.DebuggerController.activeThread.paused, false,
       "Should be running after debug_tab_pane.");
 
     gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
       Services.tm.currentThread.dispatch({ run: function() {
 
         let frames = gDebugger.DebuggerView.StackFrames._container._list;
diff --git a/browser/devtools/debugger/test/browser_dbg_leaktest.js b/browser/devtools/debugger/test/browser_dbg_leaktest.js
--- a/browser/devtools/debugger/test/browser_dbg_leaktest.js
+++ b/browser/devtools/debugger/test/browser_dbg_leaktest.js
@@ -19,17 +19,17 @@ function test()
   let framesAdded = false;
   let resumed = false;
   let testStarted = false;
 
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     resumed = true;
 
     gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
       framesAdded = true;
       executeSoon(startTest);
     });
 
     executeSoon(function() {
diff --git a/browser/devtools/debugger/test/browser_dbg_location-changes-blank.js b/browser/devtools/debugger/test/browser_dbg_location-changes-blank.js
--- a/browser/devtools/debugger/test/browser_dbg_location-changes-blank.js
+++ b/browser/devtools/debugger/test/browser_dbg_location-changes-blank.js
@@ -15,17 +15,17 @@ function test()
 {
   let scriptShown = false;
   let framesAdded = false;
 
   debug_tab_pane(STACK_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
       framesAdded = true;
       runTest();
     });
 
     gDebuggee.simpleCall();
   });
diff --git a/browser/devtools/debugger/test/browser_dbg_location-changes-new.js b/browser/devtools/debugger/test/browser_dbg_location-changes-new.js
--- a/browser/devtools/debugger/test/browser_dbg_location-changes-new.js
+++ b/browser/devtools/debugger/test/browser_dbg_location-changes-new.js
@@ -15,17 +15,17 @@ function test()
 {
   let scriptShown = false;
   let framesAdded = false;
 
   debug_tab_pane(STACK_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
       framesAdded = true;
       runTest();
     });
 
     gDebuggee.simpleCall();
   });
diff --git a/browser/devtools/debugger/test/browser_dbg_location-changes.js b/browser/devtools/debugger/test/browser_dbg_location-changes.js
--- a/browser/devtools/debugger/test/browser_dbg_location-changes.js
+++ b/browser/devtools/debugger/test/browser_dbg_location-changes.js
@@ -12,17 +12,17 @@ var gDebuggee = null;
 var gDebugger = null;
 
 function test()
 {
   debug_tab_pane(STACK_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     testSimpleCall();
   });
 }
 
 function testSimpleCall() {
   gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
     Services.tm.currentThread.dispatch({
diff --git a/browser/devtools/debugger/test/browser_dbg_pane-collapse.js b/browser/devtools/debugger/test/browser_dbg_pane-collapse.js
--- a/browser/devtools/debugger/test/browser_dbg_pane-collapse.js
+++ b/browser/devtools/debugger/test/browser_dbg_pane-collapse.js
@@ -11,17 +11,17 @@ var gDebuggee = null;
 var gDebugger = null;
 var gView = null;
 
 function test() {
   debug_tab_pane(STACK_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gView = gDebugger.DebuggerView;
 
     testPanesState();
 
     gView.togglePanes({ visible: true, animated: false });
     testPaneCollapse1();
     testPaneCollapse2();
     testPanesStartupPref(closeDebuggerAndFinish);
diff --git a/browser/devtools/debugger/test/browser_dbg_panesize-inner.js b/browser/devtools/debugger/test/browser_dbg_panesize-inner.js
--- a/browser/devtools/debugger/test/browser_dbg_panesize-inner.js
+++ b/browser/devtools/debugger/test/browser_dbg_panesize-inner.js
@@ -2,70 +2,75 @@
 /*
  * Any copyright is dedicated to the Public Domain.
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
 function test() {
   var tab1 = addTab(TAB1_URL, function() {
     gBrowser.selectedTab = tab1;
+    let target1 = TargetFactory.forTab(tab1);
 
-    ok(!DebuggerUI.getDebugger(),
-      "Shouldn't have a debugger pane for this tab yet.");
+    ok(!gDevTools.getPanelForTarget("jsdebugger", target1),
+      "Shouldn't have a debugger panel for this tab yet.");
 
-    let pane = DebuggerUI.toggleDebugger();
-    ok(pane, "toggleDebugger() should return a pane.");
+    let toolbox = gDevTools.openToolboxForTab(target1, "jsdebugger");
+    toolbox.once("jsdebugger-ready", function dbgReady() {
+      let dbg = gDevTools.getPanelForTarget("jsdebugger", target1);
+      ok(dbg, "We should have a debugger panel.");
 
-    let preferredSfw = Services.prefs.getIntPref("devtools.debugger.ui.stackframes-width");
-    let preferredBpw = Services.prefs.getIntPref("devtools.debugger.ui.variables-width");
-    let someWidth1, someWidth2;
+      let preferredSfw = Services.prefs.getIntPref("devtools.debugger.ui.stackframes-width");
+      let preferredBpw = Services.prefs.getIntPref("devtools.debugger.ui.variables-width");
+      let someWidth1, someWidth2;
 
-    do {
-      someWidth1 = parseInt(Math.random() * 200) + 100;
-      someWidth2 = parseInt(Math.random() * 200) + 100;
-    } while (someWidth1 == preferredSfw ||
-             someWidth2 == preferredBpw)
+      do {
+        someWidth1 = parseInt(Math.random() * 200) + 100;
+        someWidth2 = parseInt(Math.random() * 200) + 100;
+      } while (someWidth1 == preferredSfw ||
+               someWidth2 == preferredBpw)
 
-    info("Preferred stackframes width: " + preferredSfw);
-    info("Preferred variables width: " + preferredBpw);
-    info("Generated stackframes width: " + someWidth1);
-    info("Generated variables width: " + someWidth2);
+      let someWidth1 = parseInt(Math.random() * 200) + 100;
+      let someWidth2 = parseInt(Math.random() * 200) + 100;
 
-    is(DebuggerUI.getDebugger(), pane,
-      "getDebugger() should return the same pane as toggleDebugger().");
+      info("Preferred stackframes width: " + preferredSfw);
+      info("Preferred variables width: " + preferredBpw);
+      info("Generated stackframes width: " + someWidth1);
+      info("Generated variables width: " + someWidth2);
 
-    let content = pane.contentWindow;
-    let stackframes;
-    let variables;
+      let content = dbg.panelWin;
+      let stackframes;
+      let variables;
 
-    wait_for_connect_and_resume(function() {
-      ok(content.Prefs.stackframesWidth,
-        "The debugger preferences should have a saved stackframesWidth value.");
-      ok(content.Prefs.variablesWidth,
-        "The debugger preferences should have a saved variablesWidth value.");
+      wait_for_connect_and_resume(function() {
+        ok(content.Prefs.stackframesWidth,
+          "The debugger preferences should have a saved stackframesWidth value.");
+        ok(content.Prefs.variablesWidth,
+          "The debugger preferences should have a saved variablesWidth value.");
 
-      stackframes = content.document.getElementById("stackframes+breakpoints");
-      variables = content.document.getElementById("variables+expressions");
+        stackframes = content.document.getElementById("stackframes+breakpoints");
+        variables = content.document.getElementById("variables+expressions");
 
-      is(content.Prefs.stackframesWidth, stackframes.getAttribute("width"),
-        "The stackframes pane width should be the same as the preferred value.");
-      is(content.Prefs.variablesWidth, variables.getAttribute("width"),
-        "The variables pane width should be the same as the preferred value.");
+        is(content.Prefs.stackframesWidth, stackframes.getAttribute("width"),
+          "The stackframes pane width should be the same as the preferred value.");
+        is(content.Prefs.variablesWidth, variables.getAttribute("width"),
+          "The variables pane width should be the same as the preferred value.");
 
-      stackframes.setAttribute("width", someWidth1);
-      variables.setAttribute("width", someWidth2);
+        stackframes.setAttribute("width", someWidth1);
+        variables.setAttribute("width", someWidth2);
 
-      removeTab(tab1);
+        removeTab(tab1);
+      }, tab1);
+
+      window.addEventListener("Debugger:Shutdown", function dbgShutdown() {
+        window.removeEventListener("Debugger:Shutdown", dbgShutdown, true);
+
+        is(content.Prefs.stackframesWidth, stackframes.getAttribute("width"),
+          "The stackframes pane width should have been saved by now.");
+        is(content.Prefs.variablesWidth, variables.getAttribute("width"),
+          "The variables pane width should have been saved by now.");
+
+        finish();
+
+      }, true);
     });
 
-    window.addEventListener("Debugger:Shutdown", function dbgShutdown() {
-      window.removeEventListener("Debugger:Shutdown", dbgShutdown, true);
-
-      is(content.Prefs.stackframesWidth, stackframes.getAttribute("width"),
-        "The stackframes pane width should have been saved by now.");
-      is(content.Prefs.variablesWidth, variables.getAttribute("width"),
-        "The variables pane width should have been saved by now.");
-
-      finish();
-
-    }, true);
   });
 }
diff --git a/browser/devtools/debugger/test/browser_dbg_panesize.js b/browser/devtools/debugger/test/browser_dbg_panesize.js
deleted file mode 100644
--- a/browser/devtools/debugger/test/browser_dbg_panesize.js
+++ /dev/null
@@ -1,55 +0,0 @@
-/* vim:set ts=2 sw=2 sts=2 et: */
-/*
- * Any copyright is dedicated to the Public Domain.
- * http://creativecommons.org/publicdomain/zero/1.0/
- */
-
-function test() {
-  var tab1 = addTab(TAB1_URL, function() {
-    gBrowser.selectedTab = tab1;
-
-    ok(!DebuggerUI.getDebugger(),
-      "Shouldn't have a debugger pane for this tab yet.");
-
-    let pane = DebuggerUI.toggleDebugger();
-    ok(pane, "toggleDebugger() should return a pane.");
-
-    let preferredHeight = Services.prefs.getIntPref("devtools.debugger.ui.height");
-    let someHeight;
-
-    do {
-      someHeight = parseInt(Math.random() * 200) + 200;
-    } while (someHeight == preferredHeight)
-
-    info("Preferred pane height: " + preferredHeight);
-    info("Generated pane height: " + someHeight);
-
-    is(DebuggerUI.getDebugger(), pane,
-      "getDebugger() should return the same pane as toggleDebugger().");
-
-    ok(DebuggerUI.preferences.height,
-      "The debugger preferences should have a saved height value.");
-
-    is(DebuggerUI.preferences.height, pane._frame.height,
-      "The debugger pane height should be the same as the preferred value.");
-
-    pane._frame.height = someHeight;
-
-    ok(DebuggerUI.preferences.height !== someHeight,
-      "Height preferences shouldn't have been updated yet.");
-
-    wait_for_connect_and_resume(function() {
-      removeTab(tab1);
-    });
-
-    window.addEventListener("Debugger:Shutdown", function dbgShutdown() {
-      window.removeEventListener("Debugger:Shutdown", dbgShutdown, true);
-
-      is(DebuggerUI.preferences.height, someHeight,
-        "Height preferences should have been updated by now.");
-
-      finish();
-
-    }, true);
-  });
-}
diff --git a/browser/devtools/debugger/test/browser_dbg_pause-exceptions.js b/browser/devtools/debugger/test/browser_dbg_pause-exceptions.js
--- a/browser/devtools/debugger/test/browser_dbg_pause-exceptions.js
+++ b/browser/devtools/debugger/test/browser_dbg_pause-exceptions.js
@@ -15,27 +15,27 @@ var gCount = 0;
 
 requestLongerTimeout(2);
 
 function test()
 {
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     gDebugger.DebuggerController.StackFrames.autoScopeExpand = true;
     gDebugger.DebuggerView.Variables.nonEnumVisible = false;
     testWithFrame();
   });
 }
 
 function testWithFrame()
 {
-  gPane.contentWindow.gClient.addOneTimeListener("paused", function() {
+  gPane.panelWin.gClient.addOneTimeListener("paused", function() {
     gDebugger.addEventListener("Debugger:FetchedVariables", function testA() {
       // We expect 2 Debugger:FetchedVariables events, one from the global object
       // scope and the regular one.
       if (++gCount < 2) {
         is(gCount, 1, "A. First Debugger:FetchedVariables event received.");
         return;
       }
       is(gCount, 2, "A. Second Debugger:FetchedVariables event received.");
@@ -43,17 +43,17 @@ function testWithFrame()
 
       is(gDebugger.DebuggerController.activeThread.state, "paused",
         "Should be paused now.");
 
       gDebugger.DebuggerView.Options._pauseOnExceptionsItem.setAttribute("checked", "true");
       gDebugger.DebuggerView.Options._togglePauseOnExceptions();
 
       gCount = 0;
-      gPane.contentWindow.gClient.addOneTimeListener("resumed", function() {
+      gPane.panelWin.gClient.addOneTimeListener("resumed", function() {
         gDebugger.addEventListener("Debugger:FetchedVariables", function testB() {
           // We expect 2 Debugger:FetchedVariables events, one from the global object
           // scope and the regular one.
           if (++gCount < 2) {
             is(gCount, 1, "B. First Debugger:FetchedVariables event received.");
             return;
           }
           is(gCount, 2, "B. Second Debugger:FetchedVariables event received.");
@@ -91,17 +91,17 @@ function testWithFrame()
   });
 
   EventUtils.sendMouseEvent({ type: "click" },
     content.document.querySelector("button"),
     content.window);
 }
 
 function resumeAndFinish() {
-  gPane.contentWindow.gClient.addOneTimeListener("resumed", function() {
+  gPane.panelWin.gClient.addOneTimeListener("resumed", function() {
     Services.tm.currentThread.dispatch({ run: function() {
 
       closeDebuggerAndFinish(false);
     }}, 0);
   });
 
   // Resume to let the exception reach it's catch clause.
   gDebugger.DebuggerController.activeThread.resume();
diff --git a/browser/devtools/debugger/test/browser_dbg_pause-resume.js b/browser/devtools/debugger/test/browser_dbg_pause-resume.js
--- a/browser/devtools/debugger/test/browser_dbg_pause-resume.js
+++ b/browser/devtools/debugger/test/browser_dbg_pause-resume.js
@@ -10,17 +10,17 @@ var gDebugger = null;
 var gView = null;
 var gLH = null;
 var gL10N = null;
 
 function test() {
   debug_tab_pane(STACK_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gView = gDebugger.DebuggerView;
     gLH = gDebugger.LayoutHelpers;
     gL10N = gDebugger.L10N;
 
     testPause();
   });
 }
 
diff --git a/browser/devtools/debugger/test/browser_dbg_progress-listener-bug.js b/browser/devtools/debugger/test/browser_dbg_progress-listener-bug.js
--- a/browser/devtools/debugger/test/browser_dbg_progress-listener-bug.js
+++ b/browser/devtools/debugger/test/browser_dbg_progress-listener-bug.js
@@ -13,17 +13,17 @@ var gOldListener = null;
 const TEST_URL = EXAMPLE_URL + "browser_dbg_script-switching.html";
 
 function test() {
   installListener();
 
   debug_tab_pane(TEST_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gPane = aPane;
-    let gDebugger = gPane.contentWindow;
+    let gDebugger = gPane.panelWin;
 
     is(gDebugger.DebuggerController._isInitialized, true,
       "Controller should be initialized after debug_tab_pane.");
     is(gDebugger.DebuggerView._isInitialized, true,
       "View should be initialized after debug_tab_pane.");
 
     closeDebuggerAndFinish();
   });
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-01.js b/browser/devtools/debugger/test/browser_dbg_propertyview-01.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-01.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-01.js
@@ -8,17 +8,17 @@ var gTab = null;
 var gDebuggee = null;
 var gDebugger = null;
 
 function test() {
   debug_tab_pane(STACK_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     testSimpleCall();
   });
 }
 
 function testSimpleCall() {
   gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
     Services.tm.currentThread.dispatch({ run: function() {
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-02.js b/browser/devtools/debugger/test/browser_dbg_propertyview-02.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-02.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-02.js
@@ -8,17 +8,17 @@ var gTab = null;
 var gDebuggee = null;
 var gDebugger = null;
 
 function test() {
   debug_tab_pane(STACK_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     testSimpleCall();
   });
 }
 
 function testSimpleCall() {
   gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
     Services.tm.currentThread.dispatch({ run: function() {
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-03.js b/browser/devtools/debugger/test/browser_dbg_propertyview-03.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-03.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-03.js
@@ -8,17 +8,17 @@ var gTab = null;
 var gDebuggee = null;
 var gDebugger = null;
 
 function test() {
   debug_tab_pane(STACK_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     testSimpleCall();
   });
 }
 
 function testSimpleCall() {
   gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
     Services.tm.currentThread.dispatch({ run: function() {
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-04.js b/browser/devtools/debugger/test/browser_dbg_propertyview-04.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-04.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-04.js
@@ -8,17 +8,17 @@ var gTab = null;
 var gDebuggee = null;
 var gDebugger = null;
 
 function test() {
   debug_tab_pane(STACK_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     testSimpleCall();
   });
 }
 
 function testSimpleCall() {
   gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
     Services.tm.currentThread.dispatch({ run: function() {
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-05.js b/browser/devtools/debugger/test/browser_dbg_propertyview-05.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-05.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-05.js
@@ -8,17 +8,17 @@ var gTab = null;
 var gDebuggee = null;
 var gDebugger = null;
 
 function test() {
   debug_tab_pane(STACK_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     testSimpleCall();
   });
 }
 
 function testSimpleCall() {
   gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
     Services.tm.currentThread.dispatch({ run: function() {
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-06.js b/browser/devtools/debugger/test/browser_dbg_propertyview-06.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-06.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-06.js
@@ -8,17 +8,17 @@ var gTab = null;
 var gDebuggee = null;
 var gDebugger = null;
 
 function test() {
   debug_tab_pane(STACK_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     testSimpleCall();
   });
 }
 
 function testSimpleCall() {
   gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
     Services.tm.currentThread.dispatch({ run: function() {
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-07.js b/browser/devtools/debugger/test/browser_dbg_propertyview-07.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-07.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-07.js
@@ -12,17 +12,17 @@ var gPane = null;
 var gTab = null;
 var gDebugger = null;
 
 function test()
 {
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     testFrameParameters();
   });
 }
 
 function testFrameParameters()
 {
   dump("Started testFrameParameters!\n");
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-08.js b/browser/devtools/debugger/test/browser_dbg_propertyview-08.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-08.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-08.js
@@ -12,17 +12,17 @@ var gPane = null;
 var gTab = null;
 var gDebugger = null;
 
 function test()
 {
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     testFrameParameters();
   });
 }
 
 function testFrameParameters()
 {
   dump("Started testFrameParameters!\n");
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-09.js b/browser/devtools/debugger/test/browser_dbg_propertyview-09.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-09.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-09.js
@@ -14,17 +14,17 @@ var gDebugger = null;
 
 requestLongerTimeout(2);
 
 function test()
 {
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     gDebugger.DebuggerController.StackFrames.autoScopeExpand = true;
     gDebugger.DebuggerView.Variables.nonEnumVisible = false;
     testFrameParameters();
   });
 }
 
 function testFrameParameters()
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-10.js b/browser/devtools/debugger/test/browser_dbg_propertyview-10.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-10.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-10.js
@@ -14,17 +14,17 @@ var gDebugger = null;
 
 requestLongerTimeout(2);
 
 function test()
 {
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     gDebugger.DebuggerController.StackFrames.autoScopeExpand = true;
     gDebugger.DebuggerView.Variables.nonEnumVisible = false;
     testWithFrame();
   });
 }
 
 function testWithFrame()
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-data.js b/browser/devtools/debugger/test/browser_dbg_propertyview-data.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-data.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-data.js
@@ -13,17 +13,17 @@ var gVariablesView = null;
 var gScope = null;
 var gVariable = null;
 
 function test()
 {
   debug_tab_pane(TAB1_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gVariablesView = gDebugger.DebuggerView.Variables;
 
     testVariablesView();
   });
 }
 
 function testVariablesView()
 {
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-edit.js b/browser/devtools/debugger/test/browser_dbg_propertyview-edit.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-edit.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-edit.js
@@ -13,17 +13,17 @@ var gDebugger = null;
 
 requestLongerTimeout(2);
 
 function test() {
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     gDebugger.DebuggerController.StackFrames.autoScopeExpand = true;
     gDebugger.DebuggerView.Variables.nonEnumVisible = false;
     testFrameEval();
   });
 }
 
 function testFrameEval() {
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-01.js b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-01.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-01.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-01.js
@@ -16,17 +16,17 @@ var gSearchBox = null;
 
 requestLongerTimeout(2);
 
 function test()
 {
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gDebuggee = aDebuggee;
 
     gDebugger.DebuggerController.StackFrames.autoScopeExpand = true;
     gDebugger.DebuggerView.Variables.delayedSearch = false;
     testSearchbox();
     prepareVariables(testVariablesFiltering);
   });
 }
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-02.js b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-02.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-02.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-02.js
@@ -16,17 +16,17 @@ var gSearchBox = null;
 
 requestLongerTimeout(2);
 
 function test()
 {
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gDebuggee = aDebuggee;
 
     gDebugger.DebuggerController.StackFrames.autoScopeExpand = true;
     gDebugger.DebuggerView.Variables.delayedSearch = false;
     testSearchbox();
     prepareVariables(testVariablesFiltering);
   });
 }
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-03.js b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-03.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-03.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-03.js
@@ -19,17 +19,17 @@ function test()
   gPrevPref = Services.prefs.getBoolPref(
     "devtools.debugger.ui.variables-searchbox-visible");
   Services.prefs.setBoolPref(
     "devtools.debugger.ui.variables-searchbox-visible", false);
 
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gDebuggee = aDebuggee;
 
     testSearchbox();
     testPref();
   });
 }
 
 function testSearchbox()
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-04.js b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-04.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-04.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-04.js
@@ -19,17 +19,17 @@ function test()
   gPrevPref = Services.prefs.getBoolPref(
     "devtools.debugger.ui.variables-searchbox-visible");
   Services.prefs.setBoolPref(
     "devtools.debugger.ui.variables-searchbox-visible", true);
 
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gDebuggee = aDebuggee;
 
     testSearchbox();
     testPref();
   });
 }
 
 function testSearchbox()
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-05.js b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-05.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-05.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-05.js
@@ -16,17 +16,17 @@ var gSearchBox = null;
 
 requestLongerTimeout(2);
 
 function test()
 {
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gDebuggee = aDebuggee;
 
     gDebugger.DebuggerController.StackFrames.autoScopeExpand = true;
     gDebugger.DebuggerView.Variables.delayedSearch = false;
     prepareVariables(testVariablesFiltering);
   });
 }
 
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-06.js b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-06.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-06.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-06.js
@@ -16,17 +16,17 @@ var gSearchBox = null;
 
 requestLongerTimeout(2);
 
 function test()
 {
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gDebuggee = aDebuggee;
 
     gDebugger.DebuggerController.StackFrames.autoScopeExpand = false;
     gDebugger.DebuggerView.Variables.delayedSearch = false;
     prepareVariables(testVariablesFiltering);
   });
 }
 
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-07.js b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-07.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-07.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-07.js
@@ -16,17 +16,17 @@ var gSearchBox = null;
 
 requestLongerTimeout(2);
 
 function test()
 {
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gDebuggee = aDebuggee;
 
     gDebugger.DebuggerController.StackFrames.autoScopeExpand = true;
     gDebugger.DebuggerView.Variables.delayedSearch = false;
     prepareVariables(testVariablesFiltering);
   });
 }
 
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-08.js b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-08.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-filter-08.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-filter-08.js
@@ -16,17 +16,17 @@ var gSearchBox = null;
 
 requestLongerTimeout(2);
 
 function test()
 {
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gDebuggee = aDebuggee;
 
     gDebugger.DebuggerController.StackFrames.autoScopeExpand = true;
     gDebugger.DebuggerView.Variables.delayedSearch = false;
     prepareVariables(testVariablesFiltering);
   });
 }
 
diff --git a/browser/devtools/debugger/test/browser_dbg_propertyview-reexpand.js b/browser/devtools/debugger/test/browser_dbg_propertyview-reexpand.js
--- a/browser/devtools/debugger/test/browser_dbg_propertyview-reexpand.js
+++ b/browser/devtools/debugger/test/browser_dbg_propertyview-reexpand.js
@@ -15,17 +15,17 @@ var gDebuggee = null;
 
 requestLongerTimeout(2);
 
 function test()
 {
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gDebuggee = aDebuggee;
 
     addBreakpoint();
   });
 }
 
 function addBreakpoint()
 {
diff --git a/browser/devtools/debugger/test/browser_dbg_reload-same-script.js b/browser/devtools/debugger/test/browser_dbg_reload-same-script.js
--- a/browser/devtools/debugger/test/browser_dbg_reload-same-script.js
+++ b/browser/devtools/debugger/test/browser_dbg_reload-same-script.js
@@ -23,17 +23,17 @@ function test()
   let scriptShownUrl = null;
   let resumed = false;
   let testStarted = false;
 
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gView = gDebugger.DebuggerView;
     resumed = true;
 
     startTest();
   });
 
   function onScriptShown(aEvent)
   {
diff --git a/browser/devtools/debugger/test/browser_dbg_script-switching.js b/browser/devtools/debugger/test/browser_dbg_script-switching.js
--- a/browser/devtools/debugger/test/browser_dbg_script-switching.js
+++ b/browser/devtools/debugger/test/browser_dbg_script-switching.js
@@ -20,17 +20,17 @@ function test()
   let framesAdded = false;
   let resumed = false;
   let testStarted = false;
 
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     resumed = true;
 
     gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
       framesAdded = true;
       executeSoon(startTest);
     });
 
     executeSoon(function() {
diff --git a/browser/devtools/debugger/test/browser_dbg_scripts-searching-01.js b/browser/devtools/debugger/test/browser_dbg_scripts-searching-01.js
--- a/browser/devtools/debugger/test/browser_dbg_scripts-searching-01.js
+++ b/browser/devtools/debugger/test/browser_dbg_scripts-searching-01.js
@@ -19,17 +19,17 @@ function test()
 {
   let scriptShown = false;
   let framesAdded = false;
 
   debug_tab_pane(STACK_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gDebugger.SourceResults.prototype.alwaysExpand = false;
 
     gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
       framesAdded = true;
       runTest();
     });
 
     gDebuggee.simpleCall();
diff --git a/browser/devtools/debugger/test/browser_dbg_scripts-searching-02.js b/browser/devtools/debugger/test/browser_dbg_scripts-searching-02.js
--- a/browser/devtools/debugger/test/browser_dbg_scripts-searching-02.js
+++ b/browser/devtools/debugger/test/browser_dbg_scripts-searching-02.js
@@ -21,17 +21,17 @@ function test()
 {
   let scriptShown = false;
   let framesAdded = false;
 
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gDebugger.SourceResults.prototype.alwaysExpand = false;
 
     gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
       framesAdded = true;
       runTest();
     });
 
     gDebuggee.firstCall();
diff --git a/browser/devtools/debugger/test/browser_dbg_scripts-searching-03.js b/browser/devtools/debugger/test/browser_dbg_scripts-searching-03.js
--- a/browser/devtools/debugger/test/browser_dbg_scripts-searching-03.js
+++ b/browser/devtools/debugger/test/browser_dbg_scripts-searching-03.js
@@ -22,17 +22,17 @@ function test()
 {
   let scriptShown = false;
   let framesAdded = false;
 
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gDebugger.SourceResults.prototype.alwaysExpand = false;
 
     gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
       framesAdded = true;
       runTest();
     });
 
     gDebuggee.firstCall();
diff --git a/browser/devtools/debugger/test/browser_dbg_scripts-searching-04.js b/browser/devtools/debugger/test/browser_dbg_scripts-searching-04.js
--- a/browser/devtools/debugger/test/browser_dbg_scripts-searching-04.js
+++ b/browser/devtools/debugger/test/browser_dbg_scripts-searching-04.js
@@ -22,17 +22,17 @@ function test()
 {
   let scriptShown = false;
   let framesAdded = false;
 
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gDebugger.SourceResults.prototype.alwaysExpand = false;
 
     gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
       framesAdded = true;
       runTest();
     });
 
     gDebuggee.firstCall();
diff --git a/browser/devtools/debugger/test/browser_dbg_scripts-searching-05.js b/browser/devtools/debugger/test/browser_dbg_scripts-searching-05.js
--- a/browser/devtools/debugger/test/browser_dbg_scripts-searching-05.js
+++ b/browser/devtools/debugger/test/browser_dbg_scripts-searching-05.js
@@ -22,17 +22,17 @@ function test()
 {
   let scriptShown = false;
   let framesAdded = false;
 
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gDebugger.SourceResults.prototype.alwaysExpand = false;
 
     gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
       framesAdded = true;
       runTest();
     });
 
     gDebuggee.firstCall();
diff --git a/browser/devtools/debugger/test/browser_dbg_scripts-searching-06.js b/browser/devtools/debugger/test/browser_dbg_scripts-searching-06.js
--- a/browser/devtools/debugger/test/browser_dbg_scripts-searching-06.js
+++ b/browser/devtools/debugger/test/browser_dbg_scripts-searching-06.js
@@ -22,17 +22,17 @@ function test()
 {
   let scriptShown = false;
   let framesAdded = false;
 
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gDebugger.SourceResults.prototype.alwaysExpand = false;
 
     gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
       framesAdded = true;
       runTest();
     });
 
     gDebuggee.firstCall();
diff --git a/browser/devtools/debugger/test/browser_dbg_scripts-searching-07.js b/browser/devtools/debugger/test/browser_dbg_scripts-searching-07.js
--- a/browser/devtools/debugger/test/browser_dbg_scripts-searching-07.js
+++ b/browser/devtools/debugger/test/browser_dbg_scripts-searching-07.js
@@ -23,17 +23,17 @@ function test()
 {
   let scriptShown = false;
   let framesAdded = false;
 
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gDebugger.SourceResults.prototype.alwaysExpand = false;
 
     gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
       framesAdded = true;
       runTest();
     });
 
     gDebuggee.firstCall();
diff --git a/browser/devtools/debugger/test/browser_dbg_scripts-searching-08.js b/browser/devtools/debugger/test/browser_dbg_scripts-searching-08.js
--- a/browser/devtools/debugger/test/browser_dbg_scripts-searching-08.js
+++ b/browser/devtools/debugger/test/browser_dbg_scripts-searching-08.js
@@ -22,17 +22,17 @@ function test()
 {
   let scriptShown = false;
   let framesAdded = false;
 
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gDebugger.SourceResults.prototype.alwaysExpand = false;
 
     gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
       framesAdded = true;
       runTest();
     });
 
     gDebuggee.firstCall();
diff --git a/browser/devtools/debugger/test/browser_dbg_scripts-searching-popup.js b/browser/devtools/debugger/test/browser_dbg_scripts-searching-popup.js
--- a/browser/devtools/debugger/test/browser_dbg_scripts-searching-popup.js
+++ b/browser/devtools/debugger/test/browser_dbg_scripts-searching-popup.js
@@ -13,17 +13,17 @@ var gSearchBox = null;
 var gSearchBoxPanel = null;
 
 function test()
 {
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
       runTest();
     });
 
     gDebuggee.firstCall();
   });
 }
diff --git a/browser/devtools/debugger/test/browser_dbg_scripts-sorting.js b/browser/devtools/debugger/test/browser_dbg_scripts-sorting.js
--- a/browser/devtools/debugger/test/browser_dbg_scripts-sorting.js
+++ b/browser/devtools/debugger/test/browser_dbg_scripts-sorting.js
@@ -8,17 +8,17 @@ var gTab = null;
 var gDebuggee = null;
 var gDebugger = null;
 
 function test() {
   debug_tab_pane(STACK_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     testSimpleCall();
   });
 }
 
 function testSimpleCall() {
   gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
     Services.tm.currentThread.dispatch({ run: function() {
diff --git a/browser/devtools/debugger/test/browser_dbg_select-line.js b/browser/devtools/debugger/test/browser_dbg_select-line.js
--- a/browser/devtools/debugger/test/browser_dbg_select-line.js
+++ b/browser/devtools/debugger/test/browser_dbg_select-line.js
@@ -19,17 +19,17 @@ var gDebugger = null;
 var gScripts = null;
 
 function test()
 {
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     testSelectLine();
   });
 }
 
 function testSelectLine() {
   gDebugger.DebuggerController.activeThread.addOneTimeListener("scriptsadded", function() {
     Services.tm.currentThread.dispatch({ run: function() {
diff --git a/browser/devtools/debugger/test/browser_dbg_stack-01.js b/browser/devtools/debugger/test/browser_dbg_stack-01.js
--- a/browser/devtools/debugger/test/browser_dbg_stack-01.js
+++ b/browser/devtools/debugger/test/browser_dbg_stack-01.js
@@ -9,17 +9,17 @@ var gTab = null;
 var gDebuggee = null;
 var gDebugger = null;
 
 function test() {
   debug_tab_pane(STACK_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     testSimpleCall();
   });
 }
 
 function testSimpleCall() {
   gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
     Services.tm.currentThread.dispatch({ run: function() {
diff --git a/browser/devtools/debugger/test/browser_dbg_stack-02.js b/browser/devtools/debugger/test/browser_dbg_stack-02.js
--- a/browser/devtools/debugger/test/browser_dbg_stack-02.js
+++ b/browser/devtools/debugger/test/browser_dbg_stack-02.js
@@ -9,17 +9,17 @@ var gTab = null;
 var gDebuggee = null;
 var gDebugger = null;
 
 function test() {
   debug_tab_pane(STACK_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     testEvalCall();
   });
 }
 
 function testEvalCall() {
   gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
     Services.tm.currentThread.dispatch({ run: function() {
diff --git a/browser/devtools/debugger/test/browser_dbg_stack-03.js b/browser/devtools/debugger/test/browser_dbg_stack-03.js
--- a/browser/devtools/debugger/test/browser_dbg_stack-03.js
+++ b/browser/devtools/debugger/test/browser_dbg_stack-03.js
@@ -9,17 +9,17 @@ var gTab = null;
 var gDebuggee = null;
 var gDebugger = null;
 
 function test() {
   debug_tab_pane(STACK_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     testRecurse();
   });
 }
 
 function testRecurse() {
   gDebuggee.gRecurseLimit = (gDebugger.gCallStackPageSize * 2) + 1;
 
diff --git a/browser/devtools/debugger/test/browser_dbg_stack-04.js b/browser/devtools/debugger/test/browser_dbg_stack-04.js
--- a/browser/devtools/debugger/test/browser_dbg_stack-04.js
+++ b/browser/devtools/debugger/test/browser_dbg_stack-04.js
@@ -9,17 +9,17 @@ var gTab = null;
 var gDebuggee = null;
 var gDebugger = null;
 
 function test() {
   debug_tab_pane(STACK_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     testEvalCallResume();
   });
 }
 
 function testEvalCallResume() {
   gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
     Services.tm.currentThread.dispatch({ run: function() {
diff --git a/browser/devtools/debugger/test/browser_dbg_stack-05.js b/browser/devtools/debugger/test/browser_dbg_stack-05.js
--- a/browser/devtools/debugger/test/browser_dbg_stack-05.js
+++ b/browser/devtools/debugger/test/browser_dbg_stack-05.js
@@ -17,17 +17,17 @@ var gDebugger = null;
 function test() {
   let scriptShown = false;
   let framesAdded = false;
 
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
 
     gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
       framesAdded = true;
       runTest();
     });
 
     gDebuggee.firstCall();
   });
diff --git a/browser/devtools/debugger/test/browser_dbg_update-editor-mode.js b/browser/devtools/debugger/test/browser_dbg_update-editor-mode.js
--- a/browser/devtools/debugger/test/browser_dbg_update-editor-mode.js
+++ b/browser/devtools/debugger/test/browser_dbg_update-editor-mode.js
@@ -24,17 +24,17 @@ function test()
   let framesAdded = false;
   let testStarted = false;
   let resumed = false;
 
   debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
     gTab = aTab;
     gDebuggee = aDebuggee;
     gPane = aPane;
-    gDebugger = gPane.contentWindow;
+    gDebugger = gPane.panelWin;
     gScripts = gDebugger.DebuggerView.Sources._container;
     resumed = true;
 
     gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
       framesAdded = true;
       executeSoon(startTest);
     });
 
diff --git a/browser/devtools/debugger/test/head.js b/browser/devtools/debugger/test/head.js
--- a/browser/devtools/debugger/test/head.js
+++ b/browser/devtools/debugger/test/head.js
@@ -9,16 +9,20 @@ const Cu = Components.utils;
 let tempScope = {};
 Cu.import("resource://gre/modules/devtools/dbg-server.jsm", tempScope);
 Cu.import("resource://gre/modules/devtools/dbg-client.jsm", tempScope);
 Cu.import("resource://gre/modules/Services.jsm", tempScope);
 let DebuggerServer = tempScope.DebuggerServer;
 let DebuggerTransport = tempScope.DebuggerTransport;
 let DebuggerClient = tempScope.DebuggerClient;
 let Services = tempScope.Services;
+Cu.import("resource:///modules/devtools/gDevTools.jsm", tempScope);
+let gDevTools = tempScope.gDevTools;
+Cu.import("resource:///modules/devtools/Target.jsm", tempScope);
+let TargetFactory = tempScope.TargetFactory;
 
 const EXAMPLE_URL = "http://example.com/browser/browser/devtools/debugger/test/";
 const TAB1_URL = EXAMPLE_URL + "browser_dbg_tab1.html";
 const TAB2_URL = EXAMPLE_URL + "browser_dbg_tab2.html";
 const STACK_URL = EXAMPLE_URL + "browser_dbg_stack.html";
 
 // Enable logging and remote debugging for the relevant tests.
 let gEnableRemote = Services.prefs.getBoolPref("devtools.debugger.remote-enabled");
@@ -81,123 +85,131 @@ function addTab(aURL, aOnload, aWindow) 
 function removeTab(aTab, aWindow) {
   let targetWindow = aWindow || window;
   let targetBrowser = targetWindow.gBrowser;
 
   targetBrowser.removeTab(aTab);
 }
 
 function closeDebuggerAndFinish(aRemoteFlag, aCallback, aWindow) {
-  let targetWindow = aWindow || window;
-  let debuggerUI = targetWindow.DebuggerUI;
-
   let debuggerClosed = false;
   let debuggerDisconnected = false;
+  // let targetWindow = aWindow || window;
+  ok(gTab, "There is a gTab to use for getting a toolbox reference");
+  let target = TargetFactory.forTab(gTab);
+
+  // let dbg = gDevTools.getPanelForTarget("jsdebugger", target);
+  window.addEventListener("Debugger:Shutdown", function cleanup() {
+    window.removeEventListener("Debugger:Shutdown", cleanup, false);
+    debuggerDisconnected = true;
+    _maybeFinish();
+  }, false);
+
+  let toolbox = gDevTools.getToolboxForTarget(target);
+  toolbox.once("destroyed", function() {
+    debuggerClosed = true;
+    _maybeFinish();
+  });
+  toolbox.destroy();
 
   function _maybeFinish() {
     if (debuggerClosed && debuggerDisconnected) {
       if (!aCallback)
         aCallback = finish;
       aCallback();
     }
   }
 
-  debuggerUI.chromeWindow.addEventListener("Debugger:Shutdown", function cleanup() {
-    debuggerUI.chromeWindow.removeEventListener("Debugger:Shutdown", cleanup, false);
-    debuggerDisconnected = true;
-    _maybeFinish();
-  }, false);
-  if (!aRemoteFlag) {
-    debuggerUI.getDebugger().close(function() {
-      debuggerClosed = true;
-      _maybeFinish();
-    });
-  } else {
-    debuggerClosed = true;
-    debuggerUI.getRemoteDebugger().close();
-  }
+  // if (!aRemoteFlag) {
+  //   dbg.getDebugger().close(function() {
+  //     debuggerClosed = true;
+  //     _maybeFinish();
+  //   });
+  // } else {
+  //   debuggerClosed = true;
+  //   dbg.getRemoteDebugger().close();
+  // }
 }
 
 function get_tab_actor_for_url(aClient, aURL, aCallback) {
   aClient.listTabs(function(aResponse) {
     for each (let tab in aResponse.tabs) {
       if (tab.url == aURL) {
         aCallback(tab);
         return;
       }
     }
   });
 }
 
 function attach_tab_actor_for_url(aClient, aURL, aCallback) {
   get_tab_actor_for_url(aClient, aURL, function(actor) {
-    aClient.request({ to: actor.actor, type: "attach" }, function(aResponse) {
+    aClient.attachTab(actor.actor, function(aResponse) {
       aCallback(actor, aResponse);
     });
   });
 }
 
 function attach_thread_actor_for_url(aClient, aURL, aCallback) {
   attach_tab_actor_for_url(aClient, aURL, function(aTabActor, aResponse) {
-    aClient.request({ "to": actor.threadActor, "type": "attach" }, function(aResponse) {
+    aClient.attachThread(actor.threadActor, function(aResponse, aThreadClient) {
       // We don't care about the pause right now (use
       // get_actor_for_url() if you do), so resume it.
-      aClient.request({ to: actor.threadActor, type: "resume" }, function(aResponse) {
+      aThreadClient.resume(function(aResponse) {
         aCallback(actor);
       });
     });
   });
 }
 
-function wait_for_connect_and_resume(aOnDebugging, aWindow) {
-  let targetWindow = aWindow || window;
-  let targetDocument = targetWindow.document;
-
-  targetDocument.addEventListener("Debugger:Connected", function dbgConnected(aEvent) {
-    targetDocument.removeEventListener("Debugger:Connected", dbgConnected, true);
-
+function wait_for_connect_and_resume(aOnDebugging, aTab) {
+  let target = TargetFactory.forTab(aTab);
+  let dbg = gDevTools.getPanelForTarget("jsdebugger", target);
+  dbg.once("connected", function dbgConnected() {
     // Wait for the initial resume...
-    aEvent.target.ownerDocument.defaultView.gClient.addOneTimeListener("resumed", function() {
+    dbg.panelWin.gClient.addOneTimeListener("resumed", function() {
       aOnDebugging();
     });
-  }, true);
+  });
 }
 
 function debug_tab_pane(aURL, aOnDebugging) {
   let tab = addTab(aURL, function() {
     gBrowser.selectedTab = gTab;
-    let debuggee = tab.linkedBrowser.contentWindow.wrappedJSObject;
+    let debuggee = gBrowser.selectedTab.linkedBrowser.contentWindow.wrappedJSObject;
 
-    let pane = DebuggerUI.toggleDebugger();
-    pane._frame.addEventListener("Debugger:Connected", function dbgConnected() {
-      pane._frame.removeEventListener("Debugger:Connected", dbgConnected, true);
-
-      // Wait for the initial resume...
-      pane.contentWindow.gClient.addOneTimeListener("resumed", function() {
-        pane.contentWindow.DebuggerView.Variables.lazyEmpty = false;
-        aOnDebugging(tab, debuggee, pane);
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    let toolbox = gDevTools.openToolboxForTab(target, "jsdebugger");
+    toolbox.once("jsdebugger-ready", function dbgReady() {
+      let dbg = gDevTools.getPanelForTarget("jsdebugger", target);
+      dbg.once("connected", function() {
+        // Wait for the initial resume...
+        dbg.panelWin.gClient.addOneTimeListener("resumed", function() {
+          dbg._view.Variables.lazyEmpty = false;
+          aOnDebugging(tab, debuggee, dbg);
+        });
       });
-    }, true);
+    });
   });
 }
 
 function debug_remote(aURL, aOnDebugging, aBeforeTabAdded) {
   // Make any necessary preparations (start the debugger server etc.)
   aBeforeTabAdded();
 
   let tab = addTab(aURL, function() {
     gBrowser.selectedTab = gTab;
     let debuggee = tab.linkedBrowser.contentWindow.wrappedJSObject;
 
     let win = DebuggerUI.toggleRemoteDebugger();
     win._dbgwin.addEventListener("Debugger:Connected", function dbgConnected() {
       win._dbgwin.removeEventListener("Debugger:Connected", dbgConnected, true);
 
       // Wait for the initial resume...
-      win.contentWindow.gClient.addOneTimeListener("resumed", function() {
+      win.panelWin.gClient.addOneTimeListener("resumed", function() {
         win._dbgwin.DebuggerView.Variables.lazyEmpty = false;
         aOnDebugging(tab, debuggee, win);
       });
     }, true);
   });
 }
 
 function debug_chrome(aURL, aOnClosing, aOnDebugging) {
diff --git a/browser/devtools/framework/Makefile.in b/browser/devtools/framework/Makefile.in
new file mode 100644
--- /dev/null
+++ b/browser/devtools/framework/Makefile.in
@@ -0,0 +1,18 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+DEPTH		= @DEPTH@
+topsrcdir	= @top_srcdir@
+srcdir		= @srcdir@
+VPATH		= @srcdir@
+
+include $(DEPTH)/config/autoconf.mk
+
+TEST_DIRS += test
+
+include $(topsrcdir)/config/rules.mk
+
+libs::
+	$(NSINSTALL) $(srcdir)/*.jsm $(FINAL_TARGET)/modules/devtools
diff --git a/browser/devtools/framework/Sidebar.jsm b/browser/devtools/framework/Sidebar.jsm
new file mode 100644
--- /dev/null
+++ b/browser/devtools/framework/Sidebar.jsm
@@ -0,0 +1,191 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const Cc = Components.classes;
+const Cu = Components.utils;
+const Ci = Components.interfaces;
+
+this.EXPORTED_SYMBOLS = ["ToolSidebar"];
+
+Cu.import("resource:///modules/devtools/EventEmitter.jsm");
+
+const XULNS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
+
+/**
+ * ToolSidebar provides methods to register tabs in the sidebar.
+ * It's assumed that the sidebar contains a xul:tabbox.
+ *
+ * @param {Node} tabbox
+ *  <tabbox> node;
+ * @param {ToolPanel} panel
+ *  Related ToolPanel instance;
+ * @param {Boolean} showTabstripe
+ *  Show the tabs.
+ */
+this.ToolSidebar = function ToolSidebar(tabbox, panel, showTabstripe=true)
+{
+  new EventEmitter(this);
+
+  this._tabbox = tabbox;
+  this._panelDoc = this._tabbox.ownerDocument;
+  this._toolPanel = panel;
+
+  this._tabbox.tabpanels.addEventListener("select", this, true);
+
+  this._tabs = new Map();
+
+  if (!showTabstripe) {
+    this._tabbox.setAttribute("hidetabs", "true");
+  }
+}
+
+ToolSidebar.prototype = {
+  /**
+   * Register a tab. A tab is a document.
+   * The document must have a title, which will be used as the name of the tab.
+   *
+   * @param {string} tab uniq id
+   * @param {string} url
+   */
+  addTab: function ToolSidebar_addTab(id, url, selected=false) {
+    let iframe = this._panelDoc.createElementNS(XULNS, "iframe");
+    iframe.className = "iframe-" + id;
+    iframe.setAttribute("flex", "1");
+    iframe.setAttribute("src", url);
+
+    let tab = this._tabbox.tabs.appendItem();
+
+    let onIFrameLoaded = function() {
+      tab.setAttribute("label", iframe.contentDocument.title);
+      iframe.removeEventListener("DOMContentLoaded", onIFrameLoaded, true);
+      if ("setPanel" in iframe.contentWindow) {
+        iframe.contentWindow.setPanel(this._toolPanel, iframe);
+      }
+      this.emit(id + "-ready");
+    }.bind(this);
+
+    iframe.addEventListener("DOMContentLoaded", onIFrameLoaded, true);
+
+    let tabpanel = this._panelDoc.createElementNS(XULNS, "tabpanel");
+    tabpanel.setAttribute("id", "sidebar-panel-" + id);
+    tabpanel.appendChild(iframe);
+    this._tabbox.tabpanels.appendChild(tabpanel);
+
+    tab.linkedPanel = "sidebar-panel-" + id;
+
+    // We store the index of this tab.
+    this._tabs.set(id, tab);
+
+    if (selected) {
+      // For some reason I don't understand, if we call this.select in this
+      // event loop (after inserting the tab), the tab will never get the
+      // the "selected" attribute set to true.
+      this._panelDoc.defaultView.setTimeout(function() {
+        this.select(id);
+      }.bind(this), 0);
+    }
+
+    this.emit("new-tab-registered", id);
+  },
+
+  /**
+   * Select a specific tab.
+   */
+  select: function ToolSidebar_select(id) {
+    let tab = this._tabs.get(id);
+    if (tab) {
+      this._tabbox.selectedTab = tab;
+    }
+  },
+
+  /**
+   * Return the id of the selected tab.
+   */
+  getCurrentTabID: function ToolSidebar_getCurrentTabID() {
+    let currentID = null;
+    for (let [id, tab] of this._tabs) {
+      if (this._tabbox.tabs.selectedItem == tab) {
+        currentID = id;
+        break;
+      }
+    }
+    return currentID;
+  },
+
+  /**
+   * Event handler.
+   */
+  handleEvent: function ToolSidebar_eventHandler(event) {
+    if (event.type == "select") {
+      let previousTool = this._currentTool;
+      this._currentTool = this.getCurrentTabID();
+      if (previousTool) {
+        this.emit(previousTool + "-unselected");
+      }
+
+      this.emit(this._currentTool + "-selected");
+      this.emit("select", this._currentTool);
+    }
+  },
+
+
+  /**
+   * Toggle sidebar's visibility state.
+   */
+  toggle: function ToolSidebar_toggle() {
+    if (this._tabbox.hasAttribute("hidden")) {
+      this.show();
+    } else {
+      this.hide();
+    }
+  },
+
+  /**
+   * Show the sidebar.
+   */
+  show: function ToolSidebar_show() {
+    this._tabbox.removeAttribute("hidden");
+  },
+
+  /**
+   * Show the sidebar.
+   */
+  hide: function ToolSidebar_hide() {
+    this._tabbox.setAttribute("hidden", "true");
+  },
+
+  /**
+   * Return the window containing the tab content.
+   */
+  getWindowForTab: function ToolSidebar_getWindowForTab(id) {
+    if (!this._tabs.has(id)) {
+      return null;
+    }
+
+    let panel = this._panelDoc.getElementById(this._tabs.get(id).linkedPanel);
+    return panel.firstChild.contentWindow;
+  },
+
+  /**
+   * Clean-up.
+   */
+  destroy: function ToolSidebar_destroy() {
+    this._tabbox.removeEventListener("select", this, true);
+
+    while (this._tabbox.tabpanels.hasChildNodes()) {
+      this._tabbox.tabpanels.removeChild(this._tabbox.tabpanels.firstChild);
+    }
+
+    while (this._tabbox.tabs.hasChildNodes()) {
+      this._tabbox.tabs.removeChild(this._tabbox.tabs.firstChild);
+    }
+
+    this._tabs = null;
+    this._tabbox = null;
+    this._panelDoc = null;
+    this._toolPanel = null;
+  },
+}
diff --git a/browser/devtools/framework/Target.jsm b/browser/devtools/framework/Target.jsm
new file mode 100644
--- /dev/null
+++ b/browser/devtools/framework/Target.jsm
@@ -0,0 +1,385 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+this.EXPORTED_SYMBOLS = [ "TargetFactory" ];
+
+const Cu = Components.utils;
+const Ci = Components.interfaces;
+Cu.import("resource:///modules/devtools/EventEmitter.jsm");
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+
+
+const targets = new WeakMap();
+
+/**
+ * Functions for creating Targets
+ */
+this.TargetFactory = {
+  /**
+   * Construct a Target
+   * @param {XULTab} tab
+   *        The tab to use in creating a new target
+   * @return A target object
+   */
+  forTab: function TF_forTab(tab) {
+    let target = targets.get(tab);
+    if (target == null) {
+      target = new TabTarget(tab);
+      targets.set(tab, target);
+    }
+    return target;
+  },
+
+  /**
+   * Creating a target for a tab that is being closed is a problem because it
+   * allows a leak as a result of coming after the close event which normally
+   * clears things up. This function allows us to ask if there is a known
+   * target for a tab without creating a target
+   * @return true/false
+   */
+  isKnownTab: function TF_isKnownTab(tab) {
+    return targets.has(tab);
+  },
+
+  /**
+   * Construct a Target
+   * @param {nsIDOMWindow} window
+   *        The chromeWindow to use in creating a new target
+   * @return A target object
+   */
+  forWindow: function TF_forWindow(window) {
+    let target = targets.get(window);
+    if (target == null) {
+      target = new WindowTarget(window);
+      targets.set(window, target);
+    }
+    return target;
+  },
+
+  /**
+   * Construct a Target for a remote global
+   * @param {Object} form
+   *        The serialized form of a debugging protocol actor.
+   * @param {DebuggerClient} client
+   *        The debuger client instance to communicate with the server.
+   * @param {boolean} chrome
+   *        A flag denoting that the debugging target is the remote process as a
+   *        whole and not a single tab.
+   * @return A target object
+   */
+  forRemote: function TF_forRemote(form, client, chrome) {
+    let target = targets.get(form);
+    if (target == null) {
+      target = new RemoteTarget(form, client, chrome);
+      targets.set(form, target);
+    }
+    return target;
+  },
+
+  /**
+   * Get all of the targets known to some browser instance (local if null)
+   * @return An array of target objects
+   */
+  allTargets: function TF_allTargets() {
+    let windows = [];
+    let wm = Components.classes["@mozilla.org/appshell/window-mediator;1"]
+                       .getService(Components.interfaces.nsIWindowMediator);
+    let en = wm.getXULWindowEnumerator(null);
+    while (en.hasMoreElements()) {
+      windows.push(en.getNext());
+    }
+
+    return windows.map(function(window) {
+      return TargetFactory.forWindow(window);
+    });
+  },
+};
+
+/**
+ * The 'version' property allows the developer tools equivalent of browser
+ * detection. Browser detection is evil, however while we don't know what we
+ * will need to detect in the future, it is an easy way to postpone work.
+ * We should be looking to use 'supports()' in place of version where
+ * possible.
+ */
+function getVersion() {
+  // FIXME: return something better
+  return 20;
+}
+
+/**
+ * A better way to support feature detection, but we're not yet at a place
+ * where we have the features well enough defined for this to make lots of
+ * sense.
+ */
+function supports(feature) {
+  // FIXME: return something better
+  return false;
+};
+
+/**
+ * A Target represents something that we can debug. Targets are generally
+ * read-only. Any changes that you wish to make to a target should be done via
+ * a Tool that attaches to the target. i.e. a Target is just a pointer saying
+ * "the thing to debug is over there".
+ *
+ * Providing a generalized abstraction of a web-page or web-browser (available
+ * either locally or remotely) is beyond the scope of this class (and maybe
+ * also beyond the scope of this universe) However Target does attempt to
+ * abstract some common events and read-only properties common to many Tools.
+ *
+ * Supported read-only properties:
+ * - name, isRemote, url
+ *
+ * Target extends EventEmitter and provides support for the following events:
+ * - close: The target window has been closed. All tools attached to this
+ *     target should close. This event is not currently cancelable.
+ * - navigate: The target window has navigated to a different URL
+ *
+ * Optional events:
+ * - will-navigate: The target window will navigate to a different URL
+ * - hidden: The target is not visible anymore (for TargetTab, another tab is selected)
+ * - visible: The target is visible (for TargetTab, tab is selected)
+ *
+ * Target also supports 2 functions to help allow 2 different versions of
+ * Firefox debug each other. The 'version' property is the equivalent of
+ * browser detection - simple and easy to implement but gets fragile when things
+ * are not quite what they seem. The 'supports' property is the equivalent of
+ * feature detection - harder to setup, but more robust long-term.
+ *
+ * Comparing Targets: 2 instances of a Target object can point at the same
+ * thing, so t1 !== t2 and t1 != t2 even when they represent the same object.
+ * To compare to targets use 't1.equals(t2)'.
+ */
+function Target() {
+  throw new Error("Use TargetFactory.newXXX or Target.getXXX to create a Target in place of 'new Target()'");
+}
+
+Object.defineProperty(Target.prototype, "version", {
+  get: getVersion,
+  enumerable: true
+});
+
+
+/**
+ * A TabTarget represents a page living in a browser tab. Generally these will
+ * be web pages served over http(s), but they don't have to be.
+ */
+function TabTarget(tab) {
+  new EventEmitter(this);
+  this._tab = tab;
+  this._setupListeners();
+}
+
+TabTarget.prototype = {
+  _webProgressListener: null,
+
+  supports: supports,
+  get version() { return getVersion(); },
+
+  get tab() {
+    return this._tab;
+  },
+
+  get name() {
+    return this._tab.linkedBrowser.contentDocument.title;
+  },
+
+  get url() {
+    return this._tab.linkedBrowser.contentDocument.location.href;
+  },
+
+  get isRemote() {
+    return false;
+  },
+
+  /**
+   * Listen to the different tabs events.
+   */
+  _setupListeners: function TabTarget__setupListeners() {
+    this._webProgressListener = new TabWebProgressListener(this);
+    this.tab.linkedBrowser.addProgressListener(this._webProgressListener);
+    this.tab.addEventListener("TabClose", this);
+    this.tab.parentNode.addEventListener("TabSelect", this);
+  },
+
+  /**
+   * Handle tabs events.
+   */
+  handleEvent: function (event) {
+    switch (event.type) {
+      case "TabClose":
+        this.destroy();
+        break;
+      case "TabSelect":
+        if (this.tab.selected) {
+          this.emit("visible", event);
+        } else {
+          this.emit("hidden", event);
+        }
+        break;
+    }
+  },
+
+
+  /**
+   * Target is not alive anymore.
+   */
+  destroy: function() {
+    if (this._destroyed) {
+      return;
+    }
+    this.tab.linkedBrowser.removeProgressListener(this._webProgressListener)
+    this._webProgressListener.target = null;
+    this._webProgressListener = null;
+    this.tab.removeEventListener("TabClose", this);
+    this.tab.parentNode.removeEventListener("TabSelect", this);
+    this._destroyed = true;
+    this.emit("close");
+
+    targets.delete(this._tab);
+    this._tab = null;
+  },
+
+  toString: function() {
+    return 'TabTarget:' + this.tab;
+  },
+};
+
+
+/**
+ * WebProgressListener for TabTarget.
+ *
+ * @param object aTarget
+ *        The TabTarget instance to work with.
+ */
+function TabWebProgressListener(aTarget) {
+  this.target = aTarget;
+}
+
+TabWebProgressListener.prototype = {
+  target: null,
+
+  QueryInterface: XPCOMUtils.generateQI([Ci.nsIWebProgressListener, Ci.nsISupportsWeakReference]),
+
+  onStateChange: function TWPL_onStateChange(progress, request, flag, status) {
+    let isStart = flag & Ci.nsIWebProgressListener.STATE_START;
+    let isDocument = flag & Ci.nsIWebProgressListener.STATE_IS_DOCUMENT;
+    let isNetwork = flag & Ci.nsIWebProgressListener.STATE_IS_NETWORK;
+    let isRequest = flag & Ci.nsIWebProgressListener.STATE_IS_REQUEST;
+
+    // Skip non-interesting states.
+    if (!isStart || !isDocument || !isRequest || !isNetwork) {
+      return;
+    }
+
+    if (this.target) {
+      this.target.emit("will-navigate", request);
+    }
+  },
+
+  onProgressChange: function() {},
+  onSecurityChange: function() {},
+  onStatusChange: function() {},
+
+  onLocationChange: function TwPL_onLocationChange(webProgress) {
+    let window = webProgress.DOMWindow;
+    if (this.target) {
+      this.target.emit("navigate", window);
+    }
+  },
+};
+
+
+/**
+ * A WindowTarget represents a page living in a xul window or panel. Generally
+ * these will have a chrome: URL
+ */
+function WindowTarget(window) {
+  new EventEmitter(this);
+  this._window = window;
+}
+
+WindowTarget.prototype = {
+  supports: supports,
+  get version() { return getVersion(); },
+
+  get window() {
+    return this._window;
+  },
+
+  get name() {
+    return this._window.document.title;
+  },
+
+  get url() {
+    return this._window.document.location.href;
+  },
+
+  get isRemote() {
+    return false;
+  },
+
+  toString: function() {
+    return 'WindowTarget:' + this.window;
+  },
+};
+
+/**
+ * A RemoteTarget represents a page living in a remote Firefox instance.
+ */
+function RemoteTarget(form, client, chrome) {
+  new EventEmitter(this);
+  this._client = client;
+  this._form = form;
+  this._chrome = chrome;
+
+  this.destroy = this.destroy.bind(this);
+  this.client.addListener("tabDetached", this.destroy);
+
+  this._onTabNavigated = function onRemoteTabNavigated() {
+    this.emit("navigate");
+  }.bind(this);
+  this.client.addListener("tabNavigated", this._onTabNavigated);
+}
+
+RemoteTarget.prototype = {
+  supports: supports,
+  get version() getVersion(),
+
+  get isRemote() true,
+
+  get chrome() this._chrome,
+
+  get name() this._form._title,
+
+  get url() this._form._url,
+
+  get client() this._client,
+
+  get form() this._form,
+
+  /**
+   * Target is not alive anymore.
+   */
+  destroy: function RT_destroy() {
+    if (this._destroyed) {
+      return;
+    }
+    this.client.removeListener("tabNavigated", this._onTabNavigated);
+    this.client.removeListener("tabDetached", this.destroy);
+
+    this._client.close(function onClosed() {
+      this._client = null;
+      this._destroyed = true;
+      this.emit("close");
+    }.bind(this));
+  },
+
+  toString: function() {
+    return 'RemoteTarget:' + this.form.actor;
+  },
+};
diff --git a/browser/devtools/framework/ToolDefinitions.jsm b/browser/devtools/framework/ToolDefinitions.jsm
new file mode 100644
--- /dev/null
+++ b/browser/devtools/framework/ToolDefinitions.jsm
@@ -0,0 +1,19 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+this.EXPORTED_SYMBOLS = [ "defaultTools" ];
+
+Components.utils.import("resource:///modules/WebConsolePanel.jsm");
+Components.utils.import("resource:///modules/devtools/DebuggerPanel.jsm");
+Components.utils.import("resource:///modules/devtools/StyleEditorDefinition.jsm");
+Components.utils.import("resource:///modules/devtools/InspectorDefinition.jsm");
+
+this.defaultTools = [
+  StyleEditorDefinition,
+  WebConsoleDefinition,
+  DebuggerDefinition,
+  InspectorDefinition,
+];
diff --git a/browser/devtools/framework/Toolbox.jsm b/browser/devtools/framework/Toolbox.jsm
new file mode 100644
--- /dev/null
+++ b/browser/devtools/framework/Toolbox.jsm
@@ -0,0 +1,523 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const { classes: Cc, interfaces: Ci, utils: Cu } = Components;
+
+Cu.import("resource://gre/modules/Services.jsm");
+Cu.import("resource:///modules/devtools/EventEmitter.jsm");
+Cu.import("resource:///modules/devtools/ToolboxHosts.jsm");
+Cu.import("resource:///modules/devtools/gcli.jsm");
+Cu.import('resource://gre/modules/XPCOMUtils.jsm');
+
+XPCOMUtils.defineLazyModuleGetter(this, "gDevTools",
+                                  "resource:///modules/devtools/gDevTools.jsm");
+XPCOMUtils.defineLazyModuleGetter(this, "CommandUtils",
+                                  "resource:///modules/devtools/DeveloperToolbar.jsm");
+
+Components.utils.import("resource://gre/modules/devtools/Require.jsm");
+
+let Requisition = require('gcli/cli').Requisition;
+let CommandOutputManager = require('gcli/canon').CommandOutputManager;
+
+this.EXPORTED_SYMBOLS = [ "Toolbox" ];
+
+/**
+ * A "Toolbox" is the component that holds all the tools for one specific
+ * target. Visually, it's a document that includes the tools tabs and all
+ * the iframes where the tool panels will be living in.
+ *
+ * @param {object} target
+ *        The object the toolbox is debugging.
+ * @param {Toolbox.HostType} hostType
+ *        Type of host that will host the toolbox (e.g. sidebar, window)
+ * @param {string} selectedTool
+ *        Tool to select initially
+ */
+this.Toolbox = function Toolbox(target, hostType, selectedTool) {
+  this._target = target;
+  this._toolPanels = new Map();
+
+  this._onLoad = this._onLoad.bind(this);
+  this._toolRegistered = this._toolRegistered.bind(this);
+  this._toolUnregistered = this._toolUnregistered.bind(this);
+  this.destroy = this.destroy.bind(this);
+
+  this._target.once("close", this.destroy);
+
+  if (!hostType) {
+    hostType = Services.prefs.getCharPref(this._prefs.LAST_HOST);
+  }
+  if (!selectedTool) {
+    selectedTool = Services.prefs.getCharPref(this._prefs.LAST_TOOL);
+  }
+  let definitions = gDevTools.getToolDefinitions();
+  if (!definitions.get(selectedTool)) {
+    selectedTool = "webconsole";
+  }
+  this._defaultToolId = selectedTool;
+
+  this._host = this._createHost(hostType);
+
+  new EventEmitter(this);
+
+  gDevTools.on("tool-registered", this._toolRegistered);
+  gDevTools.on("tool-unregistered", this._toolUnregistered);
+}
+
+/**
+ * The toolbox can be 'hosted' either embedded in a browser window
+ * or in a separate window.
+ */
+Toolbox.HostType = {
+  BOTTOM: "bottom",
+  SIDE: "side",
+  WINDOW: "window"
+}
+
+Toolbox.prototype = {
+  _URL: "chrome://browser/content/devtools/framework/toolbox.xul",
+
+  _prefs: {
+    LAST_HOST: "devtools.toolbox.host",
+    LAST_TOOL: "devtools.toolbox.selectedTool",
+    SIDE_ENABLED: "devtools.toolbox.sideEnabled"
+  },
+
+  HostType: Toolbox.HostType,
+
+  /**
+   * Returns a *copy* of the _toolPanels collection.
+   *
+   * @return {Map} panels
+   *         All the running panels in the toolbox
+   */
+  getToolPanels: function TB_getToolPanels() {
+    let panels = new Map();
+
+    for (let [key, value] of this._toolPanels) {
+      panels.set(key, value);
+    }
+    return panels;
+  },
+
+  /**
+   * Get/alter the target of a Toolbox so we're debugging something different.
+   * See Target.jsm for more details.
+   * TODO: Do we allow |toolbox.target = null;| ?
+   */
+  get target() {
+    return this._target;
+  },
+
+  set target(value) {
+    this._target = value;
+  },
+
+  /**
+   * Get/alter the host of a Toolbox, i.e. is it in browser or in a separate
+   * tab. See HostType for more details.
+   */
+  get hostType() {
+    return this._host.type;
+  },
+
+  set hostType(value) {
+    this._switchToHost(value);
+  },
+
+  /**
+   * Get/alter the currently displayed tool.
+   */
+  get currentToolId() {
+    return this._currentToolId;
+  },
+
+  set currentToolId(value) {
+    this._currentToolId = value;
+  },
+
+  /**
+   * Get the iframe containing the toolbox UI.
+   */
+  get frame() {
+    return this._host.frame;
+  },
+
+  /**
+   * Shortcut to the document containing the toolbox UI
+   */
+  get doc() {
+    return this.frame.contentDocument;
+  },
+
+  /**
+   * Open the toolbox
+   */
+  open: function TBOX_open() {
+    this._host.once("ready", function(event, iframe) {
+      iframe.addEventListener("DOMContentLoaded", this._onLoad, true);
+      iframe.setAttribute("src", this._URL);
+    }.bind(this));
+
+    this._host.open();
+  },
+
+  /**
+   * Build the buttons for changing hosts. Called every time
+   * the host changes.
+   */
+  _buildDockButtons: function TBOX_createDockButtons() {
+    let dockBox = this.doc.getElementById("toolbox-dock-buttons");
+
+    while (dockBox.firstChild) {
+      dockBox.removeChild(dockBox.firstChild);
+    }
+
+    let sideEnabled = Services.prefs.getBoolPref(this._prefs.SIDE_ENABLED);
+
+    for each (let position in this.HostType) {
+      if (position == this.hostType ||
+         (!sideEnabled && position == this.HostType.SIDE)) {
+        continue;
+      }
+
+      let button = this.doc.createElement("toolbarbutton");
+      button.id = "toolbox-dock-" + position;
+      button.className = "toolbox-dock-button";
+      button.addEventListener("command", function(position) {
+        this.hostType = position;
+      }.bind(this, position));
+
+      dockBox.appendChild(button);
+    }
+  },
+
+  /**
+   * Onload handler for the toolbox's iframe
+   */
+  _onLoad: function TBOX_onLoad() {
+    this.frame.removeEventListener("DOMContentLoaded", this._onLoad, true);
+    this.isReady = true;
+
+    let closeButton = this.doc.getElementById("toolbox-close");
+    closeButton.addEventListener("command", this.destroy, true);
+
+    this._buildDockButtons();
+
+    this._buildTabs();
+    this._buildButtons(this.frame);
+
+    this.selectTool(this._defaultToolId);
+
+    this.emit("ready");
+  },
+
+  /**
+   * Add tabs to the toolbox UI for registered tools
+   */
+  _buildTabs: function TBOX_buildTabs() {
+    for (let [id, definition] of gDevTools.getToolDefinitions()) {
+      this._buildTabForTool(definition);
+    }
+  },
+
+  /**
+   * Add buttons to the UI as specified in the devtools.window.toolbarSpec pref
+   *
+   * @param {iframe} frame
+   *        The iframe to contain the buttons
+   */
+  _buildButtons: function TBOX_buildButtons(frame) {
+    let toolbarSpec = CommandUtils.getCommandbarSpec("devtools.toolbox.toolbarSpec");
+    let environment = { chromeDocument: frame.ownerDocument };
+    let requisition = new Requisition(environment);
+    requisition.commandOutputManager = new CommandOutputManager();
+
+    let buttons = CommandUtils.createButtons(toolbarSpec, this.doc, requisition);
+
+    let container = this.doc.getElementById("toolbox-buttons");
+    buttons.forEach(function(button) {
+      container.appendChild(button);
+    }.bind(this));
+  },
+
+  /**
+   * Build a tab for one tool definition and add to the toolbox
+   *
+   * @param {string} toolDefinition
+   *        Tool definition of the tool to build a tab for.
+   */
+  _buildTabForTool: function TBOX_buildTabForTool(toolDefinition) {
+    const MAX_ORDINAL = 99;
+    if (!toolDefinition.isTargetSupported(this._target)) {
+      return;
+    }
+
+    let tabs = this.doc.getElementById("toolbox-tabs");
+    let deck = this.doc.getElementById("toolbox-deck");
+
+    let id = toolDefinition.id;
+
+    let radio = this.doc.createElement("radio");
+    radio.setAttribute("label", toolDefinition.label);
+    radio.className = "toolbox-tab devtools-tab";
+    radio.id = "toolbox-tab-" + id;
+    radio.setAttribute("toolid", id);
+
+    let ordinal = (typeof toolDefinition.ordinal == "number") ?
+                  toolDefinition.ordinal : MAX_ORDINAL;
+    radio.setAttribute("ordinal", ordinal);
+
+    radio.addEventListener("command", function(id) {
+      this.selectTool(id);
+    }.bind(this, id));
+
+    let vbox = this.doc.createElement("vbox");
+    vbox.className = "toolbox-panel";
+    vbox.id = "toolbox-panel-" + id;
+
+    tabs.appendChild(radio);
+    deck.appendChild(vbox);
+  },
+
+  /**
+   * Switch to the tool with the given id
+   *
+   * @param {string} id
+   *        The id of the tool to switch to
+   */
+  selectTool: function TBOX_selectTool(id) {
+    if (!this.isReady) {
+      throw new Error("Can't select tool, wait for toolbox 'ready' event");
+    }
+    let tab = this.doc.getElementById("toolbox-tab-" + id);
+
+    if (!tab) {
+      throw new Error("No tool found");
+    }
+
+    let tabstrip = this.doc.getElementById("toolbox-tabs");
+
+    // select the right tab
+    let index = -1;
+    let tabs = tabstrip.childNodes;
+    for (let i = 0; i < tabs.length; i++) {
+      if (tabs[i] === tab) {
+        index = i;
+        break;
+      }
+    }
+    tabstrip.selectedIndex = index;
+
+    // and select the right iframe
+    let deck = this.doc.getElementById("toolbox-deck");
+    deck.selectedIndex = index;
+
+    let definition = gDevTools.getToolDefinitions().get(id);
+
+    let iframe = this.doc.getElementById("toolbox-panel-iframe-" + id);
+    if (!iframe) {
+      iframe = this.doc.createElement("iframe");
+      iframe.className = "toolbox-panel-iframe";
+      iframe.id = "toolbox-panel-iframe-" + id;
+      iframe.setAttribute("flex", 1);
+
+      let vbox = this.doc.getElementById("toolbox-panel-" + id);
+      vbox.appendChild(iframe);
+
+      let boundLoad = function() {
+        iframe.removeEventListener("DOMContentLoaded", boundLoad, true);
+        let panel = definition.build(iframe.contentWindow, this);
+        this._toolPanels.set(id, panel);
+
+        let panelReady = function() {
+          this.emit(id + "-ready", panel);
+          this.emit("select", id);
+          this.emit(id + "-selected", panel);
+          gDevTools.emit(id + "-ready", this, panel);
+        }.bind(this);
+
+        if (panel.isReady) {
+          panelReady();
+        } else {
+          panel.once("ready", panelReady);
+        }
+      }.bind(this);
+
+      iframe.addEventListener("DOMContentLoaded", boundLoad, true);
+      iframe.setAttribute("src", definition.url);
+    } else {
+      let panel = this._toolPanels.get(id);
+      // only emit 'select' event if the iframe has been loaded
+      if (panel) {
+        this.emit("select", id);
+        this.emit(id + "-selected", panel);
+      }
+    }
+
+    Services.prefs.setCharPref(this._prefs.LAST_TOOL, id);
+
+    this._currentToolId = id;
+  },
+
+  /**
+   * Create a host object based on the given host type.
+   *
+   * @param {string} hostType
+   *        The host type of the new host object
+   *
+   * @return {Host} host
+   *        The created host object
+   */
+  _createHost: function TBOX_createHost(hostType) {
+    let hostTab = this._getHostTab();
+    if (!Hosts[hostType]) {
+      throw new Error('Unknown hostType: '+ hostType);
+    }
+    let newHost = new Hosts[hostType](hostTab);
+
+    // clean up the toolbox if its window is closed
+    newHost.on("window-closed", this.destroy);
+
+    return newHost;
+  },
+
+  /**
+   * Switch to a new host for the toolbox UI. E.g.
+   * bottom, sidebar, separate window.
+   *
+   * @param {string} hostType
+   *        The host type of the new host object
+   */
+  _switchToHost: function TBOX_switchToHost(hostType) {
+    if (hostType == this._host.type) {
+      return;
+    }
+
+    let newHost = this._createHost(hostType);
+
+    newHost.once("ready", function(event, iframe) {
+      // change toolbox document's parent to the new host
+      iframe.QueryInterface(Components.interfaces.nsIFrameLoaderOwner);
+      iframe.swapFrameLoaders(this.frame);
+
+      this._host.off("window-closed", this.destroy);
+      this._host.destroy();
+
+      this._host = newHost;
+
+      Services.prefs.setCharPref(this._prefs.LAST_HOST, this._host.type);
+
+      this._buildDockButtons();
+
+      this.emit("host-changed");
+    }.bind(this));
+
+    newHost.open();
+  },
+
+  /**
+   * Get the most appropriate host tab, either the target or the current tab
+   */
+  _getHostTab: function TBOX_getHostTab() {
+    if (!this._target.isRemote && !this._target.isChrome) {
+      return this._target.tab;
+    } else {
+      let win = Services.wm.getMostRecentWindow("navigator:browser");
+      return win.gBrowser.selectedTab;
+    }
+  },
+
+  /**
+   * Handler for the tool-registered event.
+   * @param  {string} event
+   *         Name of the event ("tool-registered")
+   * @param  {string} toolId
+   *         Id of the tool that was registered
+   */
+  _toolRegistered: function TBOX_toolRegistered(event, toolId) {
+    let defs = gDevTools.getToolDefinitions();
+    let tool = defs.get(toolId);
+
+    this._buildTabForTool(tool);
+  },
+
+  /**
+   * Handler for the tool-unregistered event.
+   * @param  {string} event
+   *         Name of the event ("tool-unregistered")
+   * @param  {string} toolId
+   *         Id of the tool that was unregistered
+   */
+  _toolUnregistered: function TBOX_toolUnregistered(event, toolId) {
+    let radio = this.doc.getElementById("toolbox-tab-" + toolId);
+    let panel = this.doc.getElementById("toolbox-panel-" + toolId);
+
+    if (this._currentToolId == toolId) {
+      let nextToolName = null;
+      if (radio.nextSibling) {
+        nextToolName = radio.nextSibling.getAttribute("toolid");
+      }
+      if (radio.previousSibling) {
+        nextToolName = radio.previousSibling.getAttribute("toolid");
+      }
+      if (nextToolName) {
+        this.selectTool(nextToolName);
+      }
+    }
+
+    if (radio) {
+      radio.parentNode.removeChild(radio);
+    }
+
+    if (panel) {
+      panel.parentNode.removeChild(panel);
+    }
+
+    if (this._toolPanels.has(toolId)) {
+      let instance = this._toolPanels.get(toolId);
+      instance.destroy();
+      this._toolPanels.delete(toolId);
+    }
+  },
+
+
+  /**
+   * Get the toolbox's notification box
+   *
+   * @return The notification box element.
+   */
+  getNotificationBox: function TBOX_getNotificationBox() {
+    return this.doc.getElementById("toolbox-notificationbox");
+  },
+
+  /**
+   * Remove all UI elements, detach from target and clear up
+   */
+  destroy: function TBOX_destroy() {
+    if (this._destroyed) {
+      return;
+    }
+
+    // Remote targets need to be notified that the toolbox is being torn down.
+    if (this._target && this._target.isRemote) {
+      this._target.destroy();
+    }
+    this._target = null;
+
+    for (let [id, panel] of this._toolPanels) {
+      panel.destroy();
+    }
+
+    this._host.destroy();
+
+    gDevTools.off("tool-registered", this._toolRegistered);
+    gDevTools.off("tool-unregistered", this._toolUnregistered);
+
+    this._destroyed = true;
+    this.emit("destroyed");
+  }
+};
diff --git a/browser/devtools/framework/ToolboxHosts.jsm b/browser/devtools/framework/ToolboxHosts.jsm
new file mode 100644
--- /dev/null
+++ b/browser/devtools/framework/ToolboxHosts.jsm
@@ -0,0 +1,208 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const Cu = Components.utils;
+
+Cu.import("resource://gre/modules/Services.jsm");
+Cu.import("resource:///modules/devtools/EventEmitter.jsm");
+
+this.EXPORTED_SYMBOLS = [ "Hosts" ];
+
+/**
+ * A toolbox host represents an object that contains a toolbox (e.g. the
+ * sidebar or a separate window). Any host object should implement the
+ * following functions:
+ *
+ * open() - create the UI and emit a 'ready' event when the UI is ready to use
+ * destroy() - destroy the host's UI
+ */
+
+this.Hosts = {
+  "bottom": BottomHost,
+  "side": SidebarHost,
+  "window": WindowHost
+}
+
+/**
+ * Host object for the dock on the bottom of the browser
+ */
+function BottomHost(hostTab) {
+  this.hostTab = hostTab;
+
+  new EventEmitter(this);
+}
+
+BottomHost.prototype = {
+  type: "bottom",
+
+  heightPref: "devtools.toolbox.footer.height",
+
+  /**
+   * Create a box at the bottom of the host tab.
+   */
+  open: function BH_open() {
+    let gBrowser = this.hostTab.ownerDocument.defaultView.gBrowser;
+    let ownerDocument = gBrowser.ownerDocument;
+
+    this._splitter = ownerDocument.createElement("splitter");
+    this._splitter.setAttribute("class", "devtools-horizontal-splitter");
+
+    this.frame = ownerDocument.createElement("iframe");
+    this.frame.id = "devtools-toolbox-bottom-iframe";
+    this.frame.height = Services.prefs.getIntPref(this.heightPref);
+
+    this._nbox = gBrowser.getNotificationBox(this.hostTab.linkedBrowser);
+    this._nbox.appendChild(this._splitter);
+    this._nbox.appendChild(this.frame);
+
+    let frameLoad = function() {
+      this.frame.removeEventListener("DOMContentLoaded", frameLoad, true);
+      this.emit("ready", this.frame);
+    }.bind(this);
+
+    this.frame.addEventListener("DOMContentLoaded", frameLoad, true);
+
+    // we have to load something so we can switch documents if we have to
+    this.frame.setAttribute("src", "about:blank");
+
+    focusTab(this.hostTab);
+  },
+
+  /**
+   * Destroy the bottom dock.
+   */
+  destroy: function BH_destroy() {
+    if (this._destroyed) {
+      return;
+    }
+    this._destroyed = true;
+    Services.prefs.setIntPref(this.heightPref, this.frame.height);
+
+    this._nbox.removeChild(this._splitter);
+    this._nbox.removeChild(this.frame);
+  }
+}
+
+
+/**
+ * Host object for the in-browser sidebar
+ */
+function SidebarHost(hostTab) {
+  this.hostTab = hostTab;
+
+  new EventEmitter(this);
+}
+
+SidebarHost.prototype = {
+  type: "side",
+
+  widthPref: "devtools.toolbox.sidebar.width",
+
+  /**
+   * Create a box in the sidebar of the host tab.
+   */
+  open: function RH_open() {
+    let gBrowser = this.hostTab.ownerDocument.defaultView.gBrowser;
+    let ownerDocument = gBrowser.ownerDocument;
+
+    this._splitter = ownerDocument.createElement("splitter");
+    this._splitter.setAttribute("class", "devtools-side-splitter");
+
+    this.frame = ownerDocument.createElement("iframe");
+    this.frame.id = "devtools-toolbox-side-iframe";
+    this.frame.width = Services.prefs.getIntPref(this.widthPref);
+
+    this._sidebar = gBrowser.getSidebarContainer(this.hostTab.linkedBrowser);
+    this._sidebar.appendChild(this._splitter);
+    this._sidebar.appendChild(this.frame);
+
+    let frameLoad = function() {
+      this.frame.removeEventListener("DOMContentLoaded", frameLoad, true);
+      this.emit("ready", this.frame);
+    }.bind(this);
+
+    this.frame.addEventListener("DOMContentLoaded", frameLoad, true);
+    this.frame.setAttribute("src", "about:blank");
+
+    focusTab(this.hostTab);
+  },
+
+  /**
+   * Destroy the sidebar.
+   */
+  destroy: function RH_destroy() {
+    Services.prefs.setIntPref(this.widthPref, this.frame.width);
+
+    this._sidebar.removeChild(this._splitter);
+    this._sidebar.removeChild(this.frame);
+  }
+}
+
+/**
+ * Host object for the toolbox in a separate window
+ */
+function WindowHost() {
+  this._boundUnload = this._boundUnload.bind(this);
+
+  new EventEmitter(this);
+}
+
+WindowHost.prototype = {
+  type: "window",
+
+  WINDOW_URL: "chrome://browser/content/devtools/framework/toolbox-window.xul",
+
+  /**
+   * Create a new xul window to contain the toolbox.
+   */
+  open: function WH_open() {
+    let flags = "chrome,centerscreen,resizable,dialog=no";
+    let win = Services.ww.openWindow(null, this.WINDOW_URL, "_blank",
+                                     flags, null);
+
+    let frameLoad = function(event) {
+      win.removeEventListener("load", frameLoad, true);
+      this.frame = win.document.getElementById("toolbox-iframe");
+      this.emit("ready", this.frame);
+    }.bind(this);
+
+    win.addEventListener("load", frameLoad, true);
+    win.addEventListener("unload", this._boundUnload);
+
+    win.focus();
+
+    this._window = win;
+  },
+
+  /**
+   * Catch the user closing the window.
+   */
+  _boundUnload: function(event) {
+    if (event.target.location != this.WINDOW_URL) {
+      return;
+    }
+    this._window.removeEventListener("unload", this._boundUnload);
+
+    this.emit("window-closed");
+  },
+
+  /**
+   * Destroy the window.
+   */
+  destroy: function WH_destroy() {
+    this._window.removeEventListener("unload", this._boundUnload);
+    this._window.close();
+  }
+}
+
+/**
+ *  Switch to the given tab in a browser and focus the browser window
+ */
+function focusTab(tab) {
+  let browserWindow = tab.ownerDocument.defaultView;
+  browserWindow.focus();
+  browserWindow.gBrowser.selectedTab = tab;
+}
diff --git a/browser/devtools/framework/connect/connect.css b/browser/devtools/framework/connect/connect.css
new file mode 100644
--- /dev/null
+++ b/browser/devtools/framework/connect/connect.css
@@ -0,0 +1,87 @@
+html {
+  background: url("chrome://browser/skin/newtab/noise.png");
+}
+
+body {
+  font-family: Arial;
+  padding: 20px;
+  border-radius: 3px;
+  max-width: 600px;
+  min-height: 400px;
+  margin: 10px auto 0;
+}
+
+label {
+  display: block;
+  margin: 10px;
+  font-size: 0;
+}
+
+label > span {
+  display: inline-block;
+  min-width: 150px;
+  font-size: 0.8rem;
+  text-align: right;
+  margin-right: 10px;
+}
+
+#submit {
+  margin-left: 160px;
+}
+
+
+#actors, #connection-form {
+  margin: 20px;
+}
+
+input {
+  border: 1px solid grey;
+}
+
+#connection-form,
+#connecting,
+#actors-list {
+  display: none;
+}
+
+body:not(.actors-mode):not(.connecting) > #connection-form {
+  display: block;
+}
+
+body.actors-mode > #actors-list {
+  display: block;
+}
+
+body.connecting > #connecting {
+  display: block;
+}
+
+#connecting {
+  text-align: center;
+}
+
+#throbber {
+  height: 7px; width: 7px;
+  border-radius: 50%;
+  background: black;
+  display: inline-block;
+  animation-duration: 0.6s;
+  animation-name: anim;
+  animation-direction: alternate;
+  animation-iteration-count: infinite;
+  animation-timing-function: linear;
+}
+@keyframes anim {to {
+    transform: scale(0.5) rotate(0.1deg);
+}}
+
+#actors {
+  padding-left: 0;
+  font-size: 0.9rem;
+}
+
+#actors > a {
+  display: block;
+  margin: 5px;
+  padding: 5px;
+}
diff --git a/browser/devtools/framework/connect/connect.js b/browser/devtools/framework/connect/connect.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/framework/connect/connect.js
@@ -0,0 +1,100 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const Cu = Components.utils;
+Cu.import("resource:///modules/devtools/Target.jsm");
+Cu.import("resource:///modules/devtools/Toolbox.jsm");
+Cu.import("resource:///modules/devtools/gDevTools.jsm");
+Cu.import("resource://gre/modules/Services.jsm");
+Cu.import("resource://gre/modules/devtools/dbg-client.jsm");
+
+let gClient;
+
+function submit() {
+  document.body.classList.add("connecting");
+
+  let host = document.getElementById("host").value;
+  let port = document.getElementById("port").value;
+  if (!host) {
+    host = Services.prefs.getCharPref("devtools.debugger.remote-host");
+  } else {
+    Services.prefs.setCharPref("devtools.debugger.remote-host", host);
+  }
+  if (!port) {
+    port = Services.prefs.getIntPref("devtools.debugger.remote-port");
+  } else {
+    Services.prefs.setIntPref("devtools.debugger.remote-port", port);
+  }
+
+  let transport = debuggerSocketConnect(host, port);
+  let client = gClient = new DebuggerClient(transport);
+
+  client.connect(function(aType, aTraits) {
+    client.listTabs(function(aResponse) {
+      document.body.classList.remove("connecting");
+      document.body.classList.add("actors-mode");
+
+      let parent = document.getElementById("actors");
+      let focusSet = false;
+
+      // Add Global Process debugging...
+      let globals = JSON.parse(JSON.stringify(aResponse));
+      delete globals.tabs;
+      delete globals.selected;
+      // ...only if there are appropriate actors (a 'from' property will always
+      // be there).
+      if (Object.keys(globals).length > 1) {
+        let a = document.createElement("a");
+        a.onclick = function() {
+          connect(globals, true);
+        }
+
+        a.title = a.textContent = "Remote process";
+        a.href = "#";
+
+        parent.appendChild(a);
+      }
+
+      // Add one entry for each open tab.
+      if (aResponse.tabs.length > 0) {
+        let header = document.createElement("div");
+        header.innerHTML = "Tabs:";
+        parent.appendChild(header);
+      }
+      for (let i = 0; i < aResponse.tabs.length; i++) {
+        let tab = aResponse.tabs[i];
+
+        let a = document.createElement("a");
+        a.onclick = function() {
+          connect(tab);
+        }
+
+        a.title = a.textContent = tab.title;
+        a.href = "#";
+
+        if (i == aResponse.selected) {
+          a.title += " [*]";
+          a.textContent = a.title;
+        }
+
+        parent.appendChild(a);
+
+        if (!focusSet) {
+          a.focus();
+          focusSet = true;
+        }
+      }
+    });
+  });
+}
+
+function connect(form, chrome=false) {
+  let target = TargetFactory.forRemote(form, gClient, chrome);
+  gDevTools.openToolbox(target, Toolbox.HostType.WINDOW, "webconsole");
+  window.close();
+}
diff --git a/browser/devtools/framework/connect/connect.xhtml b/browser/devtools/framework/connect/connect.xhtml
new file mode 100644
--- /dev/null
+++ b/browser/devtools/framework/connect/connect.xhtml
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+
+<!DOCTYPE html [
+<!ENTITY % connectionDTD SYSTEM "chrome://browser/locale/devtools/connection-screen.dtd" >
+ %connectionDTD;
+]>
+
+<html xmlns="http://www.w3.org/1999/xhtml"
+      xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
+  <head>
+    <title>&title;</title>
+    <link rel="stylesheet" href="chrome://browser/content/devtools/connect.css" type="text/css"/>
+    <script type="application/javascript;version=1.8" src="connect.js"></script>
+  </head>
+  <body>
+    <p>
+    </p>
+    <section id="connection-form">
+      <form onsubmit="window.submit()" action="#">
+        <label>
+          <span>&host;</span>
+          <input id="host" type="text" placeholder="localhost"></input>
+        </label>
+        <label>
+          <span>&port;</span>
+          <input id="port" type="number" placeholder="6000"></input>
+        </label>
+        <label>
+          <input id="submit" type="submit" value="&connect;"></input>
+        </label>
+      </form>
+    </section>
+    <section id="actors-list">
+      <p>&availability;</p>
+      <ul id="actors"></ul>
+    </section>
+    <section id="connecting">
+      <p>&connecting;</p>
+      <div id="throbber"></div>
+    </section>
+  </body>
+</html>
diff --git a/browser/devtools/framework/gDevTools.jsm b/browser/devtools/framework/gDevTools.jsm
new file mode 100644
--- /dev/null
+++ b/browser/devtools/framework/gDevTools.jsm
@@ -0,0 +1,543 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+this.EXPORTED_SYMBOLS = [ "gDevTools", "DevTools", "DevToolsXULCommands" ];
+
+const Cu = Components.utils;
+const Ci = Components.interfaces;
+
+Cu.import("resource://gre/modules/Services.jsm");
+Cu.import("resource:///modules/devtools/EventEmitter.jsm");
+Cu.import("resource:///modules/devtools/ToolDefinitions.jsm");
+Cu.import("resource:///modules/devtools/Toolbox.jsm");
+Cu.import("resource:///modules/devtools/Target.jsm");
+
+const FORBIDDEN_IDS = new Set("toolbox", "");
+
+/**
+ * DevTools is a class that represents a set of developer tools, it holds a
+ * set of tools and keeps track of open toolboxes in the browser.
+ */
+this.DevTools = function DevTools() {
+  this._tools = new Map();
+  this._toolboxes = new Map();
+
+  // destroy() is an observer's handler so we need to preserve context.
+  this.destroy = this.destroy.bind(this);
+
+  this._trackedBrowserWindows = new Set();
+
+  // Bind _updateMenuCheckbox() to preserve context.
+  this._updateMenuCheckbox = this._updateMenuCheckbox.bind(this);
+
+  new EventEmitter(this);
+
+  Services.obs.addObserver(this.destroy, "quit-application", false);
+
+  /**
+   * Register the set of default tools
+   */
+  for (let definition of defaultTools) {
+    this.registerTool(definition);
+  }
+}
+
+DevTools.prototype = {
+  /**
+   * Register a new developer tool.
+   *
+   * A definition is a light object that holds different information about a
+   * developer tool. This object is not supposed to have any operational code.
+   * See it as a "manifest".
+   * The only actual code lives in the build() function, which will be used to
+   * start an instance of this tool.
+   *
+   * Each toolDefinition has the following properties:
+   * - id: Unique identifier for this tool (string|required)
+   * - killswitch: Property name to allow us to turn this tool on/off globally
+   *               (string|required) (TODO: default to devtools.{id}.enabled?)
+   * - icon: URL pointing to a graphic which will be used as the src for an
+   *         16x16 img tag (string|required)
+   * - url: URL pointing to a XUL/XHTML document containing the user interface
+   *        (string|required)
+   * - label: Localized name for the tool to be displayed to the user
+   *          (string|required)
+   * - build: Function that takes an iframe, which has been populated with the
+   *          markup from |url|, and also the toolbox containing the panel.
+   *          And returns an instance of ToolPanel (function|required)
+   */
+  registerTool: function DT_registerTool(toolDefinition) {
+    let toolId = toolDefinition.id;
+
+    if (!toolId || FORBIDDEN_IDS.has(toolId)) {
+      throw new Error("Invalid definition.id");
+    }
+
+    toolDefinition.killswitch = toolDefinition.killswitch ||
+      "devtools." + toolId + ".enabled";
+    this._tools.set(toolId, toolDefinition);
+
+    this._addToolToWindows(toolDefinition);
+
+    this.emit("tool-registered", toolId);
+  },
+
+  /**
+   * Removes all tools that match the given |toolId|
+   * Needed so that add-ons can remove themselves when they are deactivated
+   *
+   * @param {string} toolId
+   *        id of the tool to unregister
+   */
+  unregisterTool: function DT_unregisterTool(toolId) {
+    this._tools.delete(toolId);
+
+    this._removeToolFromWindows(toolId);
+
+    this.emit("tool-unregistered", toolId);
+  },
+
+  /**
+   * Allow ToolBoxes to get at the list of tools that they should populate
+   * themselves with.
+   *
+   * @return {Map} tools
+   *         A map of the the tool definitions registered in this instance
+   */
+  getToolDefinitions: function DT_getToolDefinitions() {
+    let tools = new Map();
+
+    for (let [key, value] of this._tools) {
+      let enabled;
+
+      try {
+        enabled = Services.prefs.getBoolPref(value.killswitch);
+      } catch(e) {
+        enabled = true;
+      }
+
+      if (enabled) {
+        tools.set(key, value);
+      }
+    }
+    return tools;
+  },
+
+  /**
+   * Create a toolbox to debug |target| using a window displayed in |hostType|
+   * (optionally with |defaultToolId| opened)
+   *
+   * @param {Target} target
+   *         The target the toolbox will debug
+   * @param {Toolbox.HostType} hostType
+   *        The type of host (bottom, top, side)
+   * @param {string} defaultToolId
+   *        The id of the initial tool to show
+   *
+   * @return {Toolbox} toolbox
+   *        The toolbox that was opened
+   */
+  openToolbox: function DT_openToolbox(target, hostType, defaultToolId) {
+    if (this._toolboxes.has(target)) {
+      // only allow one toolbox per target
+      return this._toolboxes.get(target);
+    }
+
+    let tb = new Toolbox(target, hostType, defaultToolId);
+
+    this._toolboxes.set(target, tb);
+    tb.once("destroyed", function() {
+      this._toolboxes.delete(target);
+      this._updateMenuCheckbox();
+      this.emit("toolbox-destroyed", target);
+    }.bind(this));
+
+    tb.once("ready", function() {
+      this.emit("toolbox-ready", tb);
+      this._updateMenuCheckbox();
+    }.bind(this));
+
+    tb.open();
+
+    return tb;
+  },
+
+  /**
+   * Close the toolbox for a given target
+   */
+  closeToolbox: function DT_closeToolbox(target) {
+    let toolbox = this._toolboxes.get(target);
+    if (toolbox == null) {
+      return;
+    }
+    toolbox.destroy();
+  },
+
+  /**
+   * Open the toolbox for a specific target (not tab).
+   * FIXME: We should probably merge this function and openToolbox
+   *
+   * @param  {Target} target
+   *         The target that the toolbox should be debugging
+   * @param  {String} toolId
+   *         The id of the tool to open
+   *
+   * @return {Toolbox} toolbox
+   *         The toolbox that has been opened
+   */
+  openToolboxForTab: function DT_openToolboxForTab(target, toolId) {
+    let tb = this.getToolboxForTarget(target);
+
+    if (tb) {
+      tb.selectTool(toolId);
+    } else {
+      tb = this.openToolbox(target, null, toolId);
+    }
+    return tb;
+  },
+
+  /**
+   * This function is for the benefit of command#Tools:DevToolbox in
+   * browser/base/content/browser-sets.inc and should not be used outside
+   * of there
+   */
+  toggleToolboxCommand: function(gBrowser, toolId=null) {
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    this.toggleToolboxForTarget(target, toolId);
+  },
+
+  /**
+   * Toggle a toolbox for the given target.
+   *
+   * @param  {Target} target
+   *         The target the toolbox is debugging
+   * @param  {string} toolId
+   *         The id of the tool to show in the toolbox, if it's to be opened.
+   */
+  toggleToolboxForTarget: function DT_toggleToolboxForTarget(target, toolId) {
+    let tb = this.getToolboxForTarget(target);
+
+    if (tb /* FIXME: && tool is showing */ ) {
+      tb.destroy();
+    } else {
+      this.openToolboxForTab(target, toolId);
+    }
+  },
+
+  /**
+   * Return the toolbox for a given target.
+   *
+   * @param  {object} target
+   *         Target value e.g. the target that owns this toolbox
+   *
+   * @return {Toolbox} toolbox
+   *         The toobox that is debugging the given target
+   */
+  getToolboxForTarget: function DT_getToolboxForTarget(target) {
+    return this._toolboxes.get(target);
+  },
+
+  /**
+   * Return a tool panel for a given tool and target.
+   *
+   * @param  {String} toolId
+   *         The id of the tool to open.
+   * @param  {object} target
+   *         The toolbox's target.
+   *
+   * @return {ToolPanel} panel
+   *         Panel for the tool with the toolid
+   */
+  getPanelForTarget: function DT_getPanelForTarget(toolId, target) {
+    let toolbox = this.getToolboxForTarget(target);
+    if (!toolbox) {
+      return undefined;
+    }
+    return toolbox.getToolPanels().get(toolId);
+  },
+
+  /**
+   * Add this DevTools's presence to a browser window's document
+   *
+   * @param  {XULDocument} doc
+   *         The document to which menuitems and handlers are to be added
+   */
+  registerBrowserWindow: function DT_registerBrowserWindow(win) {
+    this._trackedBrowserWindows.add(win);
+    this._addAllToolsToMenu(win.document);
+
+    let tabContainer = win.document.getElementById("tabbrowser-tabs")
+    tabContainer.addEventListener("TabSelect", this._updateMenuCheckbox, false);
+  },
+
+  /**
+   * Add the menuitem for a tool to all open browser windows.
+   *
+   * @param {object} toolDefinition
+   *        properties of the tool to add
+   */
+  _addToolToWindows: function DT_addToolToWindows(toolDefinition) {
+    for (let win of this._trackedBrowserWindows) {
+      this._addToolToMenu(toolDefinition, win.document);
+    }
+  },
+
+  /**
+   * Add all tools to the developer tools menu of a window.
+   *
+   * @param {XULDocument} doc
+   *        The document to which the tool items are to be added.
+   */
+  _addAllToolsToMenu: function DT_addAllToolsToMenu(doc) {
+    let fragCommands = doc.createDocumentFragment();
+    let fragKeys = doc.createDocumentFragment();
+    let fragBroadcasters = doc.createDocumentFragment();
+    let fragAppMenuItems = doc.createDocumentFragment();
+    let fragMenuItems = doc.createDocumentFragment();
+
+    for (let [key, toolDefinition] of this._tools) {
+      let frags = this._addToolToMenu(toolDefinition, doc, true);
+
+      if (!frags) {
+        return;
+      }
+
+      let [cmd, key, bc, appmenuitem, menuitem] = frags;
+
+      fragCommands.appendChild(cmd);
+      if (key) {
+        fragKeys.appendChild(key);
+      }
+      fragBroadcasters.appendChild(bc);
+      fragAppMenuItems.appendChild(appmenuitem);
+      fragMenuItems.appendChild(menuitem);
+    }
+
+    let mcs = doc.getElementById("mainCommandSet");
+    mcs.appendChild(fragCommands);
+
+    let mks = doc.getElementById("mainKeyset");
+    mks.appendChild(fragKeys);
+
+    let mbs = doc.getElementById("mainBroadcasterSet");
+    mbs.appendChild(fragBroadcasters);
+
+    let amp = doc.getElementById("appmenu_webDeveloper_popup");
+    if (amp) {
+      let amps = doc.getElementById("appmenu_devtools_separator");
+      amp.insertBefore(fragAppMenuItems, amps);
+    }
+
+    let mp = doc.getElementById("menuWebDeveloperPopup");
+    let mps = doc.getElementById("menu_devtools_separator");
+    mp.insertBefore(fragMenuItems, mps);
+  },
+
+  /**
+   * Add a menu entry for a tool definition
+   *
+   * @param {string} toolDefinition
+   *        Tool definition of the tool to add a menu entry.
+   * @param {XULDocument} doc
+   *        The document to which the tool menu item is to be added.
+   * @param {Boolean} [noAppend]
+   *        Return an array of elements instead of appending them to the
+   *        document. Default is false.
+   */
+  _addToolToMenu: function DT_addToolToMenu(toolDefinition, doc, noAppend) {
+    let id = toolDefinition.id;
+
+    // Prevent multiple entries for the same tool.
+    if (doc.getElementById("Tools:" + id)) {
+      return;
+    }
+
+    let cmd = doc.createElement("command");
+    cmd.id = "Tools:" + id;
+    cmd.setAttribute("oncommand",
+        'gDevTools.toggleToolboxCommand(gBrowser, "' + id + '");');
+
+    let key = null;
+    if (toolDefinition.key) {
+      key = doc.createElement("key");
+      key.id = "key_" + id;
+
+      if (toolDefinition.key.startsWith("VK_")) {
+        key.setAttribute("keycode", toolDefinition.key);
+      } else {
+        key.setAttribute("key", toolDefinition.key);
+      }
+
+      key.setAttribute("oncommand",
+          'gDevTools.toggleToolboxCommand(gBrowser, "' + id + '");');
+      key.setAttribute("modifiers", toolDefinition.modifiers);
+    }
+
+    let bc = doc.createElement("broadcaster");
+    bc.id = "devtoolsMenuBroadcaster_" + id;
+    bc.setAttribute("label", toolDefinition.label);
+    bc.setAttribute("command", "Tools:" + id);
+
+    if (key) {
+      bc.setAttribute("key", "key_" + id);
+    }
+
+    let appmenuitem = doc.createElement("menuitem");
+    appmenuitem.id = "appmenuitem_" + id;
+    appmenuitem.setAttribute("observes", "devtoolsMenuBroadcaster_" + id);
+
+    let menuitem = doc.createElement("menuitem");
+    menuitem.id = "menuitem_" + id;
+    menuitem.setAttribute("observes", "devtoolsMenuBroadcaster_" + id);
+
+    if (toolDefinition.accesskey) {
+      menuitem.setAttribute("accesskey", toolDefinition.accesskey);
+    }
+
+    if (noAppend) {
+      return [cmd, key, bc, appmenuitem, menuitem];
+    } else {
+      let mcs = doc.getElementById("mainCommandSet");
+      mcs.appendChild(cmd);
+
+      if (key) {
+        let mks = doc.getElementById("mainKeyset");
+        mks.appendChild(key);
+      }
+
+      let mbs = doc.getElementById("mainBroadcasterSet");
+      mbs.appendChild(bc);
+
+      let amp = doc.getElementById("appmenu_webDeveloper_popup");
+      if (amp) {
+        let amps = doc.getElementById("appmenu_devtools_separator");
+        amp.insertBefore(appmenuitem, amps);
+      }
+
+      let mp = doc.getElementById("menuWebDeveloperPopup");
+      let mps = doc.getElementById("menu_devtools_separator");
+      mp.insertBefore(menuitem, mps);
+    }
+  },
+
+  /**
+   * Update the "Toggle Toolbox" checkbox in the developer tools menu. This is
+   * called when a toolbox is created or destroyed.
+   */
+  _updateMenuCheckbox: function DT_updateMenuCheckbox() {
+    for (let win of this._trackedBrowserWindows) {
+
+      let hasToolbox = false;
+      if (TargetFactory.isKnownTab(win.gBrowser.selectedTab)) {
+        let target = TargetFactory.forTab(win.gBrowser.selectedTab);
+        if (this._toolboxes.has(target)) {
+          hasToolbox = true;
+        }
+      }
+
+      let broadcaster = win.document.getElementById("devtoolsMenuBroadcaster_DevToolbox");
+      if (hasToolbox) {
+        broadcaster.setAttribute("checked", "true");
+      } else {
+        broadcaster.removeAttribute("checked");
+      }
+    }
+  },
+
+  /**
+   * Remove the menuitem for a tool to all open browser windows.
+   *
+   * @param {object} toolId
+   *        id of the tool to remove
+   */
+  _removeToolFromWindows: function DT_removeToolFromWindows(toolId) {
+    for (let win of this._trackedBrowserWindows) {
+      this._removeToolFromMenu(toolId, win.document);
+    }
+  },
+
+  /**
+   * Remove a tool's menuitem from a window
+   *
+   * @param {string} toolId
+   *        Id of the tool to add a menu entry for
+   * @param {XULDocument} doc
+   *        The document to which the tool menu item is to be removed from
+   */
+  _removeToolFromMenu: function DT_removeToolFromMenu(toolId, doc) {
+    let command = doc.getElementById("Tools:" + toolId);
+    command.parentNode.removeChild(command);
+
+    let key = doc.getElementById("key_" + toolId);
+    if (key) {
+      key.parentNode.removeChild(key);
+    }
+
+    let bc = doc.getElementById("devtoolsMenuBroadcaster_" + toolId);
+    bc.parentNode.removeChild(bc);
+
+    /*
+    // FIXME: item is null in testing. This is the only place to use
+    // "appmenu_devToolbar" + toolId, so it seems clear that this is wrong
+    let item = doc.getElementById("appmenu_devToolbar" + toolId);
+    item.parentNode.removeChild(item);
+    */
+  },
+
+  /**
+   * Called on browser unload to remove menu entries, toolboxes and event
+   * listeners from the closed browser window.
+   *
+   * @param  {XULWindow} win
+   *         The window containing the menu entry
+   */
+  forgetBrowserWindow: function DT_forgetBrowserWindow(win) {
+    if (!this._tools) {
+      return;
+    }
+
+    this._trackedBrowserWindows.delete(win);
+
+    // Destroy toolboxes for closed window
+    for (let [target, toolbox] of this._toolboxes) {
+      if (toolbox.frame.ownerDocument.defaultView == win) {
+        toolbox.destroy();
+      }
+    }
+
+    let tabContainer = win.document.getElementById("tabbrowser-tabs")
+    tabContainer.removeEventListener("TabSelect",
+                                     this._updateMenuCheckbox, false);
+  },
+
+  /**
+   * All browser windows have been closed, tidy up remaining objects.
+   */
+  destroy: function() {
+    Services.obs.removeObserver(this.destroy, "quit-application");
+
+    delete this._trackedBrowserWindows;
+    delete this._tools;
+    delete this._toolboxes;
+  },
+};
+
+/**
+ * gDevTools is a singleton that controls the Firefox Developer Tools.
+ *
+ * It is an instance of a DevTools class that holds a set of tools. It has the
+ * same lifetime as the browser.
+ */
+this.gDevTools = new DevTools();
+
+/**
+ * DevToolsXULCommands exposes methods used by browser's <command>s.
+ */
+this.DevToolsXULCommands = {
+  openConnectScreen: function(gBrowser) {
+    gBrowser.selectedTab = gBrowser.addTab("chrome://browser/content/devtools/connect.xhtml");
+  },
+}
diff --git a/browser/devtools/framework/test/Makefile.in b/browser/devtools/framework/test/Makefile.in
new file mode 100644
--- /dev/null
+++ b/browser/devtools/framework/test/Makefile.in
@@ -0,0 +1,26 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+DEPTH			= @DEPTH@
+topsrcdir	= @top_srcdir@
+srcdir		= @srcdir@
+VPATH			= @srcdir@
+relativesrcdir  = @relativesrcdir@
+
+include $(DEPTH)/config/autoconf.mk
+
+MOCHITEST_BROWSER_FILES = \
+		head.js \
+		browser_devtools_api.js \
+		browser_new_activation_workflow.js \
+		browser_toolbox_dynamic_registration.js \
+		browser_toolbox_hosts.js \
+		browser_toolbox_ready.js \
+		browser_toolbox_select_event.js \
+		browser_target_events.js \
+		browser_toolbox_tool_ready.js \
+		browser_toolbox_sidebar.js \
+		$(NULL)
+
+include $(topsrcdir)/config/rules.mk
diff --git a/browser/devtools/framework/test/browser_devtools_api.js b/browser/devtools/framework/test/browser_devtools_api.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/framework/test/browser_devtools_api.js
@@ -0,0 +1,137 @@
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/ */
+
+// Tests devtools API
+
+const Cu = Components.utils;
+const toolId = "test-tool";
+
+let tempScope = {};
+Cu.import("resource:///modules/devtools/EventEmitter.jsm", tempScope);
+let EventEmitter = tempScope.EventEmitter;
+Cu.import("resource:///modules/devtools/Target.jsm", tempScope);
+let TargetFactory = tempScope.TargetFactory;
+
+function test() {
+  addTab("about:blank", function(aBrowser, aTab) {
+    runTests(aTab);
+  });
+}
+
+function runTests(aTab) {
+  let toolDefinition = {
+    id: toolId,
+    isTargetSupported: function() true,
+    killswitch: "devtools.test-tool.enabled",
+    url: "about:blank",
+    label: "someLabel",
+    build: function(iframeWindow, toolbox) {
+      let panel = new DevToolPanel(iframeWindow, toolbox);
+      return panel;
+    },
+  };
+
+  ok(gDevTools, "gDevTools exists");
+  is(gDevTools.getToolDefinitions().has(toolId), false,
+    "The tool is not registered");
+
+  gDevTools.registerTool(toolDefinition);
+  is(gDevTools.getToolDefinitions().has(toolId), true,
+    "The tool is registered");
+
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+
+  function onNewToolbox(event, toolboxFromEvent) {
+    let toolBoxes = gDevTools._toolboxes;
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    let tb = toolBoxes.get(target);
+    is(toolboxFromEvent, tb, "'toolbox-ready' event fired. Correct toolbox value.");
+    is(tb.target, target, "toolbox target is correct");
+    is(tb._host.hostTab, gBrowser.selectedTab, "toolbox host is correct");
+    gDevTools.once(toolId + "-ready", continueTests);
+  }
+
+  function onToolboxClosed(event, targetFromEvent) {
+    is(targetFromEvent, target, "'toolbox-destroyed' event fired. Correct tab value.");
+    finishUp();
+  }
+
+
+  gDevTools.once("toolbox-ready", onNewToolbox);
+  gDevTools.once("toolbox-destroyed", onToolboxClosed);
+
+  executeSoon(function() {
+    gDevTools.openToolbox(target, "bottom", toolId);
+  });
+}
+
+function continueTests(event, toolbox, panel) {
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+  is(toolbox, gDevTools._toolboxes.get(target), "{toolId}-ready event received, with correct toolbox value");
+  is(panel, toolbox.getToolPanels().get(toolId), "panel value is correct");
+
+  is(toolbox.currentToolId, toolId, "toolbox _currentToolId is correct");
+
+  let toolDefinitions = gDevTools.getToolDefinitions();
+  is(toolDefinitions.has(toolId), true, "The tool is in gDevTools");
+
+  let toolDefinition = toolDefinitions.get(toolId);
+  is(toolDefinition.id, toolId, "toolDefinition id is correct");
+
+  gDevTools.unregisterTool(toolId);
+  is(gDevTools.getToolDefinitions().has(toolId), false,
+    "The tool is no longer registered");
+
+  toolbox.destroy();
+}
+
+function finishUp() {
+  tempScope = null;
+  gBrowser.removeCurrentTab();
+  finish();
+}
+
+/**
+* When a Toolbox is started it creates a DevToolPanel for each of the tools
+* by calling toolDefinition.build(). The returned object should
+* at least implement these functions. They will be used by the ToolBox.
+*
+* There may be no benefit in doing this as an abstract type, but if nothing
+* else gives us a place to write documentation.
+*/
+function DevToolPanel(iframeWindow, toolbox) {
+  new EventEmitter(this);
+
+  this._toolbox = toolbox;
+
+  /*let doc = iframeWindow.document
+  let label = doc.createElement("label");
+  let textNode = doc.createTextNode("Some Tool");
+
+  label.appendChild(textNode);
+  doc.body.appendChild(label);*/
+
+  executeSoon(function() {
+    this.setReady();
+  }.bind(this));
+}
+
+DevToolPanel.prototype = {
+  get target() this._toolbox.target,
+
+  get toolbox() this._toolbox,
+
+  get isReady() this._isReady,
+
+  _isReady: false,
+
+  setReady: function() {
+    this._isReady = true;
+    this.emit("ready");
+  },
+
+  destroy: function DTI_destroy()
+  {
+
+  },
+};
diff --git a/browser/devtools/framework/test/browser_new_activation_workflow.js b/browser/devtools/framework/test/browser_new_activation_workflow.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/framework/test/browser_new_activation_workflow.js
@@ -0,0 +1,64 @@
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/ */
+
+// Tests devtools API
+
+const Cu = Components.utils;
+
+let toolbox;
+
+let tempScope = {};
+Cu.import("resource:///modules/devtools/Target.jsm", tempScope);
+let TargetFactory = tempScope.TargetFactory;
+
+function test() {
+  addTab("about:blank", function(aBrowser, aTab) {
+    loadWebConsole(aTab);
+  });
+}
+
+function loadWebConsole(aTab) {
+  ok(gDevTools, "gDevTools exists");
+
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+  toolbox = gDevTools.openToolbox(target, "bottom", "webconsole");
+  toolbox.once("webconsole-ready", checkToolLoading);
+}
+
+function checkToolLoading() {
+  is(toolbox.currentToolId, "webconsole", "The web console is selected");
+  selectAndCheckById("jsdebugger");
+  selectAndCheckById("styleeditor");
+  testToggle();
+}
+
+function selectAndCheckById(id) {
+  let doc = toolbox.frame.contentDocument;
+
+  toolbox.selectTool(id);
+  let tab = doc.getElementById("toolbox-tab-" + id);
+  is(tab.selected, true, "The " + id + " tab is selected");
+}
+
+function testToggle() {
+  toolbox.once("destroyed", function() {
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    toolbox = gDevTools.openToolbox(target, "bottom", "styleeditor");
+    toolbox.once("styleeditor-ready", checkStyleEditorLoaded);
+  }.bind(this));
+
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+  gDevTools.toggleToolboxForTarget(target);
+}
+
+function checkStyleEditorLoaded() {
+  is(toolbox.currentToolId, "styleeditor", "The style editor is selected");
+  finishUp();
+}
+
+function finishUp() {
+  toolbox.destroy();
+  toolbox = null;
+  gBrowser.removeCurrentTab();
+  finish();
+}
diff --git a/browser/devtools/framework/test/browser_target_events.js b/browser/devtools/framework/test/browser_target_events.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/framework/test/browser_target_events.js
@@ -0,0 +1,58 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+var tempScope = {};
+Cu.import("resource:///modules/devtools/Target.jsm", tempScope);
+var TargetFactory = tempScope.TargetFactory;
+
+var target;
+
+function test()
+{
+  waitForExplicitFinish();
+
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", onLoad, true);
+}
+
+function onLoad(evt) {
+  gBrowser.selectedBrowser.removeEventListener(evt.type, onLoad, true);
+
+  target = TargetFactory.forTab(gBrowser.selectedTab);
+
+  is(target.tab, gBrowser.selectedTab, "Target linked to the right tab.");
+
+  target.once("hidden", onHidden);
+  gBrowser.selectedTab = gBrowser.addTab();
+}
+
+function onHidden() {
+  ok(true, "Hidden event received");
+  target.once("visible", onVisible);
+  gBrowser.removeCurrentTab();
+}
+
+function onVisible() {
+  ok(true, "Visible event received");
+  target.once("will-navigate", onWillNavigate);
+  gBrowser.contentWindow.location = "data:text/html,test navigation";
+}
+
+function onWillNavigate(event, request) {
+  ok(true, "will-navigate event received");
+  target.once("navigate", onNavigate);
+}
+
+function onNavigate() {
+  ok(true, "navigate event received");
+  target.once("close", onClose);
+  gBrowser.removeCurrentTab();
+}
+
+function onClose() {
+  ok(true, "close event received");
+
+  target = null;
+  finish();
+}
diff --git a/browser/devtools/framework/test/browser_toolbox_dynamic_registration.js b/browser/devtools/framework/test/browser_toolbox_dynamic_registration.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/framework/test/browser_toolbox_dynamic_registration.js
@@ -0,0 +1,112 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+let toolbox;
+
+let temp = {};
+Cu.import("resource:///modules/devtools/Target.jsm", temp);
+let TargetFactory = temp.TargetFactory;
+
+function test()
+{
+  waitForExplicitFinish();
+
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function onLoad(evt) {
+    gBrowser.selectedBrowser.removeEventListener(evt.type, onLoad, true);
+    openToolbox();
+  }, true);
+
+  content.location = "data:text/html,test for dynamically registering and unregistering tools";
+}
+
+function openToolbox()
+{
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+  toolbox = gDevTools.openToolbox(target);
+
+  toolbox.once("ready", testRegister);
+}
+
+
+function testRegister()
+{
+  gDevTools.once("tool-registered", toolRegistered);
+
+  gDevTools.registerTool({
+    id: "test-tool",
+    label: "Test Tool",
+    isTargetSupported: function() true,
+    build: function() {}
+  });
+}
+
+function toolRegistered(event, toolId)
+{
+  is(toolId, "test-tool", "tool-registered event handler sent tool id");
+
+  ok(gDevTools.getToolDefinitions().has(toolId), "tool added to map");
+
+  // test that it appeared in the UI
+  let doc = toolbox.frame.contentDocument;
+  let tab = doc.getElementById("toolbox-tab-" + toolId);
+  ok(tab, "new tool's tab exists in toolbox UI");
+
+  let panel = doc.getElementById("toolbox-panel-" + toolId);
+  ok(panel, "new tool's panel exists in toolbox UI");
+
+  for (let win of getAllBrowserWindows()) {
+    let command = win.document.getElementById("Tools:" + toolId);
+    ok(command, "command for new tool added to every browser window");
+  }
+
+  // then unregister it
+  testUnregister();
+}
+
+function getAllBrowserWindows() {
+  let wins = [];
+  let enumerator = Services.wm.getEnumerator("navigator:browser");
+  while (enumerator.hasMoreElements()) {
+    wins.push(enumerator.getNext());
+  }
+  return wins;
+}
+
+function testUnregister()
+{
+  gDevTools.once("tool-unregistered", toolUnregistered);
+
+  gDevTools.unregisterTool("test-tool");
+}
+
+function toolUnregistered(event, toolId)
+{
+  is(toolId, "test-tool", "tool-unregistered event handler sent tool id");
+
+  ok(!gDevTools.getToolDefinitions().has(toolId), "tool removed from map");
+
+  // test that it disappeared from the UI
+  let doc = toolbox.frame.contentDocument;
+  let tab = doc.getElementById("toolbox-tab-" + toolId);
+  ok(!tab, "tool's tab was removed from the toolbox UI");
+
+  let panel = doc.getElementById("toolbox-panel-" + toolId);
+  ok(!panel, "tool's panel was removed from toolbox UI");
+
+  for (let win of getAllBrowserWindows()) {
+    let command = win.document.getElementById("Tools:" + toolId);
+    ok(!command, "command removed from every browser window");
+  }
+
+  cleanup();
+}
+
+function cleanup()
+{
+  toolbox.destroy();
+  toolbox = null;
+  gBrowser.removeCurrentTab();
+  finish();
+}
diff --git a/browser/devtools/framework/test/browser_toolbox_hosts.js b/browser/devtools/framework/test/browser_toolbox_hosts.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/framework/test/browser_toolbox_hosts.js
@@ -0,0 +1,135 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+let temp = {}
+Cu.import("resource:///modules/devtools/gDevTools.jsm", temp);
+let DevTools = temp.DevTools;
+
+Cu.import("resource:///modules/devtools/Toolbox.jsm", temp);
+let Toolbox = temp.Toolbox;
+
+Cu.import("resource:///modules/devtools/Target.jsm", temp);
+let TargetFactory = temp.TargetFactory;
+
+let toolbox;
+
+function test()
+{
+  waitForExplicitFinish();
+
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function onLoad(evt) {
+    gBrowser.selectedBrowser.removeEventListener(evt.type, onLoad, true);
+    openToolbox(testBottomHost);
+  }, true);
+
+  content.location = "data:text/html,test for opening toolbox in different hosts";
+}
+
+function openToolbox(callback)
+{
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+  gDevTools.toggleToolboxForTarget(target);
+
+  toolbox = gDevTools.getToolboxForTarget(target);
+  toolbox.once("ready", callback);
+}
+
+function testBottomHost()
+{
+  checkHostType(Toolbox.HostType.BOTTOM);
+
+  // test UI presence
+  let iframe = document.getElementById("devtools-toolbox-bottom-iframe");
+  ok(iframe, "toolbox bottom iframe exists");
+
+  checkToolboxLoaded(iframe);
+
+  toolbox.once("host-changed", testSidebarHost);
+  toolbox.hostType = Toolbox.HostType.SIDE;
+}
+
+function testSidebarHost()
+{
+  checkHostType(Toolbox.HostType.SIDE);
+
+  // test UI presence
+  let bottom = document.getElementById("devtools-toolbox-bottom-iframe");
+  ok(!bottom, "toolbox bottom iframe doesn't exist");
+
+  let iframe = document.getElementById("devtools-toolbox-side-iframe");
+  ok(iframe, "toolbox side iframe exists");
+
+  checkToolboxLoaded(iframe);
+
+  toolbox.once("host-changed", testWindowHost);
+  toolbox.hostType = Toolbox.HostType.WINDOW;
+}
+
+function testWindowHost()
+{
+  checkHostType(Toolbox.HostType.WINDOW);
+
+  let sidebar = document.getElementById("devtools-toolbox-side-iframe");
+  ok(!sidebar, "toolbox sidebar iframe doesn't exist");
+
+  let win = Services.wm.getMostRecentWindow("devtools:toolbox");
+  ok(win, "toolbox separate window exists");
+
+  let iframe = win.document.getElementById("toolbox-iframe");
+  checkToolboxLoaded(iframe);
+
+  testToolSelect();
+}
+
+function testToolSelect()
+{
+  // make sure we can load a tool after switching hosts
+  toolbox.once("inspector-ready", testDestroy);
+  toolbox.selectTool("inspector");
+}
+
+function testDestroy()
+{
+  toolbox.once("destroyed", function() {
+    openToolbox(testRememberHost);
+  });
+
+  toolbox.destroy();
+}
+
+function testRememberHost()
+{
+  // last host was the window - make sure it's the same when re-opening
+  is(toolbox.hostType, Toolbox.HostType.WINDOW, "host remembered");
+
+  let win = Services.wm.getMostRecentWindow("devtools:toolbox");
+  ok(win, "toolbox separate window exists");
+
+  cleanup();
+}
+
+function checkHostType(hostType)
+{
+  is(toolbox.hostType, hostType, "host type is " + hostType);
+
+  let pref = Services.prefs.getCharPref("devtools.toolbox.host");
+  is(pref, hostType, "host pref is " + hostType);
+}
+
+function checkToolboxLoaded(iframe)
+{
+  let tabs = iframe.contentDocument.getElementById("toolbox-tabs");
+  ok(tabs, "toolbox UI has been loaded into iframe");
+}
+
+function cleanup()
+{
+  Services.prefs.setCharPref("devtools.toolbox.host", Toolbox.HostType.BOTTOM);
+
+  toolbox.destroy();
+  DevTools = Toolbox = toolbox = null;
+  gBrowser.removeCurrentTab();
+  finish();
+}
diff --git a/browser/devtools/framework/test/browser_toolbox_ready.js b/browser/devtools/framework/test/browser_toolbox_ready.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/framework/test/browser_toolbox_ready.js
@@ -0,0 +1,56 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+let tempScope = {};
+Cu.import("resource:///modules/devtools/Target.jsm", tempScope);
+let TargetFactory = tempScope.TargetFactory;
+
+let toolbox;
+
+function test()
+{
+  waitForExplicitFinish();
+
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function onLoad(evt) {
+    gBrowser.selectedBrowser.removeEventListener(evt.type, onLoad, true);
+    openToolbox();
+  }, true);
+
+  content.location = "data:text/html,test for dynamically registering and unregistering tools";
+}
+
+function openToolbox()
+{
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+  gDevTools.toggleToolboxForTarget(target);
+
+  toolbox = gDevTools.getToolboxForTarget(target);
+
+  ok(!toolbox.isReady, "toolbox isReady isn't set yet");
+
+  try {
+    toolbox.selectTool("webconsole");
+    ok(false, "Should throw when selectTool() called before toolbox is ready");
+  }
+  catch(error) {
+    is(error.message, "Can't select tool, wait for toolbox 'ready' event")
+  }
+
+  toolbox.once("ready", testReady);
+}
+
+function testReady()
+{
+  ok(toolbox.isReady, "toolbox isReady is set");
+  cleanup();
+}
+
+function cleanup()
+{
+  toolbox.destroy();
+  toolbox = null;
+  gBrowser.removeCurrentTab();
+  finish();
+}
diff --git a/browser/devtools/framework/test/browser_toolbox_select_event.js b/browser/devtools/framework/test/browser_toolbox_select_event.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/framework/test/browser_toolbox_select_event.js
@@ -0,0 +1,97 @@
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/ */
+
+let toolbox;
+
+function test() {
+  addTab("about:blank", function() {
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    toolbox = gDevTools.openToolbox(target, "bottom", "webconsole");
+    toolbox.once("ready", testSelect);
+  });
+}
+
+let called = {
+  inspector: false,
+  webconsole: false,
+  styleeditor: false,
+  //jsdebugger: false,
+}
+
+function testSelect() {
+  info("Toolbox fired a `ready` event");
+
+  toolbox.on("select", selectCB);
+
+  toolbox.selectTool("inspector");
+  toolbox.selectTool("webconsole");
+  toolbox.selectTool("styleeditor");
+  //toolbox.selectTool("jsdebugger");
+}
+
+function selectCB(event, id) {
+  called[id] = true;
+  info("toolbox-select event from " + id);
+
+  for (let tool in called) {
+    if (!called[tool]) {
+      return;
+    }
+  }
+
+  ok(true, "All the tools fired a 'select event'");
+  toolbox.off("select", selectCB);
+
+  reselect();
+}
+
+function reselect() {
+  for (let tool in called) {
+    called[tool] = false;
+  }
+
+  toolbox.once("inspector-selected", function() {
+    tidyUpIfAllCalled("inspector");
+  });
+
+  toolbox.once("webconsole-selected", function() {
+    tidyUpIfAllCalled("webconsole");
+  });
+
+  /*
+  toolbox.once("jsdebugger-selected", function() {
+    tidyUpIfAllCalled("jsdebugger");
+  });
+  */
+
+  toolbox.once("styleeditor-selected", function() {
+    tidyUpIfAllCalled("styleeditor");
+  });
+
+  toolbox.selectTool("inspector");
+  toolbox.selectTool("webconsole");
+  toolbox.selectTool("styleeditor");
+  //toolbox.selectTool("jsdebugger");
+}
+
+function tidyUpIfAllCalled(id) {
+  called[id] = true;
+  info("select event from " + id);
+
+  for (let tool in called) {
+    if (!called[tool]) {
+      return;
+    }
+  }
+
+  ok(true, "All the tools fired a {id}-selected event");
+  tidyUp();
+}
+
+function tidyUp() {
+  toolbox.destroy();
+  gBrowser.removeCurrentTab();
+
+  toolbox = null;
+  finish();
+}
diff --git a/browser/devtools/framework/test/browser_toolbox_sidebar.js b/browser/devtools/framework/test/browser_toolbox_sidebar.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/framework/test/browser_toolbox_sidebar.js
@@ -0,0 +1,132 @@
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/ */
+
+function test() {
+  const Cu = Components.utils;
+  let tempScope = {};
+  Cu.import("resource:///modules/devtools/gDevTools.jsm", tempScope);
+  Cu.import("resource:///modules/devtools/Target.jsm", tempScope);
+  Cu.import("resource:///modules/devtools/Sidebar.jsm", tempScope);
+  let {TargetFactory: TargetFactory, gDevTools: gDevTools, ToolSidebar: ToolSidebar} = tempScope;
+
+  const toolURL = "data:text/xml;charset=utf8,<?xml version='1.0'?>" +
+                  "<?xml-stylesheet href='chrome://browser/skin/devtools/common.css' type='text/css'?>" +
+                  "<window xmlns='http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul'>" +
+                  "<hbox flex='1'><description flex='1'>foo</description><splitter class='devtools-side-splitter'/>" +
+                  "<tabbox flex='1' id='sidebar' class='devtools-sidebar-tabs'><tabs/><tabpanels flex='1'/></tabbox>" +
+                  "</hbox>" +
+                  "</window>";
+
+  const tab1URL = "data:text/html;charset=utf8,<title>1</title><p>1</p>";
+  const tab2URL = "data:text/html;charset=utf8,<title>2</title><p>2</p>";
+  const tab3URL = "data:text/html;charset=utf8,<title>3</title><p>3</p>";
+
+  let panelDoc;
+
+  let registeredTabs = {};
+  let readyTabs = {};
+
+  let toolDefinition = {
+    id: "fakeTool4242",
+    killswitch: "devtools.fakeTool4242.enabled",
+    url: toolURL,
+    label: "FAKE TOOL!!!",
+    isTargetSupported: function() true,
+    build: function(iframeWindow, toolbox) {
+      let panel = {
+        target: toolbox.target,
+        toolbox: toolbox,
+        isReady: true,
+        destroy: function(){},
+        panelDoc: iframeWindow.document,
+      }
+      return panel;
+    },
+  };
+
+  gDevTools.registerTool(toolDefinition);
+
+  addTab("about:blank", function(aBrowser, aTab) {
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    let toolbox = gDevTools.openToolbox(target, "bottom", "fakeTool4242");
+    toolbox.once("fakeTool4242-ready", function(event, panel) {
+      ok(true, "Tool open");
+
+      let tabbox = panel.panelDoc.getElementById("sidebar");
+      panel.sidebar = new ToolSidebar(tabbox, panel, true);
+
+      panel.sidebar.on("new-tab-registered", function(event, id) {
+        registeredTabs[id] = true;
+      });
+
+      panel.sidebar.once("tab1-ready", function(event) {
+        readyTabs.tab1 = true;
+        if (readyTabs.tab1 && readyTabs.tab2 && readyTabs.tab3) {
+          allTabsReady(panel);
+        }
+      });
+
+      panel.sidebar.once("tab2-ready", function(event) {
+        readyTabs.tab2 = true;
+        if (readyTabs.tab1 && readyTabs.tab2 && readyTabs.tab3) {
+          allTabsReady(panel);
+        }
+      });
+
+      panel.sidebar.once("tab3-ready", function(event) {
+        readyTabs.tab3 = true;
+        if (readyTabs.tab1 && readyTabs.tab2 && readyTabs.tab3) {
+          allTabsReady(panel);
+        }
+      });
+
+      panel.sidebar.addTab("tab1", tab1URL, true);
+      panel.sidebar.addTab("tab2", tab2URL);
+      panel.sidebar.addTab("tab3", tab3URL);
+
+      panel.sidebar.show();
+    });
+  });
+
+  function allTabsReady(panel) {
+    ok(registeredTabs.tab1, "tab1 registered");
+    ok(registeredTabs.tab2, "tab2 registered");
+    ok(registeredTabs.tab3, "tab3 registered");
+    ok(readyTabs.tab1, "tab1 ready");
+    ok(readyTabs.tab2, "tab2 ready");
+    ok(readyTabs.tab3, "tab3 ready");
+
+    let tabs = panel.sidebar._tabbox.querySelectorAll("tab");
+    let panels = panel.sidebar._tabbox.querySelectorAll("tabpanel");
+    let label = 1;
+    for (let tab of tabs) {
+      is(tab.getAttribute("label"), label++, "Tab has the right title");
+    }
+    is(label, 4, "Found the right amount of tabs.");
+    is(panel.sidebar._tabbox.selectedPanel, panels[0], "First tab is selected");
+    ok(panel.sidebar.getCurrentTabID(), "tab1", "getCurrentTabID() is correct");
+
+    panel.sidebar.once("tab1-unselected", function() {
+      ok(true, "received 'unselected' event");
+      panel.sidebar.once("tab2-selected", function() {
+        ok(true, "received 'selected' event");
+        panel.sidebar.hide();
+        is(panel.sidebar._tabbox.getAttribute("hidden"), "true", "Sidebar hidden");
+        is(panel.sidebar.getWindowForTab("tab1").location.href, tab1URL, "Window is accessible");
+        finishUp(panel);
+      });
+    });
+
+    panel.sidebar.select("tab2");
+  }
+
+  function finishUp(panel) {
+    panel.sidebar.destroy();
+    gDevTools.unregisterTool(toolDefinition.id);
+
+    executeSoon(function() {
+      gBrowser.removeCurrentTab();
+      finish();
+    });
+  }
+}
diff --git a/browser/devtools/framework/test/browser_toolbox_tool_ready.js b/browser/devtools/framework/test/browser_toolbox_tool_ready.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/framework/test/browser_toolbox_tool_ready.js
@@ -0,0 +1,72 @@
+/* vim: set ts=2 et sw=2 tw=80: */
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+let temp = [];
+Cu.import("resource:///modules/devtools/Target.jsm", temp);
+let TargetFactory = temp.TargetFactory;
+
+function test() {
+  waitForExplicitFinish();
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function onLoad(evt) {
+    gBrowser.selectedBrowser.removeEventListener(evt.type, onLoad, true);
+    openAllTools();
+  }, true);
+
+  function openAllTools() {
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+
+    let tools = gDevTools.getToolDefinitions();
+    let expectedCallbacksCount = tools.size;
+
+    let firstTool = null;
+    // we transform the map to a [id, eventHasBeenFiredYet] map
+    for (let [id] of tools) {
+      if (!firstTool)
+        firstTool = id;
+      tools.set(id, false);
+    }
+
+    let toolbox = gDevTools.openToolbox(target, undefined, firstTool);
+
+    // We add the event listeners
+    for (let [toolId] of tools) {
+      let id = toolId;
+      info("Registering listener for " + id);
+      tools.set(id, false);
+      toolbox.on(id + "-ready", function(event, panel) {
+        expectedCallbacksCount--;
+        info("Got event "  + event);
+        is(toolbox.getToolPanels().get(id), panel, "Got the right tool panel for " + id);
+        tools.set(id, true);
+        if (expectedCallbacksCount == 0) {
+          // "executeSoon" because we want to let a chance
+          // to falsy code to fire unexpected ready events.
+          executeSoon(theEnd);
+        }
+        if (expectedCallbacksCount < 0) {
+          ok(false, "we are receiving too many events");
+        }
+      });
+    }
+
+    toolbox.once("ready", function() {
+      // We open all the 
+      for (let [id] of tools) {
+        if (id != firstTool) {
+          toolbox.selectTool(id);
+        }
+      }
+    });
+
+    function theEnd() {
+      for (let [id, called] of tools) {
+        ok(called, "Tool " + id + " has fired its ready event");
+      }
+      toolbox.destroy();
+      gBrowser.removeCurrentTab();
+      finish();
+    }
+  }
+}
diff --git a/browser/devtools/framework/test/head.js b/browser/devtools/framework/test/head.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/framework/test/head.js
@@ -0,0 +1,36 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+let tempScope = {};
+Components.utils.import("resource:///modules/devtools/Target.jsm", tempScope);
+let TargetFactory = tempScope.TargetFactory;
+Components.utils.import("resource:///modules/devtools/Console.jsm", tempScope);
+let console = tempScope.console;
+
+/**
+ * Open a new tab at a URL and call a callback on load
+ */
+function addTab(aURL, aCallback)
+{
+  waitForExplicitFinish();
+
+  gBrowser.selectedTab = gBrowser.addTab();
+  content.location = aURL;
+
+  let tab = gBrowser.selectedTab;
+  let browser = gBrowser.getBrowserForTab(tab);
+
+  function onTabLoad() {
+    browser.removeEventListener("load", onTabLoad, true);
+    aCallback(browser, tab, browser.contentDocument);
+  }
+
+  browser.addEventListener("load", onTabLoad, true);
+}
+
+registerCleanupFunction(function tearDown() {
+  while (gBrowser.tabs.length > 1) {
+    gBrowser.removeCurrentTab();
+  }
+});
diff --git a/browser/devtools/framework/toolbox-window.xul b/browser/devtools/framework/toolbox-window.xul
new file mode 100644
--- /dev/null
+++ b/browser/devtools/framework/toolbox-window.xul
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+<!DOCTYPE window [
+<!ENTITY % toolboxDTD SYSTEM "chrome://browser/locale/devtools/toolbox.dtd" >
+ %toolboxDTD;
+]>
+
+<?xml-stylesheet href="chrome://browser/skin/" type="text/css"?>
+
+<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
+        id="devtools-toolbox-window"
+        title="&window.title;"
+        macanimationtype="document"
+        fullscreenbutton="true"
+        windowtype="devtools:toolbox"
+        width="700" height="320"
+        persist="screenX screenY width height sizemode">
+
+  <commandset id="toolbox-commandset">
+    <command id="toolbox-cmd-close" oncommand="window.close();"/>
+  </commandset>
+
+  <keyset id="toolbox-keyset">
+    <key id="toolbox-key-close"
+         key="&closeCmd.key;"
+         command="toolbox-cmd-close"
+         modifiers="accel"/>
+  </keyset>
+
+  <iframe id="toolbox-iframe" flex="1"></iframe>
+</window>
diff --git a/browser/devtools/framework/toolbox.css b/browser/devtools/framework/toolbox.css
new file mode 100644
--- /dev/null
+++ b/browser/devtools/framework/toolbox.css
@@ -0,0 +1,10 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+.devtools-tab > .radio-check,
+.devtools-tab > .radio-check-box1,
+.devtools-tab > .radio-spacer-box {
+  display: none;
+}
+
diff --git a/browser/devtools/framework/toolbox.xul b/browser/devtools/framework/toolbox.xul
new file mode 100644
--- /dev/null
+++ b/browser/devtools/framework/toolbox.xul
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+<?xml-stylesheet href="chrome://browser/skin/" type="text/css"?>
+<?xml-stylesheet href="chrome://browser/content/devtools/shared/common.css" type="text/css"?>
+<?xml-stylesheet href="chrome://browser/content/devtools/framework/toolbox.css" type="text/css"?>
+<?xml-stylesheet href="chrome://browser/skin/devtools/common.css" type="text/css"?>
+<?xml-stylesheet href="chrome://browser/skin/devtools/toolbox.css" type="text/css"?>
+<?xul-overlay href="chrome://global/content/editMenuOverlay.xul"?>
+<?xul-overlay href="chrome://browser/content/source-editor-overlay.xul"?>
+
+<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
+  <notificationbox id="toolbox-notificationbox" flex="1">
+    <toolbar class="devtools-tabbar">
+      <hbox id="toolbox-controls">
+        <toolbarbutton id="toolbox-close" class="devtools-closebutton"></toolbarbutton>
+        <hbox id="toolbox-dock-buttons"/>
+      </hbox>
+      <radiogroup id="toolbox-tabs" orient="horizontal">
+      </radiogroup>
+      <hbox id="toolbox-buttons" flex="1" pack="end"/>
+    </toolbar>
+    <deck id="toolbox-deck" flex="1">
+    </deck>
+  </notificationbox>
+</window>
diff --git a/browser/devtools/highlighter/CmdInspect.jsm b/browser/devtools/highlighter/CmdInspect.jsm
deleted file mode 100644
--- a/browser/devtools/highlighter/CmdInspect.jsm
+++ /dev/null
@@ -1,29 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-const { classes: Cc, interfaces: Ci, utils: Cu } = Components;
-this.EXPORTED_SYMBOLS = [ ];
-
-Cu.import("resource:///modules/devtools/gcli.jsm");
-
-/**
- * 'inspect' command
- */
-gcli.addCommand({
-  name: "inspect",
-  description: gcli.lookup("inspectDesc"),
-  manual: gcli.lookup("inspectManual"),
-  params: [
-    {
-      name: "selector",
-      type: "node",
-      description: gcli.lookup("inspectNodeDesc"),
-      manual: gcli.lookup("inspectNodeManual")
-    }
-  ],
-  exec: function Command_inspect(args, context) {
-    let document = context.environment.chromeDocument;
-    document.defaultView.InspectorUI.openInspectorUI(args.selector);
-  }
-});
diff --git a/browser/devtools/highlighter/Makefile.in b/browser/devtools/highlighter/Makefile.in
deleted file mode 100644
--- a/browser/devtools/highlighter/Makefile.in
+++ /dev/null
@@ -1,26 +0,0 @@
-#
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-
-DEPTH		= @DEPTH@
-topsrcdir	= @top_srcdir@
-srcdir		= @srcdir@
-VPATH		= @srcdir@
-
-include $(DEPTH)/config/autoconf.mk
-
-EXTRA_JS_MODULES = \
-	highlighter.jsm \
-	$(NULL)
-
-EXTRA_PP_JS_MODULES = \
-	inspector.jsm \
-	$(NULL)
-
-TEST_DIRS += test
-
-include $(topsrcdir)/config/rules.mk
-
-libs::
-	$(NSINSTALL) $(srcdir)/CmdInspect.jsm $(FINAL_TARGET)/modules/devtools
diff --git a/browser/devtools/highlighter/highlighter.jsm b/browser/devtools/highlighter/highlighter.jsm
deleted file mode 100644
--- a/browser/devtools/highlighter/highlighter.jsm
+++ /dev/null
@@ -1,905 +0,0 @@
-/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-const Cu = Components.utils;
-const Cc = Components.classes;
-const Ci = Components.interfaces;
-
-Cu.import("resource://gre/modules/Services.jsm");
-Cu.import("resource:///modules/devtools/LayoutHelpers.jsm");
-Cu.import("resource://gre/modules/XPCOMUtils.jsm");
-
-this.EXPORTED_SYMBOLS = ["Highlighter"];
-
-const INSPECTOR_INVISIBLE_ELEMENTS = {
-  "head": true,
-  "base": true,
-  "basefont": true,
-  "isindex": true,
-  "link": true,
-  "meta": true,
-  "script": true,
-  "style": true,
-  "title": true,
-};
-
-const PSEUDO_CLASSES = [":hover", ":active", ":focus"];
-  // add ":visited" and ":link" after bug 713106 is fixed
-
-/**
- * A highlighter mechanism.
- *
- * The highlighter is built dynamically into the browser element.
- * The caller is in charge of destroying the highlighter (ie, the highlighter
- * won't be destroyed if a new tab is selected for example).
- *
- * API:
- *
- *   // Constructor and destructor.
- *   // @param aWindow - browser.xul window.
- *   Highlighter(aWindow);
- *   void destroy();
- *
- *   // Highlight a node.
- *   // @param aNode - node to highlight
- *   // @param aScroll - scroll to ensure the node is visible
- *   void highlight(aNode, aScroll);
- *
- *   // Get the selected node.
- *   DOMNode getNode();
- *
- *   // Lock and unlock the select node.
- *   void lock();
- *   void unlock();
- *
- *   // Show and hide the highlighter
- *   void show();
- *   void hide();
- *   boolean isHidden();
- *
- *   // Redraw the highlighter if the visible portion of the node has changed.
- *   void invalidateSize(aScroll);
- *
- *   // Is a node highlightable.
- *   boolean isNodeHighlightable(aNode);
- *
- *   // Show/hide the outline and the infobar
- *   void showInfobar();
- *   void hideInfobar();
- *   void showOutline();
- *   void hideOutline();
- *
- *   // Add/Remove listeners
- *   // @param aEvent - event name
- *   // @param aListener - function callback
- *   void addListener(aEvent, aListener);
- *   void removeListener(aEvent, aListener);
- *
- * Events:
- *
- *   "closed" - Highlighter is closing
- *   "nodeselected" - A new node has been selected
- *   "highlighting" - Highlighter is highlighting
- *   "locked" - The selected node has been locked
- *   "unlocked" - The selected ndoe has been unlocked
- *   "pseudoclasstoggled" - A pseudo-class lock has changed on the selected node
- *
- * Structure:
- *  <stack id="highlighter-container">
- *    <box id="highlighter-outline-container">
- *      <box id="highlighter-outline" locked="true/false"/>
- *    </box>
- *    <box id="highlighter-controls">
- *      <box id="highlighter-nodeinfobar-container" position="top/bottom" locked="true/false">
- *        <box class="highlighter-nodeinfobar-arrow" id="highlighter-nodeinfobar-arrow-top"/>
- *        <hbox id="highlighter-nodeinfobar">
- *          <toolbarbutton id="highlighter-nodeinfobar-inspectbutton" class="highlighter-nodeinfobar-button"/>
- *          <hbox id="highlighter-nodeinfobar-text">tagname#id.class1.class2</hbox>
- *          <toolbarbutton id="highlighter-nodeinfobar-menu" class="highlighter-nodeinfobar-button">…</toolbarbutton>
- *        </hbox>
- *        <box class="highlighter-nodeinfobar-arrow" id="highlighter-nodeinfobar-arrow-bottom"/>
- *      </box>
- *    </box>
- *  </stack>
- *
- */
-
-
-/**
- * Constructor.
- *
- * @param object aWindow
- */
-this.Highlighter = function Highlighter(aWindow)
-{
-  this.chromeWin = aWindow;
-  this.tabbrowser = aWindow.gBrowser;
-  this.chromeDoc = aWindow.document;
-  this.browser = aWindow.gBrowser.selectedBrowser;
-  this.events = {};
-
-  this._init();
-}
-
-Highlighter.prototype = {
-  _init: function Highlighter__init()
-  {
-    let stack = this.browser.parentNode;
-    this.win = this.browser.contentWindow;
-    this._highlighting = false;
-
-    this.highlighterContainer = this.chromeDoc.createElement("stack");
-    this.highlighterContainer.id = "highlighter-container";
-
-    this.outline = this.chromeDoc.createElement("box");
-    this.outline.id = "highlighter-outline";
-
-    let outlineContainer = this.chromeDoc.createElement("box");
-    outlineContainer.appendChild(this.outline);
-    outlineContainer.id = "highlighter-outline-container";
-
-    // The controlsBox will host the different interactive
-    // elements of the highlighter (buttons, toolbars, ...).
-    let controlsBox = this.chromeDoc.createElement("box");
-    controlsBox.id = "highlighter-controls";
-    this.highlighterContainer.appendChild(outlineContainer);
-    this.highlighterContainer.appendChild(controlsBox);
-
-    // Insert the highlighter right after the browser
-    stack.insertBefore(this.highlighterContainer, stack.childNodes[1]);
-
-    this.buildInfobar(controlsBox);
-
-    this.transitionDisabler = null;
-    this.pageEventsMuter = null;
-
-    this.unlock();
-
-    this.hidden = true;
-    this.show();
-  },
-
-  /**
-   * Destroy the nodes. Remove listeners.
-   */
-  destroy: function Highlighter_destroy()
-  {
-    this.detachMouseListeners();
-    this.detachPageListeners();
-
-    this.chromeWin.clearTimeout(this.transitionDisabler);
-    this.chromeWin.clearTimeout(this.pageEventsMuter);
-    this.boundCloseEventHandler = null;
-    this._contentRect = null;
-    this._highlightRect = null;
-    this._highlighting = false;
-    this.outline = null;
-    this.node = null;
-    this.nodeInfo = null;
-    this.highlighterContainer.parentNode.removeChild(this.highlighterContainer);
-    this.highlighterContainer = null;
-    this.win = null
-    this.browser = null;
-    this.chromeDoc = null;
-    this.chromeWin = null;
-    this.tabbrowser = null;
-
-    this.emitEvent("closed");
-    this.removeAllListeners();
-  },
-
-  /**
-   * Show the outline, and select a node.
-   * If no node is specified, the previous selected node is highlighted if any.
-   * If no node was selected, the root element is selected.
-   *
-   * @param aNode [optional] - The node to be selected.
-   * @param aScroll [optional] boolean
-   *        Should we scroll to ensure that the selected node is visible.
-   */
-  highlight: function Highlighter_highlight(aNode, aScroll)
-  {
-    if (this.hidden)
-      this.show();
-
-    let oldNode = this.node;
-
-    if (!aNode) {
-      if (!this.node)
-        this.node = this.win.document.documentElement;
-    } else {
-      this.node = aNode;
-    }
-
-    if (oldNode !== this.node) {
-      this.updateInfobar();
-    }
-
-    this.invalidateSize(!!aScroll);
-
-    if (oldNode !== this.node) {
-      this.emitEvent("nodeselected");
-    }
-  },
-
-  /**
-   * Notify that a pseudo-class lock was toggled on the highlighted element
-   *
-   * @param aPseudo - The pseudo-class to toggle, e.g. ":hover".
-   */
-  pseudoClassLockToggled: function Highlighter_pseudoClassLockToggled(aPseudo)
-  {
-    this.emitEvent("pseudoclasstoggled", [aPseudo]);
-    this.updateInfobar();
-    this.moveInfobar();
-  },
-
-  /**
-   * Update the highlighter size and position.
-   */
-  invalidateSize: function Highlighter_invalidateSize(aScroll)
-  {
-    let rect = null;
-
-    if (this.node && this.isNodeHighlightable(this.node)) {
-
-      if (aScroll &&
-          this.node.scrollIntoView) { // XUL elements don't have such method
-        this.node.scrollIntoView();
-      }
-      let clientRect = this.node.getBoundingClientRect();
-      rect = LayoutHelpers.getDirtyRect(this.node);
-    }
-
-    this.highlightRectangle(rect);
-
-    this.moveInfobar();
-
-    if (this._highlighting) {
-      this.showOutline();
-      this.emitEvent("highlighting");
-    }
-  },
-
-  /**
-   * Returns the selected node.
-   *
-   * @returns node
-   */
-  getNode: function() {
-    return this.node;
-  },
-
-  /**
-   * Show the highlighter if it has been hidden.
-   */
-  show: function() {
-    if (!this.hidden) return;
-    this.showOutline();
-    this.showInfobar();
-    this.computeZoomFactor();
-    this.attachPageListeners();
-    this.invalidateSize();
-    this.hidden = false;
-  },
-
-  /**
-   * Hide the highlighter, the outline and the infobar.
-   */
-  hide: function() {
-    if (this.hidden) return;
-    this.hideOutline();
-    this.hideInfobar();
-    this.detachPageListeners();
-    this.hidden = true;
-  },
-
-  /**
-   * Is the highlighter visible?
-   *
-   * @return boolean
-   */
-  isHidden: function() {
-    return this.hidden;
-  },
-
-  /**
-   * Lock a node. Stops the inspection.
-   */
-  lock: function() {
-    if (this.locked === true) return;
-    this.outline.setAttribute("locked", "true");
-    this.nodeInfo.container.setAttribute("locked", "true");
-    this.detachMouseListeners();
-    this.locked = true;
-    this.emitEvent("locked");
-  },
-
-  /**
-   * Start inspecting.
-   * Unlock the current node (if any), and select any node being hovered.
-   */
-  unlock: function() {
-    if (this.locked === false) return;
-    this.outline.removeAttribute("locked");
-    this.nodeInfo.container.removeAttribute("locked");
-    this.attachMouseListeners();
-    this.locked = false;
-    this.showOutline();
-    this.emitEvent("unlocked");
-  },
-
-  /**
-   * Is the specified node highlightable?
-   *
-   * @param nsIDOMNode aNode
-   *        the DOM element in question
-   * @returns boolean
-   *          True if the node is highlightable or false otherwise.
-   */
-  isNodeHighlightable: function Highlighter_isNodeHighlightable(aNode)
-  {
-    if (!LayoutHelpers.isNodeConnected(aNode)) {
-      return false;
-    }
-    if (aNode.nodeType != aNode.ELEMENT_NODE) {
-      return false;
-    }
-    let nodeName = aNode.nodeName.toLowerCase();
-    return !INSPECTOR_INVISIBLE_ELEMENTS[nodeName];
-  },
-
-  /**
-   * Hide the infobar
-   */
-   hideInfobar: function Highlighter_hideInfobar() {
-     this.nodeInfo.container.setAttribute("force-transitions", "true");
-     this.nodeInfo.container.setAttribute("hidden", "true");
-   },
-
-  /**
-   * Show the infobar
-   */
-   showInfobar: function Highlighter_showInfobar() {
-     this.nodeInfo.container.removeAttribute("hidden");
-     this.moveInfobar();
-     this.nodeInfo.container.removeAttribute("force-transitions");
-   },
-
-  /**
-   * Hide the outline
-   */
-   hideOutline: function Highlighter_hideOutline() {
-     this.outline.setAttribute("hidden", "true");
-   },
-
-  /**
-   * Show the outline
-   */
-   showOutline: function Highlighter_showOutline() {
-     if (this._highlighting)
-       this.outline.removeAttribute("hidden");
-   },
-
-  /**
-   * Build the node Infobar.
-   *
-   * <box id="highlighter-nodeinfobar-container">
-   *   <box id="Highlighter-nodeinfobar-arrow-top"/>
-   *   <hbox id="highlighter-nodeinfobar">
-   *     <toolbarbutton class="highlighter-nodeinfobar-button" id="highlighter-nodeinfobar-inspectbutton"/>
-   *     <hbox id="highlighter-nodeinfobar-text">
-   *       <xhtml:span id="highlighter-nodeinfobar-tagname"/>
-   *       <xhtml:span id="highlighter-nodeinfobar-id"/>
-   *       <xhtml:span id="highlighter-nodeinfobar-classes"/>
-   *       <xhtml:span id="highlighter-nodeinfobar-pseudo-classes"/>
-   *     </hbox>
-   *     <toolbarbutton class="highlighter-nodeinfobar-button" id="highlighter-nodeinfobar-menu"/>
-   *   </hbox>
-   *   <box id="Highlighter-nodeinfobar-arrow-bottom"/>
-   * </box>
-   *
-   * @param nsIDOMElement aParent
-   *        The container of the infobar.
-   */
-  buildInfobar: function Highlighter_buildInfobar(aParent)
-  {
-    let container = this.chromeDoc.createElement("box");
-    container.id = "highlighter-nodeinfobar-container";
-    container.setAttribute("position", "top");
-    container.setAttribute("disabled", "true");
-
-    let nodeInfobar = this.chromeDoc.createElement("hbox");
-    nodeInfobar.id = "highlighter-nodeinfobar";
-
-    nodeInfobar.addEventListener("mousedown", function(aEvent) {
-      this.emitEvent("nodeselected");
-    }.bind(this), true);
-
-    let arrowBoxTop = this.chromeDoc.createElement("box");
-    arrowBoxTop.className = "highlighter-nodeinfobar-arrow";
-    arrowBoxTop.id = "highlighter-nodeinfobar-arrow-top";
-
-    let arrowBoxBottom = this.chromeDoc.createElement("box");
-    arrowBoxBottom.className = "highlighter-nodeinfobar-arrow";
-    arrowBoxBottom.id = "highlighter-nodeinfobar-arrow-bottom";
-
-    let tagNameLabel = this.chromeDoc.createElementNS("http://www.w3.org/1999/xhtml", "span");
-    tagNameLabel.id = "highlighter-nodeinfobar-tagname";
-
-    let idLabel = this.chromeDoc.createElementNS("http://www.w3.org/1999/xhtml", "span");
-    idLabel.id = "highlighter-nodeinfobar-id";
-
-    let classesBox = this.chromeDoc.createElementNS("http://www.w3.org/1999/xhtml", "span");
-    classesBox.id = "highlighter-nodeinfobar-classes";
-
-    let pseudoClassesBox = this.chromeDoc.createElementNS("http://www.w3.org/1999/xhtml", "span");
-    pseudoClassesBox.id = "highlighter-nodeinfobar-pseudo-classes";
-
-    // Add some content to force a better boundingClientRect down below.
-    pseudoClassesBox.textContent = "&nbsp;";
-
-    // Create buttons
-
-    let inspect = this.chromeDoc.createElement("toolbarbutton");
-    inspect.id = "highlighter-nodeinfobar-inspectbutton";
-    inspect.className = "highlighter-nodeinfobar-button"
-    let toolbarInspectButton =
-      this.chromeDoc.getElementById("inspector-inspect-toolbutton");
-    inspect.setAttribute("tooltiptext",
-                         toolbarInspectButton.getAttribute("tooltiptext"));
-    inspect.setAttribute("command", "Inspector:Inspect");
-
-    let nodemenu = this.chromeDoc.createElement("toolbarbutton");
-    nodemenu.setAttribute("type", "menu");
-    nodemenu.id = "highlighter-nodeinfobar-menu";
-    nodemenu.className = "highlighter-nodeinfobar-button"
-    nodemenu.setAttribute("tooltiptext",
-                          this.strings.GetStringFromName("nodeMenu.tooltiptext"));
-
-    let menu = this.chromeDoc.getElementById("inspector-node-popup");
-    menu = menu.cloneNode(true);
-    menu.id = "highlighter-node-menu";
-
-    let separator = this.chromeDoc.createElement("menuseparator");
-    menu.appendChild(separator);
-
-    menu.addEventListener("popupshowing", function() {
-      let items = menu.getElementsByClassName("highlighter-pseudo-class-menuitem");
-      let i = items.length;
-      while (i--) {
-        menu.removeChild(items[i]);
-      }
-
-      let fragment = this.buildPseudoClassMenu();
-      menu.appendChild(fragment);
-    }.bind(this), true);
-
-    nodemenu.appendChild(menu);
-
-    // <hbox id="highlighter-nodeinfobar-text"/>
-    let texthbox = this.chromeDoc.createElement("hbox");
-    texthbox.id = "highlighter-nodeinfobar-text";
-    texthbox.setAttribute("align", "center");
-    texthbox.setAttribute("flex", "1");
-
-    texthbox.appendChild(tagNameLabel);
-    texthbox.appendChild(idLabel);
-    texthbox.appendChild(classesBox);
-    texthbox.appendChild(pseudoClassesBox);
-
-    nodeInfobar.appendChild(inspect);
-    nodeInfobar.appendChild(texthbox);
-    nodeInfobar.appendChild(nodemenu);
-
-    container.appendChild(arrowBoxTop);
-    container.appendChild(nodeInfobar);
-    container.appendChild(arrowBoxBottom);
-
-    aParent.appendChild(container);
-
-    let barHeight = container.getBoundingClientRect().height;
-
-    this.nodeInfo = {
-      tagNameLabel: tagNameLabel,
-      idLabel: idLabel,
-      classesBox: classesBox,
-      pseudoClassesBox: pseudoClassesBox,
-      container: container,
-      barHeight: barHeight,
-    };
-  },
-
-  /**
-   * Create the menuitems for toggling the selection's pseudo-class state
-   *
-   * @returns DocumentFragment. The menuitems for toggling pseudo-classes.
-   */
-  buildPseudoClassMenu: function IUI_buildPseudoClassesMenu()
-  {
-    let fragment = this.chromeDoc.createDocumentFragment();
-    for (let i = 0; i < PSEUDO_CLASSES.length; i++) {
-      let pseudo = PSEUDO_CLASSES[i];
-      let item = this.chromeDoc.createElement("menuitem");
-      item.id = "highlighter-pseudo-class-menuitem-" + pseudo;
-      item.setAttribute("type", "checkbox");
-      item.setAttribute("label", pseudo);
-      item.className = "highlighter-pseudo-class-menuitem";
-      item.setAttribute("checked", DOMUtils.hasPseudoClassLock(this.node,
-                        pseudo));
-      item.addEventListener("command",
-                            this.pseudoClassLockToggled.bind(this, pseudo), false);
-      fragment.appendChild(item);
-    }
-    return fragment;
-  },
-
-  /**
-   * Highlight a rectangular region.
-   *
-   * @param object aRect
-   *        The rectangle region to highlight.
-   * @returns boolean
-   *          True if the rectangle was highlighted, false otherwise.
-   */
-  highlightRectangle: function Highlighter_highlightRectangle(aRect)
-  {
-    if (!aRect) {
-      this.unhighlight();
-      return;
-    }
-
-    let oldRect = this._contentRect;
-
-    if (oldRect && aRect.top == oldRect.top && aRect.left == oldRect.left &&
-        aRect.width == oldRect.width && aRect.height == oldRect.height) {
-      return; // same rectangle
-    }
-
-    let aRectScaled = LayoutHelpers.getZoomedRect(this.win, aRect);
-
-    if (aRectScaled.left >= 0 && aRectScaled.top >= 0 &&
-        aRectScaled.width > 0 && aRectScaled.height > 0) {
-
-      this.showOutline();
-
-      // The bottom div and the right div are flexibles (flex=1).
-      // We don't need to resize them.
-      let top = "top:" + aRectScaled.top + "px;";
-      let left = "left:" + aRectScaled.left + "px;";
-      let width = "width:" + aRectScaled.width + "px;";
-      let height = "height:" + aRectScaled.height + "px;";
-      this.outline.setAttribute("style", top + left + width + height);
-
-      this._highlighting = true;
-    } else {
-      this.unhighlight();
-    }
-
-    this._contentRect = aRect; // save orig (non-scaled) rect
-    this._highlightRect = aRectScaled; // and save the scaled rect.
-
-    return;
-  },
-
-  /**
-   * Clear the highlighter surface.
-   */
-  unhighlight: function Highlighter_unhighlight()
-  {
-    this._highlighting = false;
-    this.hideOutline();
-  },
-
-  /**
-   * Update node information (tagName#id.class)
-   */
-  updateInfobar: function Highlighter_updateInfobar()
-  {
-    // Tag name
-    this.nodeInfo.tagNameLabel.textContent = this.node.tagName;
-
-    // ID
-    this.nodeInfo.idLabel.textContent = this.node.id ? "#" + this.node.id : "";
-
-    // Classes
-    let classes = this.nodeInfo.classesBox;
-
-    classes.textContent = this.node.classList.length ?
-                            "." + Array.join(this.node.classList, ".") : "";
-
-    // Pseudo-classes
-    let pseudos = PSEUDO_CLASSES.filter(function(pseudo) {
-      return DOMUtils.hasPseudoClassLock(this.node, pseudo);
-    }, this);
-
-    let pseudoBox = this.nodeInfo.pseudoClassesBox;
-    pseudoBox.textContent = pseudos.join("");
-  },
-
-  /**
-   * Move the Infobar to the right place in the highlighter.
-   */
-  moveInfobar: function Highlighter_moveInfobar()
-  {
-    if (this._highlightRect) {
-      let winHeight = this.win.innerHeight * this.zoom;
-      let winWidth = this.win.innerWidth * this.zoom;
-
-      let rect = {top: this._highlightRect.top,
-                  left: this._highlightRect.left,
-                  width: this._highlightRect.width,
-                  height: this._highlightRect.height};
-
-      rect.top = Math.max(rect.top, 0);
-      rect.left = Math.max(rect.left, 0);
-      rect.width = Math.max(rect.width, 0);
-      rect.height = Math.max(rect.height, 0);
-
-      rect.top = Math.min(rect.top, winHeight);
-      rect.left = Math.min(rect.left, winWidth);
-
-      this.nodeInfo.container.removeAttribute("disabled");
-      // Can the bar be above the node?
-      if (rect.top < this.nodeInfo.barHeight) {
-        // No. Can we move the toolbar under the node?
-        if (rect.top + rect.height +
-            this.nodeInfo.barHeight > winHeight) {
-          // No. Let's move it inside.
-          this.nodeInfo.container.style.top = rect.top + "px";
-          this.nodeInfo.container.setAttribute("position", "overlap");
-        } else {
-          // Yes. Let's move it under the node.
-          this.nodeInfo.container.style.top = rect.top + rect.height + "px";
-          this.nodeInfo.container.setAttribute("position", "bottom");
-        }
-      } else {
-        // Yes. Let's move it on top of the node.
-        this.nodeInfo.container.style.top =
-          rect.top - this.nodeInfo.barHeight + "px";
-        this.nodeInfo.container.setAttribute("position", "top");
-      }
-
-      let barWidth = this.nodeInfo.container.getBoundingClientRect().width;
-      let left = rect.left + rect.width / 2 - barWidth / 2;
-
-      // Make sure the whole infobar is visible
-      if (left < 0) {
-        left = 0;
-        this.nodeInfo.container.setAttribute("hide-arrow", "true");
-      } else {
-        if (left + barWidth > winWidth) {
-          left = winWidth - barWidth;
-          this.nodeInfo.container.setAttribute("hide-arrow", "true");
-        } else {
-          this.nodeInfo.container.removeAttribute("hide-arrow");
-        }
-      }
-      this.nodeInfo.container.style.left = left + "px";
-    } else {
-      this.nodeInfo.container.style.left = "0";
-      this.nodeInfo.container.style.top = "0";
-      this.nodeInfo.container.setAttribute("position", "top");
-      this.nodeInfo.container.setAttribute("hide-arrow", "true");
-    }
-  },
-
-  /**
-   * Store page zoom factor.
-   */
-  computeZoomFactor: function Highlighter_computeZoomFactor() {
-    this.zoom =
-      this.win.QueryInterface(Ci.nsIInterfaceRequestor)
-      .getInterface(Ci.nsIDOMWindowUtils)
-      .fullZoom;
-  },
-
-  /////////////////////////////////////////////////////////////////////////
-  //// Event Emitter Mechanism
-
-  addListener: function Highlighter_addListener(aEvent, aListener)
-  {
-    if (!(aEvent in this.events))
-      this.events[aEvent] = [];
-    this.events[aEvent].push(aListener);
-  },
-
-  removeListener: function Highlighter_removeListener(aEvent, aListener)
-  {
-    if (!(aEvent in this.events))
-      return;
-    let idx = this.events[aEvent].indexOf(aListener);
-    if (idx > -1)
-      this.events[aEvent].splice(idx, 1);
-  },
-
-  emitEvent: function Highlighter_emitEvent(aEvent, aArgv)
-  {
-    if (!(aEvent in this.events))
-      return;
-
-    let listeners = this.events[aEvent];
-    let highlighter = this;
-    listeners.forEach(function(aListener) {
-      try {
-        aListener.apply(highlighter, aArgv);
-      } catch(e) {}
-    });
-  },
-
-  removeAllListeners: function Highlighter_removeAllIsteners()
-  {
-    for (let event in this.events) {
-      delete this.events[event];
-    }
-  },
-
-  /////////////////////////////////////////////////////////////////////////
-  //// Event Handling
-
-  attachMouseListeners: function Highlighter_attachMouseListeners()
-  {
-    this.browser.addEventListener("mousemove", this, true);
-    this.browser.addEventListener("click", this, true);
-    this.browser.addEventListener("dblclick", this, true);
-    this.browser.addEventListener("mousedown", this, true);
-    this.browser.addEventListener("mouseup", this, true);
-  },
-
-  detachMouseListeners: function Highlighter_detachMouseListeners()
-  {
-    this.browser.removeEventListener("mousemove", this, true);
-    this.browser.removeEventListener("click", this, true);
-    this.browser.removeEventListener("dblclick", this, true);
-    this.browser.removeEventListener("mousedown", this, true);
-    this.browser.removeEventListener("mouseup", this, true);
-  },
-
-  attachPageListeners: function Highlighter_attachPageListeners()
-  {
-    this.browser.addEventListener("resize", this, true);
-    this.browser.addEventListener("scroll", this, true);
-    this.browser.addEventListener("MozAfterPaint", this, true);
-  },
-
-  detachPageListeners: function Highlighter_detachPageListeners()
-  {
-    this.browser.removeEventListener("resize", this, true);
-    this.browser.removeEventListener("scroll", this, true);
-    this.browser.removeEventListener("MozAfterPaint", this, true);
-  },
-
-  /**
-   * Generic event handler.
-   *
-   * @param nsIDOMEvent aEvent
-   *        The DOM event object.
-   */
-  handleEvent: function Highlighter_handleEvent(aEvent)
-  {
-    switch (aEvent.type) {
-      case "click":
-        this.handleClick(aEvent);
-        break;
-      case "mousemove":
-        this.brieflyIgnorePageEvents();
-        this.handleMouseMove(aEvent);
-        break;
-      case "resize":
-        this.computeZoomFactor();
-        break;
-      case "MozAfterPaint":
-      case "scroll":
-        this.brieflyDisableTransitions();
-        this.invalidateSize();
-        break;
-      case "dblclick":
-      case "mousedown":
-      case "mouseup":
-        aEvent.stopPropagation();
-        aEvent.preventDefault();
-        break;
-    }
-  },
-
-  /**
-   * Disable the CSS transitions for a short time to avoid laggy animations
-   * during scrolling or resizing.
-   */
-  brieflyDisableTransitions: function Highlighter_brieflyDisableTransitions()
-  {
-    if (this.transitionDisabler) {
-      this.chromeWin.clearTimeout(this.transitionDisabler);
-    } else {
-      this.outline.setAttribute("disable-transitions", "true");
-      this.nodeInfo.container.setAttribute("disable-transitions", "true");
-    }
-    this.transitionDisabler =
-      this.chromeWin.setTimeout(function() {
-        this.outline.removeAttribute("disable-transitions");
-        this.nodeInfo.container.removeAttribute("disable-transitions");
-        this.transitionDisabler = null;
-      }.bind(this), 500);
-  },
-
-  /**
-   * Don't listen to page events while inspecting with the mouse.
-   */
-  brieflyIgnorePageEvents: function Highlighter_brieflyIgnorePageEvents()
-  {
-    // The goal is to keep smooth animations while inspecting.
-    // CSS Transitions might be interrupted because of a MozAfterPaint
-    // event that would triger an invalidateSize() call.
-    // So we don't listen to events that would trigger an invalidateSize()
-    // call.
-    //
-    // Side effect, zoom levels are not updated during this short period.
-    // It's very unlikely this would happen, but just in case, we call
-    // computeZoomFactor() when reattaching the events.
-    if (this.pageEventsMuter) {
-      this.chromeWin.clearTimeout(this.pageEventsMuter);
-    } else {
-      this.detachPageListeners();
-    }
-    this.pageEventsMuter =
-      this.chromeWin.setTimeout(function() {
-        this.attachPageListeners();
-        // Just in case the zoom level changed while ignoring the paint events
-        this.computeZoomFactor();
-        this.pageEventsMuter = null;
-      }.bind(this), 500);
-  },
-
-  /**
-   * Handle clicks.
-   *
-   * @param nsIDOMEvent aEvent
-   *        The DOM event.
-   */
-  handleClick: function Highlighter_handleClick(aEvent)
-  {
-    // Stop inspection when the user clicks on a node.
-    if (aEvent.button == 0) {
-      let win = aEvent.target.ownerDocument.defaultView;
-      this.lock();
-      win.focus();
-      aEvent.preventDefault();
-      aEvent.stopPropagation();
-    }
-  },
-
-  /**
-   * Handle mousemoves in panel.
-   *
-   * @param nsiDOMEvent aEvent
-   *        The MouseEvent triggering the method.
-   */
-  handleMouseMove: function Highlighter_handleMouseMove(aEvent)
-  {
-    let doc = aEvent.target.ownerDocument;
-
-    // This should never happen, but just in case, we don't let the
-    // highlighter highlight browser nodes.
-    if (doc && doc != this.chromeDoc) {
-      let element = LayoutHelpers.getElementFromPoint(aEvent.target.ownerDocument,
-        aEvent.clientX, aEvent.clientY);
-      if (element && element != this.node) {
-        this.highlight(element);
-      }
-    }
-  },
-};
-
-///////////////////////////////////////////////////////////////////////////
-
-XPCOMUtils.defineLazyGetter(this, "DOMUtils", function () {
-  return Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils)
-});
-
-XPCOMUtils.defineLazyGetter(Highlighter.prototype, "strings", function () {
-    return Services.strings.createBundle(
-            "chrome://browser/locale/devtools/inspector.properties");
-});
diff --git a/browser/devtools/highlighter/inspector.jsm b/browser/devtools/highlighter/inspector.jsm
deleted file mode 100644
--- a/browser/devtools/highlighter/inspector.jsm
+++ /dev/null
@@ -1,2414 +0,0 @@
-/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-const Cc = Components.classes;
-const Cu = Components.utils;
-const Ci = Components.interfaces;
-const Cr = Components.results;
-
-this.EXPORTED_SYMBOLS = ["InspectorUI"];
-
-Cu.import("resource://gre/modules/Services.jsm");
-Cu.import("resource://gre/modules/XPCOMUtils.jsm");
-Cu.import("resource:///modules/devtools/MarkupView.jsm");
-Cu.import("resource:///modules/highlighter.jsm");
-Cu.import("resource:///modules/devtools/LayoutView.jsm");
-Cu.import("resource:///modules/devtools/LayoutHelpers.jsm");
-Cu.import("resource:///modules/devtools/EventEmitter.jsm");
-Cu.import("resource:///modules/devtools/DOMHelpers.jsm");
-
-// Inspector notifications dispatched through the nsIObserverService.
-const INSPECTOR_NOTIFICATIONS = {
-  // Fires once the Inspector completes the initialization and opens up on
-  // screen.
-  OPENED: "inspector-opened",
-
-  // Fires once the Inspector is closed.
-  CLOSED: "inspector-closed",
-
-  // Fires once the Inspector is destroyed. Not fired on tab switch.
-  DESTROYED: "inspector-destroyed",
-
-  // Fires when the Inspector is reopened after tab-switch.
-  STATE_RESTORED: "inspector-state-restored",
-
-  // Fires when the Tree Panel is opened and initialized.
-  TREEPANELREADY: "inspector-treepanel-ready",
-
-  // Event notifications for the attribute-value editor
-  EDITOR_OPENED: "inspector-editor-opened",
-  EDITOR_CLOSED: "inspector-editor-closed",
-  EDITOR_SAVED: "inspector-editor-saved",
-};
-
-const PSEUDO_CLASSES = [":hover", ":active", ":focus"];
-
-// Timer, in milliseconds, between change events fired by
-// things like resize events.
-const LAYOUT_CHANGE_TIMER = 250;
-
-/**
- * Represents an open instance of the Inspector for a tab.
- * This is the object handed out to sidebars and other API consumers.
- *
- * Right now it's a thin layer over InspectorUI, but we will
- * start moving per-tab state into this object soon, eventually
- * replacing the per-winID InspectorStore objects.
- *
- * The lifetime of this object is also not yet correct.  This object
- * is currently destroyed when the inspector is torn down, either by user
- * closing the inspector or by user switching the tab.  This should
- * only be destroyed when user closes the inspector.
- */
-function Inspector(aIUI)
-{
-  this._IUI = aIUI;
-  this._winID = aIUI.winID;
-  this._browser = aIUI.browser;
-  this._eventEmitter = new EventEmitter();
-
-  this._browser.addEventListener("resize", this, true);
-
-  this._markupButton = this._IUI.chromeDoc.getElementById("inspector-treepanel-toolbutton");
-
-  if (Services.prefs.getBoolPref("devtools.inspector.htmlPanelOpen")) {
-    this.openMarkup();
-  } else {
-    this.closeMarkup();
-  }
-
-}
-
-Inspector.prototype = {
-  /**
-   * True if the highlighter is locked on a node.
-   */
-  get locked() {
-    return !this._IUI.inspecting;
-  },
-
-  /**
-   * The currently selected node in the highlighter.
-   */
-  get selection() {
-    return this._IUI.selection;
-  },
-
-  /**
-   * Indicate that a tool has modified the state of the page.  Used to
-   * decide whether to show the "are you sure you want to navigate"
-   * notification.
-   */
-  markDirty: function Inspector_markDirty()
-  {
-    this._IUI.isDirty = true;
-  },
-
-  /**
-   * The chrome window the inspector lives in.
-   */
-  get chromeWindow() {
-    return this._IUI.chromeWin;
-  },
-
-  /**
-   * Notify the inspector that the current selection has changed.
-   *
-   * @param string aContext
-   *        An string that will be passed to the change event.  Allows
-   *        a tool to recognize when it sent a change notification itself
-   *        to avoid unnecessary refresh.
-   */
-  change: function Inspector_change(aContext)
-  {
-    this._cancelLayoutChange();
-    this._IUI.nodeChanged(aContext);
-  },
-
-  /**
-   * Returns true if a given sidebar panel is currently visible.
-   * @param string aPanelName
-   *        The panel name as registered with registerSidebar
-   */
-  isPanelVisible: function Inspector_isPanelVisible(aPanelName)
-  {
-    return this._IUI.sidebar.visible &&
-           this._IUI.sidebar.activePanel === aPanelName;
-  },
-
-  /**
-   * Called by the InspectorUI when the inspector is being destroyed.
-   */
-  _destroy: function Inspector__destroy()
-  {
-    this._cancelLayoutChange();
-    this._destroyMarkup();
-    this._browser.removeEventListener("resize", this, true);
-    delete this._IUI;
-    delete this._eventEmitter;
-  },
-
-  /**
-   * Event handler for DOM events.
-   *
-   * @param DOMEvent aEvent
-   */
-  handleEvent: function Inspector_handleEvent(aEvent)
-  {
-    switch(aEvent.type) {
-      case "resize":
-        this._scheduleLayoutChange();
-    }
-  },
-
-  /**
-   * Schedule a low-priority change event for things like paint
-   * and resize.
-   */
-  _scheduleLayoutChange: function Inspector_scheduleLayoutChange()
-  {
-    if (this._timer) {
-      return null;
-    }
-    this._timer = this._IUI.win.setTimeout(function() {
-      this.change("layout");
-    }.bind(this), LAYOUT_CHANGE_TIMER);
-  },
-
-  /**
-   * Cancel a pending low-priority change event if any is
-   * scheduled.
-   */
-  _cancelLayoutChange: function Inspector_cancelLayoutChange()
-  {
-    if (this._timer) {
-      this._IUI.win.clearTimeout(this._timer);
-      delete this._timer;
-    }
-  },
-
-  toggleMarkup: function Inspector_toggleMarkup()
-  {
-    if (this._markupFrame) {
-      this.closeMarkup();
-      Services.prefs.setBoolPref("devtools.inspector.htmlPanelOpen", false);
-    } else {
-      this.openMarkup(true);
-      Services.prefs.setBoolPref("devtools.inspector.htmlPanelOpen", true);
-    }
-  },
-
-  /**
-   * XXX: The sidebar has an object that exists and is manipulated
-   * separately from its actual loading.  So the public api for
-   * the sidebar looks like:
-   *
-   * if (inspector.sidebar.visible) { inspector.sidebar.close() }
-   *
-   * whereas the markup API looks more like
-   *
-   * if (inspector.markupOpen) { inspector.closeMarkup() }
-   *
-   * Maybe we should add an InspectorMarkup object that presents
-   * the public api for the markup panel?
-   */
-  get markupOpen() {
-    return this._markupOpen;
-  },
-
-  openMarkup: function Inspector_openMarkup(aFocus)
-  {
-    this._markupButton.setAttribute("checked", "true");
-    this._markupOpen = true;
-    if (!this._markupFrame) {
-      this._initMarkup(aFocus);
-    }
-  },
-
-  closeMarkup: function Inspector_closeMarkup()
-  {
-    this._markupButton.removeAttribute("checked");
-    this._markupOpen = false;
-    this._destroyMarkup();
-  },
-
-  _initMarkup: function Inspector_initMarkupPane(aFocus)
-  {
-    let doc = this._IUI.chromeDoc;
-
-    this._markupBox = doc.createElement("vbox");
-    try {
-      this._markupBox.height =
-        Services.prefs.getIntPref("devtools.inspector.htmlHeight");
-    } catch(e) {
-      this._markupBox.height = 112;
-    }
-    this._markupBox.minHeight = 64;
-
-    this._markupSplitter = doc.createElement("splitter");
-    this._markupSplitter.className = "devtools-horizontal-splitter";
-
-    let container = doc.getElementById("appcontent");
-    container.appendChild(this._markupSplitter);
-    container.appendChild(this._markupBox);
-
-    // create tool iframe
-    this._markupFrame = doc.createElement("iframe");
-    this._markupFrame.setAttribute("flex", "1");
-    this._markupFrame.setAttribute("tooltip", "aHTMLTooltip");
-    this._markupFrame.setAttribute("context", "inspector-node-popup");
-
-    // This is needed to enable tooltips inside the iframe document.
-    this._boundMarkupFrameLoad = function Inspector_initMarkupPanel_onload() {
-      if (aFocus) {
-        this._markupFrame.contentWindow.focus();
-      }
-      this._onMarkupFrameLoad();
-    }.bind(this);
-    this._markupFrame.addEventListener("load", this._boundMarkupFrameLoad, true);
-
-    this._markupSplitter.setAttribute("hidden", true);
-    this._markupBox.setAttribute("hidden", true);
-    this._markupBox.appendChild(this._markupFrame);
-    this._markupFrame.setAttribute("src", "chrome://browser/content/devtools/markup-view.xhtml");
-  },
-
-  _onMarkupFrameLoad: function Inspector__onMarkupFrameLoad()
-  {
-    this._markupFrame.removeEventListener("load", this._boundMarkupFrameLoad, true);
-    delete this._boundMarkupFrameLoad;
-
-    this._markupSplitter.removeAttribute("hidden");
-    this._markupBox.removeAttribute("hidden");
-
-    this.markup = new MarkupView(this, this._markupFrame);
-    this.emit("markuploaded");
-  },
-
-  _destroyMarkup: function Inspector__destroyMarkup()
-  {
-    if (this._boundMarkupFrameLoad) {
-      this._markupFrame.removeEventListener("load", this._boundMarkupFrameLoad, true);
-      delete this._boundMarkupFrameLoad;
-    }
-
-    if (this.markup) {
-      this.markup.destroy();
-      delete this.markup;
-    }
-
-    if (this._markupFrame) {
-      delete this._markupFrame;
-    }
-
-    if (this._markupBox) {
-      Services.prefs.setIntPref("devtools.inspector.htmlHeight", this._markupBox.height);
-      this._markupBox.parentNode.removeChild(this._markupBox);
-      delete this._markupBox;
-    }
-
-    if (this._markupSplitter) {
-      this._markupSplitter.parentNode.removeChild(this._markupSplitter);
-      delete this._markupSplitter;
-    }
-  },
-
-  /**
-   * Called by InspectorUI after a tab switch, when the
-   * inspector is no longer the active tab.
-   */
-  _freeze: function Inspector__freeze()
-  {
-    if (this._markupBox) {
-      this._markupSplitter.setAttribute("hidden", true);
-      this._markupBox.setAttribute("hidden", true);
-    }
-    this._cancelLayoutChange();
-    this._browser.removeEventListener("resize", this, true);
-    this._frozen = true;
-  },
-
-  /**
-   * Called by InspectorUI after a tab switch when the
-   * inspector is back to being the active tab.
-   */
-  _thaw: function Inspector__thaw()
-  {
-    if (!this._frozen) {
-      return;
-    }
-
-    if (this._markupOpen && !this._boundMarkupFrameLoad) {
-      this._markupSplitter.removeAttribute("hidden");
-      this._markupBox.removeAttribute("hidden");
-    }
-    this._browser.addEventListener("resize", this, true);
-    delete this._frozen;
-  },
-
-  /// Forward the events related calls to the event emitter.
-
-  /**
-   * Connect a listener to this object.
-   *
-   * @param string aEvent
-   *        The event name to which we're connecting.
-   * @param function aListener
-   *        Called when the event is fired.
-   */
-  on: function Inspector_on(aEvent, aListener)
-  {
-    this._eventEmitter.on(aEvent, aListener);
-  },
-
-  /**
-   * Listen for the next time an event is fired.
-   *
-   * @param string aEvent
-   *        The event name to which we're connecting.
-   * @param function aListener
-   *        Called when the event is fired.  Will be called at most one time.
-   */
-  once: function Inspector_once(aEvent, aListener)
-  {
-    this._eventEmitter.once(aEvent, aListener);
-  },
-
-  /**
-   * Remove a previously-registered event listener.  Works for events
-   * registered with either on or once.
-   *
-   * @param string aEvent
-   *        The event name whose listener we're disconnecting.
-   * @param function aListener
-   *        The listener to remove.
-   */
-  off: function Inspector_removeListener(aEvent, aListener)
-  {
-    this._eventEmitter.off(aEvent, aListener);
-  },
-
-  /**
-   * Emit an event on the inspector.  All arguments to this method will
-   * be sent to listner functions.
-   */
-  emit: function Inspector_emit()
-  {
-    this._eventEmitter.emit.apply(this._eventEmitter, arguments);
-  }
-}
-
-///////////////////////////////////////////////////////////////////////////
-//// InspectorUI
-
-/**
- * Main controller class for the Inspector.
- *
- * @constructor
- * @param nsIDOMWindow aWindow
- *        The chrome window for which the Inspector instance is created.
- */
-this.InspectorUI = function InspectorUI(aWindow)
-{
-  // Let style inspector tools register themselves.
-  let tmp = {};
-  Cu.import("resource:///modules/devtools/StyleInspector.jsm", tmp);
-
-  this.chromeWin = aWindow;
-  this.chromeDoc = aWindow.document;
-  this.tabbrowser = aWindow.gBrowser;
-  this.tools = {};
-  this.toolEvents = {};
-  this.store = new InspectorStore();
-  this.INSPECTOR_NOTIFICATIONS = INSPECTOR_NOTIFICATIONS;
-  this.buildButtonsTooltip();
-}
-
-InspectorUI.prototype = {
-  browser: null,
-  tools: null,
-  toolEvents: null,
-  inspecting: false,
-  ruleViewEnabled: true,
-  isDirty: false,
-  store: null,
-
-  _currentInspector: null,
-  _sidebar: null,
-
-  /**
-   * The Inspector object for the current tab.
-   */
-  get currentInspector() this._currentInspector,
-
-  /**
-   * The InspectorStyleSidebar for the current tab.
-   */
-  get sidebar() this._sidebar,
-
-  /**
-   * Toggle the inspector interface elements on or off.
-   *
-   * @param aEvent
-   *        The event that requested the UI change. Toolbar button or menu.
-   */
-  toggleInspectorUI: function IUI_toggleInspectorUI(aEvent)
-  {
-    if (this.isInspectorOpen) {
-      this.closeInspectorUI();
-    } else {
-      this.openInspectorUI();
-    }
-  },
-
-  /**
-   * Add a tooltip to the Inspect and Markup buttons.
-   * The tooltips include the related keyboard shortcut.
-   */
-  buildButtonsTooltip: function IUI_buildButtonsTooltip()
-  {
-    let keysbundle = Services.strings.createBundle("chrome://global-platform/locale/platformKeys.properties");
-    let separator = keysbundle.GetStringFromName("MODIFIER_SEPARATOR");
-
-    let button, tooltip;
-
-    // Inspect Button - the shortcut string is built from the <key> element
-
-    let key = this.chromeDoc.getElementById("key_inspect");
-
-    if (key) {
-      let modifiersAttr = key.getAttribute("modifiers");
-
-      let combo = [];
-
-      if (modifiersAttr.match("accel"))
-#ifdef XP_MACOSX
-        combo.push(keysbundle.GetStringFromName("VK_META"));
-#else
-        combo.push(keysbundle.GetStringFromName("VK_CONTROL"));
-#endif
-      if (modifiersAttr.match("shift"))
-        combo.push(keysbundle.GetStringFromName("VK_SHIFT"));
-      if (modifiersAttr.match("alt"))
-        combo.push(keysbundle.GetStringFromName("VK_ALT"));
-      if (modifiersAttr.match("ctrl"))
-        combo.push(keysbundle.GetStringFromName("VK_CONTROL"));
-      if (modifiersAttr.match("meta"))
-        combo.push(keysbundle.GetStringFromName("VK_META"));
-
-      combo.push(key.getAttribute("key"));
-
-      tooltip = this.strings.formatStringFromName("inspectButtonWithShortcutKey.tooltip",
-        [combo.join(separator)], 1);
-    } else {
-      tooltip = this.strings.GetStringFromName("inspectButton.tooltip");
-    }
-
-    button = this.chromeDoc.getElementById("inspector-inspect-toolbutton");
-    button.setAttribute("tooltiptext", tooltip);
-
-    // Markup Button - the shortcut string is built from the accesskey attribute
-
-    button = this.chromeDoc.getElementById("inspector-treepanel-toolbutton");
-#ifdef XP_MACOSX
-    // On Mac, no accesskey
-    tooltip = this.strings.GetStringFromName("markupButton.tooltip");
-#else
-    let altString = keysbundle.GetStringFromName("VK_ALT");
-    let accesskey = button.getAttribute("accesskey");
-    let shortcut = altString + separator + accesskey;
-    tooltip = this.strings.formatStringFromName("markupButton.tooltipWithAccesskey",
-      [shortcut], 1);
-#endif
-    button.setAttribute("tooltiptext", tooltip);
-
-  },
-
-  /**
-   * Toggle the status of the inspector, starting or stopping it. Invoked
-   * from the toolbar's Inspect button.
-   */
-  toggleInspection: function IUI_toggleInspection()
-  {
-    if (!this.isInspectorOpen) {
-      this.openInspectorUI();
-      return;
-    }
-
-    if (this.inspecting) {
-      this.stopInspecting();
-    } else {
-      this.startInspecting();
-    }
-  },
-
-  /**
-   * Show or hide the sidebar. Called from the Styling button on the
-   * highlighter toolbar.
-   */
-  toggleSidebar: function IUI_toggleSidebar()
-  {
-    if (!this.sidebar.visible) {
-      this.sidebar.show();
-    } else {
-      this.sidebar.hide();
-    }
-  },
-
-  /**
-   * Toggle the TreePanel.
-   */
-  toggleHTMLPanel: function IUI_toggleHTMLPanel()
-  {
-    this.currentInspector.toggleMarkup();
-  },
-
-  /**
-   * Is the inspector UI open? Simply check if the toolbar is visible or not.
-   *
-   * @returns boolean
-   */
-  get isInspectorOpen()
-  {
-    return !!(this.toolbar && !this.toolbar.hidden && this.highlighter);
-  },
-
-  /**
-   * Return the default selection element for the inspected document.
-   */
-  get defaultSelection()
-  {
-    let doc = this.win.document;
-    return doc.documentElement ? doc.documentElement.lastElementChild : null;
-  },
-
-  /**
-   * Open inspector UI and HTML tree. Add listeners for document scrolling,
-   * resize, tabContainer.TabSelect and others. If a node is provided, then
-   * start inspecting it.
-   *
-   * @param [optional] aNode
-   *        The node to inspect.
-   */
-  openInspectorUI: function IUI_openInspectorUI(aNode)
-  {
-    // InspectorUI is already up and running. Lock a node if asked (via context).
-    if (this.isInspectorOpen) {
-      if (aNode) {
-        this.inspectNode(aNode);
-        this.stopInspecting();
-      }
-      return;
-    }
-
-    // Observer used to inspect the specified element from content after the
-    // inspector UI has been opened (via the content context menu).
-    function inspectObserver(aElement) {
-      Services.obs.removeObserver(boundInspectObserver,
-                                  INSPECTOR_NOTIFICATIONS.OPENED,
-                                  false);
-      this.inspectNode(aElement);
-      this.stopInspecting();
-    };
-
-    var boundInspectObserver = inspectObserver.bind(this, aNode);
-
-    if (aNode) {
-      // Add the observer to inspect the node after initialization finishes.
-      Services.obs.addObserver(boundInspectObserver,
-                               INSPECTOR_NOTIFICATIONS.OPENED,
-                               false);
-    }
-    // Start initialization.
-    this.browser = this.tabbrowser.selectedBrowser;
-    this.win = this.browser.contentWindow;
-    this.winID = this.getWindowID(this.win);
-    this.toolbar = this.chromeDoc.getElementById("inspector-toolbar");
-    this.inspectCommand = this.chromeDoc.getElementById("Inspector:Inspect");
-
-    // Update menus:
-    this.inspectorUICommand = this.chromeDoc.getElementById("Tools:Inspect");
-    this.inspectorUICommand.setAttribute("checked", "true");
-
-    this.chromeWin.Tilt.setup();
-
-    this.toolbar.hidden = false;
-
-    // initialize the HTML Breadcrumbs
-    this.breadcrumbs = new HTMLBreadcrumbs(this);
-
-    this.isDirty = false;
-
-    this.progressListener = new InspectorProgressListener(this);
-
-    this.chromeWin.addEventListener("keypress", this, false);
-
-    // initialize the highlighter
-    this.highlighter = new Highlighter(this.chromeWin);
-
-    this.initializeStore();
-
-    this._sidebar = new InspectorStyleSidebar({
-      document: this.chromeDoc,
-      inspector: this._currentInspector,
-    });
-
-    // Fade out the highlighter when needed
-    let deck = this.chromeDoc.getElementById("devtools-sidebar-deck");
-    deck.addEventListener("mouseenter", this, true);
-    deck.addEventListener("mouseleave", this, true);
-
-    // Create UI for any sidebars registered with
-    // InspectorUI.registerSidebar()
-    for each (let tool in InspectorUI._registeredSidebars) {
-      this._sidebar.addTool(tool);
-    }
-
-    this.setupNavigationKeys();
-    this.highlighterReady();
-
-    // Focus the first focusable element in the toolbar
-    this.chromeDoc.commandDispatcher.advanceFocusIntoSubtree(this.toolbar);
-
-    // If nothing is focused in the toolbar, it means that the focus manager
-    // is limited to some specific elements and has moved the focus somewhere else.
-    // So in this case, we want to focus the content window.
-    // See: https://developer.mozilla.org/en/XUL_Tutorial/Focus_and_Selection#Platform_Specific_Behaviors
-    if (!this.toolbar.querySelector(":-moz-focusring")) {
-      this.win.focus();
-    }
-
-  },
-
-  /**
-   * Initialize the InspectorStore.
-   */
-  initializeStore: function IUI_initializeStore()
-  {
-    // First time opened, add the TabSelect listener
-    if (this.store.isEmpty()) {
-      this.tabbrowser.tabContainer.addEventListener("TabSelect", this, false);
-    }
-
-    // Has this windowID been inspected before?
-    if (this.store.hasID(this.winID)) {
-      this._currentInspector = this.store.getInspector(this.winID);
-      this._currentInspector._thaw();
-      let selectedNode = this.currentInspector._selectedNode;
-      if (selectedNode) {
-        this.inspectNode(selectedNode);
-      }
-      this.isDirty = this.currentInspector._isDirty;
-    } else {
-      // First time inspecting, set state to no selection + live inspection.
-      let inspector = new Inspector(this);
-      this.store.addInspector(this.winID, inspector);
-      inspector._selectedNode = null;
-      inspector._inspecting = true;
-      inspector._isDirty = this.isDirty;
-
-      inspector._htmlPanelOpen =
-        Services.prefs.getBoolPref("devtools.inspector.htmlPanelOpen");
-
-      inspector._sidebarOpen =
-        Services.prefs.getBoolPref("devtools.inspector.sidebarOpen");
-
-      inspector._activeSidebar =
-        Services.prefs.getCharPref("devtools.inspector.activeSidebar");
-
-      this.win.addEventListener("pagehide", this, true);
-
-      this._currentInspector = inspector;
-    }
-  },
-
-  /**
-   * Browse nodes according to the breadcrumbs layout, only for some specific
-   * elements of the UI.
-   */
-   setupNavigationKeys: function IUI_setupNavigationKeys()
-   {
-     // UI elements that are arrow keys sensitive:
-     // - the Inspector toolbar.
-
-     this.onKeypress = this.onKeypress.bind(this);
-
-     this.toolbar.addEventListener("keypress", this.onKeypress, true);
-   },
-
-  /**
-   * Remove the event listeners for the arrowkeys.
-   */
-   removeNavigationKeys: function IUI_removeNavigationKeys()
-   {
-      this.toolbar.removeEventListener("keypress", this.onKeypress, true);
-   },
-
-  /**
-   * Close inspector UI and associated panels. Unhighlight and stop inspecting.
-   * Remove event listeners for document scrolling, resize,
-   * tabContainer.TabSelect and others.
-   *
-   * @param boolean aKeepInspector
-   *        Tells if you want the inspector associated to the current tab/window to
-   *        be cleared or not. Set this to true to save the inspector, or false
-   *        to destroy it.
-   */
-  closeInspectorUI: function IUI_closeInspectorUI(aKeepInspector)
-  {
-    if (this.closing || !this.win || !this.browser) {
-      return;
-    }
-
-    let winId = new String(this.winID); // retain this to notify observers.
-
-    this.closing = true;
-    this.toolbar.hidden = true;
-
-    this.removeNavigationKeys();
-
-    this.progressListener.destroy();
-    delete this.progressListener;
-
-    if (!aKeepInspector) {
-      this.win.removeEventListener("pagehide", this, true);
-      this.clearPseudoClassLocks();
-    } else {
-      // Update the inspector before closing.
-      if (this.selection) {
-        this.currentInspector._selectedNode = this.selection;
-      }
-      this.currentInspector._inspecting = this.inspecting;
-      this.currentInspector._isDirty = this.isDirty;
-    }
-
-    if (this.store.isEmpty()) {
-      this.tabbrowser.tabContainer.removeEventListener("TabSelect", this, false);
-    }
-
-    this.chromeWin.removeEventListener("keypress", this, false);
-
-    this.stopInspecting();
-
-    // close the sidebar
-    if (this._sidebar) {
-      this._sidebar.destroy();
-      this._sidebar = null;
-    }
-
-    let deck = this.chromeDoc.getElementById("devtools-sidebar-deck");
-    deck.removeEventListener("mouseenter", this, true);
-    deck.removeEventListener("mouseleave", this, true);
-
-    this.highlighter.destroy();
-    this.highlighter = null;
-
-    if (this.breadcrumbs) {
-      this.breadcrumbs.destroy();
-      this.breadcrumbs = null;
-    }
-
-    if (aKeepInspector) {
-      this._currentInspector._freeze();
-    } else {
-      this.store.deleteInspector(this.winID);
-    }
-    delete this._currentInspector;
-
-    this.inspectorUICommand.setAttribute("checked", "false");
-
-    this.browser = this.win = null; // null out references to browser and window
-    this.winID = null;
-    this.selection = null;
-    this.closing = false;
-    this.isDirty = false;
-
-    delete this.stylePanel;
-    delete this.inspectorUICommand;
-    delete this.inspectCommand;
-    delete this.toolbar;
-
-    Services.obs.notifyObservers(null, INSPECTOR_NOTIFICATIONS.CLOSED, null);
-
-    if (!aKeepInspector)
-      Services.obs.notifyObservers(null, INSPECTOR_NOTIFICATIONS.DESTROYED, winId);
-  },
-
-  /**
-   * Begin inspecting webpage, attach page event listeners, activate
-   * highlighter event listeners.
-   */
-  startInspecting: function IUI_startInspecting()
-  {
-    this.inspectCommand.setAttribute("checked", "true");
-
-    this.inspecting = true;
-    this.highlighter.unlock();
-    this._notifySelected();
-    this._currentInspector.emit("unlocked");
-  },
-
-  _notifySelected: function IUI__notifySelected(aFrom)
-  {
-    this._currentInspector._cancelLayoutChange();
-    this._currentInspector.emit("select", aFrom);
-  },
-
-  /**
-   * Stop inspecting webpage, detach page listeners, disable highlighter
-   * event listeners.
-   * @param aPreventScroll
-   *        Prevent scroll in the HTML tree?
-   */
-  stopInspecting: function IUI_stopInspecting(aPreventScroll)
-  {
-    if (!this.inspecting) {
-      return;
-    }
-
-    this.inspectCommand.setAttribute("checked", "false");
-
-    this.inspecting = false;
-
-    if (this.closing)
-      return;
-
-    if (this.highlighter.getNode()) {
-      this.select(this.highlighter.getNode(), true, !aPreventScroll);
-    } else {
-      this.select(null, true, true);
-    }
-
-    this.highlighter.lock();
-    this._notifySelected();
-    this._currentInspector.emit("locked");
-  },
-
-  /**
-   * Select an object in the inspector.
-   * @param aNode
-   *        node to inspect
-   * @param forceUpdate
-   *        force an update?
-   * @param aScroll boolean
-   *        scroll the tree panel?
-   * @param aFrom [optional] string
-   *        which part of the UI the selection occured from
-   */
-  select: function IUI_select(aNode, forceUpdate, aScroll, aFrom)
-  {
-    if (!aNode)
-      aNode = this.defaultSelection;
-
-    if (forceUpdate || aNode != this.selection) {
-      if (aFrom != "breadcrumbs") {
-        this.clearPseudoClassLocks();
-      }
-
-      this.selection = aNode;
-      if (!this.inspecting) {
-        this.highlighter.highlight(this.selection);
-      }
-    }
-
-    this.breadcrumbs.update();
-    this.chromeWin.Tilt.update(aNode);
-
-    this._notifySelected(aFrom);
-  },
-
-  /**
-   * Toggle the pseudo-class lock on the currently inspected element. If the
-   * pseudo-class is :hover or :active, that pseudo-class will also be toggled
-   * on every ancestor of the element, mirroring real :hover and :active
-   * behavior.
-   * 
-   * @param aPseudo the pseudo-class lock to toggle, e.g. ":hover"
-   */
-  togglePseudoClassLock: function IUI_togglePseudoClassLock(aPseudo)
-  {
-    if (DOMUtils.hasPseudoClassLock(this.selection, aPseudo)) {
-      this.breadcrumbs.nodeHierarchy.forEach(function(crumb) {
-        DOMUtils.removePseudoClassLock(crumb.node, aPseudo);
-      });
-    } else {
-      let hierarchical = aPseudo == ":hover" || aPseudo == ":active";
-      let node = this.selection;
-      do {
-        DOMUtils.addPseudoClassLock(node, aPseudo);
-        node = node.parentNode;
-      } while (hierarchical && node.parentNode)
-    }
-    this.nodeChanged("pseudoclass");
-  },
-
-  /**
-   * Clear all pseudo-class locks applied to elements in the node hierarchy
-   */
-  clearPseudoClassLocks: function IUI_clearPseudoClassLocks()
-  {
-    this.breadcrumbs.nodeHierarchy.forEach(function(crumb) {
-      if (LayoutHelpers.isNodeConnected(crumb.node)) {
-        DOMUtils.clearPseudoClassLocks(crumb.node);
-      }
-    });
-  },
-
-  /**
-   * Called when the highlighted node is changed by a tool.
-   *
-   * @param object aUpdater
-   *        The tool that triggered the update (if any), that tool's
-   *        onChanged will not be called.
-   */
-  nodeChanged: function IUI_nodeChanged(aUpdater)
-  {
-    this.highlighter.updateInfobar();
-    this.highlighter.invalidateSize();
-    this.breadcrumbs.updateSelectors();
-    this._currentInspector.emit("change", aUpdater);
-  },
-
-  /////////////////////////////////////////////////////////////////////////
-  //// Event Handling
-
-  highlighterReady: function IUI_highlighterReady()
-  {
-    let self = this;
-
-    this.highlighter.addListener("locked", function() {
-      self.stopInspecting();
-    });
-
-    this.highlighter.addListener("unlocked", function() {
-      self.startInspecting();
-    });
-
-    this.highlighter.addListener("nodeselected", function() {
-      self.select(self.highlighter.getNode(), false, false);
-    });
-
-    this.highlighter.addListener("pseudoclasstoggled", function(aPseudo) {
-      self.togglePseudoClassLock(aPseudo);
-    });
-
-    if (this.currentInspector._inspecting) {
-      this.startInspecting();
-      this.highlighter.unlock();
-    } else {
-      this.highlighter.lock();
-    }
-
-    Services.obs.notifyObservers(null, INSPECTOR_NOTIFICATIONS.STATE_RESTORED, null);
-
-    this.highlighter.highlight();
-
-    if (this.currentInspector._sidebarOpen) {
-      this._sidebar.show();
-    }
-
-    Services.obs.notifyObservers({wrappedJSObject: this},
-                                 INSPECTOR_NOTIFICATIONS.OPENED, null);
-  },
-
-  /**
-   * Main callback handler for events.
-   *
-   * @param event
-   *        The event to be handled.
-   */
-  handleEvent: function IUI_handleEvent(event)
-  {
-    let winID = null;
-    let win = null;
-    let inspectorClosed = false;
-
-    switch (event.type) {
-      case "TabSelect":
-        winID = this.getWindowID(this.tabbrowser.selectedBrowser.contentWindow);
-        if (this.isInspectorOpen && winID != this.winID) {
-          this.closeInspectorUI(true);
-          inspectorClosed = true;
-        }
-
-        if (winID && this.store.hasID(winID)) {
-          if (inspectorClosed && this.closing) {
-            Services.obs.addObserver(function reopenInspectorForTab() {
-              Services.obs.removeObserver(reopenInspectorForTab,
-                INSPECTOR_NOTIFICATIONS.CLOSED, false);
-
-              this.openInspectorUI();
-            }.bind(this), INSPECTOR_NOTIFICATIONS.CLOSED, false);
-          } else {
-            this.openInspectorUI();
-          }
-        }
-
-        if (this.store.isEmpty()) {
-          this.tabbrowser.tabContainer.removeEventListener("TabSelect", this,
-                                                         false);
-        }
-        break;
-      case "keypress":
-        switch (event.keyCode) {
-          case this.chromeWin.KeyEvent.DOM_VK_ESCAPE:
-            this.closeInspectorUI(false);
-            event.preventDefault();
-            event.stopPropagation();
-            break;
-      }
-      case "pagehide":
-        win = event.originalTarget.defaultView;
-        // Skip iframes/frames.
-        if (!win || win.frameElement || win.top != win) {
-          break;
-        }
-
-        win.removeEventListener(event.type, this, true);
-
-        winID = this.getWindowID(win);
-        if (winID && winID != this.winID) {
-          this.store.deleteInspector(winID);
-        }
-
-        if (this.store.isEmpty()) {
-          this.tabbrowser.tabContainer.removeEventListener("TabSelect", this,
-                                                         false);
-        }
-        break;
-      case "mouseleave":
-        this.highlighter.show();
-        break;
-      case "mouseenter":
-        this.highlighter.hide();
-        break;
-    }
-  },
-
-  /*
-   * handles "keypress" events.
-  */
-  onKeypress: function IUI_onKeypress(event)
-  {
-    let node = null;
-    let bc = this.breadcrumbs;
-    switch (event.keyCode) {
-      case this.chromeWin.KeyEvent.DOM_VK_LEFT:
-        if (bc.currentIndex != 0)
-          node = bc.nodeHierarchy[bc.currentIndex - 1].node;
-        if (node && this.highlighter.isNodeHighlightable(node))
-          this.highlighter.highlight(node);
-        event.preventDefault();
-        event.stopPropagation();
-        break;
-      case this.chromeWin.KeyEvent.DOM_VK_RIGHT:
-        if (bc.currentIndex < bc.nodeHierarchy.length - 1)
-          node = bc.nodeHierarchy[bc.currentIndex + 1].node;
-        if (node && this.highlighter.isNodeHighlightable(node)) {
-          this.highlighter.highlight(node);
-        }
-        event.preventDefault();
-        event.stopPropagation();
-        break;
-      case this.chromeWin.KeyEvent.DOM_VK_UP:
-        if (this.selection) {
-          // Find a previous sibling that is highlightable.
-          node = this.selection.previousSibling;
-          while (node && !this.highlighter.isNodeHighlightable(node)) {
-            node = node.previousSibling;
-          }
-        }
-        if (node && this.highlighter.isNodeHighlightable(node)) {
-          this.highlighter.highlight(node, true);
-        }
-        event.preventDefault();
-        event.stopPropagation();
-        break;
-      case this.chromeWin.KeyEvent.DOM_VK_DOWN:
-        if (this.selection) {
-          // Find a next sibling that is highlightable.
-          node = this.selection.nextSibling;
-          while (node && !this.highlighter.isNodeHighlightable(node)) {
-            node = node.nextSibling;
-          }
-        }
-        if (node && this.highlighter.isNodeHighlightable(node)) {
-          this.highlighter.highlight(node, true);
-        }
-        event.preventDefault();
-        event.stopPropagation();
-        break;
-    }
-  },
-
-  /**
-   * Return the currently-selected node for the purposes of the
-   * context menu.  This is usually the highlighter selection, unless
-   * the markup panel has a selected node that can't be highlighted
-   * (such as a text node).  This will be fixed once the highlighter/inspector
-   * is confortable with non-element nodes being the current selection.
-   * See bug 785180.
-   */
-  _contextSelection: function IUI__contextSelection()
-  {
-    let inspector = this.currentInspector;
-    if (inspector.markup) {
-      return inspector.markup.selected;
-    }
-    return this.selection;
-  },
-
-  /**
-   * Copy the innerHTML of the selected Node to the clipboard. Called via the
-   * Inspector:CopyInner command.
-   */
-  copyInnerHTML: function IUI_copyInnerHTML()
-  {
-    let selection = this._contextSelection();
-    clipboardHelper.copyString(selection.innerHTML, selection.ownerDocument);
-  },
-
-  /**
-   * Copy the outerHTML of the selected Node to the clipboard. Called via the
-   * Inspector:CopyOuter command.
-   */
-  copyOuterHTML: function IUI_copyOuterHTML()
-  {
-    let selection = this._contextSelection();
-    clipboardHelper.copyString(selection.outerHTML, selection.ownerDocument);
-  },
-
-  /**
-   * Delete the selected node. Called via the Inspector:DeleteNode command.
-   */
-  deleteNode: function IUI_deleteNode()
-  {
-    let selection = this._contextSelection();
-
-    let root = selection.ownerDocument.documentElement;
-    if (selection === root) {
-      // We can't delete the root element.
-      return;
-    }
-
-    let parent = selection.parentNode;
-
-    // If the markup panel is active, use the markup panel to delete
-    // the node, making this an undoable action.
-    let markup = this.currentInspector.markup;
-    if (markup) {
-      markup.deleteNode(selection);
-    } else {
-      // remove the node from content
-      parent.removeChild(selection);
-    }
-
-    // Otherwise, just delete the node.
-    this.breadcrumbs.invalidateHierarchy();
-
-    // select the parent node in the highlighter and breadcrumbs
-    this.inspectNode(parent);
-  },
-
-  /////////////////////////////////////////////////////////////////////////
-  //// Utility Methods
-
-  /**
-   * inspect the given node, highlighting it on the page and selecting the
-   * correct row in the tree panel
-   *
-   * @param aNode
-   *        the element in the document to inspect
-   * @param aScroll
-   *        force scroll?
-   */
-  inspectNode: function IUI_inspectNode(aNode, aScroll)
-  {
-    if (aNode.ownerDocument === this.chromeDoc) {
-      // This should never happen, but just in case, we don't let the inspector
-      // inspect browser nodes.
-      return;
-    }
-    this.select(aNode, true, true);
-    this.highlighter.highlight(aNode, aScroll);
-  },
-
-  ///////////////////////////////////////////////////////////////////////////
-  //// Utility functions
-
-  /**
-   * Retrieve the unique ID of a window object.
-   *
-   * @param nsIDOMWindow aWindow
-   * @returns integer ID
-   */
-  getWindowID: function IUI_getWindowID(aWindow)
-  {
-    if (!aWindow) {
-      return null;
-    }
-
-    let util = {};
-
-    try {
-      util = aWindow.QueryInterface(Ci.nsIInterfaceRequestor).
-        getInterface(Ci.nsIDOMWindowUtils);
-    } catch (ex) { }
-
-    return util.currentInnerWindowID;
-  },
-
-  /**
-   * @param msg
-   *        text message to send to the log
-   */
-  _log: function LOG(msg)
-  {
-    Services.console.logStringMessage(msg);
-  },
-
-  /**
-   * Debugging function.
-   * @param msg
-   *        text to show with the stack trace.
-   */
-  _trace: function TRACE(msg)
-  {
-    this._log("TRACE: " + msg);
-    let frame = Components.stack.caller;
-    while (frame = frame.caller) {
-      if (frame.language == Ci.nsIProgrammingLanguage.JAVASCRIPT ||
-          frame.language == Ci.nsIProgrammingLanguage.JAVASCRIPT2) {
-        this._log("filename: " + frame.filename + " lineNumber: " + frame.lineNumber +
-          " functionName: " + frame.name);
-      }
-    }
-    this._log("END TRACE");
-  },
-
-  /**
-   * Get the toolbar button name for a given id string. Used by the
-   * registerTools API to retrieve a consistent name for toolbar buttons
-   * based on the ID of the tool.
-   * @param anId String
-   *        id of the tool to be buttonized
-   * @returns String
-   */
-  getToolbarButtonId: function IUI_createButtonId(anId)
-  {
-    return "inspector-" + anId + "-toolbutton";
-  },
-
-  /**
-   * Destroy the InspectorUI instance. This is called by the InspectorUI API
-   * "user", see gBrowserInit.onUnload() in browser.js.
-   */
-  destroy: function IUI_destroy()
-  {
-    if (this.isInspectorOpen) {
-      this.closeInspectorUI();
-    }
-
-    delete this.store;
-    delete this.chromeDoc;
-    delete this.chromeWin;
-    delete this.tabbrowser;
-  },
-};
-
-/**
- * The Inspector store is used for storing data specific to each tab window.
- * @constructor
- */
-function InspectorStore()
-{
-  this.store = {};
-}
-InspectorStore.prototype = {
-  length: 0,
-
-  /**
-   * Check if there is any data recorded for any tab/window.
-   *
-   * @returns boolean True if there are no stores for any window/tab, or false
-   * otherwise.
-   */
-  isEmpty: function IS_isEmpty()
-  {
-    return this.length == 0 ? true : false;
-  },
-
-  /**
-   * Add a new inspector.
-   *
-   * @param string aID The Store ID you want created.
-   * @param Inspector aInspector The inspector to add.
-   * @returns boolean True if the store was added successfully, or false
-   * otherwise.
-   */
-  addInspector: function IS_addInspector(aID, aInspector)
-  {
-    let result = false;
-
-    if (!(aID in this.store)) {
-      this.store[aID] = aInspector;
-      this.length++;
-      result = true;
-    }
-
-    return result;
-  },
-
-  /**
-   * Get the inspector for a window, if any.
-   *
-   * @param string aID The Store ID you want created.
-   */
-  getInspector: function IS_getInspector(aID)
-  {
-    return this.store[aID] || null;
-  },
-
-  /**
-   * Delete an inspector by ID.
-   *
-   * @param string aID The store ID you want deleted.
-   * @returns boolean True if the store was removed successfully, or false
-   * otherwise.
-   */
-  deleteInspector: function IS_deleteInspector(aID)
-  {
-    let result = false;
-
-    if (aID in this.store) {
-      this.store[aID]._destroy();
-      delete this.store[aID];
-      this.length--;
-      result = true;
-    }
-
-    return result;
-  },
-
-  /**
-   * Check store existence.
-   *
-   * @param string aID The store ID you want to check.
-   * @returns boolean True if the store ID is registered, or false otherwise.
-   */
-  hasID: function IS_hasID(aID)
-  {
-    return (aID in this.store);
-  },
-};
-
-/**
- * The InspectorProgressListener object is an nsIWebProgressListener which
- * handles onStateChange events for the inspected browser. If the user makes
- * changes to the web page and he tries to navigate away, he is prompted to
- * confirm page navigation, such that he's given the chance to prevent the loss
- * of edits.
- *
- * @constructor
- * @param object aInspector
- *        InspectorUI instance object.
- */
-function InspectorProgressListener(aInspector)
-{
-  this.IUI = aInspector;
-  this.IUI.tabbrowser.addProgressListener(this);
-}
-
-InspectorProgressListener.prototype = {
-  onStateChange:
-  function IPL_onStateChange(aProgress, aRequest, aFlag, aStatus)
-  {
-    // Remove myself if the Inspector is no longer open.
-    if (!this.IUI.isInspectorOpen) {
-      this.destroy();
-      return;
-    }
-
-    let isStart = aFlag & Ci.nsIWebProgressListener.STATE_START;
-    let isDocument = aFlag & Ci.nsIWebProgressListener.STATE_IS_DOCUMENT;
-    let isNetwork = aFlag & Ci.nsIWebProgressListener.STATE_IS_NETWORK;
-    let isRequest = aFlag & Ci.nsIWebProgressListener.STATE_IS_REQUEST;
-
-    // Skip non-interesting states.
-    if (!isStart || !isDocument || !isRequest || !isNetwork) {
-      return;
-    }
-
-    // If the request is about to happen in a new window, we are not concerned
-    // about the request.
-    if (aProgress.DOMWindow != this.IUI.win) {
-      return;
-    }
-
-    if (this.IUI.isDirty) {
-      this.showNotification(aRequest);
-    } else {
-      this.IUI.closeInspectorUI();
-    }
-  },
-
-  /**
-   * Show an asynchronous notification which asks the user to confirm or cancel
-   * the page navigation request.
-   *
-   * @param nsIRequest aRequest
-   *        The request initiated by the user or by the page itself.
-   * @returns void
-   */
-  showNotification: function IPL_showNotification(aRequest)
-  {
-    aRequest.suspend();
-
-    let notificationBox = this.IUI.tabbrowser.getNotificationBox(this.IUI.browser);
-    let notification = notificationBox.
-      getNotificationWithValue("inspector-page-navigation");
-
-    if (notification) {
-      notificationBox.removeNotification(notification, true);
-    }
-
-    let cancelRequest = function onCancelRequest() {
-      if (aRequest) {
-        aRequest.cancel(Cr.NS_BINDING_ABORTED);
-        aRequest.resume(); // needed to allow the connection to be cancelled.
-        aRequest = null;
-      }
-    };
-
-    let eventCallback = function onNotificationCallback(aEvent) {
-      if (aEvent == "removed") {
-        cancelRequest();
-      }
-    };
-
-    let buttons = [
-      {
-        id: "inspector.confirmNavigationAway.buttonLeave",
-        label: this.IUI.strings.
-          GetStringFromName("confirmNavigationAway.buttonLeave"),
-        accessKey: this.IUI.strings.
-          GetStringFromName("confirmNavigationAway.buttonLeaveAccesskey"),
-        callback: function onButtonLeave() {
-          if (aRequest) {
-            aRequest.resume();
-            aRequest = null;
-            this.IUI.closeInspectorUI();
-            return true;
-          }
-          return false;
-        }.bind(this),
-      },
-      {
-        id: "inspector.confirmNavigationAway.buttonStay",
-        label: this.IUI.strings.
-          GetStringFromName("confirmNavigationAway.buttonStay"),
-        accessKey: this.IUI.strings.
-          GetStringFromName("confirmNavigationAway.buttonStayAccesskey"),
-        callback: cancelRequest
-      },
-    ];
-
-    let message = this.IUI.strings.
-      GetStringFromName("confirmNavigationAway.message");
-
-    notification = notificationBox.appendNotification(message,
-      "inspector-page-navigation", "chrome://browser/skin/Info.png",
-      notificationBox.PRIORITY_WARNING_HIGH, buttons, eventCallback);
-
-    // Make sure this not a transient notification, to avoid the automatic
-    // transient notification removal.
-    notification.persistence = -1;
-  },
-
-  /**
-   * Destroy the progress listener instance.
-   */
-  destroy: function IPL_destroy()
-  {
-    this.IUI.tabbrowser.removeProgressListener(this);
-
-    let notificationBox = this.IUI.tabbrowser.getNotificationBox(this.IUI.browser);
-    let notification = notificationBox.
-      getNotificationWithValue("inspector-page-navigation");
-
-    if (notification) {
-      notificationBox.removeNotification(notification, true);
-    }
-
-    delete this.IUI;
-  },
-};
-
-InspectorUI._registeredSidebars = [];
-
-/**
- * Register an inspector sidebar template.
- * Already running sidebars will not be affected, see bug 740665.
- *
- * @param aRegistration Object
- * {
- *   id: "toolname",
- *   label: "Button or tab label",
- *   icon: "chrome://somepath.png",
- *   tooltiptext: "Button tooltip",
- *   accesskey: "S",
- *   contentURL: string URI, source of the tool's iframe content.
- *   load: Called when the sidebar has been created and the contentURL loaded.
- *         Passed an Inspector object and an iframe object.
- *   destroy: Called when the sidebar is destroyed by the inspector.
- *     Passed whatever was returned by the tool's create function.
- * }
- */
-InspectorUI.registerSidebar = function IUI_registerSidebar(aRegistration)
-{
-  // Only allow a given tool ID to be registered once.
-  if (InspectorUI._registeredSidebars.some(function(elt) elt.id == aRegistration.id))
-    return false;
-
-  InspectorUI._registeredSidebars.push(aRegistration);
-
-  return true;
-}
-
-/**
- * Unregister a previously-registered inspector sidebar.
- * Already running sidebars will not be affected, see bug 740665.
- *
- * @param aID string
- */
-InspectorUI.unregisterSidebar = function IUI_unregisterSidebar(aID)
-{
-  InspectorUI._registeredSidebars = InspectorUI._registeredSidebars.filter(function(aReg) aReg.id != aID);
-}
-
-///////////////////////////////////////////////////////////////////////////
-//// Style Sidebar
-
-/**
- * Manages the UI and loading of registered sidebar tools.
- * @param aOptions object
- *   Initialization information for the style sidebar, including:
- *     document: The chrome document in which the style sidebar
- *             should be created.
- *     inspector: The Inspector object tied to this sidebar.
- */
-function InspectorStyleSidebar(aOptions)
-{
-  this._tools = {};
-  this._chromeDoc = aOptions.document;
-  this._inspector = aOptions.inspector;
-}
-
-InspectorStyleSidebar.prototype = {
-
-  get visible() !this._box.hasAttribute("hidden"),
-  get activePanel() this._deck.selectedPanel._toolID,
-
-  destroy: function ISS_destroy()
-  {
-    // close the Layout View
-    if (this._layoutview) {
-      this._layoutview.destroy();
-      this._layoutview = null;
-    }
-
-    for each (let toolID in Object.getOwnPropertyNames(this._tools)) {
-      this.removeTool(toolID);
-    }
-    delete this._tools;
-    this._teardown();
-  },
-
-  /**
-   * Called by InspectorUI to create the UI for a registered sidebar tool.
-   * Will create a toolbar button and an iframe for the tool.
-   * @param aRegObj object
-   *        See the documentation for InspectorUI.registerSidebar().
-   */
-  addTool: function ISS_addTool(aRegObj)
-  {
-    if (aRegObj.id in this._tools) {
-      return;
-    }
-
-    let btn = this._chromeDoc.createElement("toolbarbutton");
-    btn.setAttribute("label", aRegObj.label);
-    btn.setAttribute("class", "devtools-toolbarbutton");
-    btn.setAttribute("tooltiptext", aRegObj.tooltiptext);
-    btn.setAttribute("accesskey", aRegObj.accesskey);
-    btn.setAttribute("image", aRegObj.icon || "");
-    btn.setAttribute("type", "radio");
-    btn.setAttribute("group", "sidebar-tools");
-
-    let spacer = this._toolbar.querySelector("spacer");
-    this._toolbar.insertBefore(btn, spacer);
-    // create tool iframe
-    let frame = this._chromeDoc.createElement("iframe");
-    frame.setAttribute("flex", "1");
-    frame._toolID = aRegObj.id;
-
-    // This is needed to enable tooltips inside the iframe document.
-    frame.setAttribute("tooltip", "aHTMLTooltip");
-
-    this._deck.appendChild(frame);
-
-    // wire up button to show the iframe
-    let onClick = function() {
-      this.activatePanel(aRegObj.id);
-    }.bind(this);
-    btn.addEventListener("click", onClick, true);
-
-    this._tools[aRegObj.id] = {
-      id: aRegObj.id,
-      registration: aRegObj,
-      button: btn,
-      frame: frame,
-      loaded: false,
-      context: null,
-      onClick: onClick
-    };
-  },
-
-  /**
-   * Remove a tool from the sidebar.
-   *
-   * @param aID string
-   *        The string ID of the tool to remove.
-   */
-  removeTool: function ISS_removeTool(aID)
-  {
-    if (!aID in this._tools) {
-      return;
-    }
-    let tool = this._tools[aID];
-    delete this._tools[aID];
-
-    if (tool.loaded && tool.registration.destroy) {
-      tool.registration.destroy(tool.context);
-    }
-
-    if (tool.onLoad) {
-      tool.frame.removeEventListener("load", tool.onLoad, true);
-      delete tool.onLoad;
-    }
-
-    if (tool.onClick) {
-      tool.button.removeEventListener("click", tool.onClick, true);
-      delete tool.onClick;
-    }
-
-    tool.button.parentNode.removeChild(tool.button);
-    tool.frame.parentNode.removeChild(tool.frame);
-  },
-
-  /**
-   * Hide or show the sidebar.
-   */
-  toggle: function ISS_toggle()
-  {
-    if (!this.visible) {
-      this.show();
-    } else {
-      this.hide();
-    }
-  },
-
-  /**
-   * Shows the sidebar, updating the stored visibility pref.
-   */
-  show: function ISS_show()
-  {
-    this._box.removeAttribute("hidden");
-    this._splitter.removeAttribute("hidden");
-    this._toggleButton.checked = true;
-
-    this._showDefault();
-
-    this._inspector._sidebarOpen = true;
-    Services.prefs.setBoolPref("devtools.inspector.sidebarOpen", true);
-
-    // Instantiate the Layout View if needed.
-    if (Services.prefs.getBoolPref("devtools.layoutview.enabled")
-        && !this._layoutview) {
-      this._layoutview = new LayoutView({
-        document: this._chromeDoc,
-        inspector: this._inspector,
-      });
-    }
-  },
-
-  /**
-   * Hides the sidebar, updating the stored visibility pref.
-   */
-  hide: function ISS_hide()
-  {
-    this._teardown();
-    this._inspector._sidebarOpen = false;
-    Services.prefs.setBoolPref("devtools.inspector.sidebarOpen", false);
-  },
-
-  /**
-   * Hides the sidebar UI elements.
-   */
-  _teardown: function ISS__teardown()
-  {
-    this._toggleButton.checked = false;
-    this._box.setAttribute("hidden", true);
-    this._splitter.setAttribute("hidden", true);
-  },
-
-  /**
-   * Sets the current sidebar panel.
-   *
-   * @param aID string
-   *        The ID of the panel to make visible.
-   */
-  activatePanel: function ISS_activatePanel(aID) {
-    let tool = this._tools[aID];
-    Services.prefs.setCharPref("devtools.inspector.activeSidebar", aID);
-    this._inspector._activeSidebar = aID;
-    this._deck.selectedPanel = tool.frame;
-    this._showContent(tool);
-    tool.button.setAttribute("checked", "true");
-    let hasSelected = Array.forEach(this._toolbar.children, function(btn) {
-      if (btn != tool.button) {
-        btn.removeAttribute("checked");
-      }
-    });
-  },
-
-  /**
-   * Make the iframe content of a given tool visible.  If this is the first
-   * time the tool has been shown, load its iframe content and call the
-   * registration object's load method.
-   *
-   * @param aTool object
-   *        The tool object we're loading.
-   */
-  _showContent: function ISS__showContent(aTool)
-  {
-    // If the current tool is already loaded, notify that we're
-    // showing this sidebar.
-    if (aTool.loaded) {
-      this._inspector.emit("sidebaractivated", aTool.id);
-      this._inspector.emit("sidebaractivated-" + aTool.id);
-      return;
-    }
-
-    // If we're already loading, we're done.
-    if (aTool.onLoad) {
-      return;
-    }
-
-    // This will be canceled in removeTool if necessary.
-    aTool.onLoad = function(evt) {
-      if (evt.target.location != aTool.registration.contentURL) {
-        return;
-      }
-      aTool.frame.removeEventListener("load", aTool.onLoad, true);
-      delete aTool.onLoad;
-      aTool.loaded = true;
-      aTool.context = aTool.registration.load(this._inspector, aTool.frame);
-
-      this._inspector.emit("sidebaractivated", aTool.id);
-
-      // Send an event specific to the activation of this panel.  For
-      // this initial event, include a "createpanel" argument
-      // to let panels watch sidebaractivated to refresh themselves
-      // but ignore the one immediately after their load.
-      // I don't really like this, we should find a better solution.
-      this._inspector.emit("sidebaractivated-" + aTool.id, "createpanel");
-    }.bind(this);
-    aTool.frame.addEventListener("load", aTool.onLoad, true);
-    aTool.frame.setAttribute("src", aTool.registration.contentURL);
-  },
-
-  /**
-   * For testing purposes, mostly - return the tool-provided context
-   * for a given tool.  Will only work after the tool has been loaded
-   * and instantiated.
-   */
-  _toolContext: function ISS__toolContext(aID) {
-    return aID in this._tools ? this._tools[aID].context : null;
-  },
-
-  /**
-   * Also mostly for testing, return the list of tool objects stored in
-   * the sidebar.
-   */
-  _toolObjects: function ISS__toolObjects() {
-    return [this._tools[i] for each (i in Object.getOwnPropertyNames(this._tools))];
-  },
-
-  /**
-   * If no tool is already selected, show the last-used sidebar.  If there
-   * was no last-used sidebar, just show the first one.
-   */
-  _showDefault: function ISS__showDefault()
-  {
-    let hasSelected = Array.some(this._toolbar.children,
-      function(btn) btn.hasAttribute("checked"));
-
-    // Make sure the selected panel is loaded...
-    this._showContent(this._tools[this.activePanel]);
-
-    if (hasSelected) {
-      return;
-    }
-
-    let activeID = this._inspector._activeSidebar;
-    if (!activeID || !(activeID in this._tools)) {
-      activeID = Object.getOwnPropertyNames(this._tools)[0];
-    }
-    this.activatePanel(activeID);
-  },
-
-  // DOM elements
-  get _toggleButton() this._chromeDoc.getElementById("inspector-style-button"),
-  get _box() this._chromeDoc.getElementById("devtools-sidebar-box"),
-  get _splitter() this._chromeDoc.getElementById("devtools-side-splitter"),
-  get _toolbar() this._chromeDoc.getElementById("devtools-sidebar-toolbar"),
-  get _deck() this._chromeDoc.getElementById("devtools-sidebar-deck"),
-};
-
-///////////////////////////////////////////////////////////////////////////
-//// HTML Breadcrumbs
-
-/**
- * Display the ancestors of the current node and its children.
- * Only one "branch" of children are displayed (only one line).
- *
- * Mechanism:
- * . If no nodes displayed yet:
- *    then display the ancestor of the selected node and the selected node;
- *   else select the node;
- * . If the selected node is the last node displayed, append its first (if any).
- *
- * @param object aInspector
- *        The InspectorUI instance.
- */
-function HTMLBreadcrumbs(aInspector)
-{
-  this.IUI = aInspector;
-  this.DOMHelpers = new DOMHelpers(this.IUI.win);
-  this._init();
-}
-
-HTMLBreadcrumbs.prototype = {
-  _init: function BC__init()
-  {
-    this.container = this.IUI.chromeDoc.getElementById("inspector-breadcrumbs");
-    this.container.addEventListener("mousedown", this, true);
-
-    // We will save a list of already displayed nodes in this array.
-    this.nodeHierarchy = [];
-
-    // Last selected node in nodeHierarchy.
-    this.currentIndex = -1;
-
-    // Siblings menu
-    this.menu = this.IUI.chromeDoc.createElement("menupopup");
-    this.menu.id = "inspector-breadcrumbs-menu";
-
-    let popupSet = this.IUI.chromeDoc.getElementById("mainPopupSet");
-    popupSet.appendChild(this.menu);
-
-    // By default, hide the arrows. We let the <scrollbox> show them
-    // in case of overflow.
-    this.container.removeAttribute("overflows");
-    this.container._scrollButtonUp.collapsed = true;
-    this.container._scrollButtonDown.collapsed = true;
-
-    this.onscrollboxreflow = function() {
-      if (this.container._scrollButtonDown.collapsed)
-        this.container.removeAttribute("overflows");
-      else
-        this.container.setAttribute("overflows", true);
-    }.bind(this);
-
-    this.container.addEventListener("underflow", this.onscrollboxreflow, false);
-    this.container.addEventListener("overflow", this.onscrollboxreflow, false);
-
-    this.menu.addEventListener("popuphiding", (function() {
-      while (this.menu.hasChildNodes()) {
-        this.menu.removeChild(this.menu.firstChild);
-      }
-      let button = this.container.querySelector("button[siblings-menu-open]");
-      button.removeAttribute("siblings-menu-open");
-    }).bind(this), false);
-  },
-
-  /**
-   * Build a string that represents the node: tagName#id.class1.class2.
-   *
-   * @param aNode The node to pretty-print
-   * @returns a string
-   */
-  prettyPrintNodeAsText: function BC_prettyPrintNodeText(aNode)
-  {
-    let text = aNode.tagName.toLowerCase();
-    if (aNode.id) {
-      text += "#" + aNode.id;
-    }
-    for (let i = 0; i < aNode.classList.length; i++) {
-      text += "." + aNode.classList[i];
-    }
-    for (let i = 0; i < PSEUDO_CLASSES.length; i++) {
-      let pseudo = PSEUDO_CLASSES[i];
-      if (DOMUtils.hasPseudoClassLock(aNode, pseudo)) {
-        text += pseudo;  
-      }      
-    }
-
-    return text;
-  },
-
-
-  /**
-   * Build <label>s that represent the node:
-   *   <label class="inspector-breadcrumbs-tag">tagName</label>
-   *   <label class="inspector-breadcrumbs-id">#id</label>
-   *   <label class="inspector-breadcrumbs-classes">.class1.class2</label>
-   *
-   * @param aNode The node to pretty-print
-   * @returns a document fragment.
-   */
-  prettyPrintNodeAsXUL: function BC_prettyPrintNodeXUL(aNode)
-  {
-    let fragment = this.IUI.chromeDoc.createDocumentFragment();
-
-    let tagLabel = this.IUI.chromeDoc.createElement("label");
-    tagLabel.className = "inspector-breadcrumbs-tag plain";
-
-    let idLabel = this.IUI.chromeDoc.createElement("label");
-    idLabel.className = "inspector-breadcrumbs-id plain";
-
-    let classesLabel = this.IUI.chromeDoc.createElement("label");
-    classesLabel.className = "inspector-breadcrumbs-classes plain";
-
-    let pseudosLabel = this.IUI.chromeDoc.createElement("label");
-    pseudosLabel.className = "inspector-breadcrumbs-pseudo-classes plain";
-
-    tagLabel.textContent = aNode.tagName.toLowerCase();
-    idLabel.textContent = aNode.id ? ("#" + aNode.id) : "";
-
-    let classesText = "";
-    for (let i = 0; i < aNode.classList.length; i++) {
-      classesText += "." + aNode.classList[i];
-    }
-    classesLabel.textContent = classesText;
-
-    let pseudos = PSEUDO_CLASSES.filter(function(pseudo) {
-      return DOMUtils.hasPseudoClassLock(aNode, pseudo);
-    }, this);
-    pseudosLabel.textContent = pseudos.join("");
-
-    fragment.appendChild(tagLabel);
-    fragment.appendChild(idLabel);
-    fragment.appendChild(classesLabel);
-    fragment.appendChild(pseudosLabel);
-
-    return fragment;
-  },
-
-  /**
-   * Open the sibling menu.
-   *
-   * @param aButton the button representing the node.
-   * @param aNode the node we want the siblings from.
-   */
-  openSiblingMenu: function BC_openSiblingMenu(aButton, aNode)
-  {
-    let title = this.IUI.chromeDoc.createElement("menuitem");
-    title.setAttribute("label",
-      this.IUI.strings.GetStringFromName("breadcrumbs.siblings"));
-    title.setAttribute("disabled", "true");
-
-    let separator = this.IUI.chromeDoc.createElement("menuseparator");
-
-    this.menu.appendChild(title);
-    this.menu.appendChild(separator);
-
-    let fragment = this.IUI.chromeDoc.createDocumentFragment();
-
-    let nodes = aNode.parentNode.childNodes;
-    for (let i = 0; i < nodes.length; i++) {
-      if (nodes[i].nodeType == aNode.ELEMENT_NODE) {
-        let item = this.IUI.chromeDoc.createElement("menuitem");
-        let inspector = this.IUI;
-        if (nodes[i] === aNode) {
-          item.setAttribute("disabled", "true");
-          item.setAttribute("checked", "true");
-        }
-
-        item.setAttribute("type", "radio");
-        item.setAttribute("label", this.prettyPrintNodeAsText(nodes[i]));
-
-        item.onmouseup = (function(aNode) {
-          return function() {
-            inspector.select(aNode, true, true, "breadcrumbs");
-          }
-        })(nodes[i]);
-
-        fragment.appendChild(item);
-      }
-    }
-    this.menu.appendChild(fragment);
-    this.menu.openPopup(aButton, "before_start", 0, 0, true, false);
-    aButton.setAttribute("siblings-menu-open", "true");
-  },
-
-  /**
-   * Generic event handler.
-   *
-   * @param nsIDOMEvent aEvent
-   *        The DOM event object.
-   */
-  handleEvent: function BC_handleEvent(aEvent)
-  {
-    if (aEvent.type == "mousedown" && aEvent.button == 0) {
-      // on Click and Hold, open the Siblings menu
-
-      let timer;
-      let container = this.container;
-      let window = this.IUI.win;
-
-      function openMenu(aEvent) {
-        cancelHold();
-        let target = aEvent.originalTarget;
-        if (target.tagName == "button") {
-          target.onBreadcrumbsHold();
-        }
-      }
-
-      function handleClick(aEvent) {
-        cancelHold();
-        let target = aEvent.originalTarget;
-        if (target.tagName == "button") {
-          target.onBreadcrumbsClick();
-        }
-      }
-
-      function cancelHold(aEvent) {
-        window.clearTimeout(timer);
-        container.removeEventListener("mouseout", cancelHold, false);
-        container.removeEventListener("mouseup", handleClick, false);
-      }
-
-      container.addEventListener("mouseout", cancelHold, false);
-      container.addEventListener("mouseup", handleClick, false);
-      timer = window.setTimeout(openMenu, 500, aEvent);
-    }
-  },
-
-  /**
-   * Remove nodes and delete properties.
-   */
-  destroy: function BC_destroy()
-  {
-    this.container.removeEventListener("underflow", this.onscrollboxreflow, false);
-    this.container.removeEventListener("overflow", this.onscrollboxreflow, false);
-    this.onscrollboxreflow = null;
-
-    this.empty();
-    this.container.removeEventListener("mousedown", this, true);
-    this.menu.parentNode.removeChild(this.menu);
-    this.container = null;
-    this.nodeHierarchy = null;
-  },
-
-  /**
-   * Empty the breadcrumbs container.
-   */
-  empty: function BC_empty()
-  {
-    while (this.container.hasChildNodes()) {
-      this.container.removeChild(this.container.firstChild);
-    }
-  },
-
-  /**
-   * Re-init the cache and remove all the buttons.
-   */
-  invalidateHierarchy: function BC_invalidateHierarchy()
-  {
-    this.menu.hidePopup();
-    this.nodeHierarchy = [];
-    this.empty();
-  },
-
-  /**
-   * Set which button represent the selected node.
-   *
-   * @param aIdx Index of the displayed-button to select
-   */
-  setCursor: function BC_setCursor(aIdx)
-  {
-    // Unselect the previously selected button
-    if (this.currentIndex > -1 && this.currentIndex < this.nodeHierarchy.length) {
-      this.nodeHierarchy[this.currentIndex].button.removeAttribute("checked");
-    }
-    if (aIdx > -1) {
-      this.nodeHierarchy[aIdx].button.setAttribute("checked", "true");
-      if (this.hadFocus)
-        this.nodeHierarchy[aIdx].button.focus();
-    }
-    this.currentIndex = aIdx;
-  },
-
-  /**
-   * Get the index of the node in the cache.
-   *
-   * @param aNode
-   * @returns integer the index, -1 if not found
-   */
-  indexOf: function BC_indexOf(aNode)
-  {
-    let i = this.nodeHierarchy.length - 1;
-    for (let i = this.nodeHierarchy.length - 1; i >= 0; i--) {
-      if (this.nodeHierarchy[i].node === aNode) {
-        return i;
-      }
-    }
-    return -1;
-  },
-
-  /**
-   * Remove all the buttons and their references in the cache
-   * after a given index.
-   *
-   * @param aIdx
-   */
-  cutAfter: function BC_cutAfter(aIdx)
-  {
-    while (this.nodeHierarchy.length > (aIdx + 1)) {
-      let toRemove = this.nodeHierarchy.pop();
-      this.container.removeChild(toRemove.button);
-    }
-  },
-
-  /**
-   * Build a button representing the node.
-   *
-   * @param aNode The node from the page.
-   * @returns aNode The <button>.
-   */
-  buildButton: function BC_buildButton(aNode)
-  {
-    let button = this.IUI.chromeDoc.createElement("button");
-    let inspector = this.IUI;
-    button.appendChild(this.prettyPrintNodeAsXUL(aNode));
-    button.className = "inspector-breadcrumbs-button";
-
-    button.setAttribute("tooltiptext", this.prettyPrintNodeAsText(aNode));
-
-    button.onkeypress = function onBreadcrumbsKeypress(e) {
-      if (e.charCode == Ci.nsIDOMKeyEvent.DOM_VK_SPACE ||
-          e.keyCode == Ci.nsIDOMKeyEvent.DOM_VK_RETURN)
-        button.click();
-    }
-
-    button.onBreadcrumbsClick = function onBreadcrumbsClick() {
-      inspector.stopInspecting();
-      inspector.select(aNode, true, true, "breadcrumbs");
-    };
-
-    button.onclick = (function _onBreadcrumbsRightClick(aEvent) {
-      button.focus();
-      if (aEvent.button == 2) {
-        this.openSiblingMenu(button, aNode);
-      }
-    }).bind(this);
-
-    button.onBreadcrumbsHold = (function _onBreadcrumbsHold() {
-      this.openSiblingMenu(button, aNode);
-    }).bind(this);
-    return button;
-  },
-
-  /**
-   * Connecting the end of the breadcrumbs to a node.
-   *
-   * @param aNode The node to reach.
-   */
-  expand: function BC_expand(aNode)
-  {
-      let fragment = this.IUI.chromeDoc.createDocumentFragment();
-      let toAppend = aNode;
-      let lastButtonInserted = null;
-      let originalLength = this.nodeHierarchy.length;
-      let stopNode = null;
-      if (originalLength > 0) {
-        stopNode = this.nodeHierarchy[originalLength - 1].node;
-      }
-      while (toAppend && toAppend.tagName && toAppend != stopNode) {
-        let button = this.buildButton(toAppend);
-        fragment.insertBefore(button, lastButtonInserted);
-        lastButtonInserted = button;
-        this.nodeHierarchy.splice(originalLength, 0, {node: toAppend, button: button});
-        toAppend = this.DOMHelpers.getParentObject(toAppend);
-      }
-      this.container.appendChild(fragment, this.container.firstChild);
-  },
-
-  /**
-   * Get a child of a node that can be displayed in the breadcrumbs.
-   * By default, we want a node that can highlighted by the highlighter.
-   * If no highlightable child is found, we return the first node of type
-   * ELEMENT_NODE.
-   *
-   * @param aNode The parent node.
-   * @returns nsIDOMNode|null
-   */
-  getFirstHighlightableChild: function BC_getFirstHighlightableChild(aNode)
-  {
-    let nextChild = this.DOMHelpers.getChildObject(aNode, 0);
-    let fallback = null;
-
-    while (nextChild) {
-      if (this.IUI.highlighter.isNodeHighlightable(nextChild)) {
-        return nextChild;
-      }
-      if (!fallback && nextChild.nodeType == aNode.ELEMENT_NODE) {
-        fallback = nextChild;
-      }
-      nextChild = this.DOMHelpers.getNextSibling(nextChild);
-    }
-    return fallback;
-  },
-
-  /**
-   * Find the "youngest" ancestor of a node which is already in the breadcrumbs.
-   *
-   * @param aNode
-   * @returns Index of the ancestor in the cache
-   */
-  getCommonAncestor: function BC_getCommonAncestor(aNode)
-  {
-    let node = aNode;
-    while (node) {
-      let idx = this.indexOf(node);
-      if (idx > -1) {
-        return idx;
-      } else {
-        node = this.DOMHelpers.getParentObject(node);
-      }
-    }
-    return -1;
-  },
-
-  /**
-   * Make sure that the latest node in the breadcrumbs is not the selected node
-   * if the selected node still has children.
-   */
-  ensureFirstChild: function BC_ensureFirstChild()
-  {
-    // If the last displayed node is the selected node
-    if (this.currentIndex == this.nodeHierarchy.length - 1) {
-      let node = this.nodeHierarchy[this.currentIndex].node;
-      let child = this.getFirstHighlightableChild(node);
-      // If the node has a child
-      if (child) {
-        // Show this child
-        this.expand(child);
-      }
-    }
-  },
-
-  /**
-   * Ensure the selected node is visible.
-   */
-  scroll: function BC_scroll()
-  {
-    // FIXME bug 684352: make sure its immediate neighbors are visible too.
-
-    let scrollbox = this.container;
-    let element = this.nodeHierarchy[this.currentIndex].button;
-    scrollbox.ensureElementIsVisible(element);
-  },
-  
-  updateSelectors: function BC_updateSelectors()
-  {
-    for (let i = this.nodeHierarchy.length - 1; i >= 0; i--) {
-      let crumb = this.nodeHierarchy[i];
-      let button = crumb.button;
-
-      while(button.hasChildNodes()) {
-        button.removeChild(button.firstChild);
-      }
-      button.appendChild(this.prettyPrintNodeAsXUL(crumb.node));
-      button.setAttribute("tooltiptext", this.prettyPrintNodeAsText(crumb.node));
-    }
-  },
-
-  /**
-   * Update the breadcrumbs display when a new node is selected.
-   */
-  update: function BC_update()
-  {
-    this.menu.hidePopup();
-
-    let cmdDispatcher = this.IUI.chromeDoc.commandDispatcher;
-    this.hadFocus = (cmdDispatcher.focusedElement &&
-                     cmdDispatcher.focusedElement.parentNode == this.container);
-
-    let selection = this.IUI.selection;
-    let idx = this.indexOf(selection);
-
-    // Is the node already displayed in the breadcrumbs?
-    if (idx > -1) {
-      // Yes. We select it.
-      this.setCursor(idx);
-    } else {
-      // No. Is the breadcrumbs display empty?
-      if (this.nodeHierarchy.length > 0) {
-        // No. We drop all the element that are not direct ancestors
-        // of the selection
-        let parent = this.DOMHelpers.getParentObject(selection);
-        let idx = this.getCommonAncestor(parent);
-        this.cutAfter(idx);
-      }
-      // we append the missing button between the end of the breadcrumbs display
-      // and the current node.
-      this.expand(selection);
-
-      // we select the current node button
-      idx = this.indexOf(selection);
-      this.setCursor(idx);
-    }
-    // Add the first child of the very last node of the breadcrumbs if possible.
-    this.ensureFirstChild();
-
-    // Make sure the selected node and its neighbours are visible.
-    this.scroll();
-
-    this.updateSelectors();
-  },
-
-}
-
-/////////////////////////////////////////////////////////////////////////
-//// Initializers
-
-XPCOMUtils.defineLazyGetter(InspectorUI.prototype, "strings",
-  function () {
-    return Services.strings.createBundle(
-            "chrome://browser/locale/devtools/inspector.properties");
-  });
-
-XPCOMUtils.defineLazyGetter(this, "DOMUtils", function () {
-  return Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils);
-});
-
-XPCOMUtils.defineLazyGetter(this, "clipboardHelper", function() {
-  return Cc["@mozilla.org/widget/clipboardhelper;1"].
-    getService(Ci.nsIClipboardHelper);
-});
diff --git a/browser/devtools/highlighter/test/Makefile.in b/browser/devtools/highlighter/test/Makefile.in
deleted file mode 100644
--- a/browser/devtools/highlighter/test/Makefile.in
+++ /dev/null
@@ -1,48 +0,0 @@
-# This Source Code Form is subject to the terms of the Mozilla Public
-# License, v. 2.0. If a copy of the MPL was not distributed with this
-# file, You can obtain one at http://mozilla.org/MPL/2.0/.
-
-DEPTH     = @DEPTH@
-topsrcdir	= @top_srcdir@
-srcdir		= @srcdir@
-VPATH		= @srcdir@
-relativesrcdir  = @relativesrcdir@
-
-include $(DEPTH)/config/autoconf.mk
-include $(topsrcdir)/config/rules.mk
-
-_BROWSER_FILES = \
-		browser_inspector_initialization.js \
-		browser_inspector_treeSelection.js \
-		browser_inspector_highlighter.js \
-		browser_inspector_highlighter_autohide.js \
-		browser_inspector_iframeTest.js \
-		browser_inspector_scrolling.js \
-		browser_inspector_tab_switch.js \
-		browser_inspector_bug_665880.js \
-		browser_inspector_bug_674871.js \
-		browser_inspector_bug_566084_location_changed.js \
-		browser_inspector_infobar.js \
-		browser_inspector_bug_690361.js \
-		browser_inspector_bug_672902_keyboard_shortcuts.js \
-		browser_inspector_keybindings.js \
-		browser_inspector_breadcrumbs.html \
-		browser_inspector_breadcrumbs.js \
-		browser_inspector_bug_699308_iframe_navigation.js \
-		browser_inspector_changes.js \
-		browser_inspector_ruleviewstore.js \
-		browser_inspector_invalidate.js \
-		browser_inspector_sidebarstate.js \
-		browser_inspector_menu.js \
-		browser_inspector_pseudoclass_lock.js \
-		browser_inspector_pseudoClass_menu.js \
-		browser_inspector_destroyselection.html \
-		browser_inspector_destroyselection.js \
-		browser_inspector_cmd_inspect.js \
-		browser_inspector_cmd_inspect.html \
-		head.js \
-		helpers.js \
-		$(NULL)
-
-libs::	$(_BROWSER_FILES)
-	$(INSTALL) $(foreach f,$^,"$f") $(DEPTH)/_tests/testing/mochitest/browser/$(relativesrcdir)
diff --git a/browser/devtools/highlighter/test/browser_inspector_breadcrumbs.html b/browser/devtools/highlighter/test/browser_inspector_breadcrumbs.html
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_breadcrumbs.html
+++ /dev/null
@@ -1,40 +0,0 @@
-<!DOCTYPE html>
-<html>
-  <head>
-    <style>
-      div {
-        min-height: 10px; min-width: 10px;
-        border: 1px solid red;
-        margin: 10px;
-      }
-    </style>
-  </head>
-  <body>
-    <article id="i1">
-      <div id="i11">
-        <div id="i111">
-          <div id="i1111">
-          </div>
-        </div>
-      </div>
-    </article>
-    <article id="i2">
-      <div id="i21">
-        <div id="i211">
-          <div id="i2111">
-          </div>
-        </div>
-      </div>
-      <div id="i22">
-        <div id="i221">
-        </div>
-        <div id="i222">
-          <div id="i2221">
-            <div id="i22211">
-            </div>
-          </div>
-        </div>
-      </div>
-    </article>
-  </body>
-</html>
diff --git a/browser/devtools/highlighter/test/browser_inspector_breadcrumbs.js b/browser/devtools/highlighter/test/browser_inspector_breadcrumbs.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_breadcrumbs.js
+++ /dev/null
@@ -1,103 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-function test()
-{
-  waitForExplicitFinish();
-  ignoreAllUncaughtExceptions();
-
-  let nodes = [
-    {nodeId: "i1111", result: "i1 i11 i111 i1111"},
-    {nodeId: "i22", result: "i2 i22 i221"},
-    {nodeId: "i2111", result: "i2 i21 i211 i2111"},
-    {nodeId: "i21", result: "i2 i21 i211 i2111"},
-    {nodeId: "i22211", result: "i2 i22 i222 i2221 i22211"},
-    {nodeId: "i22", result: "i2 i22 i222 i2221 i22211"},
-  ];
-
-  let doc;
-  let nodes;
-  let cursor;
-
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function onload() {
-    gBrowser.selectedBrowser.removeEventListener("load", onload, true);
-    doc = content.document;
-    waitForFocus(setupTest, content);
-  }, true);
-
-  content.location = "http://mochi.test:8888/browser/browser/devtools/highlighter/test/browser_inspector_breadcrumbs.html";
-
-  function setupTest()
-  {
-    for (let i = 0; i < nodes.length; i++) {
-      let node = doc.getElementById(nodes[i].nodeId);
-      nodes[i].node = node;
-      ok(nodes[i].node, "node " + nodes[i].nodeId + " found");
-    }
-
-    Services.obs.addObserver(runTests,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-    InspectorUI.toggleInspectorUI();
-  }
-
-  function runTests()
-  {
-    Services.obs.removeObserver(runTests,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
-
-    cursor = 0;
-    executeSoon(function() {
-      InspectorUI.highlighter.addListener("nodeselected", nodeSelected);
-      InspectorUI.inspectNode(nodes[0].node);
-    });
-  }
-
-  function nodeSelected()
-  {
-    executeSoon(function() {
-      performTest();
-      cursor++;
-      if (cursor >= nodes.length) {
-
-        InspectorUI.highlighter.removeListener("nodeselected", nodeSelected);
-        Services.obs.addObserver(finishUp,
-          InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED, false);
-
-        executeSoon(function() {
-          InspectorUI.closeInspectorUI();
-        });
-      } else {
-        let node = nodes[cursor].node;
-        InspectorUI.inspectNode(node);
-      }
-    });
-  }
-
-  function performTest()
-  {
-    let container = document.getElementById("inspector-breadcrumbs");
-    let buttonsLabelIds = nodes[cursor].result.split(" ");
-
-    // html > body > …
-    is(container.childNodes.length, buttonsLabelIds.length + 2, "Node " + cursor + ": Items count");
-
-    for (let i = 2; i < container.childNodes.length; i++) {
-      let expectedId = "#" + buttonsLabelIds[i - 2];
-      let button = container.childNodes[i];
-      let labelId = button.querySelector(".inspector-breadcrumbs-id");
-      is(labelId.textContent, expectedId, "Node " + cursor + ": button " + i + " matches");
-    }
-
-    let checkedButton = container.querySelector("button[checked]");
-    let labelId = checkedButton.querySelector(".inspector-breadcrumbs-id");
-    is(labelId.textContent, "#" + InspectorUI.selection.id, "Node " + cursor + ": selection matches");
-  }
-
-  function finishUp() {
-    Services.obs.removeObserver(finishUp, InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED);
-    doc = nodes = null;
-    gBrowser.removeCurrentTab();
-    finish();
-  }
-}
diff --git a/browser/devtools/highlighter/test/browser_inspector_bug_566084_location_changed.js b/browser/devtools/highlighter/test/browser_inspector_bug_566084_location_changed.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_bug_566084_location_changed.js
+++ /dev/null
@@ -1,120 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-let notificationBox = null;
-
-function startLocationTests() {
-  ok(window.InspectorUI, "InspectorUI variable exists");
-  Services.obs.addObserver(runInspectorTests, InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, null);
-  InspectorUI.toggleInspectorUI();
-}
-
-function runInspectorTests() {
-  Services.obs.removeObserver(runInspectorTests, InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, null);
-
-  let para = content.document.querySelector("p");
-  ok(para, "found the paragraph element");
-  is(para.textContent, "init", "paragraph content is correct");
-
-  ok(InspectorUI.inspecting, "Inspector is highlighting");
-  ok(InspectorUI.isInspectorOpen, "Inspector is open");
-
-  InspectorUI.isDirty = true;
-
-  notificationBox = gBrowser.getNotificationBox(gBrowser.selectedBrowser);
-  notificationBox.addEventListener("AlertActive", alertActive1, false);
-
-  gBrowser.selectedBrowser.addEventListener("load", onPageLoad, true);
-
-  content.location = "data:text/html,<div>location change test 1 for " +
-    "inspector</div><p>test1</p>";
-}
-
-function alertActive1() {
-  notificationBox.removeEventListener("AlertActive", alertActive1, false);
-
-  let notification = notificationBox.
-    getNotificationWithValue("inspector-page-navigation");
-  ok(notification, "found the inspector-page-navigation notification");
-
-  // By closing the notification it is expected that page navigation is
-  // canceled.
-  executeSoon(function() {
-    notification.close();
-    locationTest2();
-  });
-}
-
-function onPageLoad() {
-  gBrowser.selectedBrowser.removeEventListener("load", onPageLoad, true);
-
-  isnot(content.location.href.indexOf("test2"), -1,
-        "page navigated to the correct location");
-
-  let para = content.document.querySelector("p");
-  ok(para, "found the paragraph element, third time");
-  is(para.textContent, "test2", "paragraph content is correct");
-
-  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
-  ok(!InspectorUI.isInspectorOpen, "Inspector Panel is not open");
-
-  testEnd();
-}
-
-function locationTest2() {
-  // Location did not change.
-  let para = content.document.querySelector("p");
-  ok(para, "found the paragraph element, second time");
-  is(para.textContent, "init", "paragraph content is correct");
-
-  ok(InspectorUI.inspecting, "Inspector is highlighting");
-  ok(InspectorUI.isInspectorOpen, "Inspector Panel is open");
-
-  notificationBox.addEventListener("AlertActive", alertActive2, false);
-
-  content.location = "data:text/html,<div>location change test 2 for " +
-    "inspector</div><p>test2</p>";
-}
-
-function alertActive2() {
-  notificationBox.removeEventListener("AlertActive", alertActive2, false);
-
-  let notification = notificationBox.
-    getNotificationWithValue("inspector-page-navigation");
-  ok(notification, "found the inspector-page-navigation notification");
-
-  let buttons = notification.querySelectorAll("button");
-  let buttonLeave = null;
-  for (let i = 0; i < buttons.length; i++) {
-    if (buttons[i].buttonInfo.id == "inspector.confirmNavigationAway.buttonLeave") {
-      buttonLeave = buttons[i];
-      break;
-    }
-  }
-
-  ok(buttonLeave, "the Leave page button was found");
-
-  // Accept page navigation.
-  executeSoon(function(){
-    buttonLeave.doCommand();
-  });
-}
-
-function testEnd() {
-  notificationBox = null;
-  gBrowser.removeCurrentTab();
-  executeSoon(finish);
-}
-
-function test() {
-  waitForExplicitFinish();
-
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function onBrowserLoad() {
-    gBrowser.selectedBrowser.removeEventListener("load", onBrowserLoad, true);
-    waitForFocus(startLocationTests, content);
-  }, true);
-
-  content.location = "data:text/html,<div>location change tests for " +
-    "inspector.</div><p>init</p>";
-}
diff --git a/browser/devtools/highlighter/test/browser_inspector_bug_665880.js b/browser/devtools/highlighter/test/browser_inspector_bug_665880.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_bug_665880.js
+++ /dev/null
@@ -1,61 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-
-function test()
-{
-  waitForExplicitFinish();
-  ignoreAllUncaughtExceptions();
-
-  let doc;
-  let objectNode;
-
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function() {
-    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
-    doc = content.document;
-    waitForFocus(setupObjectInspectionTest, content);
-  }, true);
-
-  content.location = "data:text/html,<object style='padding: 100px'><p>foobar</p></object>";
-
-  function setupObjectInspectionTest()
-  {
-    objectNode = doc.querySelector("object");
-    ok(objectNode, "we have the object node");
-    Services.obs.addObserver(runObjectInspectionTest,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-    InspectorUI.toggleInspectorUI();
-  }
-
-  function runObjectInspectionTest()
-  {
-    Services.obs.removeObserver(runObjectInspectionTest,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
-
-    executeSoon(function() {
-      InspectorUI.highlighter.addListener("nodeselected", performTestComparison);
-
-      InspectorUI.inspectNode(objectNode);
-    });
-  }
-
-  function performTestComparison()
-  {
-    InspectorUI.highlighter.removeListener("nodeselected", performTestComparison);
-
-    is(InspectorUI.selection, objectNode, "selection matches node");
-
-    Services.obs.addObserver(finishUp,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED, false);
-    InspectorUI.closeInspectorUI();
-  }
-
-
-  function finishUp() {
-    Services.obs.removeObserver(finishUp, InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED);
-    doc = objectNode = null;
-    gBrowser.removeCurrentTab();
-    finish();
-  }
-}
diff --git a/browser/devtools/highlighter/test/browser_inspector_bug_672902_keyboard_shortcuts.js b/browser/devtools/highlighter/test/browser_inspector_bug_672902_keyboard_shortcuts.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_bug_672902_keyboard_shortcuts.js
+++ /dev/null
@@ -1,130 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-
-// Tests that the keybindings for highlighting different elements work as
-// intended.
-
-function test()
-{
-  waitForExplicitFinish();
-
-  let doc;
-  let node;
-
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function onload() {
-    gBrowser.selectedBrowser.removeEventListener("load", onload, true);
-    doc = content.document;
-    waitForFocus(setupKeyBindingsTest, content);
-  }, true);
-
-  content.location = "data:text/html,<html><head><title>Test for the " +
-                     "highlighter keybindings</title></head><body><h1>Hello" +
-                     "</h1><p><strong>Greetings, earthlings!</strong> I come" +
-                     " in peace.</body></html>";
-
-  function setupKeyBindingsTest()
-  {
-    Services.obs.addObserver(findAndHighlightNode,
-                             InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED,
-                             false);
-    InspectorUI.toggleInspectorUI();
-  }
-
-  function findAndHighlightNode()
-  {
-    Services.obs.removeObserver(findAndHighlightNode,
-                                InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
-
-    executeSoon(function() {
-      InspectorUI.highlighter.addListener("nodeselected", highlightBodyNode);
-      // Test that navigating around without a selected node gets us to the
-      // body element.
-      node = doc.querySelector("body");
-      let bc = InspectorUI.breadcrumbs;
-      bc.nodeHierarchy[bc.currentIndex].button.focus();
-      EventUtils.synthesizeKey("VK_RIGHT", { });
-    });
-  }
-
-  function highlightBodyNode()
-  {
-    InspectorUI.highlighter.removeListener("nodeselected", highlightBodyNode);
-    is(InspectorUI.selection, node, "selected body element");
-
-    executeSoon(function() {
-      InspectorUI.highlighter.addListener("nodeselected", highlightHeaderNode);
-      // Test that moving to the child works.
-      node = doc.querySelector("h1");
-      EventUtils.synthesizeKey("VK_RIGHT", { });
-    });
-  }
-
-  function highlightHeaderNode()
-  {
-    InspectorUI.highlighter.removeListener("nodeselected", highlightHeaderNode);
-    is(InspectorUI.selection, node, "selected h1 element");
-
-    executeSoon(function() {
-      InspectorUI.highlighter.addListener("nodeselected", highlightParagraphNode);
-      // Test that moving to the next sibling works.
-      node = doc.querySelector("p");
-      EventUtils.synthesizeKey("VK_DOWN", { });
-    });
-  }
-
-  function highlightParagraphNode()
-  {
-    InspectorUI.highlighter.removeListener("nodeselected", highlightParagraphNode);
-    is(InspectorUI.selection, node, "selected p element");
-
-    executeSoon(function() {
-      InspectorUI.highlighter.addListener("nodeselected", highlightHeaderNodeAgain);
-      // Test that moving to the previous sibling works.
-      node = doc.querySelector("h1");
-      EventUtils.synthesizeKey("VK_UP", { });
-    });
-  }
-
-  function highlightHeaderNodeAgain()
-  {
-    InspectorUI.highlighter.removeListener("nodeselected", highlightHeaderNodeAgain);
-    is(InspectorUI.selection, node, "selected h1 element");
-
-    executeSoon(function() {
-      InspectorUI.highlighter.addListener("nodeselected", highlightParentNode);
-      // Test that moving to the parent works.
-      node = doc.querySelector("body");
-      EventUtils.synthesizeKey("VK_LEFT", { });
-    });
-  }
-
-  function highlightParentNode()
-  {
-    InspectorUI.highlighter.removeListener("nodeselected", highlightParentNode);
-    is(InspectorUI.selection, node, "selected body element");
-
-    // Test that locking works.
-    synthesizeKeyFromKeyTag("key_inspect");
-
-    executeSoon(isTheNodeLocked);
-  }
-
-  function isTheNodeLocked()
-  {
-    ok(!InspectorUI.inspecting, "the node is locked");
-    Services.obs.addObserver(finishUp,
-                             InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED,
-                             false);
-    InspectorUI.closeInspectorUI();
-  }
-
-  function finishUp() {
-    Services.obs.removeObserver(finishUp,
-                                InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED);
-    doc = node = null;
-    gBrowser.removeCurrentTab();
-    finish();
-  }
-}
diff --git a/browser/devtools/highlighter/test/browser_inspector_bug_674871.js b/browser/devtools/highlighter/test/browser_inspector_bug_674871.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_bug_674871.js
+++ /dev/null
@@ -1,108 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-
-function test()
-{
-  waitForExplicitFinish();
-
-  let doc;
-  let iframeNode, iframeBodyNode;
-
-  let iframeSrc = "<style>" +
-                  "body {" +
-                  "margin:0;" +
-                  "height:100%;" +
-                  "background-color:red" +
-                  "}" +
-                  "</style>" +
-                  "<body></body>";
-  let docSrc = "<style>" +
-               "iframe {" +
-               "height:200px;" +
-               "border: 11px solid black;" +
-               "padding: 13px;" +
-               "}" +
-               "body,iframe {" +
-               "margin:0" +
-               "}" +
-               "</style>" +
-               "<body>" +
-               "<iframe src='data:text/html," + iframeSrc + "'></iframe>" +
-               "</body>";
-
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function onload() {
-    gBrowser.selectedBrowser.removeEventListener("load", onload, true);
-    doc = content.document;
-    waitForFocus(setupTest, content);
-  }, true);
-
-  content.location = "data:text/html," + docSrc;
-
-  function setupTest()
-  {
-    iframeNode = doc.querySelector("iframe");
-    iframeBodyNode = iframeNode.contentDocument.querySelector("body");
-    ok(iframeNode, "we have the iframe node");
-    ok(iframeBodyNode, "we have the body node");
-    Services.obs.addObserver(runTests,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-    InspectorUI.toggleInspectorUI();
-  }
-
-  function runTests()
-  {
-    Services.obs.removeObserver(runTests,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
-
-    executeSoon(function() {
-      InspectorUI.highlighter.addListener("nodeselected", isTheIframeSelected);
-
-      moveMouseOver(iframeNode, 1, 1);
-    });
-  }
-
-  function isTheIframeSelected()
-  {
-    InspectorUI.highlighter.removeListener("nodeselected", isTheIframeSelected);
-
-    is(InspectorUI.selection, iframeNode, "selection matches node");
-    iframeNode.style.marginBottom = doc.defaultView.innerHeight + "px";
-    doc.defaultView.scrollBy(0, 40);
-
-    executeSoon(function() {
-      InspectorUI.highlighter.addListener("nodeselected", isTheIframeContentSelected);
-      moveMouseOver(iframeNode, 40, 40);
-    });
-  }
-
-  function isTheIframeContentSelected()
-  {
-    InspectorUI.highlighter.removeListener("nodeselected", isTheIframeContentSelected);
-    is(InspectorUI.selection, iframeBodyNode, "selection matches node");
-    // 184 == 200 + 11(border) + 13(padding) - 40(scroll)
-    is(InspectorUI.highlighter._highlightRect.height, 184,
-      "highlighter height");
-
-    Services.obs.addObserver(finishUp,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED, false);
-    InspectorUI.closeInspectorUI();
-  }
-
-  function finishUp() {
-    Services.obs.removeObserver(finishUp, InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED);
-    doc = iframeNode = iframeBodyNode = null;
-    gBrowser.removeCurrentTab();
-    finish();
-  }
-
-
-  function moveMouseOver(aElement, x, y)
-  {
-    EventUtils.synthesizeMouse(aElement, x, y, {type: "mousemove"},
-                               aElement.ownerDocument.defaultView);
-  }
-
-}
-
diff --git a/browser/devtools/highlighter/test/browser_inspector_bug_690361.js b/browser/devtools/highlighter/test/browser_inspector_bug_690361.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_bug_690361.js
+++ /dev/null
@@ -1,107 +0,0 @@
-/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-let doc;
-let salutation;
-let closing;
-
-function createDocument()
-{
-  doc.body.innerHTML = '<div id="first" style="{ margin: 10em; ' +
-    'font-size: 14pt; font-family: helvetica, sans-serif; color: #AAA}">\n' +
-    '<h1>Some header text</h1>\n' +
-    '<p id="salutation" style="{font-size: 12pt}">hi.</p>\n' +
-    '<p id="body" style="{font-size: 12pt}">I am a test-case. This text exists ' +
-    'solely to provide some things to test the inspector initialization.</p>\n' +
-    'If you are reading this, you should go do something else instead. Maybe ' +
-    'read a book. Or better yet, write some test-cases for another bit of code. ' +
-    '<span style="{font-style: italic}">Maybe more inspector test-cases!</span></p>\n' +
-    '<p id="closing">end transmission</p>\n' +
-    '</div>';
-  doc.title = "Inspector Opening and Closing Test";
-  startInspectorTests();
-}
-
-function startInspectorTests()
-{
-  ok(InspectorUI, "InspectorUI variable exists");
-  Services.obs.addObserver(runInspectorTests,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-  InspectorUI.toggleInspectorUI();
-}
-
-function runInspectorTests()
-{
-  Services.obs.removeObserver(runInspectorTests,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
-  Services.obs.addObserver(closeInspectorTests,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED, false);
-
-  ok(InspectorUI.toolbar, "we have the toolbar.");
-  ok(!InspectorUI.toolbar.hidden, "toolbar is visible");
-  ok(InspectorUI.inspecting, "Inspector is inspecting");
-  ok(!InspectorUI.currentInspector._markupOpen, "Inspector Tree Panel is not open");
-  ok(InspectorUI.highlighter, "Highlighter is up");
-
-  salutation = doc.getElementById("salutation");
-  InspectorUI.inspectNode(salutation);
-
-  let button = document.getElementById("highlighter-closebutton");
-  button.click();
-}
-
-function closeInspectorTests()
-{
-  Services.obs.removeObserver(closeInspectorTests,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED);
-  Services.obs.addObserver(inspectorOpenedTrap,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-
-  ok(!InspectorUI.isInspectorOpen, "Inspector is not open");
-
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function() {
-    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
-    gBrowser.removeCurrentTab();
-  }, true);
-
-  gBrowser.tabContainer.addEventListener("TabSelect", finishInspectorTests, false);
-}
-
-function inspectorOpenedTrap()
-{
-  ok(false, "Inspector opened! Should not have done so.");
-  InspectorUI.closeInspectorUI(false);
-}
-
-function finishInspectorTests()
-{
-  gBrowser.tabContainer.removeEventListener("TabSelect", finishInspectorTests, false);
-
-  Services.obs.removeObserver(inspectorOpenedTrap,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
-
-  requestLongerTimeout(4); // give the inspector a chance to open
-  executeSoon(function() {
-    gBrowser.removeCurrentTab();
-    finish();
-  });
-}
-
-function test()
-{
-  waitForExplicitFinish();
-  ignoreAllUncaughtExceptions();
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function() {
-    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
-    doc = content.document;
-    waitForFocus(createDocument, content);
-  }, true);
-
-  content.location = "data:text/html,basic tests for inspector";
-}
-
diff --git a/browser/devtools/highlighter/test/browser_inspector_bug_699308_iframe_navigation.js b/browser/devtools/highlighter/test/browser_inspector_bug_699308_iframe_navigation.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_bug_699308_iframe_navigation.js
+++ /dev/null
@@ -1,77 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-let iframe;
-let iframeLoads = 0;
-let checksAfterLoads = false;
-
-function startTest() {
-  ok(window.InspectorUI, "InspectorUI variable exists");
-  Services.obs.addObserver(runInspectorTests,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, null);
-  InspectorUI.toggleInspectorUI();
-}
-
-function runInspectorTests() {
-  Services.obs.removeObserver(runInspectorTests,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, null);
-
-  iframe = content.document.querySelector("iframe");
-  ok(iframe, "found the iframe element");
-
-  ok(InspectorUI.inspecting, "Inspector is highlighting");
-  ok(InspectorUI.isInspectorOpen, "Inspector is open");
-
-  Services.obs.addObserver(finishTest,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED, false);
-
-  iframe.addEventListener("load", onIframeLoad, false);
-
-  executeSoon(function() {
-    iframe.contentWindow.location = "javascript:location.reload()";
-  });
-}
-
-function onIframeLoad() {
-  if (++iframeLoads != 2) {
-    executeSoon(function() {
-      iframe.contentWindow.location = "javascript:location.reload()";
-    });
-    return;
-  }
-
-  iframe.removeEventListener("load", onIframeLoad, false);
-
-  ok(InspectorUI.inspecting, "Inspector is highlighting after iframe nav");
-  ok(InspectorUI.isInspectorOpen, "Inspector Panel is open after iframe nav");
-
-  checksAfterLoads = true;
-
-  InspectorUI.closeInspectorUI();
-}
-
-function finishTest() {
-  Services.obs.removeObserver(finishTest,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED);
-
-  is(iframeLoads, 2, "iframe loads");
-  ok(checksAfterLoads, "the Inspector tests got the chance to run after iframe reloads");
-  ok(!InspectorUI.isInspectorOpen, "Inspector Panel is not open");
-
-  iframe = null;
-  gBrowser.removeCurrentTab();
-  executeSoon(finish);
-}
-
-function test() {
-  waitForExplicitFinish();
-
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function onBrowserLoad() {
-    gBrowser.selectedBrowser.removeEventListener("load", onBrowserLoad, true);
-    waitForFocus(startTest, content);
-  }, true);
-
-  content.location = "data:text/html,<p>bug 699308 - test iframe navigation" +
-    "<iframe src='data:text/html,hello world'></iframe>";
-}
diff --git a/browser/devtools/highlighter/test/browser_inspector_changes.js b/browser/devtools/highlighter/test/browser_inspector_changes.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_changes.js
+++ /dev/null
@@ -1,124 +0,0 @@
-/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-let doc;
-let testDiv;
-
-function createDocument()
-{
-  doc.body.innerHTML = '<div id="testdiv">Test div!</div>';
-  doc.title = "Inspector Change Test";
-  startInspectorTests();
-}
-
-
-function getInspectorProp(aName)
-{
-  for each (let view in computedViewTree().propertyViews) {
-    if (view.name == aName) {
-      return view;
-    }
-  }
-  return null;
-}
-
-function startInspectorTests()
-{
-  ok(InspectorUI, "InspectorUI variable exists");
-  Services.obs.addObserver(runInspectorTests,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-  InspectorUI.toggleInspectorUI();
-}
-
-function runInspectorTests()
-{
-  Services.obs.removeObserver(runInspectorTests, InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
-  testDiv = doc.getElementById("testdiv");
-
-  testDiv.style.fontSize = "10px";
-
-  InspectorUI.inspectNode(testDiv);
-  InspectorUI.stopInspecting();
-
-  // Start up the style inspector panel...
-  Services.obs.addObserver(stylePanelTests, "StyleInspector-populated", false);
-
-  InspectorUI.sidebar.show();
-  InspectorUI.sidebar.activatePanel("computedview");
-}
-
-function stylePanelTests()
-{
-  Services.obs.removeObserver(stylePanelTests, "StyleInspector-populated");
-
-  ok(InspectorUI.sidebar.visible, "Inspector Sidebar is open");
-  ok(computedViewTree(), "Style Panel has a cssHtmlTree");
-
-  let propView = getInspectorProp("font-size");
-  is(propView.value, "10px", "Style inspector should be showing the correct font size.");
-
-  Services.obs.addObserver(stylePanelAfterChange, "StyleInspector-populated", false);
-
-  testDiv.style.fontSize = "15px";
-  InspectorUI.nodeChanged();
-}
-
-function stylePanelAfterChange()
-{
-  Services.obs.removeObserver(stylePanelAfterChange, "StyleInspector-populated");
-
-  let propView = getInspectorProp("font-size");
-  is(propView.value, "15px", "Style inspector should be showing the new font size.");
-
-  stylePanelNotActive();
-}
-
-function stylePanelNotActive()
-{
-  // Tests changes made while the style panel is not active.
-  InspectorUI.sidebar.activatePanel("ruleview");
-
-  executeSoon(function() {
-    Services.obs.addObserver(stylePanelAfterSwitch, "StyleInspector-populated", false);
-    testDiv.style.fontSize = "20px";
-    InspectorUI.nodeChanged();
-    InspectorUI.sidebar.activatePanel("computedview");
-  });
-}
-
-function stylePanelAfterSwitch()
-{
-  Services.obs.removeObserver(stylePanelAfterSwitch, "StyleInspector-populated");
-
-  let propView = getInspectorProp("font-size");
-  is(propView.value, "20px", "Style inspector should be showing the newest font size.");
-
-  Services.obs.addObserver(finishTest, InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED, false);
-  executeSoon(function() {
-    InspectorUI.closeInspectorUI(true);
-  });
-}
-
-function finishTest()
-{
-  Services.obs.removeObserver(finishTest,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED);
-  gBrowser.removeCurrentTab();
-  finish();
-}
-
-function test()
-{
-  waitForExplicitFinish();
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function() {
-    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
-    doc = content.document;
-    waitForFocus(createDocument, content);
-  }, true);
-
-  content.location = "data:text/html,basic tests for inspector";
-}
-
diff --git a/browser/devtools/highlighter/test/browser_inspector_cmd_inspect.html b/browser/devtools/highlighter/test/browser_inspector_cmd_inspect.html
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_cmd_inspect.html
+++ /dev/null
@@ -1,25 +0,0 @@
-<!doctype html>
-<html lang="en">
-<head>
-  <meta charset="utf-8">
-  <title>GCLI inspect command test</title>
-</head>
-<body>
-
-  <!-- This is a list of 0 h1 elements -->
-
-  <!-- This is a list of 1 div elements -->
-  <div>Hello, I'm a div</div>
-
-  <!-- This is a list of 2 span elements -->
-  <span>Hello, I'm a span</span>
-  <span>And me</span>
-
-  <!-- This is a collection of various things that match only once -->
-  <p class="someclass">.someclass</p>
-  <p id="someid">#someid</p>
-  <button disabled>button[disabled]</button>
-  <p><strong>p&gt;strong</strong></p>
-
-</body>
-</html>
diff --git a/browser/devtools/highlighter/test/browser_inspector_cmd_inspect.js b/browser/devtools/highlighter/test/browser_inspector_cmd_inspect.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_cmd_inspect.js
+++ /dev/null
@@ -1,120 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
- * http://creativecommons.org/publicdomain/zero/1.0/ */
-
-// Tests that the inspect command works as it should
-
-const TEST_URI = "http://example.com/browser/browser/devtools/highlighter/" +
-                 "test/browser_inspector_cmd_inspect.html";
-
-function test() {
-  DeveloperToolbarTest.test(TEST_URI, [ testInspect ]);
-}
-
-function testInspect() {
-  helpers.setInput('inspect');
-  helpers.check({
-    input:  'inspect',
-    hints:         ' <selector>',
-    markup: 'VVVVVVV',
-    status: 'ERROR',
-    args: {
-      selector: { message: '' },
-    }
-  });
-
-  helpers.setInput('inspect h1');
-  helpers.check({
-    input:  'inspect h1',
-    hints:            '',
-    markup: 'VVVVVVVVII',
-    status: 'ERROR',
-    args: {
-      selector: { message: 'No matches' },
-    }
-  });
-
-  helpers.setInput('inspect span');
-  helpers.check({
-    input:  'inspect span',
-    hints:              '',
-    markup: 'VVVVVVVVEEEE',
-    status: 'ERROR',
-    args: {
-      selector: { message: 'Too many matches (2)' },
-    }
-  });
-
-  helpers.setInput('inspect div');
-  helpers.check({
-    input:  'inspect div',
-    hints:             '',
-    markup: 'VVVVVVVVVVV',
-    status: 'VALID',
-    args: {
-      selector: { message: '' },
-    }
-  });
-
-  helpers.setInput('inspect .someclas');
-  helpers.check({
-    input:  'inspect .someclas',
-    hints:                   '',
-    markup: 'VVVVVVVVIIIIIIIII',
-    status: 'ERROR',
-    args: {
-      selector: { message: 'No matches' },
-    }
-  });
-
-  helpers.setInput('inspect .someclass');
-  helpers.check({
-    input:  'inspect .someclass',
-    hints:                    '',
-    markup: 'VVVVVVVVVVVVVVVVVV',
-    status: 'VALID',
-    args: {
-      selector: { message: '' },
-    }
-  });
-
-  helpers.setInput('inspect #someid');
-  helpers.check({
-    input:  'inspect #someid',
-    hints:                 '',
-    markup: 'VVVVVVVVVVVVVVV',
-    status: 'VALID',
-    args: {
-      selector: { message: '' },
-    }
-  });
-
-  helpers.setInput('inspect button[disabled]');
-  helpers.check({
-    input:  'inspect button[disabled]',
-    hints:                          '',
-    markup: 'VVVVVVVVVVVVVVVVVVVVVVVV',
-    status: 'VALID',
-    args: {
-      selector: { message: '' },
-    }
-  });
-
-  helpers.setInput('inspect p>strong');
-  helpers.check({
-    input:  'inspect p>strong',
-    hints:                  '',
-    markup: 'VVVVVVVVVVVVVVVV',
-    status: 'VALID',
-    args: {
-      selector: { message: '' },
-    }
-  });
-
-  helpers.setInput('inspect :root');
-  helpers.check({
-    input:  'inspect :root',
-    hints:               '',
-    markup: 'VVVVVVVVVVVVV',
-    status: 'VALID'
-  });
-}
diff --git a/browser/devtools/highlighter/test/browser_inspector_destroyselection.html b/browser/devtools/highlighter/test/browser_inspector_destroyselection.html
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_destroyselection.html
+++ /dev/null
@@ -1,4 +0,0 @@
-<!DOCTYPE html>
-
-<h1>mop</h1>
-<iframe src="data:text/html;charset=utf-8,<!DOCTYPE HTML>%0D%0A<h1>kill me<span>.</span><%2Fh1>"></iframe>
diff --git a/browser/devtools/highlighter/test/browser_inspector_destroyselection.js b/browser/devtools/highlighter/test/browser_inspector_destroyselection.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_destroyselection.js
+++ /dev/null
@@ -1,62 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-function test()
-{
-  waitForExplicitFinish();
-  //ignoreAllUncaughtExceptions();
-
-  let node, iframe;
-
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function onload() {
-    gBrowser.selectedBrowser.removeEventListener("load", onload, true);
-    waitForFocus(setupTest, content);
-  }, true);
-
-  content.location = "http://mochi.test:8888/browser/browser/devtools/highlighter/test/browser_inspector_destroyselection.html";
-
-  function setupTest()
-  {
-    iframe = content.document.querySelector("iframe");
-    node = iframe.contentDocument.querySelector("span");
-
-    Services.obs.addObserver(runTests,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-    InspectorUI.openInspectorUI(node);
-  }
-
-  function runTests()
-  {
-    Services.obs.removeObserver(runTests,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
-    is(InspectorUI.selection, node, "node selected");
-    iframe.parentNode.removeChild(iframe);
-    iframe = null;
-
-    let tmp = {};
-    Cu.import("resource:///modules/devtools/LayoutHelpers.jsm", tmp);
-    ok(!tmp.LayoutHelpers.isNodeConnected(node), "Node considered as disconnected.");
-
-    Services.obs.addObserver(testBreadcrumbs,
-                             InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED, false);
-
-    executeSoon(function() {
-      InspectorUI.closeInspectorUI();
-    });
-  }
-
-  function testBreadcrumbs()
-  {
-    Services.obs.removeObserver(testBreadcrumbs, InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED, false);
-    ok(!InspectorUI.breadcrumbs, "Breadcrumbs destroyed");
-    finishUp();
-  }
-
-  function finishUp() {
-    node = null;
-    gBrowser.removeCurrentTab();
-    finish();
-  }
-}
-
diff --git a/browser/devtools/highlighter/test/browser_inspector_highlighter.js b/browser/devtools/highlighter/test/browser_inspector_highlighter.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_highlighter.js
+++ /dev/null
@@ -1,168 +0,0 @@
-/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-let doc;
-let h1;
-let div;
-
-function createDocument()
-{
-  let div = doc.createElement("div");
-  let h1 = doc.createElement("h1");
-  let p1 = doc.createElement("p");
-  let p2 = doc.createElement("p");
-  let div2 = doc.createElement("div");
-  let p3 = doc.createElement("p");
-  doc.title = "Inspector Highlighter Meatballs";
-  h1.textContent = "Inspector Tree Selection Test";
-  p1.textContent = "This is some example text";
-  p2.textContent = "Lorem ipsum dolor sit amet, consectetur adipisicing " +
-    "elit, sed do eiusmod tempor incididunt ut labore et dolore magna " +
-    "aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco " +
-    "laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure " +
-    "dolor in reprehenderit in voluptate velit esse cillum dolore eu " +
-    "fugiat nulla pariatur. Excepteur sint occaecat cupidatat non " +
-    "proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
-  p3.textContent = "Lorem ipsum dolor sit amet, consectetur adipisicing " +
-    "elit, sed do eiusmod tempor incididunt ut labore et dolore magna " +
-    "aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco " +
-    "laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure " +
-    "dolor in reprehenderit in voluptate velit esse cillum dolore eu " +
-    "fugiat nulla pariatur. Excepteur sint occaecat cupidatat non " +
-    "proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
-  let div3 = doc.createElement("div");
-  div3.id = "checkOutThisWickedSpread";
-  div3.setAttribute("style", "position: absolute; top: 20px; right: 20px; height: 20px; width: 20px; background-color: yellow; border: 1px dashed black;");
-  let p4 = doc.createElement("p");
-  p4.setAttribute("style", "font-weight: 200; font-size: 8px; text-align: center;");
-  p4.textContent = "Smörgåsbord!";
-  div.appendChild(h1);
-  div.appendChild(p1);
-  div.appendChild(p2);
-  div2.appendChild(p3);
-  div3.appendChild(p4);
-  doc.body.appendChild(div);
-  doc.body.appendChild(div2);
-  doc.body.appendChild(div3);
-
-  setupHighlighterTests();
-}
-
-function setupHighlighterTests()
-{
-  h1 = doc.querySelector("h1");
-  ok(h1, "we have the header");
-  Services.obs.addObserver(runSelectionTests,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-  InspectorUI.toggleInspectorUI();
-}
-
-function runSelectionTests(subject)
-{
-  Services.obs.removeObserver(runSelectionTests,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-
-  is(subject.wrappedJSObject, InspectorUI,
-     "InspectorUI accessible in the observer");
-
-  InspectorUI.highlighter.outline.setAttribute("disable-transitions", "true");
-
-  executeSoon(function() {
-    InspectorUI.highlighter.addListener("nodeselected", performTestComparisons);
-    EventUtils.synthesizeMouse(h1, 2, 2, {type: "mousemove"}, content);
-  });
-}
-
-function performTestComparisons(evt)
-{
-  InspectorUI.highlighter.removeListener("nodeselected", performTestComparisons);
-
-  InspectorUI.stopInspecting();
-  ok(isHighlighting(), "highlighter is highlighting");
-  is(getHighlitNode(), h1, "highlighter matches selection")
-  is(InspectorUI.selection, h1, "selection matches node");
-  is(InspectorUI.selection, getHighlitNode(), "selection matches highlighter");
-
-
-  div = doc.querySelector("div#checkOutThisWickedSpread");
-
-  executeSoon(function() {
-    InspectorUI.highlighter.addListener("nodeselected", finishTestComparisons);
-    InspectorUI.inspectNode(div);
-  });
-}
-
-function finishTestComparisons()
-{
-  InspectorUI.highlighter.removeListener("nodeselected", finishTestComparisons);
-
-  // get dimensions of div element
-  let divDims = div.getBoundingClientRect();
-  let divWidth = divDims.width;
-  let divHeight = divDims.height;
-
-  // get dimensions of the outline
-  let outlineDims = 
-    InspectorUI.highlighter.outline.getBoundingClientRect();
-  let outlineWidth = outlineDims.width;
-  let outlineHeight = outlineDims.height;
-
-  // Disabled due to bug 716245
-  //is(outlineWidth, divWidth, "outline width matches dimensions of element (no zoom)");
-  //is(outlineHeight, divHeight, "outline height matches dimensions of element (no zoom)");
-
-  // zoom the page by a factor of 2
-  let contentViewer = InspectorUI.browser.docShell.contentViewer
-                             .QueryInterface(Ci.nsIMarkupDocumentViewer);
-  contentViewer.fullZoom = 2;
-
-  // We wait at least 500ms to make sure the highlighter is not "mutting" the
-  // resize event
-
-  window.setTimeout(function() {
-    // check what zoom factor we're at, should be 2
-    let zoom = InspectorUI.highlighter.zoom;
-    is(zoom, 2, "zoom is 2?");
-
-    // simulate the zoomed dimensions of the div element
-    let divDims = div.getBoundingClientRect();
-    let divWidth = divDims.width * zoom;
-    let divHeight = divDims.height * zoom;
-
-    // now zoomed, get new dimensions the outline
-    let outlineDims = 
-      InspectorUI.highlighter.outline.getBoundingClientRect();
-    let outlineWidth = outlineDims.width;
-    let outlineHeight = outlineDims.height;
-
-    // Disabled due to bug 716245
-    //is(outlineWidth, divWidth, "outline width matches dimensions of element (no zoom)");
-    //is(outlineHeight, divHeight, "outline height matches dimensions of element (no zoom)");
-
-    doc = h1 = div = null;
-    executeSoon(finishUp);
-  }, 500);
-}
-
-function finishUp() {
-  InspectorUI.closeInspectorUI();
-  gBrowser.removeCurrentTab();
-  finish();
-}
-
-function test()
-{
-  waitForExplicitFinish();
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function() {
-    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
-    doc = content.document;
-    waitForFocus(createDocument, content);
-  }, true);
-
-  content.location = "data:text/html,basic tests for inspector";
-}
-
diff --git a/browser/devtools/highlighter/test/browser_inspector_highlighter_autohide.js b/browser/devtools/highlighter/test/browser_inspector_highlighter_autohide.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_highlighter_autohide.js
+++ /dev/null
@@ -1,59 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-let doc;
-
-function createDocument() {
-  doc.body.innerHTML = '<h1>highlighter autohide test</h1>';
-
-  InspectorUI.openInspectorUI(doc.querySelector("h1"));
-
-  // Open the sidebar and wait for the default view (the rule view) to show.
-  InspectorUI.currentInspector.once("sidebaractivated-ruleview", inspectorRuleViewOpened);
-
-  InspectorUI.sidebar.show();
-  InspectorUI.sidebar.activatePanel("ruleview");
-}
-
-function inspectorRuleViewOpened() {
-  let deck = InspectorUI.sidebar._deck;
-
-  EventUtils.synthesizeMouse(InspectorUI.highlighter.highlighterContainer, 2, 2, {type: "mousemove"}, window);
-
-  executeSoon(function() {
-    ok(!InspectorUI.highlighter.hidden, "Outline visible (1)");
-
-    EventUtils.synthesizeMouse(deck, 10, 2, {type: "mousemove"}, window);
-
-    executeSoon(function() {
-      ok(InspectorUI.highlighter.hidden, "Outline not visible");
-
-      EventUtils.synthesizeMouse(deck, -10, 2, {type: "mousemove"}, window);
-
-      executeSoon(function() {
-        ok(!InspectorUI.highlighter.hidden, "Outline visible (2)");
-        finishTest();
-      });
-    });
-  });
-}
-
-function finishTest() {
-  InspectorUI.closeInspectorUI();
-  gBrowser.removeCurrentTab();
-  finish();
-}
-
-function test() {
-  waitForExplicitFinish();
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function() {
-    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
-    doc = content.document;
-    waitForFocus(createDocument, content);
-  }, true);
-
-  content.location = "data:text/html,basic tests for highlighter";
-}
-
-
diff --git a/browser/devtools/highlighter/test/browser_inspector_iframeTest.js b/browser/devtools/highlighter/test/browser_inspector_iframeTest.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_iframeTest.js
+++ /dev/null
@@ -1,112 +0,0 @@
-/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-let doc;
-let div1;
-let div2;
-let iframe1;
-let iframe2;
-
-function createDocument()
-{
-  doc.title = "Inspector iframe Tests";
-
-  iframe1 = doc.createElement('iframe');
-
-  iframe1.addEventListener("load", function () {
-    iframe1.removeEventListener("load", arguments.callee, false);
-
-    div1 = iframe1.contentDocument.createElement('div');
-    div1.textContent = 'little div';
-    iframe1.contentDocument.body.appendChild(div1);
-
-    iframe2 = iframe1.contentDocument.createElement('iframe');
-
-    iframe2.addEventListener('load', function () {
-      iframe2.removeEventListener("load", arguments.callee, false);
-
-      div2 = iframe2.contentDocument.createElement('div');
-      div2.textContent = 'nested div';
-      iframe2.contentDocument.body.appendChild(div2);
-
-      setupIframeTests();
-    }, false);
-
-    iframe2.src = 'data:text/html,nested iframe';
-    iframe1.contentDocument.body.appendChild(iframe2);
-  }, false);
-
-  iframe1.src = 'data:text/html,little iframe';
-  doc.body.appendChild(iframe1);
-}
-
-function moveMouseOver(aElement)
-{
-  EventUtils.synthesizeMouse(aElement, 2, 2, {type: "mousemove"},
-    aElement.ownerDocument.defaultView);
-}
-
-function setupIframeTests()
-{
-  Services.obs.addObserver(runIframeTests,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-  InspectorUI.openInspectorUI();
-}
-
-function runIframeTests()
-{
-  Services.obs.removeObserver(runIframeTests,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-
-
-  executeSoon(function() {
-    InspectorUI.highlighter.addListener("nodeselected", performTestComparisons1);
-    moveMouseOver(div1)
-  });
-}
-
-function performTestComparisons1()
-{
-  InspectorUI.highlighter.removeListener("nodeselected", performTestComparisons1);
-
-  is(InspectorUI.selection, div1, "selection matches div1 node");
-  is(getHighlitNode(), div1, "highlighter matches selection");
-
-  executeSoon(function() {
-    InspectorUI.highlighter.addListener("nodeselected", performTestComparisons2);
-    moveMouseOver(div2);
-  });
-}
-
-function performTestComparisons2()
-{
-  InspectorUI.highlighter.removeListener("nodeselected", performTestComparisons2);
-
-  is(InspectorUI.selection, div2, "selection matches div2 node");
-  is(getHighlitNode(), div2, "highlighter matches selection");
-
-  finish();
-}
-
-function test() {
-  waitForExplicitFinish();
-
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function() {
-    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
-    doc = content.document;
-    gBrowser.selectedBrowser.focus();
-    createDocument();
-  }, true);
-
-  content.location = "data:text/html,iframe tests for inspector";
-
-  registerCleanupFunction(function () {
-    InspectorUI.closeInspectorUI(true);
-    gBrowser.removeCurrentTab();
-  });
-}
-
diff --git a/browser/devtools/highlighter/test/browser_inspector_infobar.js b/browser/devtools/highlighter/test/browser_inspector_infobar.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_infobar.js
+++ /dev/null
@@ -1,99 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-function test()
-{
-  waitForExplicitFinish();
-  ignoreAllUncaughtExceptions();
-
-  let doc;
-  let nodes;
-  let cursor;
-
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function onload() {
-    gBrowser.selectedBrowser.removeEventListener("load", onload, true);
-    doc = content.document;
-    waitForFocus(setupInfobarTest, content);
-  }, true);
-
-  let style = "body{width:100%;height: 100%} div {position: absolute;height: 100px;width: 500px}#bottom {bottom: 0px}#vertical {height: 100%}#farbottom{bottom: -200px}";
-  let html = "<style>" + style + "</style><div id=vertical></div><div id=top class='class1 class2'></div><div id=bottom></div><div id=farbottom></div>"
-
-  content.location = "data:text/html," + encodeURIComponent(html);
-
-  function setupInfobarTest()
-  {
-    nodes = [
-      {node: doc.querySelector("#top"), position: "bottom", tag: "DIV", id: "#top", classes: ".class1.class2"},
-      {node: doc.querySelector("#vertical"), position: "overlap", tag: "DIV", id: "#vertical", classes: ""},
-      {node: doc.querySelector("#bottom"), position: "top", tag: "DIV", id: "#bottom", classes: ""},
-      {node: doc.querySelector("body"), position: "overlap", tag: "BODY", id: "", classes: ""},
-      {node: doc.querySelector("#farbottom"), position: "top", tag: "DIV", id: "#farbottom", classes: ""},
-    ]
-
-    for (let i = 0; i < nodes.length; i++) {
-      ok(nodes[i].node, "node " + i + " found");
-    }
-
-    Services.obs.addObserver(runTests,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-    InspectorUI.toggleInspectorUI();
-  }
-
-  function runTests()
-  {
-    Services.obs.removeObserver(runTests,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
-
-    cursor = 0;
-    executeSoon(function() {
-      InspectorUI.inspectNode(nodes[0].node);
-      nodeSelected();
-    });
-  }
-
-  function nodeSelected()
-  {
-    executeSoon(function() {
-      performTest();
-      cursor++;
-      if (cursor >= nodes.length) {
-
-        Services.obs.addObserver(finishUp,
-          InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED, false);
-
-        executeSoon(function() {
-          InspectorUI.closeInspectorUI();
-        });
-      } else {
-        let node = nodes[cursor].node;
-        InspectorUI.inspectNode(node);
-        nodeSelected();
-      }
-    });
-  }
-
-  function performTest()
-  {
-    let container = document.getElementById("highlighter-nodeinfobar-container");
-    is(container.getAttribute("position"), nodes[cursor].position, "node " + cursor + ": position matches.");
-
-    let tagNameLabel = document.getElementById("highlighter-nodeinfobar-tagname");
-    is(tagNameLabel.textContent, nodes[cursor].tag, "node " + cursor  + ": tagName matches.");
-
-    let idLabel = document.getElementById("highlighter-nodeinfobar-id");
-    is(idLabel.textContent, nodes[cursor].id, "node " + cursor  + ": id matches.");
-
-    let classesBox = document.getElementById("highlighter-nodeinfobar-classes");
-    is(classesBox.textContent, nodes[cursor].classes, "node " + cursor  + ": classes match.");
-  }
-
-  function finishUp() {
-    Services.obs.removeObserver(finishUp, InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED);
-    doc = nodes = null;
-    gBrowser.removeCurrentTab();
-    finish();
-  }
-}
-
diff --git a/browser/devtools/highlighter/test/browser_inspector_initialization.js b/browser/devtools/highlighter/test/browser_inspector_initialization.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_initialization.js
+++ /dev/null
@@ -1,191 +0,0 @@
-/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-let doc;
-let salutation;
-let closing;
-let winId;
-
-function createDocument()
-{
-  doc.body.innerHTML = '<div id="first" style="{ margin: 10em; ' +
-    'font-size: 14pt; font-family: helvetica, sans-serif; color: #AAA}">\n' +
-    '<h1>Some header text</h1>\n' +
-    '<p id="salutation" style="{font-size: 12pt}">hi.</p>\n' +
-    '<p id="body" style="{font-size: 12pt}">I am a test-case. This text exists ' +
-    'solely to provide some things to test the inspector initialization.</p>\n' +
-    'If you are reading this, you should go do something else instead. Maybe ' +
-    'read a book. Or better yet, write some test-cases for another bit of code. ' +
-    '<span style="{font-style: italic}">Maybe more inspector test-cases!</span></p>\n' +
-    '<p id="closing">end transmission</p>\n' +
-    '</div>';
-  doc.title = "Inspector Initialization Test";
-  startInspectorTests();
-}
-
-function startInspectorTests()
-{
-  ok(InspectorUI, "InspectorUI variable exists");
-  Services.obs.addObserver(runInspectorTests,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-  InspectorUI.toggleInspectorUI();
-}
-
-function runInspectorTests()
-{
-  Services.obs.removeObserver(runInspectorTests,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
-
-  ok(InspectorUI.toolbar, "we have the toolbar.");
-  ok(!InspectorUI.toolbar.hidden, "toolbar is visible");
-  ok(InspectorUI.inspecting, "Inspector is inspecting");
-  ok(!InspectorUI.markupOpen, "Inspector Tree Panel is not open");
-  ok(!InspectorUI.sidebar.visible, "Inspector sidebar should not visible.");
-  ok(InspectorUI.highlighter, "Highlighter is up");
-  InspectorUI.inspectNode(doc.body);
-  InspectorUI.stopInspecting();
-
-  InspectorUI.currentInspector.once("markuploaded", treePanelTests);
-  InspectorUI.currentInspector.openMarkup();
-}
-
-function treePanelTests()
-{
-  ok(InspectorUI.currentInspector.markupOpen, "Inspector Tree Panel is open");
-
-  InspectorUI.toggleSidebar();
-  ok(InspectorUI.sidebar.visible, "Inspector Sidebar should be open");
-  InspectorUI.toggleSidebar();
-  ok(!InspectorUI.sidebar.visible, "Inspector Sidebar should be closed");
-  InspectorUI.sidebar.show();
-  InspectorUI.currentInspector.once("sidebaractivated-computedview",
-    stylePanelTests)
-  InspectorUI.sidebar.activatePanel("computedview");
-}
-
-function stylePanelTests()
-{
-  ok(InspectorUI.sidebar.visible, "Inspector Sidebar is open");
-  is(InspectorUI.sidebar.activePanel, "computedview", "Computed View is open");
-  ok(computedViewTree(), "Computed view has a cssHtmlTree");
-
-  InspectorUI.sidebar.activatePanel("ruleview");
-  executeSoon(function() {
-    ruleViewTests();
-  });
-}
-
-function ruleViewTests()
-{
-  Services.obs.addObserver(runContextMenuTest,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED, false);
-
-  is(InspectorUI.sidebar.activePanel, "ruleview", "Rule View is open");
-  ok(ruleView(), "InspectorUI has a cssRuleView");
-
-  executeSoon(function() {
-    InspectorUI.closeInspectorUI();
-  });
-}
-
-function runContextMenuTest()
-{
-  Services.obs.removeObserver(runContextMenuTest, InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED, false);
-  Services.obs.addObserver(inspectNodesFromContextTest, InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-  salutation = doc.getElementById("salutation");
-  ok(salutation, "hello, context menu test!");
-  let eventDeets = { type : "contextmenu", button : 2 };
-  let contextMenu = document.getElementById("contentAreaContextMenu");
-  ok(contextMenu, "we have the context menu");
-  let contextInspectMenuItem = document.getElementById("context-inspect");
-  ok(contextInspectMenuItem, "we have the inspect context menu item");
-  EventUtils.synthesizeMouse(salutation, 2, 2, eventDeets);
-  is(contextMenu.state, "showing", "context menu is open");
-  is(!contextInspectMenuItem.hidden, gPrefService.getBoolPref("devtools.inspector.enabled"), "is context menu item enabled?");
-  contextMenu.hidePopup();
-  executeSoon(function() {
-    InspectorUI.openInspectorUI(salutation);
-  });
-}
-
-function inspectNodesFromContextTest()
-{
-  Services.obs.removeObserver(inspectNodesFromContextTest, InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-  Services.obs.addObserver(openInspectorForContextTest, InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED, false);
-  ok(!InspectorUI.inspecting, "Inspector is not actively highlighting");
-  is(InspectorUI.selection, salutation, "Inspector is highlighting salutation");
-  executeSoon(function() {
-    InspectorUI.closeInspectorUI(true);
-  });
-}
-
-function openInspectorForContextTest()
-{
-  Services.obs.removeObserver(openInspectorForContextTest, InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED);
-  Services.obs.addObserver(inspectNodesFromContextTestWhileOpen, InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-  executeSoon(function() {
-    InspectorUI.openInspectorUI(salutation);
-  });
-}
-
-function inspectNodesFromContextTestWhileOpen()
-{
-  Services.obs.removeObserver(inspectNodesFromContextTestWhileOpen, InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
-  Services.obs.addObserver(inspectNodesFromContextTestTrap, InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-  InspectorUI.highlighter.addListener("nodeselected", inspectNodesFromContextTestHighlight);
-  is(InspectorUI.selection, salutation, "Inspector is highlighting salutation");
-  closing = doc.getElementById("closing");
-  ok(closing, "we have the closing statement");
-  executeSoon(function() {
-    InspectorUI.openInspectorUI(closing);
-  });
-}
-
-function inspectNodesFromContextTestHighlight()
-{
-  winId = InspectorUI.winID;
-  InspectorUI.highlighter.removeListener("nodeselected", inspectNodesFromContextTestHighlight);
-  Services.obs.addObserver(finishInspectorTests, InspectorUI.INSPECTOR_NOTIFICATIONS.DESTROYED, false);
-  is(InspectorUI.selection, closing, "InspectorUI.selection is header");
-  executeSoon(function() {
-    InspectorUI.closeInspectorUI();
-  });
-}
-
-function inspectNodesFromContextTestTrap()
-{
-  Services.obs.removeObserver(inspectNodesFromContextTestTrap, InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
-  ok(false, "Inspector UI has been opened again. We Should Not Be Here!");
-}
-
-function finishInspectorTests(subject, topic, aWinIdString)
-{
-  Services.obs.removeObserver(finishInspectorTests,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.DESTROYED);
-
-  is(parseInt(aWinIdString), winId, "winId of destroyed Inspector matches");
-  ok(!InspectorUI.highlighter, "Highlighter is gone");
-  ok(!InspectorUI.inspecting, "Inspector is not inspecting");
-  ok(!InspectorUI._sidebar, "Inspector Sidebar is closed");
-  ok(!InspectorUI.toolbar, "toolbar is hidden");
-
-  Services.obs.removeObserver(inspectNodesFromContextTestTrap, InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
-  gBrowser.removeCurrentTab();
-  finish();
-}
-
-function test()
-{
-  waitForExplicitFinish();
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function() {
-    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
-    doc = content.document;
-    waitForFocus(createDocument, content);
-  }, true);
-
-  content.location = "data:text/html,basic tests for inspector";
-}
-
diff --git a/browser/devtools/highlighter/test/browser_inspector_invalidate.js b/browser/devtools/highlighter/test/browser_inspector_invalidate.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_invalidate.js
+++ /dev/null
@@ -1,56 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-let doc;
-let div;
-
-function createDocument()
-{
-  div = doc.createElement("div");
-  div.setAttribute("style", "width: 100px; height: 100px; background:yellow;");
-  doc.body.appendChild(div);
-
-  Services.obs.addObserver(runTest,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-  InspectorUI.toggleInspectorUI();
-}
-
-function runTest(subject)
-{
-  Services.obs.removeObserver(runTest,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-
-  InspectorUI.highlighter.highlight(div);
-
-  executeSoon(function() {
-    let outline = InspectorUI.highlighter.outline;
-    is(outline.style.width, "100px", "selection has the right width");
-
-    div.style.width = "200px";
-    function pollTest() {
-      if (outline.style.width == "100px") {
-    	setTimeout(pollTest, 10);
-    	return;
-      }
-      is(outline.style.width, "200px", "selection updated");
-      InspectorUI.closeInspectorUI();
-      gBrowser.removeCurrentTab();
-      finish();
-    }
-    setTimeout(pollTest, 10);
-  });
-}
-
-function test()
-{
-  waitForExplicitFinish();
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function() {
-    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
-    doc = content.document;
-    waitForFocus(createDocument, content);
-  }, true);
-
-  content.location = "data:text/html,basic tests for inspector";
-}
-
diff --git a/browser/devtools/highlighter/test/browser_inspector_keybindings.js b/browser/devtools/highlighter/test/browser_inspector_keybindings.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_keybindings.js
+++ /dev/null
@@ -1,78 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-
-function test()
-{
-  waitForExplicitFinish();
-
-  let doc;
-  let node;
-
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function onload() {
-    gBrowser.selectedBrowser.removeEventListener("load", onload, true);
-    doc = content.document;
-    waitForFocus(setupKeyBindingsTest, content);
-  }, true);
-
-  content.location = "data:text/html,<h1>foobar</h1>";
-
-  function setupKeyBindingsTest()
-  {
-    node = doc.querySelector("h1");
-    Services.obs.addObserver(highlightNode,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-    InspectorUI.toggleInspectorUI();
-  }
-
-  function highlightNode()
-  {
-    Services.obs.removeObserver(highlightNode,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
-
-    executeSoon(function() {
-      InspectorUI.highlighter.addListener("nodeselected", lockNode);
-      InspectorUI.inspectNode(node);
-    });
-  }
-
-  function lockNode()
-  {
-    InspectorUI.highlighter.removeListener("nodeselected", lockNode);
-    synthesizeKeyFromKeyTag("key_inspect");
-    executeSoon(isTheNodeLocked);
-  }
-
-  function isTheNodeLocked()
-  {
-    is(InspectorUI.selection, node, "selection matches node");
-    ok(!InspectorUI.inspecting, "the node is locked");
-    unlockNode();
-  }
-
-  function unlockNode() {
-    synthesizeKeyFromKeyTag("key_inspect");
-    executeSoon(isTheNodeUnlocked);
-  }
-
-  function isTheNodeUnlocked()
-  {
-    ok(InspectorUI.inspecting, "the node is unlocked");
-
-    // Let's close the inspector
-    Services.obs.addObserver(finishUp,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED, false);
-
-    EventUtils.synthesizeKey("VK_ESCAPE", {});
-    ok(true, "Inspector is closing successfuly");
-  }
-
-  function finishUp() {
-    Services.obs.removeObserver(finishUp,
-                                InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED);
-    doc = node = null;
-    gBrowser.removeCurrentTab();
-    finish();
-  }
-}
diff --git a/browser/devtools/highlighter/test/browser_inspector_menu.js b/browser/devtools/highlighter/test/browser_inspector_menu.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_menu.js
+++ /dev/null
@@ -1,113 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-http://creativecommons.org/publicdomain/zero/1.0/ */
-
-
-function test() {
-
-  waitForExplicitFinish();
-
-  let doc;
-  let node1;
-  let div;
-
-  function createDocument() {
-    div = doc.createElement("div");
-    let h1 = doc.createElement("h1");
-    let p1 = doc.createElement("p");
-    let p2 = doc.createElement("p");
-    doc.title = "Inspector Tree Menu Test";
-    h1.textContent = "Inspector Tree Menu Test";
-    p1.textContent = "This is some example text";
-    div.appendChild(h1);
-    div.appendChild(p1);
-    doc.body.appendChild(div);
-    node1 = p1;
-    setupTest();
-  }
-
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function onload() {
-    gBrowser.selectedBrowser.removeEventListener("load", onload, true);
-    doc = content.document;
-    waitForFocus(createDocument, content);
-  }, true);
-
-  content.location = content.location = "data:text/html,basic tests for inspector";;
-
-  function setupTest() {
-    Services.obs.addObserver(runTests, InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-    InspectorUI.toggleInspectorUI();
-  }
-
-  function runTests() {
-    Services.obs.removeObserver(runTests, InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
-    InspectorUI.stopInspecting();
-    InspectorUI.inspectNode(node1, true);
-    testCopyInnerMenu();
-  }
-
-  function testCopyInnerMenu() {
-    let copyInner = document.getElementById("inspectorHTMLCopyInner");
-    ok(copyInner, "the popup menu has a copy inner html menu item");
-
-    waitForClipboard("This is some example text",
-                     function() { copyInner.doCommand(); },
-                     testCopyOuterMenu, testCopyOuterMenu);
-  }
-
-  function testCopyOuterMenu() {
-    let copyOuter = document.getElementById("inspectorHTMLCopyOuter");
-    ok(copyOuter, "the popup menu has a copy outer html menu item");
-
-    waitForClipboard("<p>This is some example text</p>",
-                     function() { copyOuter.doCommand(); },
-                     testDeleteNode, testDeleteNode);
-  }
-
-  function testDeleteNode() {
-    let deleteNode = document.getElementById("inspectorHTMLDelete");
-    ok(deleteNode, "the popup menu has a delete menu item");
-
-    InspectorUI.highlighter.addListener("nodeselected", deleteTest);
-
-    let commandEvent = document.createEvent("XULCommandEvent");
-    commandEvent.initCommandEvent("command", true, true, window, 0, false, false,
-                                  false, false, null);
-    deleteNode.dispatchEvent(commandEvent);
-  }
-
-  function deleteTest() {
-    InspectorUI.highlighter.removeListener("nodeselected", deleteTest);
-    is(InspectorUI.selection, div, "parent node selected");
-    let p = doc.querySelector("P");
-    is(p, null, "node deleted");
-
-    InspectorUI.highlighter.addListener("nodeselected", deleteRootNode);
-    InspectorUI.inspectNode(doc.documentElement, true);
-  }
-
-  function deleteRootNode() {
-    InspectorUI.highlighter.removeListener("nodeselected", deleteRootNode);
-    let deleteNode = document.getElementById("inspectorHTMLDelete");
-    let commandEvent = document.createEvent("XULCommandEvent");
-    commandEvent.initCommandEvent("command", true, true, window, 0, false, false,
-                                  false, false, null);
-    deleteNode.dispatchEvent(commandEvent);
-    executeSoon(isRootStillAlive);
-  }
-
-  function isRootStillAlive() {
-    ok(doc.documentElement, "Document element still alive.");
-    Services.obs.addObserver(finishUp, InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED, false);
-    executeSoon(function() {
-      InspectorUI.closeInspectorUI();
-    });
-  }
-
-  function finishUp() {
-    Services.obs.removeObserver(finishUp, InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED);
-    doc = node1 = div = null;
-    gBrowser.removeCurrentTab();
-    finish();
-  }
-}
diff --git a/browser/devtools/highlighter/test/browser_inspector_pseudoClass_menu.js b/browser/devtools/highlighter/test/browser_inspector_pseudoClass_menu.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_pseudoClass_menu.js
+++ /dev/null
@@ -1,87 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-let DOMUtils = Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils);
-
-let pseudos = [":hover", ":active", ":focus"];
-
-let doc;
-let div;
-let menu;
-
-function test()
-{
-  waitForExplicitFinish();
-  ignoreAllUncaughtExceptions();
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function() {
-    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
-    doc = content.document;
-    waitForFocus(createDocument, content);
-  }, true);
-
-  content.location = "data:text/html,pseudo-class lock node menu tests";
-}
-
-function createDocument()
-{
-  div = doc.createElement("div");
-  div.textContent = "test div";
-
-  doc.body.appendChild(div);
-
-  setupTests();
-}
-
-function setupTests()
-{
-  Services.obs.addObserver(selectNode,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-  InspectorUI.openInspectorUI();
-}
-
-function selectNode()
-{
-  Services.obs.removeObserver(selectNode,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
-
-  executeSoon(function() {
-    InspectorUI.highlighter.addListener("nodeselected", performTests);
-    InspectorUI.inspectNode(div);
-  });
-}
-
-function performTests()
-{
-  InspectorUI.highlighter.removeListener("nodeselected", performTests);
-
-  menu = document.getElementById("highlighter-node-menu");
-  menu.addEventListener("popupshowing", testMenuItems, true);
-
-  menu.openPopup();
-}
-
-function testMenuItems()
-{
-  menu.removeEventListener("popupshowing", testMenuItems, true);
-
-  for each (let pseudo in pseudos) {
-    let menuitem = document.getElementById("highlighter-pseudo-class-menuitem-"
-                   + pseudo);
-    ok(menuitem, pseudo + " menuitem exists");
-
-    menuitem.doCommand();
-
-    is(DOMUtils.hasPseudoClassLock(div, pseudo), true,
-       "pseudo-class lock has been applied");
-  }
-  finishUp();
-}
-
-function finishUp()
-{
-  InspectorUI.closeInspectorUI();
-  doc = div = null;
-  gBrowser.removeCurrentTab();
-  finish();
-}
diff --git a/browser/devtools/highlighter/test/browser_inspector_pseudoclass_lock.js b/browser/devtools/highlighter/test/browser_inspector_pseudoclass_lock.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_pseudoclass_lock.js
+++ /dev/null
@@ -1,150 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-let DOMUtils = Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils);
-
-let doc;
-let div;
-
-let pseudo = ":hover";
-
-function test()
-{
-  waitForExplicitFinish();
-  ignoreAllUncaughtExceptions();
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function() {
-    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
-    doc = content.document;
-    waitForFocus(createDocument, content);
-  }, true);
-
-  content.location = "data:text/html,pseudo-class lock tests";
-}
-
-function createDocument()
-{
-  div = doc.createElement("div");
-  div.textContent = "test div";
-
-  let head = doc.getElementsByTagName('head')[0];
-  let style = doc.createElement('style');
-  let rules = doc.createTextNode('div { color: red; } div:hover { color: blue; }');
-
-  style.appendChild(rules);
-  head.appendChild(style);
-  doc.body.appendChild(div);
-
-  setupTests();
-}
-
-function setupTests()
-{
-  Services.obs.addObserver(selectNode,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-  InspectorUI.openInspectorUI();
-}
-
-function selectNode()
-{
-  Services.obs.removeObserver(selectNode,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
-
-  executeSoon(function() {
-    InspectorUI.highlighter.addListener("locked", openRuleView);
-    InspectorUI.inspectNode(div);
-    InspectorUI.stopInspecting();
-  });
-}
-
-function openRuleView()
-{
-  InspectorUI.sidebar.show();
-  InspectorUI.currentInspector.once("sidebaractivated-ruleview", performTests);
-  InspectorUI.sidebar.activatePanel("ruleview");
-}
-
-function performTests()
-{
-  InspectorUI.highlighter.removeListener("locked", performTests);
-
-  // toggle the class
-  InspectorUI.highlighter.pseudoClassLockToggled(pseudo);
-
-  testAdded();
-
-  // toggle the lock off
-  InspectorUI.highlighter.pseudoClassLockToggled(pseudo);
-
-  testRemoved();
-  testRemovedFromUI();
-
-  // toggle it back on
-  InspectorUI.highlighter.pseudoClassLockToggled(pseudo);  
-
-  // close the inspector
-  Services.obs.addObserver(testInspectorClosed,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED, false);
-  InspectorUI.closeInspectorUI();
-}
-
-function testAdded()
-{
-  // lock is applied to it and ancestors
-  let node = div;
-  do {
-    is(DOMUtils.hasPseudoClassLock(node, pseudo), true,
-       "pseudo-class lock has been applied");
-    node = node.parentNode;
-  } while (node.parentNode)
-
-  // infobar selector contains pseudo-class
-  let pseudoClassesBox = document.getElementById("highlighter-nodeinfobar-pseudo-classes");
-  is(pseudoClassesBox.textContent, pseudo, "pseudo-class in infobar selector");
-  
-  // ruleview contains pseudo-class rule
-  is(ruleView().element.children.length, 3,
-     "rule view is showing 3 rules for pseudo-class locked div");
-     
-  is(ruleView().element.children[1]._ruleEditor.rule.selectorText,
-     "div:hover", "rule view is showing " + pseudo + " rule");
-}
-
-function testRemoved()
-{
-  // lock removed from node and ancestors  
-  let node = div;
-  do {
-    is(DOMUtils.hasPseudoClassLock(node, pseudo), false,
-       "pseudo-class lock has been removed");
-    node = node.parentNode;
-  } while (node.parentNode)
-}
-
-function testRemovedFromUI()
-{
-  // infobar selector doesn't contain pseudo-class
-  let pseudoClassesBox = document.getElementById("highlighter-nodeinfobar-pseudo-classes");
-  is(pseudoClassesBox.textContent, "", "pseudo-class removed from infobar selector");    
-
-  // ruleview no longer contains pseudo-class rule
-  is(ruleView().element.children.length, 2,
-     "rule view is showing 2 rules after removing lock");    
-}
-
-function testInspectorClosed()
-{
-  Services.obs.removeObserver(testInspectorClosed,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED);
-
-  testRemoved();
-
-  finishUp();  
-}
-
-function finishUp()
-{
-  doc = div = null;
-  gBrowser.removeCurrentTab();
-  finish();
-}
diff --git a/browser/devtools/highlighter/test/browser_inspector_ruleviewstore.js b/browser/devtools/highlighter/test/browser_inspector_ruleviewstore.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_ruleviewstore.js
+++ /dev/null
@@ -1,105 +0,0 @@
-/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-/**
- * Tests that properties disabled in the rule view survive a tab switch.
- */
-
-let div;
-let tab1;
-
-function waitForRuleView(aCallback)
-{
-  InspectorUI.currentInspector.once("sidebaractivated-ruleview", aCallback);
-}
-
-function inspectorTabOpen1()
-{
-  Services.obs.addObserver(inspectorUIOpen1,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-  InspectorUI.openInspectorUI();
-}
-
-function inspectorUIOpen1()
-{
-  Services.obs.removeObserver(inspectorUIOpen1,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-
-  // Highlight a node.
-  div = content.document.getElementsByTagName("div")[0];
-  InspectorUI.inspectNode(div);
-  InspectorUI.stopInspecting();
-
-  // Open the rule view sidebar.
-  waitForRuleView(ruleViewOpened1);
-  InspectorUI.sidebar.show();
-  InspectorUI.sidebar.activatePanel("ruleview");
-}
-
-function ruleViewOpened1()
-{
-  let prop = ruleView()._elementStyle.rules[0].textProps[0];
-  is(prop.name, "background-color", "First prop is the background color prop.");
-  prop.setEnabled(false);
-
-  // Open second tab and switch to it
-  gBrowser.selectedTab = gBrowser.addTab();
-
-  gBrowser.selectedBrowser.addEventListener("load", function(evt) {
-    gBrowser.selectedBrowser.removeEventListener(evt.type, arguments.callee,
-                                                 true);
-    waitForFocus(inspectorTabOpen2, content);
-  }, true);
-  content.location = "data:text/html,<p>tab 2: the inspector should close now";
-}
-
-function inspectorTabOpen2()
-{
-  // Switch back to tab 1.
-  executeSoon(function() {
-    Services.obs.addObserver(inspectorFocusTab1,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-    gBrowser.removeCurrentTab();
-    gBrowser.selectedTab = tab1;
-  });
-}
-
-function inspectorFocusTab1()
-{
-  Services.obs.removeObserver(inspectorFocusTab1,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-
-  // Now wait for the rule view to load again...
-  waitForRuleView(ruleViewOpened2);
-}
-
-function ruleViewOpened2()
-{
-  let prop = ruleView()._elementStyle.rules[0].textProps[0];
-  is(prop.name, "background-color", "First prop is the background color prop.");
-  ok(!prop.enabled, "First prop should be disabled.");
-
-  InspectorUI.closeInspectorUI();
-  gBrowser.removeCurrentTab();
-  finish();
-}
-
-function test()
-{
-  waitForExplicitFinish();
-
-  tab1 = gBrowser.addTab();
-  gBrowser.selectedTab = tab1;
-  gBrowser.selectedBrowser.addEventListener("load", function(evt) {
-    gBrowser.selectedBrowser.removeEventListener(evt.type, arguments.callee,
-      true);
-    waitForFocus(inspectorTabOpen1, content);
-  }, true);
-
-  content.location = "data:text/html,<p>tab switching tests for inspector" +
-    '<div style="background-color: green;">tab 1</div>';
-}
-
diff --git a/browser/devtools/highlighter/test/browser_inspector_scrolling.js b/browser/devtools/highlighter/test/browser_inspector_scrolling.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_scrolling.js
+++ /dev/null
@@ -1,83 +0,0 @@
-/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-let doc;
-let div;
-let iframe;
-
-function createDocument()
-{
-  doc.title = "Inspector scrolling Tests";
-
-  iframe = doc.createElement("iframe");
-
-  iframe.addEventListener("load", function () {
-    iframe.removeEventListener("load", arguments.callee, false);
-
-    div = iframe.contentDocument.createElement("div");
-    div.textContent = "big div";
-    div.setAttribute("style", "height:500px; width:500px; border:1px solid gray;");
-    iframe.contentDocument.body.appendChild(div);
-    toggleInspector();
-  }, false);
-
-  iframe.src = "data:text/html,foo bar";
-  doc.body.appendChild(iframe);
-}
-
-function toggleInspector()
-{
-  Services.obs.addObserver(inspectNode, InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-  InspectorUI.toggleInspectorUI();
-}
-
-function inspectNode()
-{
-  Services.obs.removeObserver(inspectNode,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-
-  InspectorUI.highlighter.addListener("nodeselected", performScrollingTest);
-
-  executeSoon(function() {
-    InspectorUI.inspectNode(div);
-  });
-}
-
-function performScrollingTest()
-{
-  InspectorUI.highlighter.removeListener("nodeselected", performScrollingTest);
-
-  executeSoon(function() {
-    EventUtils.synthesizeWheel(div, 10, 10,
-      { deltaY: 50.0, deltaMode: WheelEvent.DOM_DELTA_PIXEL },
-      iframe.contentWindow);
-  });
-
-  gBrowser.selectedBrowser.addEventListener("scroll", function() {
-    gBrowser.selectedBrowser.removeEventListener("scroll", arguments.callee,
-      false);
-
-    is(iframe.contentDocument.body.scrollTop, 50, "inspected iframe scrolled");
-
-    div = iframe = doc = null;
-    InspectorUI.closeInspectorUI();
-    gBrowser.removeCurrentTab();
-    finish();
-  }, false);
-}
-
-function test()
-{
-  waitForExplicitFinish();
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function() {
-    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
-    doc = content.document;
-    waitForFocus(createDocument, content);
-  }, true);
-
-  content.location = "data:text/html,mouse scrolling test for inspector";
-}
diff --git a/browser/devtools/highlighter/test/browser_inspector_sidebarstate.js b/browser/devtools/highlighter/test/browser_inspector_sidebarstate.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_sidebarstate.js
+++ /dev/null
@@ -1,73 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-let doc;
-
-function createDocument()
-{
-  doc.body.innerHTML = '<h1>Sidebar state test</h1>';
-  doc.title = "Sidebar State Test";
-
-  InspectorUI.openInspectorUI();
-
-  // Open the sidebar and wait for the default view (the rule view) to show.
-  InspectorUI.currentInspector.once("sidebaractivated-ruleview", inspectorRuleViewOpened);
-
-  InspectorUI.sidebar.show();
-  InspectorUI.sidebar.activatePanel("ruleview");
-}
-
-function inspectorRuleViewOpened()
-{
-  is(InspectorUI.sidebar.activePanel, "ruleview", "Rule View is selected by default");
-
-  // Select the computed view and turn off the inspector.
-  InspectorUI.sidebar.activatePanel("computedview");
-
-  Services.obs.addObserver(inspectorClosed,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED, false);
-  InspectorUI.closeInspectorUI();
-}
-
-function inspectorClosed()
-{
-  // Reopen the inspector, expect the computed view to be loaded.
-  Services.obs.removeObserver(inspectorClosed,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED);
-
-  Services.obs.addObserver(computedViewPopulated,
-    "StyleInspector-populated", false);
-
-  InspectorUI.openInspectorUI();
-}
-
-function computedViewPopulated()
-{
-  Services.obs.removeObserver(computedViewPopulated,
-    "StyleInspector-populated");
-  is(InspectorUI.sidebar.activePanel, "computedview", "Computed view is selected by default.");
-
-  finishTest();
-}
-
-
-function finishTest()
-{
-  InspectorUI.closeInspectorUI();
-  gBrowser.removeCurrentTab();
-  finish();
-}
-
-function test()
-{
-  waitForExplicitFinish();
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function() {
-    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
-    doc = content.document;
-    waitForFocus(createDocument, content);
-  }, true);
-
-  content.location = "data:text/html,basic tests for inspector";
-}
-
diff --git a/browser/devtools/highlighter/test/browser_inspector_tab_switch.js b/browser/devtools/highlighter/test/browser_inspector_tab_switch.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_tab_switch.js
+++ /dev/null
@@ -1,247 +0,0 @@
-/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-let div;
-let tab1;
-let tab2;
-let tab1window;
-
-function inspectorTabOpen1()
-{
-  ok(window.InspectorUI, "InspectorUI variable exists");
-  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
-  ok(InspectorUI.store.isEmpty(), "Inspector.store is empty");
-
-  Services.obs.addObserver(inspectorUIOpen1,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-  InspectorUI.openInspectorUI();
-}
-
-function inspectorUIOpen1()
-{
-  Services.obs.removeObserver(inspectorUIOpen1,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-
-  // Make sure the inspector is open.
-  ok(InspectorUI.inspecting, "Inspector is highlighting");
-  ok(!InspectorUI.currentInspector.markupOpen, "Inspector Tree Panel is not open");
-  ok(!InspectorUI.sidebar.visible, "Inspector Sidebar is not open");
-  ok(!InspectorUI.store.isEmpty(), "InspectorUI.store is not empty");
-  is(InspectorUI.store.length, 1, "Inspector.store.length = 1");
-
-  // Highlight a node.
-  div = content.document.getElementsByTagName("div")[0];
-  InspectorUI.inspectNode(div);
-  is(InspectorUI.selection, div, "selection matches the div element");
-
-  // Open the second tab.
-  tab2 = gBrowser.addTab();
-  gBrowser.selectedTab = tab2;
-
-  gBrowser.selectedBrowser.addEventListener("load", function(evt) {
-    gBrowser.selectedBrowser.removeEventListener(evt.type, arguments.callee,
-      true);
-    waitForFocus(inspectorTabOpen2, content);
-  }, true);
-
-  content.location = "data:text/html,<p>tab 2: the inspector should close now";
-}
-
-function inspectorTabOpen2()
-{
-  // Make sure the inspector is closed.
-  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
-  is(InspectorUI.store.length, 1, "Inspector.store.length = 1");
-
-  // Activate the inspector again.
-  executeSoon(function() {
-    Services.obs.addObserver(inspectorUIOpen2,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-    clearUserPrefs();
-    InspectorUI.openInspectorUI();
-  });
-}
-
-function inspectorUIOpen2()
-{
-  Services.obs.removeObserver(inspectorUIOpen2,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-
-  // Make sure the inspector is open.
-  ok(InspectorUI.inspecting, "Inspector is highlighting");
-  ok(!InspectorUI.currentInspector.markupOpen, "Inspector Tree Panel is not open");
-  is(InspectorUI.store.length, 2, "Inspector.store.length = 2");
-
-  // Disable highlighting.
-  InspectorUI.toggleInspection();
-  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
-
-
-  // Switch back to tab 1.
-  executeSoon(function() {
-    Services.obs.addObserver(inspectorFocusTab1,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-    gBrowser.selectedTab = tab1;
-  });
-}
-
-function inspectorFocusTab1()
-{
-  Services.obs.removeObserver(inspectorFocusTab1,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-
-  // Make sure the inspector is still open.
-  ok(InspectorUI.inspecting, "Inspector is highlighting");
-  ok(!InspectorUI.currentInspector.markupOpen, "Inspector Tree Panel is not open");
-  is(InspectorUI.store.length, 2, "Inspector.store.length = 2");
-  is(InspectorUI.selection, div, "selection matches the div element");
-
-  InspectorUI.currentInspector.once("markuploaded", inspectorOpenTreePanelTab1);
-  InspectorUI.toggleHTMLPanel();
-}
-
-function inspectorOpenTreePanelTab1()
-{
-  ok(InspectorUI.inspecting, "Inspector is highlighting");
-  ok(InspectorUI.currentInspector.markupOpen, "Inspector Tree Panel is open");
-  is(InspectorUI.store.length, 2, "Inspector.store.length = 2");
-  is(InspectorUI.selection, div, "selection matches the div element");
-
-  InspectorUI.currentInspector.once("sidebaractivated-computedview",
-    inspectorSidebarStyleView1);
-
-  executeSoon(function() {
-    InspectorUI.sidebar.show();
-    InspectorUI.sidebar.activatePanel("computedview");
-  });
-}
-
-function inspectorSidebarStyleView1()
-{
-  ok(InspectorUI.sidebar.visible, "Inspector Sidebar is open");
-  ok(computedView(), "Inspector Has a computed view Instance");
-
-  InspectorUI.sidebar._toolObjects().forEach(function (aTool) {
-    let btn = aTool.button;
-    is(btn.hasAttribute("checked"),
-      (aTool.id == "computedview"),
-      "Button " + btn.label + " has correct checked attribute");
-  });
-
-  // Switch back to tab 2.
-  Services.obs.addObserver(inspectorFocusTab2,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-  gBrowser.selectedTab = tab2;
-}
-
-function inspectorFocusTab2()
-{
-  Services.obs.removeObserver(inspectorFocusTab2,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-
-  // Make sure the inspector is still open.
-  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
-  ok(!InspectorUI.currentInspector.markupOpen, "Inspector Tree Panel is not open");
-  ok(!InspectorUI.sidebar.visible, "Inspector Sidebar is not open");
-  is(InspectorUI.store.length, 2, "Inspector.store.length is 2");
-  isnot(InspectorUI.selection, div, "selection does not match the div element");
-
-
-  executeSoon(function() {
-    // Make sure keybindings still work
-    synthesizeKeyFromKeyTag("key_inspect");
-
-    ok(InspectorUI.inspecting, "Inspector is highlighting");
-    InspectorUI.toggleInspection();
-
-    // Switch back to tab 1.
-    Services.obs.addObserver(inspectorSecondFocusTab1,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-    gBrowser.selectedTab = tab1;
-  });
-}
-
-function inspectorSecondFocusTab1()
-{
-  Services.obs.removeObserver(inspectorSecondFocusTab1,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
-  InspectorUI.currentInspector.once("sidebaractivated-computedview",
-    inspectorSecondFocusTabSidebarLoaded);
-}
-
-function inspectorSecondFocusTabSidebarLoaded()
-{
-  ok(InspectorUI.inspecting, "Inspector is highlighting");
-  ok(InspectorUI.currentInspector.markupOpen, "Inspector Tree Panel is open");
-  is(InspectorUI.store.length, 2, "Inspector.store.length = 2");
-  is(InspectorUI.selection, div, "selection matches the div element");
-
-  ok(InspectorUI.sidebar.visible, "Inspector Sidebar is open");
-  ok(computedView(), "Inspector Has a Style Panel Instance");
-  InspectorUI.sidebar._toolObjects().forEach(function(aTool) {
-    let btn = aTool.button;
-    is(btn.hasAttribute("checked"),
-      (aTool.id == "computedview"),
-      "Button " + btn.label + " has correct checked attribute");
-  });
-
-  // Switch back to tab 2.
-  Services.obs.addObserver(inspectorSecondFocusTab2,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-  gBrowser.selectedTab = tab2;
-}
-
-function inspectorSecondFocusTab2()
-{
-  Services.obs.removeObserver(inspectorSecondFocusTab2,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
-
-  // Make sure the inspector is still open.
-  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
-  ok(!InspectorUI.currentInspector.markupOpen, "Inspector Tree Panel is not open");
-  ok(!InspectorUI.isSidebarOpen, "Inspector Sidebar is not open");
-
-  is(InspectorUI.store.length, 2, "Inspector.store.length is 2");
-  isnot(InspectorUI.selection, div, "selection does not match the div element");
-
-  // Remove tab 1.
-  tab1window = gBrowser.getBrowserForTab(tab1).contentWindow;
-  tab1window.addEventListener("pagehide", inspectorTabUnload1, false);
-  gBrowser.removeTab(tab1);
-}
-
-function inspectorTabUnload1(evt)
-{
-  tab1window.removeEventListener(evt.type, arguments.callee, false);
-  tab1window = tab1 = tab2 = div = null;
-
-  // Make sure the Inspector is still open and that the state is correct.
-  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
-  ok(!InspectorUI.currentInspector.markupOpen, "Inspector Tree Panel is not open");
-  is(InspectorUI.store.length, 1, "Inspector.store.length = 1");
-
-  InspectorUI.closeInspectorUI();
-  gBrowser.removeCurrentTab();
-  finish();
-}
-
-function test()
-{
-  waitForExplicitFinish();
-  ignoreAllUncaughtExceptions();
-
-  tab1 = gBrowser.addTab();
-  gBrowser.selectedTab = tab1;
-  gBrowser.selectedBrowser.addEventListener("load", function(evt) {
-    gBrowser.selectedBrowser.removeEventListener(evt.type, arguments.callee,
-      true);
-    waitForFocus(inspectorTabOpen1, content);
-  }, true);
-
-  content.location = "data:text/html,<p>tab switching tests for inspector" +
-    "<div>tab 1</div>";
-}
-
diff --git a/browser/devtools/highlighter/test/browser_inspector_treeSelection.js b/browser/devtools/highlighter/test/browser_inspector_treeSelection.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_treeSelection.js
+++ /dev/null
@@ -1,84 +0,0 @@
-/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-let doc;
-let h1;
-
-function createDocument()
-{
-  let div = doc.createElement("div");
-  let h1 = doc.createElement("h1");
-  let p1 = doc.createElement("p");
-  let p2 = doc.createElement("p");
-  doc.title = "Inspector Tree Selection Test";
-  h1.textContent = "Inspector Tree Selection Test";
-  p1.textContent = "This is some example text";
-  p2.textContent = "Lorem ipsum dolor sit amet, consectetur adipisicing " +
-    "elit, sed do eiusmod tempor incididunt ut labore et dolore magna " +
-    "aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco " +
-    "laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure " +
-    "dolor in reprehenderit in voluptate velit esse cillum dolore eu " +
-    "fugiat nulla pariatur. Excepteur sint occaecat cupidatat non " +
-    "proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
-  div.appendChild(h1);
-  div.appendChild(p1);
-  div.appendChild(p2);
-  doc.body.appendChild(div);
-  setupSelectionTests();
-}
-
-function setupSelectionTests()
-{
-  h1 = doc.querySelectorAll("h1")[0];
-  ok(h1, "we have the header node");
-  Services.obs.addObserver(runSelectionTests,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-  InspectorUI.openInspectorUI();
-}
-
-function runSelectionTests()
-{
-  Services.obs.removeObserver(runSelectionTests,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-
-  executeSoon(function() {
-    InspectorUI.highlighter.addListener("nodeselected", performTestComparisons);
-    InspectorUI.inspectNode(h1);
-  });
-}
-
-function performTestComparisons(evt)
-{
-  InspectorUI.highlighter.removeListener("nodeselected", performTestComparisons);
-
-  is(h1, InspectorUI.selection, "selection matches node");
-  ok(isHighlighting(), "highlighter is highlighting");
-  is(getHighlitNode(), h1, "highlighter highlighting correct node");
-
-  finishUp();
-}
-
-function finishUp() {
-  InspectorUI.closeInspectorUI();
-  doc = h1 = null;
-  gBrowser.removeCurrentTab();
-  finish();
-}
-
-function test()
-{
-  waitForExplicitFinish();
-  ignoreAllUncaughtExceptions();
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function() {
-    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
-    doc = content.document;
-    waitForFocus(createDocument, content);
-  }, true);
-
-  content.location = "data:text/html,basic tests for inspector";
-}
-
diff --git a/browser/devtools/highlighter/test/browser_inspector_tree_height.js b/browser/devtools/highlighter/test/browser_inspector_tree_height.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/browser_inspector_tree_height.js
+++ /dev/null
@@ -1,111 +0,0 @@
-/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-let doc;
-let salutation;
-let closing;
-
-const NEWHEIGHT = 226;
-
-function createDocument()
-{
-  doc.body.innerHTML = '<div id="first" style="{ margin: 10em; ' +
-    'font-size: 14pt; font-family: helvetica, sans-serif; color: #AAA}">\n' +
-    '<h1>Some header text</h1>\n' +
-    '<p id="salutation" style="{font-size: 12pt}">hi.</p>\n' +
-    '<p id="body" style="{font-size: 12pt}">I am a test-case. This text exists ' +
-    'solely to provide some things to test the inspector initialization.</p>\n' +
-    'If you are reading this, you should go do something else instead. Maybe ' +
-    'read a book. Or better yet, write some test-cases for another bit of code. ' +
-    '<span style="{font-style: italic}">Maybe more inspector test-cases!</span></p>\n' +
-    '<p id="closing">end transmission</p>\n' +
-    '</div>';
-  doc.title = "Inspector Initialization Test";
-  startInspectorTests();
-}
-
-function startInspectorTests()
-{
-  ok(InspectorUI, "InspectorUI variable exists");
-  Services.obs.addObserver(runInspectorTests,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-  InspectorUI.toggleInspectorUI();
-}
-
-function runInspectorTests()
-{
-  Services.obs.removeObserver(runInspectorTests,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
-
-  if (InspectorUI.treePanelEnabled) {
-    Services.obs.addObserver(treePanelTests,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.TREEPANELREADY, false);
-
-    InspectorUI.stopInspecting();
-
-    InspectorUI.treePanel.open();
-  } else
-    finishInspectorTests();
-}
-
-function treePanelTests()
-{
-  Services.obs.removeObserver(treePanelTests,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.TREEPANELREADY);
-  Services.obs.addObserver(treePanelTests2,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.TREEPANELREADY, false);
-
-  ok(InspectorUI.treePanel.isOpen(), "Inspector Tree Panel is open");
-
-  let height = Services.prefs.getIntPref("devtools.inspector.htmlHeight");
-
-  is(InspectorUI.treePanel.container.height, height,
-     "Container height is " + height);
-
-  InspectorUI.treePanel.container.height = NEWHEIGHT;
-
-  executeSoon(function() {
-    InspectorUI.treePanel.close();
-    InspectorUI.treePanel.open();
-  });
-}
-
-function treePanelTests2()
-{
-  Services.obs.removeObserver(treePanelTests2,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.TREEPANELREADY);
-
-  ok(InspectorUI.treePanel.isOpen(), "Inspector Tree Panel is open");
-
-  let height = Services.prefs.getIntPref("devtools.inspector.htmlHeight");
-
-  is(InspectorUI.treePanel.container.height, NEWHEIGHT,
-     "Container height is now " + height);
-
-  InspectorUI.treePanel.close();
-  executeSoon(function() {
-    finishInspectorTests()
-  });
-}
-
-function finishInspectorTests()
-{
-  gBrowser.removeCurrentTab();
-  finish();
-}
-
-function test()
-{
-  waitForExplicitFinish();
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function() {
-    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
-    doc = content.document;
-    waitForFocus(createDocument, content);
-  }, true);
-
-  content.location = "data:text/html,basic tests for inspector";
-}
-
diff --git a/browser/devtools/highlighter/test/head.js b/browser/devtools/highlighter/test/head.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/head.js
+++ /dev/null
@@ -1,100 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-const Cu = Components.utils;
-let tempScope = {};
-Cu.import("resource:///modules/devtools/LayoutHelpers.jsm", tempScope);
-let LayoutHelpers = tempScope.LayoutHelpers;
-
-// Import the GCLI test helper
-let testDir = gTestPath.substr(0, gTestPath.lastIndexOf("/"));
-Services.scriptloader.loadSubScript(testDir + "/helpers.js", this);
-
-// Clear preferences that may be set during the course of tests.
-function clearUserPrefs()
-{
-  Services.prefs.clearUserPref("devtools.inspector.htmlPanelOpen");
-  Services.prefs.clearUserPref("devtools.inspector.sidebarOpen");
-  Services.prefs.clearUserPref("devtools.inspector.activeSidebar");
-}
-
-registerCleanupFunction(clearUserPrefs);
-
-function isHighlighting()
-{
-  let outline = InspectorUI.highlighter.outline;
-  return !(outline.getAttribute("hidden") == "true");
-}
-
-function getHighlitNode()
-{
-  let h = InspectorUI.highlighter;
-  if (!isHighlighting() || !h._contentRect)
-    return null;
-
-  let a = {
-    x: h._contentRect.left,
-    y: h._contentRect.top
-  };
-
-  let b = {
-    x: a.x + h._contentRect.width,
-    y: a.y + h._contentRect.height
-  };
-
-  // Get midpoint of diagonal line.
-  let midpoint = midPoint(a, b);
-
-  return LayoutHelpers.getElementFromPoint(h.win.document, midpoint.x,
-    midpoint.y);
-}
-
-
-function midPoint(aPointA, aPointB)
-{
-  let pointC = { };
-  pointC.x = (aPointB.x - aPointA.x) / 2 + aPointA.x;
-  pointC.y = (aPointB.y - aPointA.y) / 2 + aPointA.y;
-  return pointC;
-}
-
-function computedView()
-{
-  return InspectorUI.sidebar._toolContext("computedview");
-}
-
-function computedViewTree()
-{
-  return computedView().view;
-}
-
-function ruleView()
-{
-  return InspectorUI.sidebar._toolContext("ruleview").view;
-}
-function synthesizeKeyFromKeyTag(aKeyId) {
-  let key = document.getElementById(aKeyId);
-  isnot(key, null, "Successfully retrieved the <key> node");
-
-  let modifiersAttr = key.getAttribute("modifiers");
-
-  let name = null;
-
-  if (key.getAttribute("keycode"))
-    name = key.getAttribute("keycode");
-  else if (key.getAttribute("key"))
-    name = key.getAttribute("key");
-
-  isnot(name, null, "Successfully retrieved keycode/key");
-
-  let modifiers = {
-    shiftKey: modifiersAttr.match("shift"),
-    ctrlKey: modifiersAttr.match("ctrl"),
-    altKey: modifiersAttr.match("alt"),
-    metaKey: modifiersAttr.match("meta"),
-    accelKey: modifiersAttr.match("accel")
-  }
-
-  EventUtils.synthesizeKey(name, modifiers);
-}
diff --git a/browser/devtools/highlighter/test/helpers.js b/browser/devtools/highlighter/test/helpers.js
deleted file mode 100644
--- a/browser/devtools/highlighter/test/helpers.js
+++ /dev/null
@@ -1,881 +0,0 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-
-/*
- *
- *  DO NOT ALTER THIS FILE WITHOUT KEEPING IT IN SYNC WITH THE OTHER COPIES
- *  OF THIS FILE.
- *
- *  UNAUTHORIZED ALTERATION WILL RESULT IN THE ALTEREE BEING SENT TO SIT ON
- *  THE NAUGHTY STEP.
- *
- *
- *
- *
- *
- *
- *
- *
- *
- *
- *
- *
- *
- *
- *
- *
- *  FOR A LONG TIME.
- *
- */
-
-
-/*
- * Use as a JSM
- * ------------
- * helpers._createDebugCheck() and maybe other functions in this file can be
- * useful at runtime, so it is possible to use helpers.js as a JSM.
- * Copy commandline/test/helpers.js to shared/helpers.jsm, and then add to
- * DeveloperToolbar.jsm the following:
- *
- * XPCOMUtils.defineLazyModuleGetter(this, "helpers",
- *                                 "resource:///modules/devtools/helpers.jsm");
- *
- * At the bottom of DeveloperToolbar.prototype._onload add this:
- *
- * var options = { display: this.display };
- * this._input.onkeypress = function(ev) {
- *   helpers.setup(options);
- *   dump(helpers._createDebugCheck() + '\n\n');
- * };
- *
- * Now GCLI will emit output on every keypress that both explains the state
- * of GCLI and can be run as a test case.
- */
-
-this.EXPORTED_SYMBOLS = [ 'helpers' ];
-
-var test = { };
-
-/**
- * Various functions for testing DeveloperToolbar.
- * Parts of this code exist in:
- * - browser/devtools/commandline/test/head.js
- * - browser/devtools/shared/test/head.js
- */
-let DeveloperToolbarTest = { };
-
-/**
- * Paranoid DeveloperToolbar.show();
- */
-DeveloperToolbarTest.show = function DTT_show(aCallback) {
-  if (DeveloperToolbar.visible) {
-    ok(false, "DeveloperToolbar.visible at start of openDeveloperToolbar");
-  }
-  else {
-    DeveloperToolbar.show(true, aCallback);
-  }
-};
-
-/**
- * Paranoid DeveloperToolbar.hide();
- */
-DeveloperToolbarTest.hide = function DTT_hide() {
-  if (!DeveloperToolbar.visible) {
-    ok(false, "!DeveloperToolbar.visible at start of closeDeveloperToolbar");
-  }
-  else {
-    DeveloperToolbar.display.inputter.setInput("");
-    DeveloperToolbar.hide();
-  }
-};
-
-/**
- * check() is the new status. Similar API except that it doesn't attempt to
- * alter the display/requisition at all, and it makes extra checks.
- * Test inputs
- *   typed: The text to type at the input
- * Available checks:
- *   input: The text displayed in the input field
- *   cursor: The position of the start of the cursor
- *   status: One of "VALID", "ERROR", "INCOMPLETE"
- *   emptyParameters: Array of parameters still to type. e.g. [ "<message>" ]
- *   directTabText: Simple completion text
- *   arrowTabText: When the completion is not an extension (without arrow)
- *   markup: What state should the error markup be in. e.g. "VVVIIIEEE"
- *   args: Maps of checks to make against the arguments:
- *     value: i.e. assignment.value (which ignores defaultValue)
- *     type: Argument/BlankArgument/MergedArgument/etc i.e. what's assigned
- *           Care should be taken with this since it's something of an
- *           implementation detail
- *     arg: The toString value of the argument
- *     status: i.e. assignment.getStatus
- *     message: i.e. assignment.getMessage
- *     name: For commands - checks assignment.value.name
- */
-DeveloperToolbarTest.checkInputStatus = function DTT_checkInputStatus(checks) {
-  if (!checks.emptyParameters) {
-    checks.emptyParameters = [];
-  }
-  if (!checks.directTabText) {
-    checks.directTabText = '';
-  }
-  if (!checks.arrowTabText) {
-    checks.arrowTabText = '';
-  }
-
-  var display = DeveloperToolbar.display;
-
-  if (checks.typed) {
-    info('Starting tests for ' + checks.typed);
-    display.inputter.setInput(checks.typed);
-  }
-  else {
-    ok(false, "Missing typed for " + JSON.stringify(checks));
-    return;
-  }
-
-  if (checks.cursor) {
-    display.inputter.setCursor(checks.cursor)
-  }
-
-  var cursor = checks.cursor ? checks.cursor.start : checks.typed.length;
-
-  var requisition = display.requisition;
-  var completer = display.completer;
-  var actual = completer._getCompleterTemplateData();
-
-  /*
-  if (checks.input) {
-    is(display.inputter.element.value,
-            checks.input,
-            'input');
-  }
-
-  if (checks.cursor) {
-    is(display.inputter.element.selectionStart,
-            checks.cursor,
-            'cursor');
-  }
-  */
-
-  if (checks.status) {
-    is(requisition.getStatus().toString(),
-            checks.status,
-            'status');
-  }
-
-  if (checks.markup) {
-    var statusMarkup = requisition.getInputStatusMarkup(cursor);
-    var actualMarkup = statusMarkup.map(function(s) {
-      return Array(s.string.length + 1).join(s.status.toString()[0]);
-    }).join('');
-
-    is(checks.markup,
-            actualMarkup,
-            'markup');
-  }
-
-  if (checks.emptyParameters) {
-    var actualParams = actual.emptyParameters;
-    is(actualParams.length,
-            checks.emptyParameters.length,
-            'emptyParameters.length');
-
-    if (actualParams.length === checks.emptyParameters.length) {
-      for (var i = 0; i < actualParams.length; i++) {
-        is(actualParams[i].replace(/\u00a0/g, ' '),
-                checks.emptyParameters[i],
-                'emptyParameters[' + i + ']');
-      }
-    }
-    else {
-      info('Expected: [ \"' + actualParams.join('", "') + '" ]');
-    }
-  }
-
-  if (checks.directTabText) {
-    is(actual.directTabText,
-            checks.directTabText,
-            'directTabText');
-  }
-
-  if (checks.arrowTabText) {
-    is(actual.arrowTabText,
-            ' \u00a0\u21E5 ' + checks.arrowTabText,
-            'arrowTabText');
-  }
-
-  if (checks.args) {
-    Object.keys(checks.args).forEach(function(paramName) {
-      var check = checks.args[paramName];
-
-      var assignment;
-      if (paramName === 'command') {
-        assignment = requisition.commandAssignment;
-      }
-      else {
-        assignment = requisition.getAssignment(paramName);
-      }
-
-      if (assignment == null) {
-        ok(false, 'Unknown parameter: ' + paramName);
-        return;
-      }
-
-      if (check.value) {
-        is(assignment.value,
-                check.value,
-                'checkStatus value for ' + paramName);
-      }
-
-      if (check.name) {
-        is(assignment.value.name,
-                check.name,
-                'checkStatus name for ' + paramName);
-      }
-
-      if (check.type) {
-        is(assignment.arg.type,
-                check.type,
-                'checkStatus type for ' + paramName);
-      }
-
-      if (check.arg) {
-        is(assignment.arg.toString(),
-                check.arg,
-                'checkStatus arg for ' + paramName);
-      }
-
-      if (check.status) {
-        is(assignment.getStatus().toString(),
-                check.status,
-                'checkStatus status for ' + paramName);
-      }
-
-      if (check.message) {
-        is(assignment.getMessage(),
-                check.message,
-                'checkStatus message for ' + paramName);
-      }
-    });
-  }
-};
-
-/**
- * Execute a command:
- *
- * DeveloperToolbarTest.exec({
- *   // Test inputs
- *   typed: "echo hi",        // Optional, uses existing if undefined
- *
- *   // Thing to check
- *   args: { message: "hi" }, // Check that the args were understood properly
- *   outputMatch: /^hi$/,     // RegExp to test against textContent of output
- *                            // (can also be array of RegExps)
- *   blankOutput: true,       // Special checks when there is no output
- * });
- */
-DeveloperToolbarTest.exec = function DTT_exec(tests) {
-  tests = tests || {};
-
-  if (tests.typed) {
-    DeveloperToolbar.display.inputter.setInput(tests.typed);
-  }
-
-  let typed = DeveloperToolbar.display.inputter.getInputState().typed;
-  let output = DeveloperToolbar.display.requisition.exec();
-
-  is(typed, output.typed, 'output.command for: ' + typed);
-
-  if (tests.completed !== false) {
-    ok(output.completed, 'output.completed false for: ' + typed);
-  }
-  else {
-    // It is actually an error if we say something is async and it turns
-    // out not to be? For now we're saying 'no'
-    // ok(!output.completed, 'output.completed true for: ' + typed);
-  }
-
-  if (tests.args != null) {
-    is(Object.keys(tests.args).length, Object.keys(output.args).length,
-       'arg count for ' + typed);
-
-    Object.keys(output.args).forEach(function(arg) {
-      let expectedArg = tests.args[arg];
-      let actualArg = output.args[arg];
-
-      if (typeof expectedArg === 'function') {
-        ok(expectedArg(actualArg), 'failed test func. ' + typed + '/' + arg);
-      }
-      else {
-        if (Array.isArray(expectedArg)) {
-          if (!Array.isArray(actualArg)) {
-            ok(false, 'actual is not an array. ' + typed + '/' + arg);
-            return;
-          }
-
-          is(expectedArg.length, actualArg.length,
-                  'array length: ' + typed + '/' + arg);
-          for (let i = 0; i < expectedArg.length; i++) {
-            is(expectedArg[i], actualArg[i],
-                    'member: "' + typed + '/' + arg + '/' + i);
-          }
-        }
-        else {
-          is(expectedArg, actualArg, 'typed: "' + typed + '" arg: ' + arg);
-        }
-      }
-    });
-  }
-
-  let displayed = DeveloperToolbar.outputPanel._div.textContent;
-
-  if (tests.outputMatch) {
-    var doTest = function(match, against) {
-      if (!match.test(against)) {
-        ok(false, "html output for " + typed + " against " + match.source +
-                " (textContent sent to info)");
-        info("Actual textContent");
-        info(against);
-      }
-    }
-    if (Array.isArray(tests.outputMatch)) {
-      tests.outputMatch.forEach(function(match) {
-        doTest(match, displayed);
-      });
-    }
-    else {
-      doTest(tests.outputMatch, displayed);
-    }
-  }
-
-  if (tests.blankOutput != null) {
-    if (!/^$/.test(displayed)) {
-      ok(false, "html output for " + typed + " (textContent sent to info)");
-      info("Actual textContent");
-      info(displayed);
-    }
-  }
-};
-
-/**
- * Quick wrapper around the things you need to do to run DeveloperToolbar
- * command tests:
- * - Set the pref 'devtools.toolbar.enabled' to true
- * - Add a tab pointing at |uri|
- * - Open the DeveloperToolbar
- * - Register a cleanup function to undo the above
- * - Run the tests
- *
- * @param uri The uri of a page to load. Can be 'about:blank' or 'data:...'
- * @param target Either a function or array of functions containing the tests
- * to run. If an array of test function is passed then we will clear up after
- * the tests have completed. If a single test function is passed then this
- * function should arrange for 'finish()' to be called on completion.
- */
-DeveloperToolbarTest.test = function DTT_test(uri, target) {
-  let menuItem = document.getElementById("menu_devToolbar");
-  let command = document.getElementById("Tools:DevToolbar");
-  let appMenuItem = document.getElementById("appmenu_devToolbar");
-
-  registerCleanupFunction(function() {
-    DeveloperToolbarTest.hide();
-
-    // a.k.a Services.prefs.clearUserPref("devtools.toolbar.enabled");
-    if (menuItem) {
-      menuItem.hidden = true;
-    }
-    if (command) {
-      command.setAttribute("disabled", "true");
-    }
-    if (appMenuItem) {
-      appMenuItem.hidden = true;
-    }
-
-    // leakHunt({ DeveloperToolbar: DeveloperToolbar });
-  });
-
-  // a.k.a: Services.prefs.setBoolPref("devtools.toolbar.enabled", true);
-  if (menuItem) {
-    menuItem.hidden = false;
-  }
-  if (command) {
-    command.removeAttribute("disabled");
-  }
-  if (appMenuItem) {
-    appMenuItem.hidden = false;
-  }
-
-  waitForExplicitFinish();
-
-  gBrowser.selectedTab = gBrowser.addTab();
-  content.location = uri;
-
-  let tab = gBrowser.selectedTab;
-  let browser = gBrowser.getBrowserForTab(tab);
-
-  var onTabLoad = function() {
-    browser.removeEventListener("load", onTabLoad, true);
-
-    DeveloperToolbarTest.show(function() {
-      if (helpers) {
-        helpers.setup({ display: DeveloperToolbar.display });
-      }
-
-      if (Array.isArray(target)) {
-        try {
-          target.forEach(function(func) {
-            func(browser, tab);
-          })
-        }
-        finally {
-          DeveloperToolbarTest._checkFinish();
-        }
-      }
-      else {
-        try {
-          target(browser, tab);
-        }
-        catch (ex) {
-          ok(false, "" + ex);
-          DeveloperToolbarTest._finish();
-          throw ex;
-        }
-      }
-    });
-  }
-
-  browser.addEventListener("load", onTabLoad, true);
-};
-
-DeveloperToolbarTest._outstanding = [];
-
-DeveloperToolbarTest._checkFinish = function() {
-  info('_checkFinish. ' + DeveloperToolbarTest._outstanding.length + ' outstanding');
-  if (DeveloperToolbarTest._outstanding.length == 0) {
-    DeveloperToolbarTest._finish();
-  }
-}
-
-DeveloperToolbarTest._finish = function() {
-  info('Finish');
-  DeveloperToolbarTest.closeAllTabs();
-  finish();
-}
-
-DeveloperToolbarTest.checkCalled = function(aFunc, aScope) {
-  var todo = function() {
-    var reply = aFunc.apply(aScope, arguments);
-    DeveloperToolbarTest._outstanding = DeveloperToolbarTest._outstanding.filter(function(aJob) {
-      return aJob != todo;
-    });
-    DeveloperToolbarTest._checkFinish();
-    return reply;
-  }
-  DeveloperToolbarTest._outstanding.push(todo);
-  return todo;
-};
-
-DeveloperToolbarTest.checkNotCalled = function(aMsg, aFunc, aScope) {
-  return function() {
-    ok(false, aMsg);
-    return aFunc.apply(aScope, arguments);
-  }
-};
-
-/**
- *
- */
-DeveloperToolbarTest.closeAllTabs = function() {
-  while (gBrowser.tabs.length > 1) {
-    gBrowser.removeCurrentTab();
-  }
-};
-
-///////////////////////////////////////////////////////////////////////////////
-
-this.helpers = {};
-
-helpers._display = undefined;
-
-helpers.setup = function(options) {
-  helpers._display = options.display;
-  if (typeof ok !== 'undefined') {
-    test.ok = ok;
-    test.is = is;
-    test.log = info;
-  }
-};
-
-helpers.shutdown = function(options) {
-  helpers._display = undefined;
-};
-
-/**
- * Various functions to return the actual state of the command line
- */
-helpers._actual = {
-  input: function() {
-    return helpers._display.inputter.element.value;
-  },
-
-  hints: function() {
-    var templateData = helpers._display.completer._getCompleterTemplateData();
-    var actualHints = templateData.directTabText +
-                      templateData.emptyParameters.join('') +
-                      templateData.arrowTabText;
-    return actualHints.replace(/\u00a0/g, ' ')
-                      .replace(/\u21E5/, '->')
-                      .replace(/ $/, '');
-  },
-
-  markup: function() {
-    var cursor = helpers._display.inputter.element.selectionStart;
-    var statusMarkup = helpers._display.requisition.getInputStatusMarkup(cursor);
-    return statusMarkup.map(function(s) {
-      return Array(s.string.length + 1).join(s.status.toString()[0]);
-    }).join('');
-  },
-
-  cursor: function() {
-    return helpers._display.inputter.element.selectionStart;
-  },
-
-  current: function() {
-    return helpers._display.requisition.getAssignmentAt(helpers._actual.cursor()).param.name;
-  },
-
-  status: function() {
-    return helpers._display.requisition.getStatus().toString();
-  },
-
-  outputState: function() {
-    var outputData = helpers._display.focusManager._shouldShowOutput();
-    return outputData.visible + ':' + outputData.reason;
-  },
-
-  tooltipState: function() {
-    var tooltipData = helpers._display.focusManager._shouldShowTooltip();
-    return tooltipData.visible + ':' + tooltipData.reason;
-  }
-};
-
-helpers._directToString = [ 'boolean', 'undefined', 'number' ];
-
-helpers._createDebugCheck = function() {
-  var requisition = helpers._display.requisition;
-  var command = requisition.commandAssignment.value;
-  var input = helpers._actual.input();
-  var padding = Array(input.length + 1).join(' ');
-
-  var output = '';
-  output += 'helpers.setInput(\'' + input + '\');\n';
-  output += 'helpers.check({\n';
-  output += '  input:  \'' + input + '\',\n';
-  output += '  hints:  ' + padding + '\'' + helpers._actual.hints() + '\',\n';
-  output += '  markup: \'' + helpers._actual.markup() + '\',\n';
-  output += '  cursor: ' + helpers._actual.cursor() + ',\n';
-  output += '  current: \'' + helpers._actual.current() + '\',\n';
-  output += '  status: \'' + helpers._actual.status() + '\',\n';
-  output += '  outputState: \'' + helpers._actual.outputState() + '\',\n';
-
-  if (command) {
-    output += '  tooltipState: \'' + helpers._actual.tooltipState() + '\',\n';
-    output += '  args: {\n';
-    output += '    command: { name: \'' + command.name + '\' },\n';
-
-    requisition.getAssignments().forEach(function(assignment) {
-      output += '    ' + assignment.param.name + ': { ';
-
-      if (typeof assignment.value === 'string') {
-        output += 'value: \'' + assignment.value + '\', ';
-      }
-      else if (helpers._directToString.indexOf(typeof assignment.value) !== -1) {
-        output += 'value: ' + assignment.value + ', ';
-      }
-      else if (assignment.value === null) {
-        output += 'value: ' + assignment.value + ', ';
-      }
-      else {
-        output += '/*value:' + assignment.value + ',*/ ';
-      }
-
-      output += 'arg: \'' + assignment.arg + '\', ';
-      output += 'status: \'' + assignment.getStatus().toString() + '\', ';
-      output += 'message: \'' + assignment.getMessage() + '\'';
-      output += ' },\n';
-    });
-
-    output += '  }\n';
-  }
-  else {
-    output += '  tooltipState: \'' + helpers._actual.tooltipState() + '\'\n';
-  }
-  output += '});';
-
-  return output;
-};
-
-/**
- * We're splitting status into setup() which alters the state of the system
- * and check() which ensures that things are in the right place afterwards.
- */
-helpers.setInput = function(typed, cursor) {
-  helpers._display.inputter.setInput(typed);
-
-  if (cursor) {
-    helpers._display.inputter.setCursor({ start: cursor, end: cursor });
-  }
-
-  helpers._display.focusManager.onInputChange();
-
-  test.log('setInput("' + typed + '"' + (cursor == null ? '' : ', ' + cursor) + ')');
-};
-
-/**
- * Simulate focusing the input field
- */
-helpers.focusInput = function() {
-  helpers._display.inputter.focus();
-};
-
-/**
- * Simulate pressing TAB in the input field
- */
-helpers.pressTab = function() {
-  helpers.pressKey(9 /*KeyEvent.DOM_VK_TAB*/);
-};
-
-/**
- * Simulate pressing RETURN in the input field
- */
-helpers.pressReturn = function() {
-  helpers.pressKey(13 /*KeyEvent.DOM_VK_RETURN*/);
-};
-
-/**
- * Simulate pressing a key by keyCode in the input field
- */
-helpers.pressKey = function(keyCode) {
-  var fakeEvent = {
-    keyCode: keyCode,
-    preventDefault: function() { },
-    timeStamp: new Date().getTime()
-  };
-  helpers._display.inputter.onKeyDown(fakeEvent);
-  helpers._display.inputter.onKeyUp(fakeEvent);
-};
-
-/**
- * check() is the new status. Similar API except that it doesn't attempt to
- * alter the display/requisition at all, and it makes extra checks.
- * Available checks:
- *   input: The text displayed in the input field
- *   cursor: The position of the start of the cursor
- *   status: One of "VALID", "ERROR", "INCOMPLETE"
- *   hints: The hint text, i.e. a concatenation of the directTabText, the
- *     emptyParameters and the arrowTabText. The text as inserted into the UI
- *     will include NBSP and Unicode RARR characters, these should be
- *     represented using normal space and '->' for the arrow
- *   markup: What state should the error markup be in. e.g. "VVVIIIEEE"
- *   args: Maps of checks to make against the arguments:
- *     value: i.e. assignment.value (which ignores defaultValue)
- *     type: Argument/BlankArgument/MergedArgument/etc i.e. what's assigned
- *           Care should be taken with this since it's something of an
- *           implementation detail
- *     arg: The toString value of the argument
- *     status: i.e. assignment.getStatus
- *     message: i.e. assignment.getMessage
- *     name: For commands - checks assignment.value.name
- */
-helpers.check = function(checks) {
-  if ('input' in checks) {
-    test.is(helpers._actual.input(), checks.input, 'input');
-  }
-
-  if ('cursor' in checks) {
-    test.is(helpers._actual.cursor(), checks.cursor, 'cursor');
-  }
-
-  if ('current' in checks) {
-    test.is(helpers._actual.current(), checks.current, 'current');
-  }
-
-  if ('status' in checks) {
-    test.is(helpers._actual.status(), checks.status, 'status');
-  }
-
-  if ('markup' in checks) {
-    test.is(helpers._actual.markup(), checks.markup, 'markup');
-  }
-
-  if ('hints' in checks) {
-    test.is(helpers._actual.hints(), checks.hints, 'hints');
-  }
-
-  if ('tooltipState' in checks) {
-    test.is(helpers._actual.tooltipState(), checks.tooltipState, 'tooltipState');
-  }
-
-  if ('outputState' in checks) {
-    test.is(helpers._actual.outputState(), checks.outputState, 'outputState');
-  }
-
-  if (checks.args != null) {
-    var requisition = helpers._display.requisition;
-    Object.keys(checks.args).forEach(function(paramName) {
-      var check = checks.args[paramName];
-
-      var assignment;
-      if (paramName === 'command') {
-        assignment = requisition.commandAssignment;
-      }
-      else {
-        assignment = requisition.getAssignment(paramName);
-      }
-
-      if (assignment == null) {
-        test.ok(false, 'Unknown arg: ' + paramName);
-        return;
-      }
-
-      if ('value' in check) {
-        test.is(assignment.value,
-                check.value,
-                'arg.' + paramName + '.value');
-      }
-
-      if ('name' in check) {
-        test.is(assignment.value.name,
-                check.name,
-                'arg.' + paramName + '.name');
-      }
-
-      if ('type' in check) {
-        test.is(assignment.arg.type,
-                check.type,
-                'arg.' + paramName + '.type');
-      }
-
-      if ('arg' in check) {
-        test.is(assignment.arg.toString(),
-                check.arg,
-                'arg.' + paramName + '.arg');
-      }
-
-      if ('status' in check) {
-        test.is(assignment.getStatus().toString(),
-                check.status,
-                'arg.' + paramName + '.status');
-      }
-
-      if ('message' in check) {
-        test.is(assignment.getMessage(),
-                check.message,
-                'arg.' + paramName + '.message');
-      }
-    });
-  }
-};
-
-/**
- * Execute a command:
- *
- * helpers.exec({
- *   // Test inputs
- *   typed: "echo hi",        // Optional, uses existing if undefined
- *
- *   // Thing to check
- *   args: { message: "hi" }, // Check that the args were understood properly
- *   outputMatch: /^hi$/,     // Regex to test against textContent of output
- *   blankOutput: true,       // Special checks when there is no output
- * });
- */
-helpers.exec = function(tests) {
-  var requisition = helpers._display.requisition;
-  var inputter = helpers._display.inputter;
-
-  tests = tests || {};
-
-  if (tests.typed) {
-    inputter.setInput(tests.typed);
-  }
-
-  var typed = inputter.getInputState().typed;
-  var output = requisition.exec({ hidden: true });
-
-  test.is(typed, output.typed, 'output.command for: ' + typed);
-
-  if (tests.completed !== false) {
-    test.ok(output.completed, 'output.completed false for: ' + typed);
-  }
-  else {
-    // It is actually an error if we say something is async and it turns
-    // out not to be? For now we're saying 'no'
-    // test.ok(!output.completed, 'output.completed true for: ' + typed);
-  }
-
-  if (tests.args != null) {
-    test.is(Object.keys(tests.args).length, Object.keys(output.args).length,
-            'arg count for ' + typed);
-
-    Object.keys(output.args).forEach(function(arg) {
-      var expectedArg = tests.args[arg];
-      var actualArg = output.args[arg];
-
-      if (Array.isArray(expectedArg)) {
-        if (!Array.isArray(actualArg)) {
-          test.ok(false, 'actual is not an array. ' + typed + '/' + arg);
-          return;
-        }
-
-        test.is(expectedArg.length, actualArg.length,
-                'array length: ' + typed + '/' + arg);
-        for (var i = 0; i < expectedArg.length; i++) {
-          test.is(expectedArg[i], actualArg[i],
-                  'member: "' + typed + '/' + arg + '/' + i);
-        }
-      }
-      else {
-        test.is(expectedArg, actualArg, 'typed: "' + typed + '" arg: ' + arg);
-      }
-    });
-  }
-
-  if (!options.window.document.createElement) {
-    test.log('skipping output tests (missing doc.createElement) for ' + typed);
-    return;
-  }
-
-  var div = options.window.document.createElement('div');
-  output.toDom(div);
-  var displayed = div.textContent.trim();
-
-  if (tests.outputMatch) {
-    var doTest = function(match, against) {
-      if (!match.test(against)) {
-        test.ok(false, "html output for " + typed + " against " + match.source);
-        console.log("Actual textContent");
-        console.log(against);
-      }
-    }
-    if (Array.isArray(tests.outputMatch)) {
-      tests.outputMatch.forEach(function(match) {
-        doTest(match, displayed);
-      });
-    }
-    else {
-      doTest(tests.outputMatch, displayed);
-    }
-  }
-
-  if (tests.blankOutput != null) {
-    if (!/^$/.test(displayed)) {
-      test.ok(false, "html for " + typed + " (textContent sent to info)");
-      console.log("Actual textContent");
-      console.log(displayed);
-    }
-  }
-};
diff --git a/browser/devtools/inspector/Breadcrumbs.jsm b/browser/devtools/inspector/Breadcrumbs.jsm
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/Breadcrumbs.jsm
@@ -0,0 +1,593 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const Cc = Components.classes;
+const Cu = Components.utils;
+const Ci = Components.interfaces;
+
+const PSEUDO_CLASSES = [":hover", ":active", ":focus"];
+
+this.EXPORTED_SYMBOLS = ["HTMLBreadcrumbs"];
+
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+Cu.import("resource:///modules/devtools/DOMHelpers.jsm");
+Cu.import("resource:///modules/devtools/LayoutHelpers.jsm");
+
+const LOW_PRIORITY_ELEMENTS = {
+  "HEAD": true,
+  "BASE": true,
+  "BASEFONT": true,
+  "ISINDEX": true,
+  "LINK": true,
+  "META": true,
+  "SCRIPT": true,
+  "STYLE": true,
+  "TITLE": true,
+};
+
+///////////////////////////////////////////////////////////////////////////
+//// HTML Breadcrumbs
+
+/**
+ * Display the ancestors of the current node and its children.
+ * Only one "branch" of children are displayed (only one line).
+ *
+ * Mechanism:
+ * . If no nodes displayed yet:
+ *    then display the ancestor of the selected node and the selected node;
+ *   else select the node;
+ * . If the selected node is the last node displayed, append its first (if any).
+ */
+this.HTMLBreadcrumbs = function HTMLBreadcrumbs(aInspector)
+{
+  this.inspector = aInspector;
+  this.selection = this.inspector.selection;
+  this.chromeWin = this.inspector.panelWin;
+  this.chromeDoc = this.inspector.panelDoc;
+  this.DOMHelpers = new DOMHelpers(this.chromeWin);
+  this._init();
+}
+
+HTMLBreadcrumbs.prototype = {
+  _init: function BC__init()
+  {
+    this.container = this.chromeDoc.getElementById("inspector-breadcrumbs");
+    this.container.addEventListener("mousedown", this, true);
+    this.container.addEventListener("keypress", this, true);
+
+    // We will save a list of already displayed nodes in this array.
+    this.nodeHierarchy = [];
+
+    // Last selected node in nodeHierarchy.
+    this.currentIndex = -1;
+
+    // By default, hide the arrows. We let the <scrollbox> show them
+    // in case of overflow.
+    this.container.removeAttribute("overflows");
+    this.container._scrollButtonUp.collapsed = true;
+    this.container._scrollButtonDown.collapsed = true;
+
+    this.onscrollboxreflow = function() {
+      if (this.container._scrollButtonDown.collapsed)
+        this.container.removeAttribute("overflows");
+      else
+        this.container.setAttribute("overflows", true);
+    }.bind(this);
+
+    this.container.addEventListener("underflow", this.onscrollboxreflow, false);
+    this.container.addEventListener("overflow", this.onscrollboxreflow, false);
+
+    this.update = this.update.bind(this);
+    this.updateSelectors = this.updateSelectors.bind(this);
+    this.selection.on("new-node", this.update);
+    this.selection.on("detached", this.update);
+    this.selection.on("pseudoclass", this.updateSelectors);
+    this.selection.on("attribute-changed", this.updateSelectors);
+    this.update();
+  },
+
+  /**
+   * Build a string that represents the node: tagName#id.class1.class2.
+   *
+   * @param aNode The node to pretty-print
+   * @returns a string
+   */
+  prettyPrintNodeAsText: function BC_prettyPrintNodeText(aNode)
+  {
+    let text = aNode.tagName.toLowerCase();
+    if (aNode.id) {
+      text += "#" + aNode.id;
+    }
+    for (let i = 0; i < aNode.classList.length; i++) {
+      text += "." + aNode.classList[i];
+    }
+    for (let i = 0; i < PSEUDO_CLASSES.length; i++) {
+      let pseudo = PSEUDO_CLASSES[i];
+      if (DOMUtils.hasPseudoClassLock(aNode, pseudo)) {
+        text += pseudo;
+      }
+    }
+
+    return text;
+  },
+
+
+  /**
+   * Build <label>s that represent the node:
+   *   <label class="inspector-breadcrumbs-tag">tagName</label>
+   *   <label class="inspector-breadcrumbs-id">#id</label>
+   *   <label class="inspector-breadcrumbs-classes">.class1.class2</label>
+   *
+   * @param aNode The node to pretty-print
+   * @returns a document fragment.
+   */
+  prettyPrintNodeAsXUL: function BC_prettyPrintNodeXUL(aNode)
+  {
+    let fragment = this.chromeDoc.createDocumentFragment();
+
+    let tagLabel = this.chromeDoc.createElement("label");
+    tagLabel.className = "inspector-breadcrumbs-tag plain";
+
+    let idLabel = this.chromeDoc.createElement("label");
+    idLabel.className = "inspector-breadcrumbs-id plain";
+
+    let classesLabel = this.chromeDoc.createElement("label");
+    classesLabel.className = "inspector-breadcrumbs-classes plain";
+
+    let pseudosLabel = this.chromeDoc.createElement("label");
+    pseudosLabel.className = "inspector-breadcrumbs-pseudo-classes plain";
+
+    tagLabel.textContent = aNode.tagName.toLowerCase();
+    idLabel.textContent = aNode.id ? ("#" + aNode.id) : "";
+
+    let classesText = "";
+    for (let i = 0; i < aNode.classList.length; i++) {
+      classesText += "." + aNode.classList[i];
+    }
+    classesLabel.textContent = classesText;
+
+    let pseudos = PSEUDO_CLASSES.filter(function(pseudo) {
+      return DOMUtils.hasPseudoClassLock(aNode, pseudo);
+    }, this);
+    pseudosLabel.textContent = pseudos.join("");
+
+    fragment.appendChild(tagLabel);
+    fragment.appendChild(idLabel);
+    fragment.appendChild(classesLabel);
+    fragment.appendChild(pseudosLabel);
+
+    return fragment;
+  },
+
+  /**
+   * Open the sibling menu.
+   *
+   * @param aButton the button representing the node.
+   * @param aNode the node we want the siblings from.
+   */
+  openSiblingMenu: function BC_openSiblingMenu(aButton, aNode)
+  {
+    // We make sure that the targeted node is selected
+    // because we want to use the nodemenu that only works
+    // for inspector.selection
+    this.selection.setNode(aNode, "breadcrumbs");
+
+    let title = this.chromeDoc.createElement("menuitem");
+    title.setAttribute("label", this.inspector.strings.GetStringFromName("breadcrumbs.siblings"));
+    title.setAttribute("disabled", "true");
+
+    let separator = this.chromeDoc.createElement("menuseparator");
+
+    let items = [title, separator];
+
+    let nodes = aNode.parentNode.childNodes;
+    for (let i = 0; i < nodes.length; i++) {
+      if (nodes[i].nodeType == aNode.ELEMENT_NODE) {
+        let item = this.chromeDoc.createElement("menuitem");
+        if (nodes[i] === aNode) {
+          item.setAttribute("disabled", "true");
+          item.setAttribute("checked", "true");
+        }
+
+        item.setAttribute("type", "radio");
+        item.setAttribute("label", this.prettyPrintNodeAsText(nodes[i]));
+
+        let selection = this.selection;
+        item.onmouseup = (function(aNode) {
+          return function() {
+            selection.setNode(aNode, "breadcrumbs");
+          }
+        })(nodes[i]);
+
+        items.push(item);
+      }
+    }
+    this.inspector.showNodeMenu(aButton, "before_start", items);
+  },
+
+  /**
+   * Generic event handler.
+   *
+   * @param nsIDOMEvent event
+   *        The DOM event object.
+   */
+  handleEvent: function BC_handleEvent(event)
+  {
+    if (event.type == "mousedown" && event.button == 0) {
+      // on Click and Hold, open the Siblings menu
+
+      let timer;
+      let container = this.container;
+
+      function openMenu(event) {
+        cancelHold();
+        let target = event.originalTarget;
+        if (target.tagName == "button") {
+          target.onBreadcrumbsHold();
+        }
+      }
+
+      function handleClick(event) {
+        cancelHold();
+        let target = event.originalTarget;
+        if (target.tagName == "button") {
+          target.onBreadcrumbsClick();
+        }
+      }
+
+      let window = this.chromeWin;
+      function cancelHold(event) {
+        window.clearTimeout(timer);
+        container.removeEventListener("mouseout", cancelHold, false);
+        container.removeEventListener("mouseup", handleClick, false);
+      }
+
+      container.addEventListener("mouseout", cancelHold, false);
+      container.addEventListener("mouseup", handleClick, false);
+      timer = window.setTimeout(openMenu, 500, event);
+    }
+
+    if (event.type == "keypress" && this.selection.isElementNode()) {
+      let node = null;
+      switch (event.keyCode) {
+        case this.chromeWin.KeyEvent.DOM_VK_LEFT:
+          if (this.currentIndex != 0) {
+            node = this.nodeHierarchy[this.currentIndex - 1].node;
+          }
+          break;
+        case this.chromeWin.KeyEvent.DOM_VK_RIGHT:
+          if (this.currentIndex < this.nodeHierarchy.length - 1) {
+            node = this.nodeHierarchy[this.currentIndex + 1].node;
+          }
+          break;
+        case this.chromeWin.KeyEvent.DOM_VK_UP:
+          node = this.selection.node.previousSibling;
+          while (node && (node.nodeType != node.ELEMENT_NODE)) {
+            node = node.previousSibling;
+          }
+          break;
+        case this.chromeWin.KeyEvent.DOM_VK_DOWN:
+          node = this.selection.node.nextSibling;
+          while (node && (node.nodeType != node.ELEMENT_NODE)) {
+            node = node.nextSibling;
+          }
+          break;
+      }
+      if (node) {
+        this.selection.setNode(node, "breadcrumbs");
+      }
+      event.preventDefault();
+      event.stopPropagation();
+    }
+  },
+
+  /**
+   * Remove nodes and delete properties.
+   */
+  destroy: function BC_destroy()
+  {
+    this.nodeHierarchy.forEach(function(crumb) {
+      if (LayoutHelpers.isNodeConnected(crumb.node)) {
+        DOMUtils.clearPseudoClassLocks(crumb.node);
+      }
+    });
+
+    this.selection.off("new-node", this.update);
+    this.selection.off("detached", this.update);
+    this.selection.off("pseudoclass", this.updateSelectors);
+    this.selection.off("attribute-changed", this.updateSelectors);
+
+    this.container.removeEventListener("underflow", this.onscrollboxreflow, false);
+    this.container.removeEventListener("overflow", this.onscrollboxreflow, false);
+    this.onscrollboxreflow = null;
+
+    this.empty();
+    this.container.removeEventListener("mousedown", this, true);
+    this.container.removeEventListener("keypress", this, true);
+    this.container = null;
+    this.nodeHierarchy = null;
+  },
+
+  /**
+   * Empty the breadcrumbs container.
+   */
+  empty: function BC_empty()
+  {
+    while (this.container.hasChildNodes()) {
+      this.container.removeChild(this.container.firstChild);
+    }
+  },
+
+  /**
+   * Re-init the cache and remove all the buttons.
+   */
+  invalidateHierarchy: function BC_invalidateHierarchy()
+  {
+    this.inspector.hideNodeMenu();
+    this.nodeHierarchy = [];
+    this.empty();
+  },
+
+  /**
+   * Set which button represent the selected node.
+   *
+   * @param aIdx Index of the displayed-button to select
+   */
+  setCursor: function BC_setCursor(aIdx)
+  {
+    // Unselect the previously selected button
+    if (this.currentIndex > -1 && this.currentIndex < this.nodeHierarchy.length) {
+      this.nodeHierarchy[this.currentIndex].button.removeAttribute("checked");
+    }
+    if (aIdx > -1) {
+      this.nodeHierarchy[aIdx].button.setAttribute("checked", "true");
+      if (this.hadFocus)
+        this.nodeHierarchy[aIdx].button.focus();
+    }
+    this.currentIndex = aIdx;
+  },
+
+  /**
+   * Get the index of the node in the cache.
+   *
+   * @param aNode
+   * @returns integer the index, -1 if not found
+   */
+  indexOf: function BC_indexOf(aNode)
+  {
+    let i = this.nodeHierarchy.length - 1;
+    for (let i = this.nodeHierarchy.length - 1; i >= 0; i--) {
+      if (this.nodeHierarchy[i].node === aNode) {
+        return i;
+      }
+    }
+    return -1;
+  },
+
+  /**
+   * Remove all the buttons and their references in the cache
+   * after a given index.
+   *
+   * @param aIdx
+   */
+  cutAfter: function BC_cutAfter(aIdx)
+  {
+    while (this.nodeHierarchy.length > (aIdx + 1)) {
+      let toRemove = this.nodeHierarchy.pop();
+      this.container.removeChild(toRemove.button);
+    }
+  },
+
+  /**
+   * Build a button representing the node.
+   *
+   * @param aNode The node from the page.
+   * @returns aNode The <button>.
+   */
+  buildButton: function BC_buildButton(aNode)
+  {
+    let button = this.chromeDoc.createElement("button");
+    button.appendChild(this.prettyPrintNodeAsXUL(aNode));
+    button.className = "inspector-breadcrumbs-button";
+
+    button.setAttribute("tooltiptext", this.prettyPrintNodeAsText(aNode));
+
+    button.onkeypress = function onBreadcrumbsKeypress(e) {
+      if (e.charCode == Ci.nsIDOMKeyEvent.DOM_VK_SPACE ||
+          e.keyCode == Ci.nsIDOMKeyEvent.DOM_VK_RETURN)
+        button.click();
+    }
+
+    button.onBreadcrumbsClick = function onBreadcrumbsClick() {
+      this.selection.setNode(aNode, "breadcrumbs");
+    }.bind(this);
+
+    button.onclick = (function _onBreadcrumbsRightClick(event) {
+      button.focus();
+      if (event.button == 2) {
+        this.openSiblingMenu(button, aNode);
+      }
+    }).bind(this);
+
+    button.onBreadcrumbsHold = (function _onBreadcrumbsHold() {
+      this.openSiblingMenu(button, aNode);
+    }).bind(this);
+    return button;
+  },
+
+  /**
+   * Connecting the end of the breadcrumbs to a node.
+   *
+   * @param aNode The node to reach.
+   */
+  expand: function BC_expand(aNode)
+  {
+      let fragment = this.chromeDoc.createDocumentFragment();
+      let toAppend = aNode;
+      let lastButtonInserted = null;
+      let originalLength = this.nodeHierarchy.length;
+      let stopNode = null;
+      if (originalLength > 0) {
+        stopNode = this.nodeHierarchy[originalLength - 1].node;
+      }
+      while (toAppend && toAppend.tagName && toAppend != stopNode) {
+        let button = this.buildButton(toAppend);
+        fragment.insertBefore(button, lastButtonInserted);
+        lastButtonInserted = button;
+        this.nodeHierarchy.splice(originalLength, 0, {node: toAppend, button: button});
+        toAppend = this.DOMHelpers.getParentObject(toAppend);
+      }
+      this.container.appendChild(fragment, this.container.firstChild);
+  },
+
+  /**
+   * Get a child of a node that can be displayed in the breadcrumbs
+   * and that is probably visible. See LOW_PRIORITY_ELEMENTS.
+   *
+   * @param aNode The parent node.
+   * @returns nsIDOMNode|null
+   */
+  getInterestingFirstNode: function BC_getInterestingFirstNode(aNode)
+  {
+    let nextChild = this.DOMHelpers.getChildObject(aNode, 0);
+    let fallback = null;
+
+    while (nextChild) {
+      if (nextChild.nodeType == aNode.ELEMENT_NODE) {
+        if (!(nextChild.tagName in LOW_PRIORITY_ELEMENTS)) {
+          return nextChild;
+        }
+        if (!fallback) {
+          fallback = nextChild;
+        }
+      }
+      nextChild = this.DOMHelpers.getNextSibling(nextChild);
+    }
+    return fallback;
+  },
+
+
+  /**
+   * Find the "youngest" ancestor of a node which is already in the breadcrumbs.
+   *
+   * @param aNode
+   * @returns Index of the ancestor in the cache
+   */
+  getCommonAncestor: function BC_getCommonAncestor(aNode)
+  {
+    let node = aNode;
+    while (node) {
+      let idx = this.indexOf(node);
+      if (idx > -1) {
+        return idx;
+      } else {
+        node = this.DOMHelpers.getParentObject(node);
+      }
+    }
+    return -1;
+  },
+
+  /**
+   * Make sure that the latest node in the breadcrumbs is not the selected node
+   * if the selected node still has children.
+   */
+  ensureFirstChild: function BC_ensureFirstChild()
+  {
+    // If the last displayed node is the selected node
+    if (this.currentIndex == this.nodeHierarchy.length - 1) {
+      let node = this.nodeHierarchy[this.currentIndex].node;
+      let child = this.getInterestingFirstNode(node);
+      // If the node has a child
+      if (child) {
+        // Show this child
+        this.expand(child);
+      }
+    }
+  },
+
+  /**
+   * Ensure the selected node is visible.
+   */
+  scroll: function BC_scroll()
+  {
+    // FIXME bug 684352: make sure its immediate neighbors are visible too.
+
+    let scrollbox = this.container;
+    let element = this.nodeHierarchy[this.currentIndex].button;
+    scrollbox.ensureElementIsVisible(element);
+  },
+
+  updateSelectors: function BC_updateSelectors()
+  {
+    for (let i = this.nodeHierarchy.length - 1; i >= 0; i--) {
+      let crumb = this.nodeHierarchy[i];
+      let button = crumb.button;
+
+      while(button.hasChildNodes()) {
+        button.removeChild(button.firstChild);
+      }
+      button.appendChild(this.prettyPrintNodeAsXUL(crumb.node));
+      button.setAttribute("tooltiptext", this.prettyPrintNodeAsText(crumb.node));
+    }
+  },
+
+  /**
+   * Update the breadcrumbs display when a new node is selected.
+   */
+  update: function BC_update()
+  {
+    this.inspector.hideNodeMenu();
+
+    let cmdDispatcher = this.chromeDoc.commandDispatcher;
+    this.hadFocus = (cmdDispatcher.focusedElement &&
+                     cmdDispatcher.focusedElement.parentNode == this.container);
+
+    if (!this.selection.isConnected()) {
+      this.cutAfter(-1); // remove all the crumbs
+      return;
+    }
+
+    if (!this.selection.isElementNode()) {
+      this.setCursor(-1); // no selection
+      return;
+    }
+
+    let idx = this.indexOf(this.selection.node);
+
+    // Is the node already displayed in the breadcrumbs?
+    if (idx > -1) {
+      // Yes. We select it.
+      this.setCursor(idx);
+    } else {
+      // No. Is the breadcrumbs display empty?
+      if (this.nodeHierarchy.length > 0) {
+        // No. We drop all the element that are not direct ancestors
+        // of the selection
+        let parent = this.DOMHelpers.getParentObject(this.selection.node);
+        let idx = this.getCommonAncestor(parent);
+        this.cutAfter(idx);
+      }
+      // we append the missing button between the end of the breadcrumbs display
+      // and the current node.
+      this.expand(this.selection.node);
+
+      // we select the current node button
+      idx = this.indexOf(this.selection.node);
+      this.setCursor(idx);
+    }
+    // Add the first child of the very last node of the breadcrumbs if possible.
+    this.ensureFirstChild();
+
+    // Make sure the selected node and its neighbours are visible.
+    this.scroll();
+
+    this.updateSelectors();
+  },
+}
+
+XPCOMUtils.defineLazyGetter(this, "DOMUtils", function () {
+  return Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils);
+});
diff --git a/browser/devtools/inspector/CmdInspect.jsm b/browser/devtools/inspector/CmdInspect.jsm
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/CmdInspect.jsm
@@ -0,0 +1,48 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const { classes: Cc, interfaces: Ci, utils: Cu } = Components;
+this.EXPORTED_SYMBOLS = [ ];
+
+Cu.import("resource:///modules/devtools/gcli.jsm");
+Cu.import('resource://gre/modules/XPCOMUtils.jsm');
+
+XPCOMUtils.defineLazyModuleGetter(this, "gDevTools",
+                                  "resource:///modules/devtools/gDevTools.jsm");
+XPCOMUtils.defineLazyModuleGetter(this, "TargetFactory",
+                                  "resource:///modules/devtools/Target.jsm");
+
+/**
+ * 'inspect' command
+ */
+gcli.addCommand({
+  name: "inspect",
+  description: gcli.lookup("inspectDesc"),
+  manual: gcli.lookup("inspectManual"),
+  params: [
+    {
+      name: "selector",
+      type: "node",
+      description: gcli.lookup("inspectNodeDesc"),
+      manual: gcli.lookup("inspectNodeManual")
+    }
+  ],
+  exec: function Command_inspect(args, context) {
+    let gBrowser = context.environment.chromeDocument.defaultView.gBrowser;
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+
+    let node = args.selector;
+
+    let inspector = gDevTools.getPanelForTarget("inspector", target);
+    if (inspector && inspector.isReady) {
+      inspector.selection.setNode(node, "gcli");
+    } else {
+      let toolbox = gDevTools.openToolboxForTab(target, "inspector");
+      toolbox.once("inspector-ready", function(event, panel) {
+        let inspector = gDevTools.getPanelForTarget("inspector", target);
+        inspector.selection.setNode(node, "gcli");
+      }.bind(this));
+    }
+  }
+});
diff --git a/browser/devtools/inspector/Highlighter.jsm b/browser/devtools/inspector/Highlighter.jsm
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/Highlighter.jsm
@@ -0,0 +1,784 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const Cu = Components.utils;
+const Cc = Components.classes;
+const Ci = Components.interfaces;
+
+Cu.import("resource://gre/modules/Services.jsm");
+Cu.import("resource:///modules/devtools/LayoutHelpers.jsm");
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+Cu.import("resource:///modules/devtools/EventEmitter.jsm");
+
+this.EXPORTED_SYMBOLS = ["Highlighter"];
+
+const PSEUDO_CLASSES = [":hover", ":active", ":focus"];
+  // add ":visited" and ":link" after bug 713106 is fixed
+
+/**
+ * A highlighter mechanism.
+ *
+ * The highlighter is built dynamically into the browser element.
+ * The caller is in charge of destroying the highlighter (ie, the highlighter
+ * won't be destroyed if a new tab is selected for example).
+ *
+ * API:
+ *
+ *   // Constructor and destructor.
+ *   Highlighter(aTab, aInspector)
+ *   void destroy();
+ *
+ *   // Show and hide the highlighter
+ *   void show();
+ *   void hide();
+ *   boolean isHidden();
+ *
+ *   // Redraw the highlighter if the visible portion of the node has changed.
+ *   void invalidateSize(aScroll);
+ *
+ * Events:
+ *
+ *   "closed" - Highlighter is closing
+ *   "highlighting" - Highlighter is highlighting
+ *   "locked" - The selected node has been locked
+ *   "unlocked" - The selected ndoe has been unlocked
+ *
+ * Structure:
+ *  <stack class="highlighter-container">
+ *    <box class="highlighter-outline-container">
+ *      <box class="highlighter-outline" locked="true/false"/>
+ *    </box>
+ *    <box class="highlighter-controls">
+ *      <box class="highlighter-nodeinfobar-container" position="top/bottom" locked="true/false">
+ *        <box class="highlighter-nodeinfobar-arrow highlighter-nodeinfobar-arrow-top"/>
+ *        <hbox class="highlighter-nodeinfobar">
+ *          <toolbarbutton class="highlighter-nodeinfobar-inspectbutton highlighter-nodeinfobar-button"/>
+ *          <hbox class="highlighter-nodeinfobar-text">tagname#id.class1.class2</hbox>
+ *          <toolbarbutton class="highlighter-nodeinfobar-menu highlighter-nodeinfobar-button">…</toolbarbutton>
+ *        </hbox>
+ *        <box class="highlighter-nodeinfobar-arrow highlighter-nodeinfobar-arrow-bottom"/>
+ *      </box>
+ *    </box>
+ *  </stack>
+ *
+ */
+
+
+/**
+ * Constructor.
+ *
+ * @param aTarget The inspection target.
+ * @param aInspector Inspector panel.
+ * @param aToolbox The toolbox holding the inspector.
+ */
+this.Highlighter = function Highlighter(aTarget, aInspector, aToolbox)
+{
+  this.target = aTarget;
+  this.tab = aTarget.tab;
+  this.toolbox = aToolbox;
+  this.browser = this.tab.linkedBrowser;
+  this.chromeDoc = this.tab.ownerDocument;
+  this.chromeWin = this.chromeDoc.defaultView;
+  this.inspector = aInspector
+
+  new EventEmitter(this);
+
+  this._init();
+}
+
+Highlighter.prototype = {
+  get selection() {
+    return this.inspector.selection;
+  },
+
+  _init: function Highlighter__init()
+  {
+    this.unlock = this.unlock.bind(this);
+    this.updateInfobar = this.updateInfobar.bind(this);
+    this.highlight = this.highlight.bind(this);
+
+    let stack = this.browser.parentNode;
+    this.win = this.browser.contentWindow;
+    this._highlighting = false;
+
+    this.highlighterContainer = this.chromeDoc.createElement("stack");
+    this.highlighterContainer.className = "highlighter-container";
+
+    this.outline = this.chromeDoc.createElement("box");
+    this.outline.className = "highlighter-outline";
+
+    let outlineContainer = this.chromeDoc.createElement("box");
+    outlineContainer.appendChild(this.outline);
+    outlineContainer.className = "highlighter-outline-container";
+
+    // The controlsBox will host the different interactive
+    // elements of the highlighter (buttons, toolbars, ...).
+    let controlsBox = this.chromeDoc.createElement("box");
+    controlsBox.className = "highlighter-controls";
+    this.highlighterContainer.appendChild(outlineContainer);
+    this.highlighterContainer.appendChild(controlsBox);
+
+    // Insert the highlighter right after the browser
+    stack.insertBefore(this.highlighterContainer, stack.childNodes[1]);
+
+    this.buildInfobar(controlsBox);
+
+    this.transitionDisabler = null;
+    this.pageEventsMuter = null;
+
+    this.unlock();
+
+    this.selection.on("new-node", this.highlight);
+    this.selection.on("new-node", this.updateInfobar);
+    this.selection.on("detached", this.highlight);
+    this.selection.on("pseudoclass", this.updateInfobar);
+    this.selection.on("attribute-changed", this.updateInfobar);
+
+    this.onToolSelected = function(event, id) {
+      if (id != "inspector") {
+        this.hide();
+      } else {
+        this.show();
+      }
+    }.bind(this);
+    this.toolbox.on("select", this.onToolSelected);
+
+    this.hidden = true;
+    this.highlight();
+  },
+
+  /**
+   * Destroy the nodes. Remove listeners.
+   */
+  destroy: function Highlighter_destroy()
+  {
+    this.inspectButton.removeEventListener("command", this.unlock);
+    this.inspectButton = null;
+
+    this.toolbox.off("select", this.onToolSelected);
+    this.toolbox = null;
+
+    this.selection.off("new-node", this.highlight);
+    this.selection.off("new-node", this.updateInfobar);
+    this.selection.off("detached", this.highlight);
+    this.selection.off("pseudoclass", this.updateInfobar);
+    this.selection.off("attribute-changed", this.updateInfobar);
+
+    this.detachMouseListeners();
+    this.detachPageListeners();
+
+    this.chromeWin.clearTimeout(this.transitionDisabler);
+    this.chromeWin.clearTimeout(this.pageEventsMuter);
+    this.boundCloseEventHandler = null;
+    this._contentRect = null;
+    this._highlightRect = null;
+    this._highlighting = false;
+    this.outline = null;
+    this.nodeInfo = null;
+    this.highlighterContainer.parentNode.removeChild(this.highlighterContainer);
+    this.highlighterContainer = null;
+    this.win = null
+    this.browser = null;
+    this.chromeDoc = null;
+    this.chromeWin = null;
+    this.tabbrowser = null;
+
+    this.emit("closed");
+  },
+
+  /**
+   * Show the outline, and select a node.
+   */
+  highlight: function Highlighter_highlight()
+  {
+    if (this.selection.reason != "highlighter") {
+      this.lock();
+    }
+
+    let canHighlightNode = this.selection.isNode() &&
+                          this.selection.isConnected() &&
+                          this.selection.isElementNode();
+
+    if (canHighlightNode) {
+      this.show();
+      this.updateInfobar();
+      this.invalidateSize();
+      if (!this._highlighting &&
+          this.selection.reason != "highlighter") {
+        LayoutHelpers.scrollIntoViewIfNeeded(this.selection.node);
+      }
+    } else {
+      this.hide();
+    }
+  },
+
+  /**
+   * Update the highlighter size and position.
+   */
+  invalidateSize: function Highlighter_invalidateSize()
+  {
+    let canHiglightNode = this.selection.isNode() &&
+                          this.selection.isConnected() &&
+                          this.selection.isElementNode();
+
+    if (!canHiglightNode)
+      return;
+
+    let clientRect = this.selection.node.getBoundingClientRect();
+    let rect = LayoutHelpers.getDirtyRect(this.selection.node);
+    this.highlightRectangle(rect);
+
+    this.moveInfobar();
+
+    if (this._highlighting) {
+      this.showOutline();
+      this.emit("highlighting");
+    }
+  },
+
+  /**
+   * Show the highlighter if it has been hidden.
+   */
+  show: function() {
+    if (!this.hidden) return;
+    this.showOutline();
+    this.showInfobar();
+    this.computeZoomFactor();
+    this.attachPageListeners();
+    this.invalidateSize();
+    this.hidden = false;
+  },
+
+  /**
+   * Hide the highlighter, the outline and the infobar.
+   */
+  hide: function() {
+    if (this.hidden) return;
+    this.hideOutline();
+    this.hideInfobar();
+    this.detachPageListeners();
+    this.hidden = true;
+  },
+
+  /**
+   * Is the highlighter visible?
+   *
+   * @return boolean
+   */
+  isHidden: function() {
+    return this.hidden;
+  },
+
+  /**
+   * Lock a node. Stops the inspection.
+   */
+  lock: function() {
+    if (this.locked === true) return;
+    this.outline.setAttribute("locked", "true");
+    this.nodeInfo.container.setAttribute("locked", "true");
+    this.detachMouseListeners();
+    this.locked = true;
+    this.emit("locked");
+  },
+
+  /**
+   * Start inspecting.
+   * Unlock the current node (if any), and select any node being hovered.
+   */
+  unlock: function() {
+    if (this.locked === false) return;
+    this.outline.removeAttribute("locked");
+    this.nodeInfo.container.removeAttribute("locked");
+    this.attachMouseListeners();
+    this.locked = false;
+    this.chromeWin.focus();
+    if (this.selection.isElementNode() &&
+        this.selection.isConnected()) {
+      this.showOutline();
+    }
+    this.emit("unlocked");
+  },
+
+  /**
+   * Hide the infobar
+   */
+   hideInfobar: function Highlighter_hideInfobar() {
+     this.nodeInfo.container.setAttribute("force-transitions", "true");
+     this.nodeInfo.container.setAttribute("hidden", "true");
+   },
+
+  /**
+   * Show the infobar
+   */
+   showInfobar: function Highlighter_showInfobar() {
+     this.nodeInfo.container.removeAttribute("hidden");
+     this.moveInfobar();
+     this.nodeInfo.container.removeAttribute("force-transitions");
+   },
+
+  /**
+   * Hide the outline
+   */
+   hideOutline: function Highlighter_hideOutline() {
+     this.outline.setAttribute("hidden", "true");
+   },
+
+  /**
+   * Show the outline
+   */
+   showOutline: function Highlighter_showOutline() {
+     if (this._highlighting)
+       this.outline.removeAttribute("hidden");
+   },
+
+  /**
+   * Build the node Infobar.
+   *
+   * <box class="highlighter-nodeinfobar-container">
+   *   <box class="Highlighter-nodeinfobar-arrow-top"/>
+   *   <hbox class="highlighter-nodeinfobar">
+   *     <toolbarbutton class="highlighter-nodeinfobar-button highlighter-nodeinfobar-inspectbutton"/>
+   *     <hbox class="highlighter-nodeinfobar-text">
+   *       <xhtml:span class="highlighter-nodeinfobar-tagname"/>
+   *       <xhtml:span class="highlighter-nodeinfobar-id"/>
+   *       <xhtml:span class="highlighter-nodeinfobar-classes"/>
+   *       <xhtml:span class="highlighter-nodeinfobar-pseudo-classes"/>
+   *     </hbox>
+   *     <toolbarbutton class="highlighter-nodeinfobar-button highlighter-nodeinfobar-menu"/>
+   *   </hbox>
+   *   <box class="Highlighter-nodeinfobar-arrow-bottom"/>
+   * </box>
+   *
+   * @param nsIDOMElement aParent
+   *        The container of the infobar.
+   */
+  buildInfobar: function Highlighter_buildInfobar(aParent)
+  {
+    let container = this.chromeDoc.createElement("box");
+    container.className = "highlighter-nodeinfobar-container";
+    container.setAttribute("position", "top");
+    container.setAttribute("disabled", "true");
+
+    let nodeInfobar = this.chromeDoc.createElement("hbox");
+    nodeInfobar.className = "highlighter-nodeinfobar";
+
+    let arrowBoxTop = this.chromeDoc.createElement("box");
+    arrowBoxTop.className = "highlighter-nodeinfobar-arrow highlighter-nodeinfobar-arrow-top";
+
+    let arrowBoxBottom = this.chromeDoc.createElement("box");
+    arrowBoxBottom.className = "highlighter-nodeinfobar-arrow highlighter-nodeinfobar-arrow-bottom";
+
+    let tagNameLabel = this.chromeDoc.createElementNS("http://www.w3.org/1999/xhtml", "span");
+    tagNameLabel.className = "highlighter-nodeinfobar-tagname";
+
+    let idLabel = this.chromeDoc.createElementNS("http://www.w3.org/1999/xhtml", "span");
+    idLabel.className = "highlighter-nodeinfobar-id";
+
+    let classesBox = this.chromeDoc.createElementNS("http://www.w3.org/1999/xhtml", "span");
+    classesBox.className = "highlighter-nodeinfobar-classes";
+
+    let pseudoClassesBox = this.chromeDoc.createElementNS("http://www.w3.org/1999/xhtml", "span");
+    pseudoClassesBox.className = "highlighter-nodeinfobar-pseudo-classes";
+
+    // Add some content to force a better boundingClientRect down below.
+    pseudoClassesBox.textContent = "&nbsp;";
+
+    // Create buttons
+
+    this.inspectButton = this.chromeDoc.createElement("toolbarbutton");
+    this.inspectButton.className = "highlighter-nodeinfobar-button highlighter-nodeinfobar-inspectbutton"
+    let toolbarInspectButton = this.inspector.panelDoc.getElementById("inspector-inspect-toolbutton");
+    this.inspectButton.setAttribute("tooltiptext", toolbarInspectButton.getAttribute("tooltiptext"));
+    this.inspectButton.addEventListener("command", this.unlock);
+
+    let nodemenu = this.chromeDoc.createElement("toolbarbutton");
+    nodemenu.setAttribute("type", "menu");
+    nodemenu.className = "highlighter-nodeinfobar-button highlighter-nodeinfobar-menu"
+    nodemenu.setAttribute("tooltiptext",
+                          this.strings.GetStringFromName("nodeMenu.tooltiptext"));
+
+    nodemenu.onclick = function() {
+      this.inspector.showNodeMenu(nodemenu, "after_start");
+    }.bind(this);
+
+    // <hbox class="highlighter-nodeinfobar-text"/>
+    let texthbox = this.chromeDoc.createElement("hbox");
+    texthbox.className = "highlighter-nodeinfobar-text";
+    texthbox.setAttribute("align", "center");
+    texthbox.setAttribute("flex", "1");
+
+    texthbox.addEventListener("mousedown", function(aEvent) {
+      // On click, show the node:
+      if (this.selection.isElementNode()) {
+        LayoutHelpers.scrollIntoViewIfNeeded(this.selection.node);
+      }
+    }.bind(this), true);
+
+    texthbox.appendChild(tagNameLabel);
+    texthbox.appendChild(idLabel);
+    texthbox.appendChild(classesBox);
+    texthbox.appendChild(pseudoClassesBox);
+
+    nodeInfobar.appendChild(this.inspectButton);
+    nodeInfobar.appendChild(texthbox);
+    nodeInfobar.appendChild(nodemenu);
+
+    container.appendChild(arrowBoxTop);
+    container.appendChild(nodeInfobar);
+    container.appendChild(arrowBoxBottom);
+
+    aParent.appendChild(container);
+
+    let barHeight = container.getBoundingClientRect().height;
+
+    this.nodeInfo = {
+      tagNameLabel: tagNameLabel,
+      idLabel: idLabel,
+      classesBox: classesBox,
+      pseudoClassesBox: pseudoClassesBox,
+      container: container,
+      barHeight: barHeight,
+    };
+  },
+
+  /**
+   * Highlight a rectangular region.
+   *
+   * @param object aRect
+   *        The rectangle region to highlight.
+   * @returns boolean
+   *          True if the rectangle was highlighted, false otherwise.
+   */
+  highlightRectangle: function Highlighter_highlightRectangle(aRect)
+  {
+    if (!aRect) {
+      this.unhighlight();
+      return;
+    }
+
+    let oldRect = this._contentRect;
+
+    if (oldRect && aRect.top == oldRect.top && aRect.left == oldRect.left &&
+        aRect.width == oldRect.width && aRect.height == oldRect.height) {
+      return; // same rectangle
+    }
+
+    let aRectScaled = LayoutHelpers.getZoomedRect(this.win, aRect);
+
+    if (aRectScaled.left >= 0 && aRectScaled.top >= 0 &&
+        aRectScaled.width > 0 && aRectScaled.height > 0) {
+
+      this.showOutline();
+
+      // The bottom div and the right div are flexibles (flex=1).
+      // We don't need to resize them.
+      let top = "top:" + aRectScaled.top + "px;";
+      let left = "left:" + aRectScaled.left + "px;";
+      let width = "width:" + aRectScaled.width + "px;";
+      let height = "height:" + aRectScaled.height + "px;";
+      this.outline.setAttribute("style", top + left + width + height);
+
+      this._highlighting = true;
+    } else {
+      this.unhighlight();
+    }
+
+    this._contentRect = aRect; // save orig (non-scaled) rect
+    this._highlightRect = aRectScaled; // and save the scaled rect.
+
+    return;
+  },
+
+  /**
+   * Clear the highlighter surface.
+   */
+  unhighlight: function Highlighter_unhighlight()
+  {
+    this._highlighting = false;
+    this.hideOutline();
+  },
+
+  /**
+   * Update node information (tagName#id.class)
+   */
+  updateInfobar: function Highlighter_updateInfobar()
+  {
+    if (!this.selection.isElementNode()) {
+      this.nodeInfo.tagNameLabel.textContent = "";
+      this.nodeInfo.idLabel.textContent = "";
+      this.nodeInfo.classesBox.textContent = "";
+      this.nodeInfo.pseudoClassesBox.textContent = "";
+      return;
+    }
+
+    let node = this.selection.node;
+
+    // Tag name
+    this.nodeInfo.tagNameLabel.textContent = node.tagName;
+
+    // ID
+    this.nodeInfo.idLabel.textContent = node.id ? "#" + node.id : "";
+
+    // Classes
+    let classes = this.nodeInfo.classesBox;
+
+    classes.textContent = node.classList.length ?
+                            "." + Array.join(node.classList, ".") : "";
+
+    // Pseudo-classes
+    let pseudos = PSEUDO_CLASSES.filter(function(pseudo) {
+      return DOMUtils.hasPseudoClassLock(node, pseudo);
+    }, this);
+
+    let pseudoBox = this.nodeInfo.pseudoClassesBox;
+    pseudoBox.textContent = pseudos.join("");
+  },
+
+  /**
+   * Move the Infobar to the right place in the highlighter.
+   */
+  moveInfobar: function Highlighter_moveInfobar()
+  {
+    if (this._highlightRect) {
+      let winHeight = this.win.innerHeight * this.zoom;
+      let winWidth = this.win.innerWidth * this.zoom;
+
+      let rect = {top: this._highlightRect.top,
+                  left: this._highlightRect.left,
+                  width: this._highlightRect.width,
+                  height: this._highlightRect.height};
+
+      rect.top = Math.max(rect.top, 0);
+      rect.left = Math.max(rect.left, 0);
+      rect.width = Math.max(rect.width, 0);
+      rect.height = Math.max(rect.height, 0);
+
+      rect.top = Math.min(rect.top, winHeight);
+      rect.left = Math.min(rect.left, winWidth);
+
+      this.nodeInfo.container.removeAttribute("disabled");
+      // Can the bar be above the node?
+      if (rect.top < this.nodeInfo.barHeight) {
+        // No. Can we move the toolbar under the node?
+        if (rect.top + rect.height +
+            this.nodeInfo.barHeight > winHeight) {
+          // No. Let's move it inside.
+          this.nodeInfo.container.style.top = rect.top + "px";
+          this.nodeInfo.container.setAttribute("position", "overlap");
+        } else {
+          // Yes. Let's move it under the node.
+          this.nodeInfo.container.style.top = rect.top + rect.height + "px";
+          this.nodeInfo.container.setAttribute("position", "bottom");
+        }
+      } else {
+        // Yes. Let's move it on top of the node.
+        this.nodeInfo.container.style.top =
+          rect.top - this.nodeInfo.barHeight + "px";
+        this.nodeInfo.container.setAttribute("position", "top");
+      }
+
+      let barWidth = this.nodeInfo.container.getBoundingClientRect().width;
+      let left = rect.left + rect.width / 2 - barWidth / 2;
+
+      // Make sure the whole infobar is visible
+      if (left < 0) {
+        left = 0;
+        this.nodeInfo.container.setAttribute("hide-arrow", "true");
+      } else {
+        if (left + barWidth > winWidth) {
+          left = winWidth - barWidth;
+          this.nodeInfo.container.setAttribute("hide-arrow", "true");
+        } else {
+          this.nodeInfo.container.removeAttribute("hide-arrow");
+        }
+      }
+      this.nodeInfo.container.style.left = left + "px";
+    } else {
+      this.nodeInfo.container.style.left = "0";
+      this.nodeInfo.container.style.top = "0";
+      this.nodeInfo.container.setAttribute("position", "top");
+      this.nodeInfo.container.setAttribute("hide-arrow", "true");
+    }
+  },
+
+  /**
+   * Store page zoom factor.
+   */
+  computeZoomFactor: function Highlighter_computeZoomFactor() {
+    this.zoom =
+      this.win.QueryInterface(Ci.nsIInterfaceRequestor)
+      .getInterface(Ci.nsIDOMWindowUtils)
+      .fullZoom;
+  },
+
+  /////////////////////////////////////////////////////////////////////////
+  //// Event Handling
+
+  attachMouseListeners: function Highlighter_attachMouseListeners()
+  {
+    this.browser.addEventListener("mousemove", this, true);
+    this.browser.addEventListener("click", this, true);
+    this.browser.addEventListener("dblclick", this, true);
+    this.browser.addEventListener("mousedown", this, true);
+    this.browser.addEventListener("mouseup", this, true);
+  },
+
+  detachMouseListeners: function Highlighter_detachMouseListeners()
+  {
+    this.browser.removeEventListener("mousemove", this, true);
+    this.browser.removeEventListener("click", this, true);
+    this.browser.removeEventListener("dblclick", this, true);
+    this.browser.removeEventListener("mousedown", this, true);
+    this.browser.removeEventListener("mouseup", this, true);
+  },
+
+  attachPageListeners: function Highlighter_attachPageListeners()
+  {
+    this.browser.addEventListener("resize", this, true);
+    this.browser.addEventListener("scroll", this, true);
+    this.browser.addEventListener("MozAfterPaint", this, true);
+  },
+
+  detachPageListeners: function Highlighter_detachPageListeners()
+  {
+    this.browser.removeEventListener("resize", this, true);
+    this.browser.removeEventListener("scroll", this, true);
+    this.browser.removeEventListener("MozAfterPaint", this, true);
+  },
+
+  /**
+   * Generic event handler.
+   *
+   * @param nsIDOMEvent aEvent
+   *        The DOM event object.
+   */
+  handleEvent: function Highlighter_handleEvent(aEvent)
+  {
+    switch (aEvent.type) {
+      case "click":
+        this.handleClick(aEvent);
+        break;
+      case "mousemove":
+        this.brieflyIgnorePageEvents();
+        this.handleMouseMove(aEvent);
+        break;
+      case "resize":
+        this.computeZoomFactor();
+        break;
+      case "MozAfterPaint":
+      case "scroll":
+        this.brieflyDisableTransitions();
+        this.invalidateSize();
+        break;
+      case "dblclick":
+      case "mousedown":
+      case "mouseup":
+        aEvent.stopPropagation();
+        aEvent.preventDefault();
+        break;
+    }
+  },
+
+  /**
+   * Disable the CSS transitions for a short time to avoid laggy animations
+   * during scrolling or resizing.
+   */
+  brieflyDisableTransitions: function Highlighter_brieflyDisableTransitions()
+  {
+    if (this.transitionDisabler) {
+      this.chromeWin.clearTimeout(this.transitionDisabler);
+    } else {
+      this.outline.setAttribute("disable-transitions", "true");
+      this.nodeInfo.container.setAttribute("disable-transitions", "true");
+    }
+    this.transitionDisabler =
+      this.chromeWin.setTimeout(function() {
+        this.outline.removeAttribute("disable-transitions");
+        this.nodeInfo.container.removeAttribute("disable-transitions");
+        this.transitionDisabler = null;
+      }.bind(this), 500);
+  },
+
+  /**
+   * Don't listen to page events while inspecting with the mouse.
+   */
+  brieflyIgnorePageEvents: function Highlighter_brieflyIgnorePageEvents()
+  {
+    // The goal is to keep smooth animations while inspecting.
+    // CSS Transitions might be interrupted because of a MozAfterPaint
+    // event that would triger an invalidateSize() call.
+    // So we don't listen to events that would trigger an invalidateSize()
+    // call.
+    //
+    // Side effect, zoom levels are not updated during this short period.
+    // It's very unlikely this would happen, but just in case, we call
+    // computeZoomFactor() when reattaching the events.
+    if (this.pageEventsMuter) {
+      this.chromeWin.clearTimeout(this.pageEventsMuter);
+    } else {
+      this.detachPageListeners();
+    }
+    this.pageEventsMuter =
+      this.chromeWin.setTimeout(function() {
+        this.attachPageListeners();
+        // Just in case the zoom level changed while ignoring the paint events
+        this.computeZoomFactor();
+        this.pageEventsMuter = null;
+      }.bind(this), 500);
+  },
+
+  /**
+   * Handle clicks.
+   *
+   * @param nsIDOMEvent aEvent
+   *        The DOM event.
+   */
+  handleClick: function Highlighter_handleClick(aEvent)
+  {
+    // Stop inspection when the user clicks on a node.
+    if (aEvent.button == 0) {
+      let win = aEvent.target.ownerDocument.defaultView;
+      this.lock();
+      let node = this.selection.node;
+      this.selection.setNode(node, "highlighter-lock");
+      win.focus();
+      aEvent.preventDefault();
+      aEvent.stopPropagation();
+    }
+  },
+
+  /**
+   * Handle mousemoves in panel.
+   *
+   * @param nsiDOMEvent aEvent
+   *        The MouseEvent triggering the method.
+   */
+  handleMouseMove: function Highlighter_handleMouseMove(aEvent)
+  {
+    let doc = aEvent.target.ownerDocument;
+
+    // This should never happen, but just in case, we don't let the
+    // highlighter highlight browser nodes.
+    if (doc && doc != this.chromeDoc) {
+      let element = LayoutHelpers.getElementFromPoint(aEvent.target.ownerDocument,
+        aEvent.clientX, aEvent.clientY);
+      if (element && element != this.selection.node) {
+        this.selection.setNode(element, "highlighter");
+      }
+    }
+  },
+};
+
+///////////////////////////////////////////////////////////////////////////
+
+XPCOMUtils.defineLazyGetter(this, "DOMUtils", function () {
+  return Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils)
+});
+
+XPCOMUtils.defineLazyGetter(Highlighter.prototype, "strings", function () {
+    return Services.strings.createBundle(
+            "chrome://browser/locale/devtools/inspector.properties");
+});
diff --git a/browser/devtools/inspector/InspectorDefinition.jsm b/browser/devtools/inspector/InspectorDefinition.jsm
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/InspectorDefinition.jsm
@@ -0,0 +1,45 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+this.EXPORTED_SYMBOLS = ["InspectorDefinition"];
+
+const { classes: Cc, interfaces: Ci, utils: Cu } = Components;
+const properties = "chrome://browser/locale/devtools/inspector.properties";
+
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+
+XPCOMUtils.defineLazyGetter(this, "osString",
+  function() Cc["@mozilla.org/xre/app-info;1"].getService(Ci.nsIXULRuntime).OS);
+
+XPCOMUtils.defineLazyGetter(this, "Strings",
+  function() Services.strings.createBundle(properties));
+
+function l10n(aName) Strings.GetStringFromName(aName);
+
+Cu.import("resource://gre/modules/Services.jsm");
+
+XPCOMUtils.defineLazyModuleGetter(this, "InspectorPanel", "resource:///modules/devtools/InspectorPanel.jsm");
+
+this.InspectorDefinition = {
+  id: "inspector",
+  accesskey: l10n("inspector.accesskey"),
+  key: l10n("inspector.commandkey"),
+  ordinal: 2,
+  modifiers: osString == "Darwin" ? "accel,alt" : "accel,shift",
+  icon: "chrome://browser/skin/devtools/tools-icons-small.png",
+  url: "chrome://browser/content/devtools/inspector/inspector.xul",
+  label: l10n("inspector.label"),
+
+  isTargetSupported: function(target) {
+    return !target.isRemote;
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new InspectorPanel(iframeWindow, toolbox);
+  }
+};
diff --git a/browser/devtools/inspector/InspectorPanel.jsm b/browser/devtools/inspector/InspectorPanel.jsm
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/InspectorPanel.jsm
@@ -0,0 +1,536 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const Cc = Components.classes;
+const Cu = Components.utils;
+const Ci = Components.interfaces;
+const Cr = Components.results;
+
+this.EXPORTED_SYMBOLS = ["InspectorPanel"];
+
+Cu.import("resource://gre/modules/Services.jsm");
+Cu.import("resource:///modules/devtools/MarkupView.jsm");
+Cu.import("resource:///modules/devtools/EventEmitter.jsm");
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+Cu.import("resource:///modules/devtools/gDevTools.jsm");
+Cu.import("resource:///modules/devtools/Selection.jsm");
+Cu.import("resource:///modules/devtools/Breadcrumbs.jsm");
+Cu.import("resource:///modules/devtools/Highlighter.jsm");
+Cu.import("resource:///modules/devtools/Sidebar.jsm");
+
+const LAYOUT_CHANGE_TIMER = 250;
+
+/**
+ * Represents an open instance of the Inspector for a tab.
+ * The inspector controls the highlighter, the breadcrumbs,
+ * the markup view, and the sidebar (computed view, rule view
+ * and layout view).
+ */
+this.InspectorPanel = function InspectorPanel(iframeWindow, toolbox) {
+  this._toolbox = toolbox;
+  this._target = toolbox._target;
+
+  if (this.target.isRemote) {
+    throw "Unsupported target";
+  }
+
+  this.tabTarget = (this.target.tab != null);
+  this.winTarget = (this.target.window != null);
+
+  new EventEmitter(this);
+
+  this.preventNavigateAway = this.preventNavigateAway.bind(this);
+  this.onNavigatedAway = this.onNavigatedAway.bind(this);
+  this.target.on("will-navigate", this.preventNavigateAway);
+  this.target.on("navigate", this.onNavigatedAway);
+
+  this.panelDoc = iframeWindow.document;
+  this.panelWin = iframeWindow;
+  this.panelWin.inspector = this;
+
+  this.nodemenu = this.panelDoc.getElementById("inspector-node-popup");
+  this.lastNodemenuItem = this.nodemenu.lastChild;
+  this._setupNodeMenu = this._setupNodeMenu.bind(this);
+  this._resetNodeMenu = this._resetNodeMenu.bind(this);
+  this.nodemenu.addEventListener("popupshowing", this._setupNodeMenu, true);
+  this.nodemenu.addEventListener("popuphiding", this._resetNodeMenu, true);
+
+  // Create an empty selection
+  this._selection = new Selection();
+  this.onNewSelection = this.onNewSelection.bind(this);
+  this.selection.on("new-node", this.onNewSelection);
+
+  this.breadcrumbs = new HTMLBreadcrumbs(this);
+
+  if (this.tabTarget) {
+    this.browser = this.target.tab.linkedBrowser;
+    this.scheduleLayoutChange = this.scheduleLayoutChange.bind(this);
+    this.browser.addEventListener("resize", this.scheduleLayoutChange, true);
+
+    this.highlighter = new Highlighter(this.target, this, this._toolbox);
+    let button = this.panelDoc.getElementById("inspector-inspect-toolbutton");
+    button.hidden = false;
+    this.updateInspectorButton = function() {
+      if (this.highlighter.locked) {
+        button.removeAttribute("checked");
+      } else {
+        button.setAttribute("checked", "true");
+      }
+    }.bind(this);
+    this.highlighter.on("locked", this.updateInspectorButton);
+    this.highlighter.on("unlocked", this.updateInspectorButton);
+  }
+
+  this._initMarkup();
+  this.isReady = false;
+
+  this.once("markuploaded", function() {
+    this.isReady = true;
+
+    // All the components are initialized. Let's select a node.
+    if (this.tabTarget) {
+      let root = this.browser.contentDocument.documentElement;
+      this._selection.setNode(root);
+    }
+    if (this.winTarget) {
+      let root = this.target.window.document.documentElement;
+      this._selection.setNode(root);
+    }
+
+    if (this.highlighter) {
+      this.highlighter.unlock();
+    }
+
+    this.emit("ready");
+  }.bind(this));
+
+  this.setupSidebar();
+}
+
+InspectorPanel.prototype = {
+  /**
+   * Selection object (read only)
+   */
+  get selection() {
+    return this._selection;
+  },
+
+  /**
+   * Target getter.
+   */
+  get target() {
+    return this._target;
+  },
+
+  /**
+   * Target setter.
+   */
+  set target(value) {
+    this._target = value;
+  },
+
+  /**
+   * Expose gViewSourceUtils so that other tools can make use of them.
+   */
+  get viewSourceUtils() {
+    return this.panelWin.gViewSourceUtils;
+  },
+
+  /**
+   * Indicate that a tool has modified the state of the page.  Used to
+   * decide whether to show the "are you sure you want to navigate"
+   * notification.
+   */
+  markDirty: function InspectorPanel_markDirty() {
+    this.isDirty = true;
+  },
+
+  /**
+   * Build the sidebar.
+   */
+  setupSidebar: function InspectorPanel_setupSidebar() {
+    let tabbox = this.panelDoc.querySelector("#inspector-sidebar");
+    this.sidebar = new ToolSidebar(tabbox, this);
+
+    let defaultTab = Services.prefs.getCharPref("devtools.inspector.activeSidebar");
+
+    this._setDefaultSidebar = function(event, toolId) {
+      Services.prefs.setCharPref("devtools.inspector.activeSidebar", toolId);
+    }.bind(this);
+
+    this.sidebar.on("select", this._setDefaultSidebar);
+
+    this.sidebar.addTab("ruleview",
+                        "chrome://browser/content/devtools/cssruleview.xul",
+                        "ruleview" == defaultTab);
+
+    this.sidebar.addTab("computedview",
+                        "chrome://browser/content/devtools/csshtmltree.xul",
+                        "computedview" == defaultTab);
+
+    this.sidebar.addTab("layoutview",
+                        "chrome://browser/content/devtools/layoutview/view.xhtml",
+                        "layoutview" == defaultTab);
+
+    this.sidebar.show();
+  },
+
+  /**
+   * Reset the inspector on navigate away.
+   */
+  onNavigatedAway: function InspectorPanel_onNavigatedAway(event, newWindow) {
+    this.selection.setNode(null);
+    this._destroyMarkup();
+    this.isDirty = false;
+    let self = this;
+    newWindow.addEventListener("DOMContentLoaded", function onDOMReady() {
+      newWindow.removeEventListener("DOMContentLoaded", onDOMReady, true);;
+      if (!self.selection.node) {
+        self.selection.setNode(newWindow.document.documentElement);
+      }
+      self._initMarkup();
+    }, true);
+  },
+
+  /**
+   * Show a message if the inspector is dirty.
+   */
+  preventNavigateAway: function InspectorPanel_preventNavigateAway(event, request) {
+    if (!this.isDirty) {
+      return;
+    }
+
+    request.suspend();
+
+    let notificationBox = this._toolbox.getNotificationBox();
+    let notification = notificationBox.
+      getNotificationWithValue("inspector-page-navigation");
+
+    if (notification) {
+      notificationBox.removeNotification(notification, true);
+    }
+
+    let cancelRequest = function onCancelRequest() {
+      if (request) {
+        request.cancel(Cr.NS_BINDING_ABORTED);
+        request.resume(); // needed to allow the connection to be cancelled.
+        request = null;
+      }
+    };
+
+    let eventCallback = function onNotificationCallback(event) {
+      if (event == "removed") {
+        cancelRequest();
+      }
+    };
+
+    let buttons = [
+      {
+        id: "inspector.confirmNavigationAway.buttonLeave",
+        label: this.strings.GetStringFromName("confirmNavigationAway.buttonLeave"),
+        accessKey: this.strings.GetStringFromName("confirmNavigationAway.buttonLeaveAccesskey"),
+        callback: function onButtonLeave() {
+          if (request) {
+            request.resume();
+            request = null;
+            return true;
+          }
+          return false;
+        }.bind(this),
+      },
+      {
+        id: "inspector.confirmNavigationAway.buttonStay",
+        label: this.strings.GetStringFromName("confirmNavigationAway.buttonStay"),
+        accessKey: this.strings.GetStringFromName("confirmNavigationAway.buttonStayAccesskey"),
+        callback: cancelRequest
+      },
+    ];
+
+    let message = this.strings.GetStringFromName("confirmNavigationAway.message2");
+
+    notification = notificationBox.appendNotification(message,
+      "inspector-page-navigation", "chrome://browser/skin/Info.png",
+      notificationBox.PRIORITY_WARNING_HIGH, buttons, eventCallback);
+
+    // Make sure this not a transient notification, to avoid the automatic
+    // transient notification removal.
+    notification.persistence = -1;
+  },
+
+  /**
+   * When a new node is selected.
+   */
+  onNewSelection: function InspectorPanel_onNewSelection() {
+    this.cancelLayoutChange();
+  },
+
+  /**
+   * Destroy the inspector.
+   */
+  destroy: function InspectorPanel__destroy() {
+    if (this._destroyed) {
+      return;
+    }
+    this.cancelLayoutChange();
+    this._destroyed = true;
+
+    this._toolbox = null;
+
+    if (this.browser) {
+      this.browser.removeEventListener("resize", this.scheduleLayoutChange, true);
+      this.browser = null;
+    }
+
+    this.target.off("will-navigate", this.preventNavigateAway);
+    this.target.off("navigate", this.onNavigatedAway);
+
+    if (this.highlighter) {
+      this.highlighter.off("locked", this.updateInspectorButton);
+      this.highlighter.off("unlocked", this.updateInspectorButton);
+      this.highlighter.destroy();
+    }
+
+    this.sidebar.off("select", this._setDefaultSidebar);
+    this.sidebar.destroy();
+    this.sidebar = null;
+
+    this.nodemenu.removeEventListener("popupshowing", this._setupNodeMenu, true);
+    this.nodemenu.removeEventListener("popuphiding", this._resetNodeMenu, true);
+    this.breadcrumbs.destroy();
+    this.selection.off("new-node", this.onNewSelection);
+    this._destroyMarkup();
+    this._selection.destroy();
+    this._selection = null;
+    this.panelWin.inspector = null;
+    this.target = null;
+    this.panelDoc = null;
+    this.panelWin = null;
+    this.breadcrumbs = null;
+    this.lastNodemenuItem = null;
+    this.nodemenu = null;
+    this.highlighter = null;
+  },
+
+  /**
+   * Show the node menu.
+   */
+  showNodeMenu: function InspectorPanel_showNodeMenu(aButton, aPosition, aExtraItems) {
+    if (aExtraItems) {
+      for (let item of aExtraItems) {
+        this.nodemenu.appendChild(item);
+      }
+    }
+    this.nodemenu.openPopup(aButton, aPosition, 0, 0, true, false);
+  },
+
+  hideNodeMenu: function InspectorPanel_hideNodeMenu() {
+    this.nodemenu.hidePopup();
+  },
+
+  /**
+   * Disable the delete item if needed. Update the pseudo classes.
+   */
+  _setupNodeMenu: function InspectorPanel_setupNodeMenu() {
+    // Set the pseudo classes
+    for (let name of ["hover", "active", "focus"]) {
+      let menu = this.panelDoc.getElementById("node-menu-pseudo-" + name);
+      let checked = DOMUtils.hasPseudoClassLock(this.selection.node, ":" + name);
+      menu.setAttribute("checked", checked);
+    }
+
+    // Disable delete item if needed
+    let deleteNode = this.panelDoc.getElementById("node-menu-delete");
+    if (this.selection.isRoot()) {
+      deleteNode.setAttribute("disabled", "true");
+    } else {
+      deleteNode.removeAttribute("disabled");
+    }
+  },
+
+  _resetNodeMenu: function InspectorPanel_resetNodeMenu() {
+    // Remove any extra items
+    while (this.lastNodemenuItem.nextSibling) {
+      let toDelete = this.lastNodemenuItem.nextSibling;
+      toDelete.parentNode.removeChild(toDelete);
+    }
+  },
+
+  _initMarkup: function InspectorPanel_initMarkup() {
+    let doc = this.panelDoc;
+
+    this._markupBox = doc.getElementById("markup-box");
+
+    // create tool iframe
+    this._markupFrame = doc.createElement("iframe");
+    this._markupFrame.setAttribute("flex", "1");
+    this._markupFrame.setAttribute("tooltip", "aHTMLTooltip");
+    this._markupFrame.setAttribute("context", "inspector-node-popup");
+
+    // This is needed to enable tooltips inside the iframe document.
+    this._boundMarkupFrameLoad = function InspectorPanel_initMarkupPanel_onload() {
+      this._markupFrame.contentWindow.focus();
+      this._onMarkupFrameLoad();
+    }.bind(this);
+    this._markupFrame.addEventListener("load", this._boundMarkupFrameLoad, true);
+
+    this._markupBox.setAttribute("hidden", true);
+    this._markupBox.appendChild(this._markupFrame);
+    this._markupFrame.setAttribute("src", "chrome://browser/content/devtools/markup-view.xhtml");
+  },
+
+  _onMarkupFrameLoad: function InspectorPanel__onMarkupFrameLoad() {
+    this._markupFrame.removeEventListener("load", this._boundMarkupFrameLoad, true);
+    delete this._boundMarkupFrameLoad;
+
+    this._markupBox.removeAttribute("hidden");
+
+    let controllerWindow;
+    if (this.tabTarget) {
+      controllerWindow = this.target.tab.ownerDocument.defaultView;
+    } else if (this.winTarget) {
+      controllerWindow = this.target.window;
+    }
+    this.markup = new MarkupView(this, this._markupFrame, controllerWindow);
+
+    this.emit("markuploaded");
+  },
+
+  _destroyMarkup: function InspectorPanel__destroyMarkup() {
+    if (this._boundMarkupFrameLoad) {
+      this._markupFrame.removeEventListener("load", this._boundMarkupFrameLoad, true);
+      delete this._boundMarkupFrameLoad;
+    }
+
+    if (this.markup) {
+      this.markup.destroy();
+      delete this.markup;
+    }
+
+    if (this._markupFrame) {
+      this._markupFrame.parentNode.removeChild(this._markupFrame);
+      delete this._markupFrame;
+    }
+  },
+
+  /**
+   * Toggle a pseudo class.
+   */
+  togglePseudoClass: function InspectorPanel_togglePseudoClass(aPseudo) {
+    if (this.selection.isElementNode()) {
+      if (DOMUtils.hasPseudoClassLock(this.selection.node, aPseudo)) {
+        this.breadcrumbs.nodeHierarchy.forEach(function(crumb) {
+          DOMUtils.removePseudoClassLock(crumb.node, aPseudo);
+        });
+      } else {
+        let hierarchical = aPseudo == ":hover" || aPseudo == ":active";
+        let node = this.selection.node;
+        do {
+          DOMUtils.addPseudoClassLock(node, aPseudo);
+          node = node.parentNode;
+        } while (hierarchical && node.parentNode)
+      }
+    }
+    this.selection.emit("pseudoclass");
+  },
+
+  /**
+   * Copy the innerHTML of the selected Node to the clipboard.
+   */
+  copyInnerHTML: function InspectorPanel_copyInnerHTML()
+  {
+    if (!this.selection.isNode()) {
+      return;
+    }
+    let toCopy = this.selection.node.innerHTML;
+    if (toCopy) {
+      clipboardHelper.copyString(toCopy);
+    }
+  },
+
+  /**
+   * Copy the outerHTML of the selected Node to the clipboard.
+   */
+  copyOuterHTML: function InspectorPanel_copyOuterHTML()
+  {
+    if (!this.selection.isNode()) {
+      return;
+    }
+    let toCopy = this.selection.node.outerHTML;
+    if (toCopy) {
+      clipboardHelper.copyString(toCopy);
+    }
+  },
+
+  /**
+   * Delete the selected node.
+   */
+  deleteNode: function IUI_deleteNode() {
+    if (!this.selection.isNode() ||
+         this.selection.isRoot()) {
+      return;
+    }
+
+    let toDelete = this.selection.node;
+
+    let parent = this.selection.node.parentNode;
+
+    // If the markup panel is active, use the markup panel to delete
+    // the node, making this an undoable action.
+    if (this.markup) {
+      this.markup.deleteNode(toDelete);
+    } else {
+      // remove the node from content
+      parent.removeChild(toDelete);
+    }
+  },
+
+  /**
+   * Schedule a low-priority change event for things like paint
+   * and resize.
+   */
+  scheduleLayoutChange: function Inspector_scheduleLayoutChange()
+  {
+    if (this._timer) {
+      return null;
+    }
+    this._timer = this.panelWin.setTimeout(function() {
+      this.emit("layout-change");
+      this._timer = null;
+    }.bind(this), LAYOUT_CHANGE_TIMER);
+  },
+
+  /**
+   * Cancel a pending low-priority change event if any is
+   * scheduled.
+   */
+  cancelLayoutChange: function Inspector_cancelLayoutChange()
+  {
+    if (this._timer) {
+      this.panelWin.clearTimeout(this._timer);
+      delete this._timer;
+    }
+  },
+
+}
+
+/////////////////////////////////////////////////////////////////////////
+//// Initializers
+
+XPCOMUtils.defineLazyGetter(InspectorPanel.prototype, "strings",
+  function () {
+    return Services.strings.createBundle(
+            "chrome://browser/locale/devtools/inspector.properties");
+  });
+
+XPCOMUtils.defineLazyGetter(this, "clipboardHelper", function() {
+  return Cc["@mozilla.org/widget/clipboardhelper;1"].
+    getService(Ci.nsIClipboardHelper);
+});
+
+
+XPCOMUtils.defineLazyGetter(this, "DOMUtils", function () {
+  return Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils);
+});
diff --git a/browser/devtools/inspector/Makefile.in b/browser/devtools/inspector/Makefile.in
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/Makefile.in
@@ -0,0 +1,18 @@
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+DEPTH		= @DEPTH@
+topsrcdir	= @top_srcdir@
+srcdir		= @srcdir@
+VPATH		= @srcdir@
+
+include $(DEPTH)/config/autoconf.mk
+
+TEST_DIRS += test
+
+include $(topsrcdir)/config/rules.mk
+
+libs::
+	$(NSINSTALL) $(srcdir)/*.jsm $(FINAL_TARGET)/modules/devtools/
diff --git a/browser/devtools/inspector/Selection.jsm b/browser/devtools/inspector/Selection.jsm
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/Selection.jsm
@@ -0,0 +1,230 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const Cu = Components.utils;
+Cu.import("resource:///modules/devtools/EventEmitter.jsm");
+
+this.EXPORTED_SYMBOLS = ["Selection"];
+
+/**
+ * API
+ *
+ *   new Selection(node=null, track={attributes,detached});
+ *   destroy()
+ *   node (readonly)
+ *   setNode(node, origin="unknown")
+ *
+ * Helpers:
+ *
+ *   window
+ *   document
+ *   isRoot()
+ *   isNode()
+ *   isHTMLNode()
+ *
+ * Check the nature of the node:
+ *
+ *   isElementNode()
+ *   isAttributeNode()
+ *   isTextNode()
+ *   isCDATANode()
+ *   isEntityRefNode()
+ *   isEntityNode()
+ *   isProcessingInstructionNode()
+ *   isCommentNode()
+ *   isDocumentNode()
+ *   isDocumentTypeNode()
+ *   isDocumentFragmentNode()
+ *   isNotationNode()
+ *
+ * Events:
+ *   "new-node" when the inner node changed
+ *   "attribute-changed" when an attribute is changed (only if tracked)
+ *   "detached" when the node (or one of its parents) is removed from the document (only if tracked)
+ *   "reparented" when the node (or one of its parents) is moved under a different node (only if tracked)
+ */
+
+/**
+ * A Selection object. Hold a reference to a node.
+ * Includes some helpers, fire some helpful events.
+ *
+ * @param node Inner node.
+ *    Can be null. Can be (un)set in the future via the "node" property;
+ * @param trackAttribute Tell if events should be fired when the attributes of
+ *    the ndoe change.
+ *
+ */
+this.Selection = function Selection(node=null, track={attributes:true,detached:true}) {
+  new EventEmitter(this);
+  this._onMutations = this._onMutations.bind(this);
+  this.track = track;
+  this.setNode(node);
+}
+
+Selection.prototype = {
+  _node: null,
+
+  _onMutations: function(mutations) {
+    let attributeChange = false;
+    let detached = false;
+    for (let m of mutations) {
+      if (!attributeChange && m.type == "attributes") {
+        attributeChange = true;
+      }
+      if (m.type == "childList") {
+        if (!detached && !this.isConnected()) {
+          detached = true;
+        }
+      }
+    }
+
+    if (attributeChange)
+      this.emit("attribute-changed");
+    if (detached)
+      this.emit("detached");
+  },
+
+  _attachEvents: function SN__attachEvents() {
+    if (!this.window || !this.isNode() || !this.track) {
+      return;
+    }
+
+    if (this.track.attributes) {
+      this._nodeObserver = new this.window.MutationObserver(this._onMutations);
+      this._nodeObserver.observe(this.node, {attributes: true});
+    }
+
+    if (this.track.detached) {
+      this._docObserver = new this.window.MutationObserver(this._onMutations);
+      this._docObserver.observe(this.document.documentElement, {childList: true, subtree: true});
+    }
+  },
+
+  _detachEvents: function SN__detachEvents() {
+    // `disconnect` fail if node's document has
+    // been deleted.
+    try {
+      if (this._nodeObserver)
+        this._nodeObserver.disconnect();
+    } catch(e) {}
+    try {
+      if (this._docObserver)
+        this._docObserver.disconnect();
+    } catch(e) {}
+  },
+
+  destroy: function SN_destroy() {
+    this._detachEvents();
+    this.setNode(null);
+  },
+
+  setNode: function SN_setNode(value, reason="unknown") {
+    this.reason = reason;
+    if (value !== this._node) {
+      let previousNode = this._node;
+      this._detachEvents();
+      this._node = value;
+      this._attachEvents();
+      this.emit("new-node", previousNode, this.reason);
+    }
+  },
+
+  get node() {
+    return this._node;
+  },
+
+  get window() {
+    if (this.isNode()) {
+      return this.node.ownerDocument.defaultView;
+    }
+    return null;
+  },
+
+  get document() {
+    if (this.isNode()) {
+      return this.node.ownerDocument;
+    }
+    return null;
+  },
+
+  isRoot: function SN_isRootNode() {
+    return this.isNode() &&
+           this.isConnected() &&
+           this.node.ownerDocument.documentElement === this.node;
+  },
+
+  isNode: function SN_isNode() {
+    return (this.node &&
+            this.node.ownerDocument &&
+            this.node.ownerDocument.defaultView &&
+            this.node instanceof this.node.ownerDocument.defaultView.Node);
+  },
+
+  isConnected: function SN_isConnected() {
+    try {
+      let doc = this.document;
+      return doc && doc.defaultView && doc.documentElement.contains(this.node);
+    } catch (e) {
+      // "can't access dead object" error
+      return false;
+    }
+  },
+
+  isHTMLNode: function SN_isHTMLNode() {
+    let xhtml_ns = "http://www.w3.org/1999/xhtml";
+    return this.isNode() && this.node.namespaceURI == xhtml_ns;
+  },
+
+  // Node type
+
+  isElementNode: function SN_isElementNode() {
+    return this.isNode() && this.node.nodeType == this.window.Node.ELEMENT_NODE;
+  },
+
+  isAttributeNode: function SN_isAttributeNode() {
+    return this.isNode() && this.node.nodeType == this.window.Node.ATTRIBUTE_NODE;
+  },
+
+  isTextNode: function SN_isTextNode() {
+    return this.isNode() && this.node.nodeType == this.window.Node.TEXT_NODE;
+  },
+
+  isCDATANode: function SN_isCDATANode() {
+    return this.isNode() && this.node.nodeType == this.window.Node.CDATA_SECTION_NODE;
+  },
+
+  isEntityRefNode: function SN_isEntityRefNode() {
+    return this.isNode() && this.node.nodeType == this.window.Node.ENTITY_REFERENCE_NODE;
+  },
+
+  isEntityNode: function SN_isEntityNode() {
+    return this.isNode() && this.node.nodeType == this.window.Node.ENTITY_NODE;
+  },
+
+  isProcessingInstructionNode: function SN_isProcessingInstructionNode() {
+    return this.isNode() && this.node.nodeType == this.window.Node.PROCESSING_INSTRUCTION_NODE;
+  },
+
+  isCommentNode: function SN_isCommentNode() {
+    return this.isNode() && this.node.nodeType == this.window.Node.PROCESSING_INSTRUCTION_NODE;
+  },
+
+  isDocumentNode: function SN_isDocumentNode() {
+    return this.isNode() && this.node.nodeType == this.window.Node.DOCUMENT_NODE;
+  },
+
+  isDocumentTypeNode: function SN_isDocumentTypeNode() {
+    return this.isNode() && this.node.nodeType ==this.window. Node.DOCUMENT_TYPE_NODE;
+  },
+
+  isDocumentFragmentNode: function SN_isDocumentFragmentNode() {
+    return this.isNode() && this.node.nodeType == this.window.Node.DOCUMENT_FRAGMENT_NODE;
+  },
+
+  isNotationNode: function SN_isNotationNode() {
+    return this.isNode() && this.node.nodeType == this.window.Node.NOTATION_NODE;
+  },
+}
diff --git a/browser/devtools/inspector/inspector.css b/browser/devtools/inspector/inspector.css
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/inspector.css
@@ -0,0 +1,11 @@
+.inspector-breadcrumbs-button {
+  direction: ltr;
+}
+
+.devtools-toolbarbutton:not([label]) > .toolbarbutton-text {
+  display: none;
+}
+
+#inspector-sidebar {
+  min-width: 250px;
+}
diff --git a/browser/devtools/inspector/inspector.xul b/browser/devtools/inspector/inspector.xul
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/inspector.xul
@@ -0,0 +1,71 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+<?xml-stylesheet href="chrome://browser/content/devtools/inspector/inspector.css" type="text/css"?>
+<?xml-stylesheet href="chrome://browser/skin/" type="text/css"?>
+<?xml-stylesheet href="chrome://browser/skin/devtools/common.css" type="text/css"?>
+<?xml-stylesheet href="chrome://browser/skin/devtools/inspector.css" type="text/css"?>
+<!DOCTYPE window [
+<!ENTITY % inspectorDTD SYSTEM "chrome://browser/locale/devtools/inspector.dtd" >
+ %inspectorDTD;
+]>
+
+<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
+
+  <script type="application/javascript"
+          src="chrome://global/content/viewSourceUtils.js"/>
+
+  <popupset id="inspectorPopupSet">
+    <!-- Used by the Markup Panel, the Highlighter and the Breadcrumbs -->
+    <menupopup id="inspector-node-popup">
+      <menuitem id="node-menu-copyinner"
+        label="&inspectorHTMLCopyInner.label;"
+        accesskey="&inspectorHTMLCopyInner.accesskey;"
+        oncommand="inspector.copyInnerHTML()"/>
+      <menuitem id="node-menu-copyouter"
+        label="&inspectorHTMLCopyOuter.label;"
+        accesskey="&inspectorHTMLCopyOuter.accesskey;"
+        oncommand="inspector.copyOuterHTML()"/>
+      <menuseparator/>
+      <menuitem id="node-menu-delete"
+        label="&inspectorHTMLDelete.label;"
+        accesskey="&inspectorHTMLDelete.accesskey;"
+        oncommand="inspector.deleteNode()"/>
+      <menuseparator/>
+      <menuitem id="node-menu-pseudo-hover"
+        label=":hover" type="checkbox"
+        oncommand="inspector.togglePseudoClass(':hover')"/>
+      <menuitem id="node-menu-pseudo-active"
+        label=":active" type="checkbox"
+        oncommand="inspector.togglePseudoClass(':active')"/>
+      <menuitem id="node-menu-pseudo-focus"
+        label=":focus" type="checkbox"
+        oncommand="inspector.togglePseudoClass(':focus')"/>
+    </menupopup>
+  </popupset>
+
+  <hbox flex="1">
+    <vbox flex="1">
+      <toolbar id="inspector-toolbar"
+        class="devtools-toolbar"
+        nowindowdrag="true">
+        <toolbarbutton id="inspector-inspect-toolbutton"
+          tooltiptext="&inspector.selectButton.tooltip;"
+          class="devtools-toolbarbutton"
+          hidden="true"
+          oncommand="inspector.highlighter.unlock()"/>
+        <arrowscrollbox id="inspector-breadcrumbs"
+          flex="1" orient="horizontal"
+          clicktoscroll="true"/>
+      </toolbar>
+      <vbox flex="1" id="markup-box">
+      </vbox>
+    </vbox>
+    <splitter class="devtools-side-splitter"/>
+    <tabbox id="inspector-sidebar" class="devtools-sidebar-tabs" hidden="true">
+      <tabs/>
+      <tabpanels flex="1"/>
+    </tabbox>
+  </hbox>
+</window>
diff --git a/browser/devtools/inspector/test/Makefile.in b/browser/devtools/inspector/test/Makefile.in
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/Makefile.in
@@ -0,0 +1,43 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+DEPTH     = @DEPTH@
+topsrcdir	= @top_srcdir@
+srcdir		= @srcdir@
+VPATH		= @srcdir@
+relativesrcdir  = @relativesrcdir@
+
+include $(DEPTH)/config/autoconf.mk
+include $(topsrcdir)/config/rules.mk
+
+_BROWSER_FILES = \
+		browser_inspector_iframeTest.js \
+		browser_inspector_initialization.js \
+		browser_inspector_highlighter.js \
+		browser_inspector_scrolling.js \
+		browser_inspector_bug_665880.js \
+		browser_inspector_infobar.js \
+		browser_inspector_breadcrumbs.html \
+		browser_inspector_breadcrumbs.js \
+		browser_inspector_invalidate.js \
+		browser_inspector_menu.js \
+		browser_inspector_pseudoClass_menu.js \
+		browser_inspector_destroyselection.html \
+		browser_inspector_destroyselection.js \
+		browser_inspector_bug_699308_iframe_navigation.js \
+		browser_inspector_bug_672902_keyboard_shortcuts.js \
+		browser_inspector_bug_566084_location_changed.js \
+		browser_inspector_sidebarstate.js \
+		browser_inspector_pseudoclass_lock.js \
+		browser_inspector_cmd_inspect.js \
+		browser_inspector_cmd_inspect.html \
+		browser_inspector_highlighter_autohide.js \
+		browser_inspector_changes.js \
+		browser_inspector_bug_674871.js \
+		head.js \
+		helpers.js \
+		$(NULL)
+
+libs::	$(_BROWSER_FILES)
+	$(INSTALL) $(foreach f,$^,"$f") $(DEPTH)/_tests/testing/mochitest/browser/$(relativesrcdir)
diff --git a/browser/devtools/inspector/test/browser_inspector_breadcrumbs.html b/browser/devtools/inspector/test/browser_inspector_breadcrumbs.html
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_breadcrumbs.html
@@ -0,0 +1,40 @@
+<!DOCTYPE html>
+<html>
+  <head>
+    <style>
+      div {
+        min-height: 10px; min-width: 10px;
+        border: 1px solid red;
+        margin: 10px;
+      }
+    </style>
+  </head>
+  <body>
+    <article id="i1">
+      <div id="i11">
+        <div id="i111">
+          <div id="i1111">
+          </div>
+        </div>
+      </div>
+    </article>
+    <article id="i2">
+      <div id="i21">
+        <div id="i211">
+          <div id="i2111">
+          </div>
+        </div>
+      </div>
+      <div id="i22">
+        <div id="i221">
+        </div>
+        <div id="i222">
+          <div id="i2221">
+            <div id="i22211">
+            </div>
+          </div>
+        </div>
+      </div>
+    </article>
+  </body>
+</html>
diff --git a/browser/devtools/inspector/test/browser_inspector_breadcrumbs.js b/browser/devtools/inspector/test/browser_inspector_breadcrumbs.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_breadcrumbs.js
@@ -0,0 +1,96 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+function test()
+{
+  waitForExplicitFinish();
+  ignoreAllUncaughtExceptions();
+
+  let nodes = [
+    {nodeId: "i1111", result: "i1 i11 i111 i1111"},
+    {nodeId: "i22", result: "i2 i22 i221"},
+    {nodeId: "i2111", result: "i2 i21 i211 i2111"},
+    {nodeId: "i21", result: "i2 i21 i211 i2111"},
+    {nodeId: "i22211", result: "i2 i22 i222 i2221 i22211"},
+    {nodeId: "i22", result: "i2 i22 i222 i2221 i22211"},
+  ];
+
+  let doc;
+  let nodes;
+  let cursor;
+  let inspector;
+
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function onload() {
+    gBrowser.selectedBrowser.removeEventListener("load", onload, true);
+    doc = content.document;
+    waitForFocus(setupTest, content);
+  }, true);
+
+  content.location = "http://mochi.test:8888/browser/browser/devtools/inspector/test/browser_inspector_breadcrumbs.html";
+
+  function setupTest()
+  {
+    for (let i = 0; i < nodes.length; i++) {
+      let node = doc.getElementById(nodes[i].nodeId);
+      nodes[i].node = node;
+      ok(nodes[i].node, "node " + nodes[i].nodeId + " found");
+    }
+
+    openInspector(runTests);
+  }
+
+  function runTests(aInspector)
+  {
+    inspector = aInspector;
+    cursor = 0;
+    inspector.selection.on("new-node", nodeSelected);
+    executeSoon(function() {
+      inspector.selection.setNode(nodes[0].node);
+    });
+  }
+
+  function nodeSelected()
+  {
+    executeSoon(function() {
+      performTest();
+      cursor++;
+      if (cursor >= nodes.length) {
+        inspector.selection.off("new-node", nodeSelected);
+        finishUp();
+      } else {
+        let node = nodes[cursor].node;
+        inspector.selection.setNode(node);
+      }
+    });
+  }
+
+  function performTest()
+  {
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    let panel = gDevTools.getPanelForTarget("inspector", target);
+    let container = panel.panelDoc.getElementById("inspector-breadcrumbs");
+    let buttonsLabelIds = nodes[cursor].result.split(" ");
+
+    // html > body > …
+    is(container.childNodes.length, buttonsLabelIds.length + 2, "Node " + cursor + ": Items count");
+
+    for (let i = 2; i < container.childNodes.length; i++) {
+      let expectedId = "#" + buttonsLabelIds[i - 2];
+      let button = container.childNodes[i];
+      let labelId = button.querySelector(".inspector-breadcrumbs-id");
+      is(labelId.textContent, expectedId, "Node " + cursor + ": button " + i + " matches");
+    }
+
+    let checkedButton = container.querySelector("button[checked]");
+    let labelId = checkedButton.querySelector(".inspector-breadcrumbs-id");
+    let id = inspector.selection.node.id;
+    is(labelId.textContent, "#" + id, "Node " + cursor + ": selection matches");
+  }
+
+  function finishUp() {
+    doc = nodes = null;
+    gBrowser.removeCurrentTab();
+    finish();
+  }
+}
diff --git a/browser/devtools/inspector/test/browser_inspector_bug_566084_location_changed.js b/browser/devtools/inspector/test/browser_inspector_bug_566084_location_changed.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_bug_566084_location_changed.js
@@ -0,0 +1,131 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+let tempScope = {};
+Cu.import("resource:///modules/devtools/Target.jsm", tempScope);
+let TargetFactory = tempScope.TargetFactory;
+
+function test() {
+  let notificationBox, inspector;
+  let alertActive1_called = false;
+  let alertActive2_called = false;
+
+  function startLocationTests() {
+    openInspector(runInspectorTests);
+  }
+
+  function runInspectorTests(aInspector) {
+    inspector = aInspector;
+
+    let para = content.document.querySelector("p");
+    ok(para, "found the paragraph element");
+    is(para.textContent, "init", "paragraph content is correct");
+
+    inspector.markDirty();
+
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    let toolbox = gDevTools.getToolboxForTarget(target);
+    notificationBox = toolbox.getNotificationBox();
+    notificationBox.addEventListener("AlertActive", alertActive1, false);
+
+    ok(toolbox, "We have access to the notificationBox");
+
+    gBrowser.selectedBrowser.addEventListener("load", onPageLoad, true);
+
+    content.location = "data:text/html,<div>location change test 1 for " +
+      "inspector</div><p>test1</p>";
+  }
+
+  function alertActive1() {
+    alertActive1_called = true;
+    notificationBox.removeEventListener("AlertActive", alertActive1, false);
+
+    let notification = notificationBox.
+      getNotificationWithValue("inspector-page-navigation");
+    ok(notification, "found the inspector-page-navigation notification");
+
+    // By closing the notification it is expected that page navigation is
+    // canceled.
+    executeSoon(function() {
+      notification.close();
+      locationTest2();
+    });
+  }
+
+  function locationTest2() {
+    // Location did not change.
+    let para = content.document.querySelector("p");
+    ok(para, "found the paragraph element, second time");
+    is(para.textContent, "init", "paragraph content is correct");
+
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    let inspector = gDevTools.getPanelForTarget("inspector", target);
+    ok(inspector, "Inspector still alive");
+
+    notificationBox.addEventListener("AlertActive", alertActive2, false);
+
+    content.location = "data:text/html,<div>location change test 2 for " +
+      "inspector</div><p>test2</p>";
+  }
+
+  function alertActive2() {
+    alertActive2_called = true;
+    notificationBox.removeEventListener("AlertActive", alertActive2, false);
+
+    let notification = notificationBox.
+      getNotificationWithValue("inspector-page-navigation");
+    ok(notification, "found the inspector-page-navigation notification");
+
+    let buttons = notification.querySelectorAll("button");
+    let buttonLeave = null;
+    for (let i = 0; i < buttons.length; i++) {
+      if (buttons[i].buttonInfo.id == "inspector.confirmNavigationAway.buttonLeave") {
+        buttonLeave = buttons[i];
+        break;
+      }
+    }
+
+    ok(buttonLeave, "the Leave page button was found");
+
+    // Accept page navigation.
+    executeSoon(function(){
+      buttonLeave.doCommand();
+    });
+  }
+
+  function onPageLoad() {
+    gBrowser.selectedBrowser.removeEventListener("load", onPageLoad, true);
+
+    isnot(content.location.href.indexOf("test2"), -1,
+          "page navigated to the correct location");
+
+    let para = content.document.querySelector("p");
+    ok(para, "found the paragraph element, third time");
+    is(para.textContent, "test2", "paragraph content is correct");
+
+    let root = content.document.documentElement;
+    ok(inspector.selection.node, root, "Selection is the root of the new page.");
+
+    ok(alertActive1_called, "first notification box has been showed");
+    ok(alertActive2_called, "second notification box has been showed");
+    testEnd();
+  }
+
+
+  function testEnd() {
+    notificationBox = null;
+    gBrowser.removeCurrentTab();
+    executeSoon(finish);
+  }
+
+  waitForExplicitFinish();
+
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function onBrowserLoad() {
+    gBrowser.selectedBrowser.removeEventListener("load", onBrowserLoad, true);
+    waitForFocus(startLocationTests, content);
+  }, true);
+
+  content.location = "data:text/html,<div>location change tests for " +
+    "inspector.</div><p>init</p>";
+}
diff --git a/browser/devtools/inspector/test/browser_inspector_bug_665880.js b/browser/devtools/inspector/test/browser_inspector_bug_665880.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_bug_665880.js
@@ -0,0 +1,49 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+
+function test()
+{
+  waitForExplicitFinish();
+  ignoreAllUncaughtExceptions();
+
+  let doc;
+  let objectNode;
+
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function() {
+    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
+    doc = content.document;
+    waitForFocus(setupObjectInspectionTest, content);
+  }, true);
+
+  content.location = "data:text/html,<object style='padding: 100px'><p>foobar</p></object>";
+
+  function setupObjectInspectionTest()
+  {
+    objectNode = doc.querySelector("object");
+    ok(objectNode, "we have the object node");
+    openInspector(runObjectInspectionTest);
+  }
+
+  function runObjectInspectionTest(inspector)
+  {
+    inspector.highlighter.once("locked", performTestComparison);
+    inspector.selection.setNode(objectNode, "");
+  }
+
+  function performTestComparison()
+  {
+    is(getActiveInspector().selection.node, objectNode, "selection matches node");
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    gDevTools.closeToolbox(target);
+    finishUp();
+  }
+
+
+  function finishUp() {
+    doc = objectNode = null;
+    gBrowser.removeCurrentTab();
+    finish();
+  }
+}
diff --git a/browser/devtools/inspector/test/browser_inspector_bug_672902_keyboard_shortcuts.js b/browser/devtools/inspector/test/browser_inspector_bug_672902_keyboard_shortcuts.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_bug_672902_keyboard_shortcuts.js
@@ -0,0 +1,107 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+
+// Tests that the keybindings for highlighting different elements work as
+// intended.
+
+function test()
+{
+  waitForExplicitFinish();
+
+  let doc;
+  let node;
+  let inspector;
+
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function onload() {
+    gBrowser.selectedBrowser.removeEventListener("load", onload, true);
+    doc = content.document;
+    waitForFocus(setupKeyBindingsTest, content);
+  }, true);
+
+  content.location = "data:text/html,<html><head><title>Test for the " +
+                     "highlighter keybindings</title></head><body><h1>Hello" +
+                     "</h1><p><strong>Greetings, earthlings!</strong> I come" +
+                     " in peace.</body></html>";
+
+  function setupKeyBindingsTest()
+  {
+    openInspector(findAndHighlightNode);
+  }
+
+  function findAndHighlightNode(aInspector)
+  {
+    inspector = aInspector;
+
+    executeSoon(function() {
+      inspector.selection.once("new-node", highlightBodyNode);
+      // Test that navigating around without a selected node gets us to the
+      // body element.
+      node = doc.querySelector("body");
+      let bc = inspector.breadcrumbs;
+      bc.nodeHierarchy[bc.currentIndex].button.focus();
+      EventUtils.synthesizeKey("VK_RIGHT", { });
+    });
+  }
+
+  function highlightBodyNode()
+  {
+    is(inspector.selection.node, node, "selected body element");
+
+    executeSoon(function() {
+      inspector.selection.once("new-node", highlightHeaderNode);
+      // Test that moving to the child works.
+      node = doc.querySelector("h1");
+      EventUtils.synthesizeKey("VK_RIGHT", { });
+    });
+  }
+
+  function highlightHeaderNode()
+  {
+    is(inspector.selection.node, node, "selected h1 element");
+
+    executeSoon(function() {
+      inspector.selection.once("new-node", highlightParagraphNode);
+      // Test that moving to the next sibling works.
+      node = doc.querySelector("p");
+      EventUtils.synthesizeKey("VK_DOWN", { });
+    });
+  }
+
+  function highlightParagraphNode()
+  {
+    is(inspector.selection.node, node, "selected p element");
+
+    executeSoon(function() {
+      inspector.selection.once("new-node", highlightHeaderNodeAgain);
+      // Test that moving to the previous sibling works.
+      node = doc.querySelector("h1");
+      EventUtils.synthesizeKey("VK_UP", { });
+    });
+  }
+
+  function highlightHeaderNodeAgain()
+  {
+    is(inspector.selection.node, node, "selected h1 element");
+
+    executeSoon(function() {
+      inspector.selection.once("new-node", highlightParentNode);
+      // Test that moving to the parent works.
+      node = doc.querySelector("body");
+      EventUtils.synthesizeKey("VK_LEFT", { });
+    });
+  }
+
+  function highlightParentNode()
+  {
+    is(inspector.selection.node, node, "selected body element");
+    finishUp();
+  }
+
+  function finishUp() {
+    doc = node = null;
+    gBrowser.removeCurrentTab();
+    finish();
+  }
+}
diff --git a/browser/devtools/inspector/test/browser_inspector_bug_674871.js b/browser/devtools/inspector/test/browser_inspector_bug_674871.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_bug_674871.js
@@ -0,0 +1,100 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+function test()
+{
+  waitForExplicitFinish();
+
+  let doc;
+  let iframeNode, iframeBodyNode;
+
+  let iframeSrc = "<style>" +
+                  "body {" +
+                  "margin:0;" +
+                  "height:100%;" +
+                  "background-color:red" +
+                  "}" +
+                  "</style>" +
+                  "<body></body>";
+  let docSrc = "<style>" +
+               "iframe {" +
+               "height:200px;" +
+               "border: 11px solid black;" +
+               "padding: 13px;" +
+               "}" +
+               "body,iframe {" +
+               "margin:0" +
+               "}" +
+               "</style>" +
+               "<body>" +
+               "<iframe src='data:text/html," + iframeSrc + "'></iframe>" +
+               "</body>";
+
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function onload() {
+    gBrowser.selectedBrowser.removeEventListener("load", onload, true);
+    doc = content.document;
+    waitForFocus(setupTest, content);
+  }, true);
+
+  content.location = "data:text/html," + docSrc;
+
+  function setupTest()
+  {
+    iframeNode = doc.querySelector("iframe");
+    iframeBodyNode = iframeNode.contentDocument.querySelector("body");
+    ok(iframeNode, "we have the iframe node");
+    ok(iframeBodyNode, "we have the body node");
+    openInspector(runTests);
+  }
+
+  function runTests(inspector)
+  {
+    executeSoon(function() {
+      inspector.highlighter.once("highlighting", isTheIframeSelected);
+      moveMouseOver(iframeNode, 1, 1);
+    });
+  }
+
+  function isTheIframeSelected()
+  {
+    let inspector = getActiveInspector();
+
+    is(inspector.selection.node, iframeNode, "selection matches node");
+    iframeNode.style.marginBottom = doc.defaultView.innerHeight + "px";
+    doc.defaultView.scrollBy(0, 40);
+
+    executeSoon(function() {
+      inspector.selection.once("new-node", isTheIframeContentSelected);
+      moveMouseOver(iframeNode, 40, 40);
+    });
+  }
+
+  function isTheIframeContentSelected()
+  {
+    let inspector = getActiveInspector();
+    is(inspector.selection.node, iframeBodyNode, "selection matches node");
+    // 184 == 200 + 11(border) + 13(padding) - 40(scroll)
+    is(inspector.highlighter._highlightRect.height, 184,
+      "highlighter height");
+
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    gDevTools.closeToolbox(target);
+    finishUp();
+  }
+
+  function finishUp() {
+    doc = iframeNode = iframeBodyNode = null;
+    gBrowser.removeCurrentTab();
+    finish();
+  }
+
+
+  function moveMouseOver(aElement, x, y)
+  {
+    EventUtils.synthesizeMouse(aElement, x, y, {type: "mousemove"},
+                               aElement.ownerDocument.defaultView);
+  }
+
+}
+
diff --git a/browser/devtools/inspector/test/browser_inspector_bug_699308_iframe_navigation.js b/browser/devtools/inspector/test/browser_inspector_bug_699308_iframe_navigation.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_bug_699308_iframe_navigation.js
@@ -0,0 +1,65 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+function test() {
+  let iframe;
+  let iframeLoads = 0;
+  let checksAfterLoads = false;
+  let inspector;
+
+  function startTest() {
+    openInspector(runInspectorTests);
+  }
+
+  function runInspectorTests(aInspector) {
+    inspector = aInspector;
+
+    iframe = content.document.querySelector("iframe");
+    ok(iframe, "found the iframe element");
+
+    ok(inspector.highlighter._highlighting, "Inspector is highlighting");
+
+    iframe.addEventListener("load", onIframeLoad, false);
+
+    executeSoon(function() {
+      iframe.contentWindow.location = "javascript:location.reload()";
+    });
+  }
+
+  function onIframeLoad() {
+    if (++iframeLoads != 2) {
+      executeSoon(function() {
+        iframe.contentWindow.location = "javascript:location.reload()";
+      });
+      return;
+    }
+
+    iframe.removeEventListener("load", onIframeLoad, false);
+
+    ok(inspector.highlighter._highlighting, "Inspector is highlighting after iframe nav");
+
+    checksAfterLoads = true;
+
+    finishTest();
+  }
+
+  function finishTest() {
+    is(iframeLoads, 2, "iframe loads");
+    ok(checksAfterLoads, "the Inspector tests got the chance to run after iframe reloads");
+
+    iframe = null;
+    gBrowser.removeCurrentTab();
+    executeSoon(finish);
+  }
+
+  waitForExplicitFinish();
+
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function onBrowserLoad() {
+    gBrowser.selectedBrowser.removeEventListener("load", onBrowserLoad, true);
+    waitForFocus(startTest, content);
+  }, true);
+
+  content.location = "data:text/html,<p>bug 699308 - test iframe navigation" +
+    "<iframe src='data:text/html,hello world'></iframe>";
+}
diff --git a/browser/devtools/inspector/test/browser_inspector_changes.js b/browser/devtools/inspector/test/browser_inspector_changes.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_changes.js
@@ -0,0 +1,112 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+let doc;
+let testDiv;
+
+function test() {
+  let inspector;
+
+  function createDocument()
+  {
+    doc.body.innerHTML = '<div id="testdiv">Test div!</div>';
+    doc.title = "Inspector Change Test";
+    openInspector(runInspectorTests);
+  }
+
+
+  function getInspectorProp(aName)
+  {
+    let computedview = inspector.sidebar.getWindowForTab("computedview").computedview.view;
+    for each (let view in computedview.propertyViews) {
+      if (view.name == aName) {
+        return view;
+      }
+    }
+    return null;
+  }
+
+  function runInspectorTests(aInspector)
+  {
+    inspector = aInspector;
+    inspector.sidebar.once("computedview-ready", function() {
+      info("Computed View ready");
+      inspector.sidebar.select("computedview");
+
+      testDiv = doc.getElementById("testdiv");
+
+      testDiv.style.fontSize = "10px";
+
+      // Start up the style inspector panel...
+      Services.obs.addObserver(stylePanelTests, "StyleInspector-populated", false);
+
+      inspector.selection.setNode(testDiv);
+    });
+  }
+
+  function stylePanelTests()
+  {
+    Services.obs.removeObserver(stylePanelTests, "StyleInspector-populated");
+
+    let computedview = inspector.sidebar.getWindowForTab("computedview").computedview;
+    ok(computedview, "Style Panel has a cssHtmlTree");
+
+    let propView = getInspectorProp("font-size");
+    is(propView.value, "10px", "Style inspector should be showing the correct font size.");
+
+    Services.obs.addObserver(stylePanelAfterChange, "StyleInspector-populated", false);
+
+    testDiv.style.fontSize = "15px";
+    inspector.emit("layout-change");
+  }
+
+  function stylePanelAfterChange()
+  {
+    Services.obs.removeObserver(stylePanelAfterChange, "StyleInspector-populated");
+
+    let propView = getInspectorProp("font-size");
+    is(propView.value, "15px", "Style inspector should be showing the new font size.");
+
+    stylePanelNotActive();
+  }
+
+  function stylePanelNotActive()
+  {
+    // Tests changes made while the style panel is not active.
+    inspector.sidebar.select("ruleview");
+
+    executeSoon(function() {
+      Services.obs.addObserver(stylePanelAfterSwitch, "StyleInspector-populated", false);
+      testDiv.style.fontSize = "20px";
+      inspector.sidebar.select("computedview");
+    });
+  }
+
+  function stylePanelAfterSwitch()
+  {
+    Services.obs.removeObserver(stylePanelAfterSwitch, "StyleInspector-populated");
+
+    let propView = getInspectorProp("font-size");
+    is(propView.value, "20px", "Style inspector should be showing the newest font size.");
+
+    finishTest();
+  }
+
+  function finishTest()
+  {
+    gBrowser.removeCurrentTab();
+    finish();
+  }
+
+  waitForExplicitFinish();
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function() {
+    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
+    doc = content.document;
+    waitForFocus(createDocument, content);
+  }, true);
+
+  content.location = "data:text/html,basic tests for inspector";
+}
diff --git a/browser/devtools/inspector/test/browser_inspector_cmd_inspect.html b/browser/devtools/inspector/test/browser_inspector_cmd_inspect.html
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_cmd_inspect.html
@@ -0,0 +1,25 @@
+<!doctype html>
+<html lang="en">
+<head>
+  <meta charset="utf-8">
+  <title>GCLI inspect command test</title>
+</head>
+<body>
+
+  <!-- This is a list of 0 h1 elements -->
+
+  <!-- This is a list of 1 div elements -->
+  <div>Hello, I'm a div</div>
+
+  <!-- This is a list of 2 span elements -->
+  <span>Hello, I'm a span</span>
+  <span>And me</span>
+
+  <!-- This is a collection of various things that match only once -->
+  <p class="someclass">.someclass</p>
+  <p id="someid">#someid</p>
+  <button disabled>button[disabled]</button>
+  <p><strong>p&gt;strong</strong></p>
+
+</body>
+</html>
diff --git a/browser/devtools/inspector/test/browser_inspector_cmd_inspect.js b/browser/devtools/inspector/test/browser_inspector_cmd_inspect.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_cmd_inspect.js
@@ -0,0 +1,120 @@
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/ */
+
+// Tests that the inspect command works as it should
+
+const TEST_URI = "http://example.com/browser/browser/devtools/inspector/" +
+                 "test/browser_inspector_cmd_inspect.html";
+
+function test() {
+  DeveloperToolbarTest.test(TEST_URI, [ testInspect ]);
+}
+
+function testInspect() {
+  helpers.setInput('inspect');
+  helpers.check({
+    input:  'inspect',
+    hints:         ' <selector>',
+    markup: 'VVVVVVV',
+    status: 'ERROR',
+    args: {
+      selector: { message: '' },
+    }
+  });
+
+  helpers.setInput('inspect h1');
+  helpers.check({
+    input:  'inspect h1',
+    hints:            '',
+    markup: 'VVVVVVVVII',
+    status: 'ERROR',
+    args: {
+      selector: { message: 'No matches' },
+    }
+  });
+
+  helpers.setInput('inspect span');
+  helpers.check({
+    input:  'inspect span',
+    hints:              '',
+    markup: 'VVVVVVVVEEEE',
+    status: 'ERROR',
+    args: {
+      selector: { message: 'Too many matches (2)' },
+    }
+  });
+
+  helpers.setInput('inspect div');
+  helpers.check({
+    input:  'inspect div',
+    hints:             '',
+    markup: 'VVVVVVVVVVV',
+    status: 'VALID',
+    args: {
+      selector: { message: '' },
+    }
+  });
+
+  helpers.setInput('inspect .someclas');
+  helpers.check({
+    input:  'inspect .someclas',
+    hints:                   '',
+    markup: 'VVVVVVVVIIIIIIIII',
+    status: 'ERROR',
+    args: {
+      selector: { message: 'No matches' },
+    }
+  });
+
+  helpers.setInput('inspect .someclass');
+  helpers.check({
+    input:  'inspect .someclass',
+    hints:                    '',
+    markup: 'VVVVVVVVVVVVVVVVVV',
+    status: 'VALID',
+    args: {
+      selector: { message: '' },
+    }
+  });
+
+  helpers.setInput('inspect #someid');
+  helpers.check({
+    input:  'inspect #someid',
+    hints:                 '',
+    markup: 'VVVVVVVVVVVVVVV',
+    status: 'VALID',
+    args: {
+      selector: { message: '' },
+    }
+  });
+
+  helpers.setInput('inspect button[disabled]');
+  helpers.check({
+    input:  'inspect button[disabled]',
+    hints:                          '',
+    markup: 'VVVVVVVVVVVVVVVVVVVVVVVV',
+    status: 'VALID',
+    args: {
+      selector: { message: '' },
+    }
+  });
+
+  helpers.setInput('inspect p>strong');
+  helpers.check({
+    input:  'inspect p>strong',
+    hints:                  '',
+    markup: 'VVVVVVVVVVVVVVVV',
+    status: 'VALID',
+    args: {
+      selector: { message: '' },
+    }
+  });
+
+  helpers.setInput('inspect :root');
+  helpers.check({
+    input:  'inspect :root',
+    hints:               '',
+    markup: 'VVVVVVVVVVVVV',
+    status: 'VALID'
+  });
+}
diff --git a/browser/devtools/inspector/test/browser_inspector_destroyselection.html b/browser/devtools/inspector/test/browser_inspector_destroyselection.html
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_destroyselection.html
@@ -0,0 +1,4 @@
+<!DOCTYPE html>
+
+<h1>mop</h1>
+<iframe src="data:text/html;charset=utf-8,<!DOCTYPE HTML>%0D%0A<h1>kill me<span>.</span><%2Fh1>"></iframe>
diff --git a/browser/devtools/inspector/test/browser_inspector_destroyselection.js b/browser/devtools/inspector/test/browser_inspector_destroyselection.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_destroyselection.js
@@ -0,0 +1,48 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+function test()
+{
+  waitForExplicitFinish();
+  //ignoreAllUncaughtExceptions();
+
+  let node, iframe, inspector;
+
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function onload() {
+    gBrowser.selectedBrowser.removeEventListener("load", onload, true);
+    waitForFocus(setupTest, content);
+  }, true);
+
+  content.location = "http://mochi.test:8888/browser/browser/devtools/inspector/test/browser_inspector_destroyselection.html";
+
+  function setupTest()
+  {
+    iframe = content.document.querySelector("iframe");
+    node = iframe.contentDocument.querySelector("span");
+    openInspector(runTests);
+  }
+
+  function runTests(aInspector)
+  {
+    inspector = aInspector;
+    inspector.selection.setNode(node);
+
+    iframe.parentNode.removeChild(iframe);
+    iframe = null;
+
+    let tmp = {};
+    Cu.import("resource:///modules/devtools/LayoutHelpers.jsm", tmp);
+    ok(!tmp.LayoutHelpers.isNodeConnected(node), "Node considered as disconnected.");
+    ok(!inspector.selection.isConnected(), "Selection considered as disconnected");
+
+    finishUp();
+  }
+
+  function finishUp() {
+    node = null;
+    gBrowser.removeCurrentTab();
+    finish();
+  }
+}
+
diff --git a/browser/devtools/inspector/test/browser_inspector_highlighter.js b/browser/devtools/inspector/test/browser_inspector_highlighter.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_highlighter.js
@@ -0,0 +1,156 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+let doc;
+let h1;
+let div;
+
+function createDocument()
+{
+  let div = doc.createElement("div");
+  let h1 = doc.createElement("h1");
+  let p1 = doc.createElement("p");
+  let p2 = doc.createElement("p");
+  let div2 = doc.createElement("div");
+  let p3 = doc.createElement("p");
+  doc.title = "Inspector Highlighter Meatballs";
+  h1.textContent = "Inspector Tree Selection Test";
+  p1.textContent = "This is some example text";
+  p2.textContent = "Lorem ipsum dolor sit amet, consectetur adipisicing " +
+    "elit, sed do eiusmod tempor incididunt ut labore et dolore magna " +
+    "aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco " +
+    "laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure " +
+    "dolor in reprehenderit in voluptate velit esse cillum dolore eu " +
+    "fugiat nulla pariatur. Excepteur sint occaecat cupidatat non " +
+    "proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
+  p3.textContent = "Lorem ipsum dolor sit amet, consectetur adipisicing " +
+    "elit, sed do eiusmod tempor incididunt ut labore et dolore magna " +
+    "aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco " +
+    "laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure " +
+    "dolor in reprehenderit in voluptate velit esse cillum dolore eu " +
+    "fugiat nulla pariatur. Excepteur sint occaecat cupidatat non " +
+    "proident, sunt in culpa qui officia deserunt mollit anim id est laborum.";
+  let div3 = doc.createElement("div");
+  div3.id = "checkOutThisWickedSpread";
+  div3.setAttribute("style", "position: absolute; top: 20px; right: 20px; height: 20px; width: 20px; background-color: yellow; border: 1px dashed black;");
+  let p4 = doc.createElement("p");
+  p4.setAttribute("style", "font-weight: 200; font-size: 8px; text-align: center;");
+  p4.textContent = "Smörgåsbord!";
+  div.appendChild(h1);
+  div.appendChild(p1);
+  div.appendChild(p2);
+  div2.appendChild(p3);
+  div3.appendChild(p4);
+  doc.body.appendChild(div);
+  doc.body.appendChild(div2);
+  doc.body.appendChild(div3);
+
+  openInspector(setupHighlighterTests);
+}
+
+function setupHighlighterTests()
+{
+  h1 = doc.querySelector("h1");
+  ok(h1, "we have the header");
+
+  let i = getActiveInspector();
+  i.highlighter.unlock();
+  i.highlighter.outline.setAttribute("disable-transitions", "true");
+
+  executeSoon(function() {
+    i.selection.once("new-node", performTestComparisons);
+    EventUtils.synthesizeMouse(h1, 2, 2, {type: "mousemove"}, content);
+  });
+}
+
+function performTestComparisons(evt)
+{
+  let i = getActiveInspector();
+  i.highlighter.lock();
+  ok(isHighlighting(), "highlighter is highlighting");
+  is(getHighlitNode(), h1, "highlighter matches selection")
+  is(i.selection.node, h1, "selection matches node");
+  is(i.selection.node, getHighlitNode(), "selection matches highlighter");
+
+
+  div = doc.querySelector("div#checkOutThisWickedSpread");
+
+  executeSoon(function() {
+    i.selection.once("new-node", finishTestComparisons);
+    i.selection.setNode(div);
+  });
+}
+
+function finishTestComparisons()
+{
+  let i = getActiveInspector();
+
+  // get dimensions of div element
+  let divDims = div.getBoundingClientRect();
+  let divWidth = divDims.width;
+  let divHeight = divDims.height;
+
+  // get dimensions of the outline
+  let outlineDims = i.highlighter.outline.getBoundingClientRect();
+  let outlineWidth = outlineDims.width;
+  let outlineHeight = outlineDims.height;
+
+  // Disabled due to bug 716245
+  //is(outlineWidth, divWidth, "outline width matches dimensions of element (no zoom)");
+  //is(outlineHeight, divHeight, "outline height matches dimensions of element (no zoom)");
+
+  // zoom the page by a factor of 2
+  let contentViewer = gBrowser.selectedBrowser.docShell.contentViewer
+                             .QueryInterface(Ci.nsIMarkupDocumentViewer);
+  contentViewer.fullZoom = 2;
+
+  // We wait at least 500ms to make sure the highlighter is not "mutting" the
+  // resize event
+
+  window.setTimeout(function() {
+    // check what zoom factor we're at, should be 2
+    let zoom = i.highlighter.zoom;
+    is(zoom, 2, "zoom is 2?");
+
+    // simulate the zoomed dimensions of the div element
+    let divDims = div.getBoundingClientRect();
+    let divWidth = divDims.width * zoom;
+    let divHeight = divDims.height * zoom;
+
+    // now zoomed, get new dimensions the outline
+    let outlineDims = i.highlighter.outline.getBoundingClientRect();
+    let outlineWidth = outlineDims.width;
+    let outlineHeight = outlineDims.height;
+
+    // Disabled due to bug 716245
+    //is(outlineWidth, divWidth, "outline width matches dimensions of element (no zoom)");
+    //is(outlineHeight, divHeight, "outline height matches dimensions of element (no zoom)");
+
+    doc = h1 = div = null;
+    executeSoon(finishUp);
+  }, 500);
+}
+
+function finishUp() {
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+  gDevTools.closeToolbox(target);
+  gBrowser.removeCurrentTab();
+  finish();
+}
+
+function test()
+{
+  waitForExplicitFinish();
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function() {
+    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
+    doc = content.document;
+    waitForFocus(createDocument, content);
+  }, true);
+
+  content.location = "data:text/html,basic tests for inspector";
+}
+
diff --git a/browser/devtools/inspector/test/browser_inspector_highlighter_autohide.js b/browser/devtools/inspector/test/browser_inspector_highlighter_autohide.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_highlighter_autohide.js
@@ -0,0 +1,46 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+
+function test()
+{
+  let toolbox;
+  let inspector;
+
+  waitForExplicitFinish();
+
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function onload() {
+    gBrowser.selectedBrowser.removeEventListener("load", onload, true);
+    waitForFocus(startInspector, content);
+  }, true);
+  content.location = "data:text/html,mop"
+
+  function startInspector() {
+    info("Tab loaded");
+    openInspector(function(aInspector) {
+      inspector = aInspector;
+      ok(!inspector.highlighter.hidden, "Highlighter is visible");
+      toolbox = inspector._toolbox;
+      toolbox.once("webconsole-selected", onWebConsoleSelected);
+      toolbox.selectTool("webconsole");
+    });
+  }
+
+  function onWebConsoleSelected() {
+    executeSoon(function() {
+      ok(inspector.highlighter.hidden, "Highlighter is hidden");
+      toolbox.once("inspector-selected", onInspectorSelected);
+      toolbox.selectTool("inspector");
+    });
+  }
+
+  function onInspectorSelected() {
+    executeSoon(function() {
+      ok(!inspector.highlighter.hidden, "Highlighter is visible once inspector reopen");
+      gBrowser.removeCurrentTab();
+      finish();
+    });
+  }
+}
+
diff --git a/browser/devtools/inspector/test/browser_inspector_iframeTest.js b/browser/devtools/inspector/test/browser_inspector_iframeTest.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_iframeTest.js
@@ -0,0 +1,99 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+let doc;
+let div1;
+let div2;
+let iframe1;
+let iframe2;
+
+function createDocument()
+{
+  doc.title = "Inspector iframe Tests";
+
+  iframe1 = doc.createElement('iframe');
+
+  iframe1.addEventListener("load", function () {
+    iframe1.removeEventListener("load", arguments.callee, false);
+
+    div1 = iframe1.contentDocument.createElement('div');
+    div1.textContent = 'little div';
+    iframe1.contentDocument.body.appendChild(div1);
+
+    iframe2 = iframe1.contentDocument.createElement('iframe');
+
+    iframe2.addEventListener('load', function () {
+      iframe2.removeEventListener("load", arguments.callee, false);
+
+      div2 = iframe2.contentDocument.createElement('div');
+      div2.textContent = 'nested div';
+      iframe2.contentDocument.body.appendChild(div2);
+
+      openInspector(runIframeTests);
+    }, false);
+
+    iframe2.src = 'data:text/html,nested iframe';
+    iframe1.contentDocument.body.appendChild(iframe2);
+  }, false);
+
+  iframe1.src = 'data:text/html,little iframe';
+  doc.body.appendChild(iframe1);
+}
+
+function moveMouseOver(aElement)
+{
+  EventUtils.synthesizeMouse(aElement, 2, 2, {type: "mousemove"},
+    aElement.ownerDocument.defaultView);
+}
+
+function runIframeTests()
+{
+  getActiveInspector().selection.once("new-node", performTestComparisons1);
+  moveMouseOver(div1)
+}
+
+function performTestComparisons1()
+{
+  let i = getActiveInspector();
+  is(i.selection.node, div1, "selection matches div1 node");
+  is(getHighlitNode(), div1, "highlighter matches selection");
+
+  i.selection.once("new-node", performTestComparisons2);
+  executeSoon(function() {
+    moveMouseOver(div2);
+  });
+}
+
+function performTestComparisons2()
+{
+  let i = getActiveInspector();
+
+  is(i.selection.node, div2, "selection matches div2 node");
+  is(getHighlitNode(), div2, "highlighter matches selection");
+
+  finish();
+}
+
+function test() {
+  waitForExplicitFinish();
+
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function() {
+    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
+    doc = content.document;
+    gBrowser.selectedBrowser.focus();
+    createDocument();
+  }, true);
+
+  content.location = "data:text/html,iframe tests for inspector";
+
+  registerCleanupFunction(function () {
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    gDevTools.closeToolbox(target);
+    gBrowser.removeCurrentTab();
+  });
+}
+
diff --git a/browser/devtools/inspector/test/browser_inspector_infobar.js b/browser/devtools/inspector/test/browser_inspector_infobar.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_infobar.js
@@ -0,0 +1,92 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+function test()
+{
+  waitForExplicitFinish();
+  ignoreAllUncaughtExceptions();
+
+  let doc;
+  let nodes;
+  let cursor;
+  let inspector;
+
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function onload() {
+    gBrowser.selectedBrowser.removeEventListener("load", onload, true);
+    doc = content.document;
+    waitForFocus(setupInfobarTest, content);
+  }, true);
+
+  let style = "body{width:100%;height: 100%} div {position: absolute;height: 100px;width: 500px}#bottom {bottom: 0px}#vertical {height: 100%}#farbottom{bottom: -200px}";
+  let html = "<style>" + style + "</style><div id=vertical></div><div id=top class='class1 class2'></div><div id=bottom></div><div id=farbottom></div>"
+
+  content.location = "data:text/html," + encodeURIComponent(html);
+
+  function setupInfobarTest()
+  {
+    nodes = [
+      {node: doc.querySelector("#top"), position: "bottom", tag: "DIV", id: "#top", classes: ".class1.class2"},
+      {node: doc.querySelector("#vertical"), position: "overlap", tag: "DIV", id: "#vertical", classes: ""},
+      {node: doc.querySelector("#bottom"), position: "top", tag: "DIV", id: "#bottom", classes: ""},
+      {node: doc.querySelector("body"), position: "overlap", tag: "BODY", id: "", classes: ""},
+      {node: doc.querySelector("#farbottom"), position: "top", tag: "DIV", id: "#farbottom", classes: ""},
+    ]
+
+    for (let i = 0; i < nodes.length; i++) {
+      ok(nodes[i].node, "node " + i + " found");
+    }
+
+    openInspector(runTests);
+  }
+
+  function runTests(aInspector)
+  {
+    inspector = aInspector;
+    cursor = 0;
+    executeSoon(function() {
+      inspector.selection.setNode(nodes[0].node, "");
+      nodeSelected();
+    });
+  }
+
+  function nodeSelected()
+  {
+    executeSoon(function() {
+      performTest();
+      cursor++;
+      if (cursor >= nodes.length) {
+        finishUp();
+      } else {
+        let node = nodes[cursor].node;
+        inspector.selection.setNode(node, "");
+        nodeSelected();
+      }
+    });
+  }
+
+  function performTest()
+  {
+    let browser = gBrowser.selectedBrowser;
+    let stack = browser.parentNode;
+
+    let container = stack.querySelector(".highlighter-nodeinfobar-container");
+    is(container.getAttribute("position"), nodes[cursor].position, "node " + cursor + ": position matches.");
+
+    let tagNameLabel = stack.querySelector(".highlighter-nodeinfobar-tagname");
+    is(tagNameLabel.textContent, nodes[cursor].tag, "node " + cursor  + ": tagName matches.");
+
+    let idLabel = stack.querySelector(".highlighter-nodeinfobar-id");
+    is(idLabel.textContent, nodes[cursor].id, "node " + cursor  + ": id matches.");
+
+    let classesBox = stack.querySelector(".highlighter-nodeinfobar-classes");
+    is(classesBox.textContent, nodes[cursor].classes, "node " + cursor  + ": classes match.");
+  }
+
+  function finishUp() {
+    doc = nodes = null;
+    gBrowser.removeCurrentTab();
+    finish();
+  }
+}
+
diff --git a/browser/devtools/inspector/test/browser_inspector_initialization.js b/browser/devtools/inspector/test/browser_inspector_initialization.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_initialization.js
@@ -0,0 +1,147 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+let doc;
+let salutation;
+
+let tempScope = {};
+Cu.import("resource:///modules/devtools/Target.jsm", tempScope);
+let TargetFactory = tempScope.TargetFactory;
+
+function createDocument()
+{
+  doc.body.innerHTML = '<div id="first" style="{ margin: 10em; ' +
+    'font-size: 14pt; font-family: helvetica, sans-serif; color: #AAA}">\n' +
+    '<h1>Some header text</h1>\n' +
+    '<p id="salutation" style="{font-size: 12pt}">hi.</p>\n' +
+    '<p id="body" style="{font-size: 12pt}">I am a test-case. This text exists ' +
+    'solely to provide some things to test the inspector initialization.</p>\n' +
+    'If you are reading this, you should go do something else instead. Maybe ' +
+    'read a book. Or better yet, write some test-cases for another bit of code. ' +
+    '<span style="{font-style: italic}">Maybe more inspector test-cases!</span></p>\n' +
+    '<p id="closing">end transmission</p>\n' +
+    '</div>';
+  doc.title = "Inspector Initialization Test";
+
+  openInspector(startInspectorTests);
+}
+
+function startInspectorTests()
+{
+  ok(true, "Inspector started, and notification received.");
+
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+
+  let inspector = gDevTools.getPanelForTarget("inspector", target);
+
+  ok(inspector, "Inspector instance is accessible");
+  ok(inspector.isReady, "Inspector instance is ready");
+  is(inspector.target.tab, gBrowser.selectedTab, "Valid target");
+  ok(inspector.highlighter, "Highlighter is up");
+
+  let p = doc.querySelector("p");
+
+  inspector.selection.setNode(p);
+
+  testHighlighter(p);
+  testMarkupView(p);
+  testBreadcrumbs(p);
+
+  let span = doc.querySelector("span");
+  span.scrollIntoView();
+
+  inspector.selection.setNode(span);
+
+  testHighlighter(span);
+  testMarkupView(span);
+  testBreadcrumbs(span);
+
+  let toolbox = gDevTools.getToolboxForTarget(target);
+  toolbox.once("destroyed", function() {
+    ok("true", "'destroyed' notification received.");
+    let toolbox = gDevTools.getToolboxForTarget(target);
+    ok(!toolbox, "Toolbox destroyed.");
+    executeSoon(runContextMenuTest);
+  });
+  toolbox.destroy();
+}
+
+
+function testHighlighter(node)
+{
+  ok(isHighlighting(), "Highlighter is highlighting");
+  is(getHighlitNode(), node, "Right node is highlighted");
+}
+
+function testMarkupView(node)
+{
+  let i = getActiveInspector();
+  is(i.markup._selectedContainer.node, node, "Right node is selected in the markup view");
+}
+
+function testBreadcrumbs(node)
+{
+  let b = getActiveInspector().breadcrumbs;
+  let expectedText = b.prettyPrintNodeAsText(node);
+  let button = b.container.querySelector("button[checked=true]");
+  ok(button, "A crumbs is checked=true");
+  is(button.getAttribute("tooltiptext"), expectedText, "Crumb refers to the right node");
+}
+
+function _clickOnInspectMenuItem(node) {
+  document.popupNode = node;
+  var contentAreaContextMenu = document.getElementById("contentAreaContextMenu");
+  var contextMenu = new nsContextMenu(contentAreaContextMenu, gBrowser);
+  contextMenu.inspectNode();
+}
+
+function runContextMenuTest()
+{
+  salutation = doc.getElementById("salutation");
+  _clickOnInspectMenuItem(salutation);
+  gDevTools.once("inspector-ready", testInitialNodeIsSelected);
+}
+
+function testInitialNodeIsSelected() {
+  testHighlighter(salutation);
+  testMarkupView(salutation);
+  testBreadcrumbs(salutation);
+  inspectNodesFromContextTestWhileOpen();
+}
+
+function inspectNodesFromContextTestWhileOpen()
+{
+  let closing = doc.getElementById("closing");
+  getActiveInspector().selection.once("new-node", function() {
+    ok(true, "Get selection's 'new-node' selection");
+    executeSoon(function() {
+      testHighlighter(closing);
+      testMarkupView(closing);
+      testBreadcrumbs(closing);
+      finishInspectorTests();
+    }
+  )});
+  _clickOnInspectMenuItem(closing);
+}
+
+function finishInspectorTests(subject, topic, aWinIdString)
+{
+  gBrowser.removeCurrentTab();
+  finish();
+}
+
+function test()
+{
+  waitForExplicitFinish();
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function() {
+    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
+    doc = content.document;
+    waitForFocus(createDocument, content);
+  }, true);
+
+  content.location = "data:text/html,basic tests for inspector";
+}
+
diff --git a/browser/devtools/inspector/test/browser_inspector_invalidate.js b/browser/devtools/inspector/test/browser_inspector_invalidate.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_invalidate.js
@@ -0,0 +1,50 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+function test() {
+
+  let doc;
+  let div;
+  let inspector;
+
+  function createDocument()
+  {
+    div = doc.createElement("div");
+    div.setAttribute("style", "width: 100px; height: 100px; background:yellow;");
+    doc.body.appendChild(div);
+
+    openInspector(runTest);
+  }
+
+  function runTest(inspector)
+  {
+    inspector.selection.setNode(div);
+
+    executeSoon(function() {
+      let outline = inspector.highlighter.outline;
+      is(outline.style.width, "100px", "selection has the right width");
+
+      div.style.width = "200px";
+      function pollTest() {
+        if (outline.style.width == "100px") {
+          setTimeout(pollTest, 10);
+          return;
+        }
+        is(outline.style.width, "200px", "selection updated");
+        gBrowser.removeCurrentTab();
+        finish();
+      }
+      setTimeout(pollTest, 10);
+    });
+  }
+
+  waitForExplicitFinish();
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function() {
+    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
+    doc = content.document;
+    waitForFocus(createDocument, content);
+  }, true);
+
+  content.location = "data:text/html,basic tests for inspector";
+}
diff --git a/browser/devtools/inspector/test/browser_inspector_menu.js b/browser/devtools/inspector/test/browser_inspector_menu.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_menu.js
@@ -0,0 +1,96 @@
+/* Any copyright is dedicated to the Public Domain.
+http://creativecommons.org/publicdomain/zero/1.0/ */
+
+
+function test() {
+
+  waitForExplicitFinish();
+
+  let doc;
+  let node1;
+  let div;
+  let inspector;
+
+  function createDocument() {
+    div = doc.createElement("div");
+    let h1 = doc.createElement("h1");
+    let p1 = doc.createElement("p");
+    let p2 = doc.createElement("p");
+    doc.title = "Inspector Tree Menu Test";
+    h1.textContent = "Inspector Tree Menu Test";
+    p1.textContent = "This is some example text";
+    div.appendChild(h1);
+    div.appendChild(p1);
+    doc.body.appendChild(div);
+    node1 = p1;
+    openInspector(runTests);
+  }
+
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function onload() {
+    gBrowser.selectedBrowser.removeEventListener("load", onload, true);
+    doc = content.document;
+    waitForFocus(createDocument, content);
+  }, true);
+
+  content.location = content.location = "data:text/html,basic tests for inspector";;
+
+  function runTests(aInspector) {
+    inspector = aInspector;
+    inspector.selection.setNode(node1);
+    testCopyInnerMenu();
+  }
+
+  function testCopyInnerMenu() {
+    let copyInner = inspector.panelDoc.getElementById("node-menu-copyinner");
+    ok(copyInner, "the popup menu has a copy inner html menu item");
+
+    waitForClipboard("This is some example text",
+                     function() { copyInner.doCommand(); },
+                     testCopyOuterMenu, testCopyOuterMenu);
+  }
+
+  function testCopyOuterMenu() {
+    let copyOuter = inspector.panelDoc.getElementById("node-menu-copyouter");
+    ok(copyOuter, "the popup menu has a copy outer html menu item");
+
+    waitForClipboard("<p>This is some example text</p>",
+                     function() { copyOuter.doCommand(); },
+                     testDeleteNode, testDeleteNode);
+  }
+
+  function testDeleteNode() {
+    let deleteNode = inspector.panelDoc.getElementById("node-menu-delete");
+    ok(deleteNode, "the popup menu has a delete menu item");
+
+    inspector.selection.once("detached", deleteTest);
+
+    let commandEvent = document.createEvent("XULCommandEvent");
+    commandEvent.initCommandEvent("command", true, true, window, 0, false, false,
+                                  false, false, null);
+    deleteNode.dispatchEvent(commandEvent);
+  }
+
+  function deleteTest() {
+    let p = doc.querySelector("P");
+    is(p, null, "node deleted");
+
+    deleteRootNode();
+  }
+
+  function deleteRootNode() {
+    inspector.selection.setNode(doc.documentElement);
+    let deleteNode = inspector.panelDoc.getElementById("node-menu-delete");
+    let commandEvent = inspector.panelDoc.createEvent("XULCommandEvent");
+    commandEvent.initCommandEvent("command", true, true, window, 0, false, false,
+                                  false, false, null);
+    deleteNode.dispatchEvent(commandEvent);
+    executeSoon(isRootStillAlive);
+  }
+
+  function isRootStillAlive() {
+    ok(doc.documentElement, "Document element still alive.");
+    gBrowser.removeCurrentTab();
+    finish();
+  }
+}
diff --git a/browser/devtools/inspector/test/browser_inspector_pseudoClass_menu.js b/browser/devtools/inspector/test/browser_inspector_pseudoClass_menu.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_pseudoClass_menu.js
@@ -0,0 +1,71 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+function test() {
+
+  let DOMUtils = Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils);
+
+  let pseudos = ["hover", "active", "focus"];
+
+  let doc;
+  let div;
+  let menu;
+  let inspector;
+
+  waitForExplicitFinish();
+  ignoreAllUncaughtExceptions();
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function() {
+    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
+    doc = content.document;
+    waitForFocus(createDocument, content);
+  }, true);
+
+  content.location = "data:text/html,pseudo-class lock node menu tests";
+
+  function createDocument()
+  {
+    div = doc.createElement("div");
+    div.textContent = "test div";
+
+    doc.body.appendChild(div);
+
+    openInspector(selectNode);
+  }
+
+  function selectNode(aInspector)
+  {
+    inspector = aInspector;
+    inspector.selection.setNode(div);
+    performTests();
+  }
+
+  function performTests()
+  {
+    menu = inspector.panelDoc.getElementById("inspector-node-popup");
+    menu.addEventListener("popupshowing", testMenuItems, true);
+    menu.openPopup();
+  }
+
+  function testMenuItems()
+  {
+    menu.removeEventListener("popupshowing", testMenuItems, true);
+
+    for each (let pseudo in pseudos) {
+      let menuitem = inspector.panelDoc.getElementById("node-menu-pseudo-" + pseudo);
+      ok(menuitem, ":" + pseudo + " menuitem exists");
+
+      menuitem.doCommand();
+
+      is(DOMUtils.hasPseudoClassLock(div, ":" + pseudo), true,
+        "pseudo-class lock has been applied");
+    }
+    finishUp();
+  }
+
+  function finishUp()
+  {
+    gBrowser.removeCurrentTab();
+    finish();
+  }
+}
diff --git a/browser/devtools/inspector/test/browser_inspector_pseudoclass_lock.js b/browser/devtools/inspector/test/browser_inspector_pseudoclass_lock.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_pseudoclass_lock.js
@@ -0,0 +1,135 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+let tempScope = {};
+Cu.import("resource:///modules/devtools/Target.jsm", tempScope);
+let TargetFactory = tempScope.TargetFactory;
+
+let DOMUtils = Cc["@mozilla.org/inspector/dom-utils;1"].getService(Ci.inIDOMUtils);
+
+let doc;
+let div;
+let inspector;
+let ruleview;
+
+let pseudo = ":hover";
+
+function test()
+{
+  waitForExplicitFinish();
+  ignoreAllUncaughtExceptions();
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function() {
+    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
+    doc = content.document;
+    waitForFocus(createDocument, content);
+  }, true);
+
+  content.location = "data:text/html,pseudo-class lock tests";
+}
+
+function createDocument()
+{
+  div = doc.createElement("div");
+  div.textContent = "test div";
+
+  let head = doc.getElementsByTagName('head')[0];
+  let style = doc.createElement('style');
+  let rules = doc.createTextNode('div { color: red; } div:hover { color: blue; }');
+
+  style.appendChild(rules);
+  head.appendChild(style);
+  doc.body.appendChild(div);
+
+  openInspector(selectNode);
+}
+
+function selectNode(aInspector)
+{
+  inspector = aInspector;
+  inspector.selection.setNode(div);
+  inspector.sidebar.once("ruleview-ready", function() {
+    ruleview = inspector.sidebar.getWindowForTab("ruleview").ruleview.view;
+    inspector.sidebar.select("ruleview");
+    performTests();
+  });
+}
+
+function performTests()
+{
+  // toggle the class
+  inspector.togglePseudoClass(pseudo);
+
+  testAdded();
+
+  // toggle the lock off
+  inspector.togglePseudoClass(pseudo);
+
+  testRemoved();
+  testRemovedFromUI();
+
+  // toggle it back on
+  inspector.togglePseudoClass(pseudo);
+
+  // close the inspector
+  finishUp();
+}
+
+function testAdded()
+{
+  // lock is applied to it and ancestors
+  let node = div;
+  do {
+    is(DOMUtils.hasPseudoClassLock(node, pseudo), true,
+       "pseudo-class lock has been applied");
+    node = node.parentNode;
+  } while (node.parentNode)
+
+  // infobar selector contains pseudo-class
+  let pseudoClassesBox = getActiveInspector().highlighter.nodeInfo.pseudoClassesBox;
+  is(pseudoClassesBox.textContent, pseudo, "pseudo-class in infobar selector");
+
+  // ruleview contains pseudo-class rule
+  is(ruleview.element.children.length, 3,
+     "rule view is showing 3 rules for pseudo-class locked div");
+
+  is(ruleview.element.children[1]._ruleEditor.rule.selectorText,
+     "div:hover", "rule view is showing " + pseudo + " rule");
+}
+
+function testRemoved()
+{
+  // lock removed from node and ancestors  
+  let node = div;
+  do {
+    is(DOMUtils.hasPseudoClassLock(node, pseudo), false,
+       "pseudo-class lock has been removed");
+    node = node.parentNode;
+  } while (node.parentNode)
+}
+
+function testRemovedFromUI()
+{
+  // infobar selector doesn't contain pseudo-class
+  let pseudoClassesBox = getActiveInspector().highlighter.nodeInfo.pseudoClassesBox;
+  is(pseudoClassesBox.textContent, "", "pseudo-class removed from infobar selector");    
+
+  // ruleview no longer contains pseudo-class rule
+  is(ruleview.element.children.length, 2,
+     "rule view is showing 2 rules after removing lock");    
+}
+
+function finishUp()
+{
+  gDevTools.once("toolbox-destroyed", function() {
+    testRemoved();
+    inspector = ruleview = null;
+    doc = div = null;
+    gBrowser.removeCurrentTab();
+    finish();
+  });
+
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+  let toolbox = gDevTools.getToolboxForTarget(target);
+  toolbox.destroy();
+}
diff --git a/browser/devtools/inspector/test/browser_inspector_scrolling.js b/browser/devtools/inspector/test/browser_inspector_scrolling.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_scrolling.js
@@ -0,0 +1,75 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+let doc;
+let div;
+let iframe;
+let inspector;
+
+function createDocument()
+{
+  doc.title = "Inspector scrolling Tests";
+
+  iframe = doc.createElement("iframe");
+
+  iframe.addEventListener("load", function () {
+    iframe.removeEventListener("load", arguments.callee, false);
+
+    div = iframe.contentDocument.createElement("div");
+    div.textContent = "big div";
+    div.setAttribute("style", "height:500px; width:500px; border:1px solid gray;");
+    iframe.contentDocument.body.appendChild(div);
+    openInspector(inspectNode);
+  }, false);
+
+  iframe.src = "data:text/html,foo bar";
+  doc.body.appendChild(iframe);
+}
+
+function inspectNode(aInspector)
+{
+  inspector = aInspector;
+
+  inspector.highlighter.once("locked", performScrollingTest);
+  executeSoon(function() {
+    inspector.selection.setNode(div, "");
+  });
+}
+
+function performScrollingTest()
+{
+  executeSoon(function() {
+    EventUtils.synthesizeWheel(div, 10, 10,
+      { deltaY: 50.0, deltaMode: WheelEvent.DOM_DELTA_PIXEL },
+      iframe.contentWindow);
+  });
+
+  gBrowser.selectedBrowser.addEventListener("scroll", function() {
+    gBrowser.selectedBrowser.removeEventListener("scroll", arguments.callee,
+      false);
+
+    is(iframe.contentDocument.body.scrollTop, 50, "inspected iframe scrolled");
+
+    inspector = div = iframe = doc = null;
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    gDevTools.closeToolbox(target);
+    gBrowser.removeCurrentTab();
+    finish();
+  }, false);
+}
+
+function test()
+{
+  waitForExplicitFinish();
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function() {
+    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
+    doc = content.document;
+    waitForFocus(createDocument, content);
+  }, true);
+
+  content.location = "data:text/html,mouse scrolling test for inspector";
+}
diff --git a/browser/devtools/inspector/test/browser_inspector_sidebarstate.js b/browser/devtools/inspector/test/browser_inspector_sidebarstate.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_sidebarstate.js
@@ -0,0 +1,77 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+let tempScope = {};
+Cu.import("resource:///modules/devtools/Target.jsm", tempScope);
+let TargetFactory = tempScope.TargetFactory;
+
+let doc;
+let inspector;
+
+function createDocument()
+{
+  doc.body.innerHTML = '<h1>Sidebar state test</h1>';
+  doc.title = "Sidebar State Test";
+
+  openInspector(function(panel) {
+    inspector = panel;
+    inspector.sidebar.select("ruleview");
+    inspectorRuleViewOpened();
+  });
+}
+
+function inspectorRuleViewOpened()
+{
+  is(inspector.sidebar.getCurrentTabID(), "ruleview", "Rule View is selected by default");
+
+  // Select the computed view and turn off the inspector.
+  inspector.sidebar.select("computedview");
+
+  gDevTools.once("toolbox-destroyed", inspectorClosed);
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+  let toolbox = gDevTools.getToolboxForTarget(target);
+  executeSoon(function() {
+    toolbox.destroy();
+  });
+}
+
+function inspectorClosed()
+{
+  openInspector(function(panel) {
+    inspector = panel;
+    if (inspector.sidebar.getCurrentTabID()) {
+      // Default sidebar already selected.
+      testNewDefaultTab();
+    } else {
+      // Default sidebar still to be selected.
+      inspector.sidebar.once("select", testNewDefaultTab);
+    }
+  });
+}
+
+function testNewDefaultTab()
+{
+  is(inspector.sidebar.getCurrentTabID(), "computedview", "Computed view is selected by default.");
+
+  finishTest();
+}
+
+
+function finishTest()
+{
+  gBrowser.removeCurrentTab();
+  finish();
+}
+
+function test()
+{
+  waitForExplicitFinish();
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function() {
+    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
+    doc = content.document;
+    waitForFocus(createDocument, content);
+  }, true);
+
+  content.location = "data:text/html,basic tests for inspector";
+}
diff --git a/browser/devtools/inspector/test/browser_inspector_tree_height.js b/browser/devtools/inspector/test/browser_inspector_tree_height.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/browser_inspector_tree_height.js
@@ -0,0 +1,111 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+let doc;
+let salutation;
+let closing;
+
+const NEWHEIGHT = 226;
+
+function createDocument()
+{
+  doc.body.innerHTML = '<div id="first" style="{ margin: 10em; ' +
+    'font-size: 14pt; font-family: helvetica, sans-serif; color: #AAA}">\n' +
+    '<h1>Some header text</h1>\n' +
+    '<p id="salutation" style="{font-size: 12pt}">hi.</p>\n' +
+    '<p id="body" style="{font-size: 12pt}">I am a test-case. This text exists ' +
+    'solely to provide some things to test the inspector initialization.</p>\n' +
+    'If you are reading this, you should go do something else instead. Maybe ' +
+    'read a book. Or better yet, write some test-cases for another bit of code. ' +
+    '<span style="{font-style: italic}">Maybe more inspector test-cases!</span></p>\n' +
+    '<p id="closing">end transmission</p>\n' +
+    '</div>';
+  doc.title = "Inspector Initialization Test";
+  startInspectorTests();
+}
+
+function startInspectorTests()
+{
+  ok(InspectorUI, "InspectorUI variable exists");
+  Services.obs.addObserver(runInspectorTests,
+    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
+  InspectorUI.toggleInspectorUI();
+}
+
+function runInspectorTests()
+{
+  Services.obs.removeObserver(runInspectorTests,
+    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
+
+  if (InspectorUI.treePanelEnabled) {
+    Services.obs.addObserver(treePanelTests,
+      InspectorUI.INSPECTOR_NOTIFICATIONS.TREEPANELREADY, false);
+
+    InspectorUI.stopInspecting();
+
+    InspectorUI.treePanel.open();
+  } else
+    finishInspectorTests();
+}
+
+function treePanelTests()
+{
+  Services.obs.removeObserver(treePanelTests,
+    InspectorUI.INSPECTOR_NOTIFICATIONS.TREEPANELREADY);
+  Services.obs.addObserver(treePanelTests2,
+    InspectorUI.INSPECTOR_NOTIFICATIONS.TREEPANELREADY, false);
+
+  ok(InspectorUI.treePanel.isOpen(), "Inspector Tree Panel is open");
+
+  let height = Services.prefs.getIntPref("devtools.inspector.htmlHeight");
+
+  is(InspectorUI.treePanel.container.height, height,
+     "Container height is " + height);
+
+  InspectorUI.treePanel.container.height = NEWHEIGHT;
+
+  executeSoon(function() {
+    InspectorUI.treePanel.close();
+    InspectorUI.treePanel.open();
+  });
+}
+
+function treePanelTests2()
+{
+  Services.obs.removeObserver(treePanelTests2,
+    InspectorUI.INSPECTOR_NOTIFICATIONS.TREEPANELREADY);
+
+  ok(InspectorUI.treePanel.isOpen(), "Inspector Tree Panel is open");
+
+  let height = Services.prefs.getIntPref("devtools.inspector.htmlHeight");
+
+  is(InspectorUI.treePanel.container.height, NEWHEIGHT,
+     "Container height is now " + height);
+
+  InspectorUI.treePanel.close();
+  executeSoon(function() {
+    finishInspectorTests()
+  });
+}
+
+function finishInspectorTests()
+{
+  gBrowser.removeCurrentTab();
+  finish();
+}
+
+function test()
+{
+  waitForExplicitFinish();
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function() {
+    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
+    doc = content.document;
+    waitForFocus(createDocument, content);
+  }, true);
+
+  content.location = "data:text/html,basic tests for inspector";
+}
+
diff --git a/browser/devtools/inspector/test/head.js b/browser/devtools/inspector/test/head.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/head.js
@@ -0,0 +1,119 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const Cu = Components.utils;
+let tempScope = {};
+Cu.import("resource:///modules/devtools/LayoutHelpers.jsm", tempScope);
+let LayoutHelpers = tempScope.LayoutHelpers;
+Cu.import("resource:///modules/devtools/Target.jsm", tempScope);
+let TargetFactory = tempScope.TargetFactory;
+
+// Import the GCLI test helper
+let testDir = gTestPath.substr(0, gTestPath.lastIndexOf("/"));
+Services.scriptloader.loadSubScript(testDir + "/helpers.js", this);
+
+function openInspector(callback)
+{
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+
+  let inspector = gDevTools.getPanelForTarget("inspector", target);
+  if (inspector && inspector.isReady) {
+    callback(inspector);
+  } else {
+    let toolbox = gDevTools.openToolboxForTab(target, "inspector");
+    toolbox.once("inspector-ready", function(event, panel) {
+      let inspector = gDevTools.getPanelForTarget("inspector", target);
+      callback(inspector);
+    });
+  }
+}
+
+function getActiveInspector()
+{
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+  return gDevTools.getPanelForTarget("inspector", target);
+}
+
+function isHighlighting()
+{
+  let outline = getActiveInspector().highlighter.outline;
+  return !(outline.getAttribute("hidden") == "true");
+}
+
+function getHighlitNode()
+{
+  let h = getActiveInspector().highlighter;
+  if (!isHighlighting() || !h._contentRect)
+    return null;
+
+  let a = {
+    x: h._contentRect.left,
+    y: h._contentRect.top
+  };
+
+  let b = {
+    x: a.x + h._contentRect.width,
+    y: a.y + h._contentRect.height
+  };
+
+  // Get midpoint of diagonal line.
+  let midpoint = midPoint(a, b);
+
+  return LayoutHelpers.getElementFromPoint(h.win.document, midpoint.x,
+    midpoint.y);
+}
+
+
+function midPoint(aPointA, aPointB)
+{
+  let pointC = { };
+  pointC.x = (aPointB.x - aPointA.x) / 2 + aPointA.x;
+  pointC.y = (aPointB.y - aPointA.y) / 2 + aPointA.y;
+  return pointC;
+}
+
+function computedView()
+{
+  let sidebar = getActiveInspector().sidebar;
+  let iframe = sidebar.tabbox.querySelector(".iframe-computedview");
+  return iframe.contentWindow.computedView;
+}
+
+function computedViewTree()
+{
+  return computedView().view;
+}
+
+function ruleView()
+{
+  let sidebar = getActiveInspector().sidebar;
+  let iframe = sidebar.tabbox.querySelector(".iframe-ruleview");
+  return iframe.contentWindow.ruleView;
+}
+
+function synthesizeKeyFromKeyTag(aKeyId) {
+  let key = document.getElementById(aKeyId);
+  isnot(key, null, "Successfully retrieved the <key> node");
+
+  let modifiersAttr = key.getAttribute("modifiers");
+
+  let name = null;
+
+  if (key.getAttribute("keycode"))
+    name = key.getAttribute("keycode");
+  else if (key.getAttribute("key"))
+    name = key.getAttribute("key");
+
+  isnot(name, null, "Successfully retrieved keycode/key");
+
+  let modifiers = {
+    shiftKey: modifiersAttr.match("shift"),
+    ctrlKey: modifiersAttr.match("ctrl"),
+    altKey: modifiersAttr.match("alt"),
+    metaKey: modifiersAttr.match("meta"),
+    accelKey: modifiersAttr.match("accel")
+  }
+
+  EventUtils.synthesizeKey(name, modifiers);
+}
diff --git a/browser/devtools/inspector/test/helpers.js b/browser/devtools/inspector/test/helpers.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/inspector/test/helpers.js
@@ -0,0 +1,881 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+
+/*
+ *
+ *  DO NOT ALTER THIS FILE WITHOUT KEEPING IT IN SYNC WITH THE OTHER COPIES
+ *  OF THIS FILE.
+ *
+ *  UNAUTHORIZED ALTERATION WILL RESULT IN THE ALTEREE BEING SENT TO SIT ON
+ *  THE NAUGHTY STEP.
+ *
+ *
+ *
+ *
+ *
+ *
+ *
+ *
+ *
+ *
+ *
+ *
+ *
+ *
+ *
+ *
+ *  FOR A LONG TIME.
+ *
+ */
+
+
+/*
+ * Use as a JSM
+ * ------------
+ * helpers._createDebugCheck() and maybe other functions in this file can be
+ * useful at runtime, so it is possible to use helpers.js as a JSM.
+ * Copy commandline/test/helpers.js to shared/helpers.jsm, and then add to
+ * DeveloperToolbar.jsm the following:
+ *
+ * XPCOMUtils.defineLazyModuleGetter(this, "helpers",
+ *                                 "resource:///modules/devtools/helpers.jsm");
+ *
+ * At the bottom of DeveloperToolbar.prototype._onload add this:
+ *
+ * var options = { display: this.display };
+ * this._input.onkeypress = function(ev) {
+ *   helpers.setup(options);
+ *   dump(helpers._createDebugCheck() + '\n\n');
+ * };
+ *
+ * Now GCLI will emit output on every keypress that both explains the state
+ * of GCLI and can be run as a test case.
+ */
+
+this.EXPORTED_SYMBOLS = [ 'helpers' ];
+
+var test = { };
+
+/**
+ * Various functions for testing DeveloperToolbar.
+ * Parts of this code exist in:
+ * - browser/devtools/commandline/test/head.js
+ * - browser/devtools/shared/test/head.js
+ */
+let DeveloperToolbarTest = { };
+
+/**
+ * Paranoid DeveloperToolbar.show();
+ */
+DeveloperToolbarTest.show = function DTT_show(aCallback) {
+  if (DeveloperToolbar.visible) {
+    ok(false, "DeveloperToolbar.visible at start of openDeveloperToolbar");
+  }
+  else {
+    DeveloperToolbar.show(true, aCallback);
+  }
+};
+
+/**
+ * Paranoid DeveloperToolbar.hide();
+ */
+DeveloperToolbarTest.hide = function DTT_hide() {
+  if (!DeveloperToolbar.visible) {
+    ok(false, "!DeveloperToolbar.visible at start of closeDeveloperToolbar");
+  }
+  else {
+    DeveloperToolbar.display.inputter.setInput("");
+    DeveloperToolbar.hide();
+  }
+};
+
+/**
+ * check() is the new status. Similar API except that it doesn't attempt to
+ * alter the display/requisition at all, and it makes extra checks.
+ * Test inputs
+ *   typed: The text to type at the input
+ * Available checks:
+ *   input: The text displayed in the input field
+ *   cursor: The position of the start of the cursor
+ *   status: One of "VALID", "ERROR", "INCOMPLETE"
+ *   emptyParameters: Array of parameters still to type. e.g. [ "<message>" ]
+ *   directTabText: Simple completion text
+ *   arrowTabText: When the completion is not an extension (without arrow)
+ *   markup: What state should the error markup be in. e.g. "VVVIIIEEE"
+ *   args: Maps of checks to make against the arguments:
+ *     value: i.e. assignment.value (which ignores defaultValue)
+ *     type: Argument/BlankArgument/MergedArgument/etc i.e. what's assigned
+ *           Care should be taken with this since it's something of an
+ *           implementation detail
+ *     arg: The toString value of the argument
+ *     status: i.e. assignment.getStatus
+ *     message: i.e. assignment.getMessage
+ *     name: For commands - checks assignment.value.name
+ */
+DeveloperToolbarTest.checkInputStatus = function DTT_checkInputStatus(checks) {
+  if (!checks.emptyParameters) {
+    checks.emptyParameters = [];
+  }
+  if (!checks.directTabText) {
+    checks.directTabText = '';
+  }
+  if (!checks.arrowTabText) {
+    checks.arrowTabText = '';
+  }
+
+  var display = DeveloperToolbar.display;
+
+  if (checks.typed) {
+    info('Starting tests for ' + checks.typed);
+    display.inputter.setInput(checks.typed);
+  }
+  else {
+    ok(false, "Missing typed for " + JSON.stringify(checks));
+    return;
+  }
+
+  if (checks.cursor) {
+    display.inputter.setCursor(checks.cursor)
+  }
+
+  var cursor = checks.cursor ? checks.cursor.start : checks.typed.length;
+
+  var requisition = display.requisition;
+  var completer = display.completer;
+  var actual = completer._getCompleterTemplateData();
+
+  /*
+  if (checks.input) {
+    is(display.inputter.element.value,
+            checks.input,
+            'input');
+  }
+
+  if (checks.cursor) {
+    is(display.inputter.element.selectionStart,
+            checks.cursor,
+            'cursor');
+  }
+  */
+
+  if (checks.status) {
+    is(requisition.getStatus().toString(),
+            checks.status,
+            'status');
+  }
+
+  if (checks.markup) {
+    var statusMarkup = requisition.getInputStatusMarkup(cursor);
+    var actualMarkup = statusMarkup.map(function(s) {
+      return Array(s.string.length + 1).join(s.status.toString()[0]);
+    }).join('');
+
+    is(checks.markup,
+            actualMarkup,
+            'markup');
+  }
+
+  if (checks.emptyParameters) {
+    var actualParams = actual.emptyParameters;
+    is(actualParams.length,
+            checks.emptyParameters.length,
+            'emptyParameters.length');
+
+    if (actualParams.length === checks.emptyParameters.length) {
+      for (var i = 0; i < actualParams.length; i++) {
+        is(actualParams[i].replace(/\u00a0/g, ' '),
+                checks.emptyParameters[i],
+                'emptyParameters[' + i + ']');
+      }
+    }
+    else {
+      info('Expected: [ \"' + actualParams.join('", "') + '" ]');
+    }
+  }
+
+  if (checks.directTabText) {
+    is(actual.directTabText,
+            checks.directTabText,
+            'directTabText');
+  }
+
+  if (checks.arrowTabText) {
+    is(actual.arrowTabText,
+            ' \u00a0\u21E5 ' + checks.arrowTabText,
+            'arrowTabText');
+  }
+
+  if (checks.args) {
+    Object.keys(checks.args).forEach(function(paramName) {
+      var check = checks.args[paramName];
+
+      var assignment;
+      if (paramName === 'command') {
+        assignment = requisition.commandAssignment;
+      }
+      else {
+        assignment = requisition.getAssignment(paramName);
+      }
+
+      if (assignment == null) {
+        ok(false, 'Unknown parameter: ' + paramName);
+        return;
+      }
+
+      if (check.value) {
+        is(assignment.value,
+                check.value,
+                'checkStatus value for ' + paramName);
+      }
+
+      if (check.name) {
+        is(assignment.value.name,
+                check.name,
+                'checkStatus name for ' + paramName);
+      }
+
+      if (check.type) {
+        is(assignment.arg.type,
+                check.type,
+                'checkStatus type for ' + paramName);
+      }
+
+      if (check.arg) {
+        is(assignment.arg.toString(),
+                check.arg,
+                'checkStatus arg for ' + paramName);
+      }
+
+      if (check.status) {
+        is(assignment.getStatus().toString(),
+                check.status,
+                'checkStatus status for ' + paramName);
+      }
+
+      if (check.message) {
+        is(assignment.getMessage(),
+                check.message,
+                'checkStatus message for ' + paramName);
+      }
+    });
+  }
+};
+
+/**
+ * Execute a command:
+ *
+ * DeveloperToolbarTest.exec({
+ *   // Test inputs
+ *   typed: "echo hi",        // Optional, uses existing if undefined
+ *
+ *   // Thing to check
+ *   args: { message: "hi" }, // Check that the args were understood properly
+ *   outputMatch: /^hi$/,     // RegExp to test against textContent of output
+ *                            // (can also be array of RegExps)
+ *   blankOutput: true,       // Special checks when there is no output
+ * });
+ */
+DeveloperToolbarTest.exec = function DTT_exec(tests) {
+  tests = tests || {};
+
+  if (tests.typed) {
+    DeveloperToolbar.display.inputter.setInput(tests.typed);
+  }
+
+  let typed = DeveloperToolbar.display.inputter.getInputState().typed;
+  let output = DeveloperToolbar.display.requisition.exec();
+
+  is(typed, output.typed, 'output.command for: ' + typed);
+
+  if (tests.completed !== false) {
+    ok(output.completed, 'output.completed false for: ' + typed);
+  }
+  else {
+    // It is actually an error if we say something is async and it turns
+    // out not to be? For now we're saying 'no'
+    // ok(!output.completed, 'output.completed true for: ' + typed);
+  }
+
+  if (tests.args != null) {
+    is(Object.keys(tests.args).length, Object.keys(output.args).length,
+       'arg count for ' + typed);
+
+    Object.keys(output.args).forEach(function(arg) {
+      let expectedArg = tests.args[arg];
+      let actualArg = output.args[arg];
+
+      if (typeof expectedArg === 'function') {
+        ok(expectedArg(actualArg), 'failed test func. ' + typed + '/' + arg);
+      }
+      else {
+        if (Array.isArray(expectedArg)) {
+          if (!Array.isArray(actualArg)) {
+            ok(false, 'actual is not an array. ' + typed + '/' + arg);
+            return;
+          }
+
+          is(expectedArg.length, actualArg.length,
+                  'array length: ' + typed + '/' + arg);
+          for (let i = 0; i < expectedArg.length; i++) {
+            is(expectedArg[i], actualArg[i],
+                    'member: "' + typed + '/' + arg + '/' + i);
+          }
+        }
+        else {
+          is(expectedArg, actualArg, 'typed: "' + typed + '" arg: ' + arg);
+        }
+      }
+    });
+  }
+
+  let displayed = DeveloperToolbar.outputPanel._div.textContent;
+
+  if (tests.outputMatch) {
+    var doTest = function(match, against) {
+      if (!match.test(against)) {
+        ok(false, "html output for " + typed + " against " + match.source +
+                " (textContent sent to info)");
+        info("Actual textContent");
+        info(against);
+      }
+    }
+    if (Array.isArray(tests.outputMatch)) {
+      tests.outputMatch.forEach(function(match) {
+        doTest(match, displayed);
+      });
+    }
+    else {
+      doTest(tests.outputMatch, displayed);
+    }
+  }
+
+  if (tests.blankOutput != null) {
+    if (!/^$/.test(displayed)) {
+      ok(false, "html output for " + typed + " (textContent sent to info)");
+      info("Actual textContent");
+      info(displayed);
+    }
+  }
+};
+
+/**
+ * Quick wrapper around the things you need to do to run DeveloperToolbar
+ * command tests:
+ * - Set the pref 'devtools.toolbar.enabled' to true
+ * - Add a tab pointing at |uri|
+ * - Open the DeveloperToolbar
+ * - Register a cleanup function to undo the above
+ * - Run the tests
+ *
+ * @param uri The uri of a page to load. Can be 'about:blank' or 'data:...'
+ * @param target Either a function or array of functions containing the tests
+ * to run. If an array of test function is passed then we will clear up after
+ * the tests have completed. If a single test function is passed then this
+ * function should arrange for 'finish()' to be called on completion.
+ */
+DeveloperToolbarTest.test = function DTT_test(uri, target) {
+  let menuItem = document.getElementById("menu_devToolbar");
+  let command = document.getElementById("Tools:DevToolbar");
+  let appMenuItem = document.getElementById("appmenu_devToolbar");
+
+  registerCleanupFunction(function() {
+    DeveloperToolbarTest.hide();
+
+    // a.k.a Services.prefs.clearUserPref("devtools.toolbar.enabled");
+    if (menuItem) {
+      menuItem.hidden = true;
+    }
+    if (command) {
+      command.setAttribute("disabled", "true");
+    }
+    if (appMenuItem) {
+      appMenuItem.hidden = true;
+    }
+
+    // leakHunt({ DeveloperToolbar: DeveloperToolbar });
+  });
+
+  // a.k.a: Services.prefs.setBoolPref("devtools.toolbar.enabled", true);
+  if (menuItem) {
+    menuItem.hidden = false;
+  }
+  if (command) {
+    command.removeAttribute("disabled");
+  }
+  if (appMenuItem) {
+    appMenuItem.hidden = false;
+  }
+
+  waitForExplicitFinish();
+
+  gBrowser.selectedTab = gBrowser.addTab();
+  content.location = uri;
+
+  let tab = gBrowser.selectedTab;
+  let browser = gBrowser.getBrowserForTab(tab);
+
+  var onTabLoad = function() {
+    browser.removeEventListener("load", onTabLoad, true);
+
+    DeveloperToolbarTest.show(function() {
+      if (helpers) {
+        helpers.setup({ display: DeveloperToolbar.display });
+      }
+
+      if (Array.isArray(target)) {
+        try {
+          target.forEach(function(func) {
+            func(browser, tab);
+          })
+        }
+        finally {
+          DeveloperToolbarTest._checkFinish();
+        }
+      }
+      else {
+        try {
+          target(browser, tab);
+        }
+        catch (ex) {
+          ok(false, "" + ex);
+          DeveloperToolbarTest._finish();
+          throw ex;
+        }
+      }
+    });
+  }
+
+  browser.addEventListener("load", onTabLoad, true);
+};
+
+DeveloperToolbarTest._outstanding = [];
+
+DeveloperToolbarTest._checkFinish = function() {
+  info('_checkFinish. ' + DeveloperToolbarTest._outstanding.length + ' outstanding');
+  if (DeveloperToolbarTest._outstanding.length == 0) {
+    DeveloperToolbarTest._finish();
+  }
+}
+
+DeveloperToolbarTest._finish = function() {
+  info('Finish');
+  DeveloperToolbarTest.closeAllTabs();
+  finish();
+}
+
+DeveloperToolbarTest.checkCalled = function(aFunc, aScope) {
+  var todo = function() {
+    var reply = aFunc.apply(aScope, arguments);
+    DeveloperToolbarTest._outstanding = DeveloperToolbarTest._outstanding.filter(function(aJob) {
+      return aJob != todo;
+    });
+    DeveloperToolbarTest._checkFinish();
+    return reply;
+  }
+  DeveloperToolbarTest._outstanding.push(todo);
+  return todo;
+};
+
+DeveloperToolbarTest.checkNotCalled = function(aMsg, aFunc, aScope) {
+  return function() {
+    ok(false, aMsg);
+    return aFunc.apply(aScope, arguments);
+  }
+};
+
+/**
+ *
+ */
+DeveloperToolbarTest.closeAllTabs = function() {
+  while (gBrowser.tabs.length > 1) {
+    gBrowser.removeCurrentTab();
+  }
+};
+
+///////////////////////////////////////////////////////////////////////////////
+
+this.helpers = {};
+
+helpers._display = undefined;
+
+helpers.setup = function(options) {
+  helpers._display = options.display;
+  if (typeof ok !== 'undefined') {
+    test.ok = ok;
+    test.is = is;
+    test.log = info;
+  }
+};
+
+helpers.shutdown = function(options) {
+  helpers._display = undefined;
+};
+
+/**
+ * Various functions to return the actual state of the command line
+ */
+helpers._actual = {
+  input: function() {
+    return helpers._display.inputter.element.value;
+  },
+
+  hints: function() {
+    var templateData = helpers._display.completer._getCompleterTemplateData();
+    var actualHints = templateData.directTabText +
+                      templateData.emptyParameters.join('') +
+                      templateData.arrowTabText;
+    return actualHints.replace(/\u00a0/g, ' ')
+                      .replace(/\u21E5/, '->')
+                      .replace(/ $/, '');
+  },
+
+  markup: function() {
+    var cursor = helpers._display.inputter.element.selectionStart;
+    var statusMarkup = helpers._display.requisition.getInputStatusMarkup(cursor);
+    return statusMarkup.map(function(s) {
+      return Array(s.string.length + 1).join(s.status.toString()[0]);
+    }).join('');
+  },
+
+  cursor: function() {
+    return helpers._display.inputter.element.selectionStart;
+  },
+
+  current: function() {
+    return helpers._display.requisition.getAssignmentAt(helpers._actual.cursor()).param.name;
+  },
+
+  status: function() {
+    return helpers._display.requisition.getStatus().toString();
+  },
+
+  outputState: function() {
+    var outputData = helpers._display.focusManager._shouldShowOutput();
+    return outputData.visible + ':' + outputData.reason;
+  },
+
+  tooltipState: function() {
+    var tooltipData = helpers._display.focusManager._shouldShowTooltip();
+    return tooltipData.visible + ':' + tooltipData.reason;
+  }
+};
+
+helpers._directToString = [ 'boolean', 'undefined', 'number' ];
+
+helpers._createDebugCheck = function() {
+  var requisition = helpers._display.requisition;
+  var command = requisition.commandAssignment.value;
+  var input = helpers._actual.input();
+  var padding = Array(input.length + 1).join(' ');
+
+  var output = '';
+  output += 'helpers.setInput(\'' + input + '\');\n';
+  output += 'helpers.check({\n';
+  output += '  input:  \'' + input + '\',\n';
+  output += '  hints:  ' + padding + '\'' + helpers._actual.hints() + '\',\n';
+  output += '  markup: \'' + helpers._actual.markup() + '\',\n';
+  output += '  cursor: ' + helpers._actual.cursor() + ',\n';
+  output += '  current: \'' + helpers._actual.current() + '\',\n';
+  output += '  status: \'' + helpers._actual.status() + '\',\n';
+  output += '  outputState: \'' + helpers._actual.outputState() + '\',\n';
+
+  if (command) {
+    output += '  tooltipState: \'' + helpers._actual.tooltipState() + '\',\n';
+    output += '  args: {\n';
+    output += '    command: { name: \'' + command.name + '\' },\n';
+
+    requisition.getAssignments().forEach(function(assignment) {
+      output += '    ' + assignment.param.name + ': { ';
+
+      if (typeof assignment.value === 'string') {
+        output += 'value: \'' + assignment.value + '\', ';
+      }
+      else if (helpers._directToString.indexOf(typeof assignment.value) !== -1) {
+        output += 'value: ' + assignment.value + ', ';
+      }
+      else if (assignment.value === null) {
+        output += 'value: ' + assignment.value + ', ';
+      }
+      else {
+        output += '/*value:' + assignment.value + ',*/ ';
+      }
+
+      output += 'arg: \'' + assignment.arg + '\', ';
+      output += 'status: \'' + assignment.getStatus().toString() + '\', ';
+      output += 'message: \'' + assignment.getMessage() + '\'';
+      output += ' },\n';
+    });
+
+    output += '  }\n';
+  }
+  else {
+    output += '  tooltipState: \'' + helpers._actual.tooltipState() + '\'\n';
+  }
+  output += '});';
+
+  return output;
+};
+
+/**
+ * We're splitting status into setup() which alters the state of the system
+ * and check() which ensures that things are in the right place afterwards.
+ */
+helpers.setInput = function(typed, cursor) {
+  helpers._display.inputter.setInput(typed);
+
+  if (cursor) {
+    helpers._display.inputter.setCursor({ start: cursor, end: cursor });
+  }
+
+  helpers._display.focusManager.onInputChange();
+
+  test.log('setInput("' + typed + '"' + (cursor == null ? '' : ', ' + cursor) + ')');
+};
+
+/**
+ * Simulate focusing the input field
+ */
+helpers.focusInput = function() {
+  helpers._display.inputter.focus();
+};
+
+/**
+ * Simulate pressing TAB in the input field
+ */
+helpers.pressTab = function() {
+  helpers.pressKey(9 /*KeyEvent.DOM_VK_TAB*/);
+};
+
+/**
+ * Simulate pressing RETURN in the input field
+ */
+helpers.pressReturn = function() {
+  helpers.pressKey(13 /*KeyEvent.DOM_VK_RETURN*/);
+};
+
+/**
+ * Simulate pressing a key by keyCode in the input field
+ */
+helpers.pressKey = function(keyCode) {
+  var fakeEvent = {
+    keyCode: keyCode,
+    preventDefault: function() { },
+    timeStamp: new Date().getTime()
+  };
+  helpers._display.inputter.onKeyDown(fakeEvent);
+  helpers._display.inputter.onKeyUp(fakeEvent);
+};
+
+/**
+ * check() is the new status. Similar API except that it doesn't attempt to
+ * alter the display/requisition at all, and it makes extra checks.
+ * Available checks:
+ *   input: The text displayed in the input field
+ *   cursor: The position of the start of the cursor
+ *   status: One of "VALID", "ERROR", "INCOMPLETE"
+ *   hints: The hint text, i.e. a concatenation of the directTabText, the
+ *     emptyParameters and the arrowTabText. The text as inserted into the UI
+ *     will include NBSP and Unicode RARR characters, these should be
+ *     represented using normal space and '->' for the arrow
+ *   markup: What state should the error markup be in. e.g. "VVVIIIEEE"
+ *   args: Maps of checks to make against the arguments:
+ *     value: i.e. assignment.value (which ignores defaultValue)
+ *     type: Argument/BlankArgument/MergedArgument/etc i.e. what's assigned
+ *           Care should be taken with this since it's something of an
+ *           implementation detail
+ *     arg: The toString value of the argument
+ *     status: i.e. assignment.getStatus
+ *     message: i.e. assignment.getMessage
+ *     name: For commands - checks assignment.value.name
+ */
+helpers.check = function(checks) {
+  if ('input' in checks) {
+    test.is(helpers._actual.input(), checks.input, 'input');
+  }
+
+  if ('cursor' in checks) {
+    test.is(helpers._actual.cursor(), checks.cursor, 'cursor');
+  }
+
+  if ('current' in checks) {
+    test.is(helpers._actual.current(), checks.current, 'current');
+  }
+
+  if ('status' in checks) {
+    test.is(helpers._actual.status(), checks.status, 'status');
+  }
+
+  if ('markup' in checks) {
+    test.is(helpers._actual.markup(), checks.markup, 'markup');
+  }
+
+  if ('hints' in checks) {
+    test.is(helpers._actual.hints(), checks.hints, 'hints');
+  }
+
+  if ('tooltipState' in checks) {
+    test.is(helpers._actual.tooltipState(), checks.tooltipState, 'tooltipState');
+  }
+
+  if ('outputState' in checks) {
+    test.is(helpers._actual.outputState(), checks.outputState, 'outputState');
+  }
+
+  if (checks.args != null) {
+    var requisition = helpers._display.requisition;
+    Object.keys(checks.args).forEach(function(paramName) {
+      var check = checks.args[paramName];
+
+      var assignment;
+      if (paramName === 'command') {
+        assignment = requisition.commandAssignment;
+      }
+      else {
+        assignment = requisition.getAssignment(paramName);
+      }
+
+      if (assignment == null) {
+        test.ok(false, 'Unknown arg: ' + paramName);
+        return;
+      }
+
+      if ('value' in check) {
+        test.is(assignment.value,
+                check.value,
+                'arg.' + paramName + '.value');
+      }
+
+      if ('name' in check) {
+        test.is(assignment.value.name,
+                check.name,
+                'arg.' + paramName + '.name');
+      }
+
+      if ('type' in check) {
+        test.is(assignment.arg.type,
+                check.type,
+                'arg.' + paramName + '.type');
+      }
+
+      if ('arg' in check) {
+        test.is(assignment.arg.toString(),
+                check.arg,
+                'arg.' + paramName + '.arg');
+      }
+
+      if ('status' in check) {
+        test.is(assignment.getStatus().toString(),
+                check.status,
+                'arg.' + paramName + '.status');
+      }
+
+      if ('message' in check) {
+        test.is(assignment.getMessage(),
+                check.message,
+                'arg.' + paramName + '.message');
+      }
+    });
+  }
+};
+
+/**
+ * Execute a command:
+ *
+ * helpers.exec({
+ *   // Test inputs
+ *   typed: "echo hi",        // Optional, uses existing if undefined
+ *
+ *   // Thing to check
+ *   args: { message: "hi" }, // Check that the args were understood properly
+ *   outputMatch: /^hi$/,     // Regex to test against textContent of output
+ *   blankOutput: true,       // Special checks when there is no output
+ * });
+ */
+helpers.exec = function(tests) {
+  var requisition = helpers._display.requisition;
+  var inputter = helpers._display.inputter;
+
+  tests = tests || {};
+
+  if (tests.typed) {
+    inputter.setInput(tests.typed);
+  }
+
+  var typed = inputter.getInputState().typed;
+  var output = requisition.exec({ hidden: true });
+
+  test.is(typed, output.typed, 'output.command for: ' + typed);
+
+  if (tests.completed !== false) {
+    test.ok(output.completed, 'output.completed false for: ' + typed);
+  }
+  else {
+    // It is actually an error if we say something is async and it turns
+    // out not to be? For now we're saying 'no'
+    // test.ok(!output.completed, 'output.completed true for: ' + typed);
+  }
+
+  if (tests.args != null) {
+    test.is(Object.keys(tests.args).length, Object.keys(output.args).length,
+            'arg count for ' + typed);
+
+    Object.keys(output.args).forEach(function(arg) {
+      var expectedArg = tests.args[arg];
+      var actualArg = output.args[arg];
+
+      if (Array.isArray(expectedArg)) {
+        if (!Array.isArray(actualArg)) {
+          test.ok(false, 'actual is not an array. ' + typed + '/' + arg);
+          return;
+        }
+
+        test.is(expectedArg.length, actualArg.length,
+                'array length: ' + typed + '/' + arg);
+        for (var i = 0; i < expectedArg.length; i++) {
+          test.is(expectedArg[i], actualArg[i],
+                  'member: "' + typed + '/' + arg + '/' + i);
+        }
+      }
+      else {
+        test.is(expectedArg, actualArg, 'typed: "' + typed + '" arg: ' + arg);
+      }
+    });
+  }
+
+  if (!options.window.document.createElement) {
+    test.log('skipping output tests (missing doc.createElement) for ' + typed);
+    return;
+  }
+
+  var div = options.window.document.createElement('div');
+  output.toDom(div);
+  var displayed = div.textContent.trim();
+
+  if (tests.outputMatch) {
+    var doTest = function(match, against) {
+      if (!match.test(against)) {
+        test.ok(false, "html output for " + typed + " against " + match.source);
+        console.log("Actual textContent");
+        console.log(against);
+      }
+    }
+    if (Array.isArray(tests.outputMatch)) {
+      tests.outputMatch.forEach(function(match) {
+        doTest(match, displayed);
+      });
+    }
+    else {
+      doTest(tests.outputMatch, displayed);
+    }
+  }
+
+  if (tests.blankOutput != null) {
+    if (!/^$/.test(displayed)) {
+      test.ok(false, "html for " + typed + " (textContent sent to info)");
+      console.log("Actual textContent");
+      console.log(displayed);
+    }
+  }
+};
diff --git a/browser/devtools/jar.mn b/browser/devtools/jar.mn
--- a/browser/devtools/jar.mn
+++ b/browser/devtools/jar.mn
@@ -2,30 +2,39 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 browser.jar:
     content/browser/devtools/markup-view.xhtml    (markupview/markup-view.xhtml)
     content/browser/devtools/markup-view.css      (markupview/markup-view.css)
     content/browser/NetworkPanel.xhtml            (webconsole/NetworkPanel.xhtml)
     content/browser/devtools/webconsole.js        (webconsole/webconsole.js)
-*   content/browser/devtools/webconsole.xul       (webconsole/webconsole.xul)
+    content/browser/devtools/webconsole.xul       (webconsole/webconsole.xul)
 *   content/browser/scratchpad.xul                (scratchpad/scratchpad.xul)
     content/browser/scratchpad.js                 (scratchpad/scratchpad.js)
     content/browser/splitview.css                 (shared/splitview.css)
     content/browser/styleeditor.xul               (styleeditor/styleeditor.xul)
     content/browser/styleeditor.css               (styleeditor/styleeditor.css)
     content/browser/devtools/csshtmltree.xul      (styleinspector/csshtmltree.xul)
     content/browser/devtools/cssruleview.xul      (styleinspector/cssruleview.xul)
     content/browser/devtools/styleinspector.css   (styleinspector/styleinspector.css)
+    content/browser/devtools/layoutview/view.js   (layoutview/view.js)
     content/browser/devtools/layoutview/view.xhtml  (layoutview/view.xhtml)
     content/browser/devtools/layoutview/view.css  (layoutview/view.css)
     content/browser/orion.js                      (sourceeditor/orion/orion.js)
 *   content/browser/source-editor-overlay.xul     (sourceeditor/source-editor-overlay.xul)
-*   content/browser/debugger.xul                  (debugger/debugger.xul)
+    content/browser/debugger.xul                  (debugger/debugger.xul)
     content/browser/debugger.css                  (debugger/debugger.css)
     content/browser/debugger-controller.js        (debugger/debugger-controller.js)
     content/browser/debugger-view.js              (debugger/debugger-view.js)
     content/browser/debugger-toolbar.js           (debugger/debugger-toolbar.js)
     content/browser/debugger-panes.js             (debugger/debugger-panes.js)
     content/browser/devtools/commandline.css      (commandline/commandline.css)
     content/browser/devtools/commandlineoutput.xhtml  (commandline/commandlineoutput.xhtml)
     content/browser/devtools/commandlinetooltip.xhtml  (commandline/commandlinetooltip.xhtml)
+    content/browser/devtools/framework/toolbox-window.xul    (framework/toolbox-window.xul)
+    content/browser/devtools/framework/toolbox.xul           (framework/toolbox.xul)
+    content/browser/devtools/framework/toolbox.css           (framework/toolbox.css)
+    content/browser/devtools/inspector/inspector.xul         (inspector/inspector.xul)
+    content/browser/devtools/inspector/inspector.css         (inspector/inspector.css)
+    content/browser/devtools/connect.xhtml  (framework/connect/connect.xhtml)
+    content/browser/devtools/connect.css    (framework/connect/connect.css)
+    content/browser/devtools/connect.js     (framework/connect/connect.js)
diff --git a/browser/devtools/layoutview/LayoutView.jsm b/browser/devtools/layoutview/LayoutView.jsm
deleted file mode 100644
--- a/browser/devtools/layoutview/LayoutView.jsm
+++ /dev/null
@@ -1,368 +0,0 @@
-/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
-/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-"use strict";
-
-const Cu = Components.utils;
-Cu.import("resource://gre/modules/Services.jsm");
-Cu.import("resource:///modules/inspector.jsm");
-Cu.import("resource:///modules/devtools/LayoutHelpers.jsm");
-Cu.import("resource:///modules/devtools/CssLogic.jsm");
-
-this.EXPORTED_SYMBOLS = ["LayoutView"];
-
-this.LayoutView = function LayoutView(aOptions)
-{
-  this.chromeDoc = aOptions.document;
-  this.inspector = aOptions.inspector;
-  this.browser = this.inspector.chromeWindow.gBrowser;
-
-  this.init();
-}
-
-LayoutView.prototype = {
-  init: function LV_init() {
-    this.cssLogic = new CssLogic();
-
-    this.update = this.update.bind(this);
-    this.onMessage = this.onMessage.bind(this);
-
-    this.isOpen = false;
-    this.documentReady = false;
-
-    // Is the layout view was open before?
-    if (!("_layoutViewIsOpen" in this.inspector)) {
-      this.inspector._layoutViewIsOpen =
-        Services.prefs.getBoolPref("devtools.layoutview.open");
-    }
-
-    // We update the values when:
-    //  a node is locked
-    //  we get the MozAfterPaint event and the node is locked
-    function onSelect() {
-      if (this.inspector.locked) {
-        this.cssLogic.highlight(this.inspector.selection);
-        this.undim();
-        this.update();
-        // We make sure we never add 2 listeners.
-        if (!this.trackingPaint) {
-          this.browser.addEventListener("MozAfterPaint", this.update, true);
-          this.trackingPaint = true;
-        }
-      }
-    }
-
-    function onUnlock() {
-      this.browser.removeEventListener("MozAfterPaint", this.update, true);
-      this.trackingPaint = false;
-      this.dim();
-    }
-
-    this.onSelect= onSelect.bind(this);
-    this.onUnlock = onUnlock.bind(this);
-    this.inspector.on("select", this.onSelect);
-    this.inspector.on("unlocked", this.onUnlock);
-
-    // Build the layout view in the sidebar.
-    this.buildView();
-
-    this.bound_handleKeypress = this.handleKeypress.bind(this);
-    this.iframe.addEventListener("keypress", this.bound_handleKeypress, true);
-
-    // Get messages from the iframe.
-    this.inspector.chromeWindow.addEventListener("message", this.onMessage, true);
-
-    // Store for the different dimensions of the node.
-    // 'selector' refers to the element that holds the value in view.xhtml;
-    // 'property' is what we are measuring;
-    // 'value' is the computed dimension, computed in update().
-    this.map = {
-      marginTop: {selector: ".margin.top > span",
-                  property: "margin-top",
-                  value: undefined},
-      marginBottom: {selector: ".margin.bottom > span",
-                  property: "margin-bottom",
-                  value: undefined},
-      marginLeft: {selector: ".margin.left > span",
-                  property: "margin-left",
-                  value: undefined},
-      marginRight: {selector: ".margin.right > span",
-                  property: "margin-right",
-                  value: undefined},
-      paddingTop: {selector: ".padding.top > span",
-                  property: "padding-top",
-                  value: undefined},
-      paddingBottom: {selector: ".padding.bottom > span",
-                  property: "padding-bottom",
-                  value: undefined},
-      paddingLeft: {selector: ".padding.left > span",
-                  property: "padding-left",
-                  value: undefined},
-      paddingRight: {selector: ".padding.right > span",
-                  property: "padding-right",
-                  value: undefined},
-      borderTop: {selector: ".border.top > span",
-                  property: "border-top-width",
-                  value: undefined},
-      borderBottom: {selector: ".border.bottom > span",
-                  property: "border-bottom-width",
-                  value: undefined},
-      borderLeft: {selector: ".border.left > span",
-                  property: "border-left-width",
-                  value: undefined},
-      borderRight: {selector: ".border.right > span",
-                  property: "border-right-width",
-                  value: undefined},
-    };
-  },
-
-  /**
-   * Destroy the nodes. Remove listeners.
-   */
-  destroy: function LV_destroy() {
-    this.inspector.off("select", this.onSelect);
-    this.inspector.off("unlocked", this.onUnlock);
-    this.browser.removeEventListener("MozAfterPaint", this.update, true);
-    this.iframe.removeEventListener("keypress", this.bound_handleKeypress, true);
-    this.inspector.chromeWindow.removeEventListener("message", this.onMessage, true);
-    this.close();
-    this.sizeHeadingLabel = null;
-    this.sizeLabel = null;
-    this.iframe = null;
-    this.view.parentNode.removeChild(this.view);
-  },
-
-  /**
-   * Build the Layout container:
-   *
-   * <vbox id="inspector-layoutview-container">
-   *  <iframe src="chrome://browser/content/devtools/layoutview/view.xhtml"/>
-   * </vbox>
-   */
-  buildView: function LV_buildPanel() {
-    this.iframe = this.chromeDoc.createElement("iframe");
-    this.iframe.setAttribute("src", "chrome://browser/content/devtools/layoutview/view.xhtml");
-
-    this.view = this.chromeDoc.createElement("vbox");
-    this.view.id = "inspector-layoutview-container";
-    this.view.appendChild(this.iframe);
-
-    let sidebar = this.chromeDoc.getElementById("devtools-sidebar-box");
-    sidebar.appendChild(this.view);
-  },
-
-  /**
-   * Called when the iframe is loaded.
-   */
-  onDocumentReady: function LV_onDocumentReady() {
-    this.documentReady = true;
-    this.doc = this.iframe.contentDocument;
-
-    // Save reference to the labels displaying size of the node.
-    this.sizeLabel = this.doc.querySelector(".size > span");
-    this.sizeHeadingLabel = this.doc.getElementById("element-size");
-
-    // We can't do that earlier because open() and close() need to do stuff
-    // inside the iframe.
-
-    if (this.inspector.locked)
-      this.onSelect();
-    else
-      this.onUnlock();
-
-    if (this.inspector._layoutViewIsOpen) {
-      this.open();
-    } else {
-      this.close();
-    }
-
-  },
-
-  /**
-   * This is where we get messages from the layout view iframe.
-   */
-  onMessage: function LV_onMessage(e) {
-    switch (e.data) {
-      case "layoutview-toggle-view":
-        this.toggle(true);
-        break;
-      case "layoutview-ready":
-        this.onDocumentReady();
-        break;
-      default:
-        break;
-    }
-  },
-
-  /**
-   * Handle keypress.
-   */
-   handleKeypress: function LV_handleKeypress(event) {
-     let win = this.inspector.chromeWindow;
-
-     // avoid scroll
-     if (event.keyCode == win.KeyEvent.DOM_VK_LEFT ||
-         event.keyCode == win.KeyEvent.DOM_VK_RIGHT ||
-         event.keyCode == win.KeyEvent.DOM_VK_UP ||
-         event.keyCode == win.KeyEvent.DOM_VK_DOWN ||
-         event.keyCode == win.KeyEvent.DOM_VK_PAGE_UP ||
-         event.keyCode == win.KeyEvent.DOM_VK_PAGE_DOWN) {
-
-        event.preventDefault();
-     }
-
-     if (event.charCode == win.KeyEvent.DOM_VK_SPACE) {
-       this.toggle(true);
-     }
-   },
-
-  /**
-   * Open the view container.
-   *
-   * @param aUserAction Is the action triggered by the user (click on the
-   * open/close button in the view)
-   */
-  open: function LV_open(aUserAction) {
-    this.isOpen = true;
-    if (this.documentReady)
-      this.doc.body.classList.add("open");
-    if (aUserAction) {
-      this.inspector._layoutViewIsOpen = true;
-      Services.prefs.setBoolPref("devtools.layoutview.open", true);
-      this.view.removeAttribute("disable-transitions");
-    } else {
-      this.view.setAttribute("disable-transitions", "true");
-    }
-    this.iframe.setAttribute("open", "true");
-    this.update();
-  },
-
-  /**
-   * Close the view container.
-   *
-   * @param aUserAction Is the action triggered by the user (click on the
-   * open/close button in the view)
-   */
-  close: function LV_close(aUserAction) {
-    this.isOpen = false;
-    if (this.documentReady)
-      this.doc.body.classList.remove("open");
-    if (aUserAction) {
-      this.inspector._layoutViewIsOpen = false;
-      Services.prefs.setBoolPref("devtools.layoutview.open", false);
-      this.view.removeAttribute("disable-transitions");
-    } else {
-      this.view.setAttribute("disable-transitions", "true");
-    }
-    this.iframe.removeAttribute("open");
-  },
-
-  /**
-   * Toggle view container state (open/close).
-   *
-   * @param aUserAction Is the action triggered by the user (click on the
-   * open/close button in the view)
-   */
-  toggle: function LV_toggle(aUserAction) {
-    this.isOpen ? this.close(aUserAction):this.open(aUserAction);
-  },
-
-  /**
-   * Hide the layout boxes. No node are selected.
-   */
-  dim: function LV_dim() {
-    if (!this.documentReady) return;
-    this.doc.body.classList.add("dim");
-  },
-
-  /**
-   * Show the layout boxes. A node is selected.
-   */
-  undim: function LV_dim() {
-    if (!this.documentReady) return;
-    this.doc.body.classList.remove("dim");
-  },
-
-  /**
-   * Compute the dimensions of the node and update the values in
-   * the layoutview/view.xhtml document.
-   */
-  update: function LV_update() {
-    let node = this.inspector.selection;
-    if (!node ||
-        !LayoutHelpers.isNodeConnected(node) ||
-        !this.documentReady) {
-      return;
-    }
-
-    // First, we update the first part of the layout view, with
-    // the size of the element.
-
-    let clientRect = node.getBoundingClientRect();
-    let width = Math.round(clientRect.width);
-    let height = Math.round(clientRect.height);
-
-    let newLabel = width + "x" + height;
-    if (this.sizeHeadingLabel.textContent != newLabel) {
-      this.sizeHeadingLabel.textContent = newLabel;
-    }
-
-    // If the view is closed, no need to do anything more.
-    if (!this.isOpen) return;
-
-    // We compute and update the values of margins & co.
-    let style = this.browser.contentWindow.getComputedStyle(node);;
-
-    for (let i in this.map) {
-      let property = this.map[i].property;
-      this.map[i].value = parseInt(style.getPropertyValue(property));
-    }
-
-    let margins = this.processMargins(node);
-    if ("top" in margins) this.map.marginTop.value = "auto";
-    if ("right" in margins) this.map.marginRight.value = "auto";
-    if ("bottom" in margins) this.map.marginBottom.value = "auto";
-    if ("left" in margins) this.map.marginLeft.value = "auto";
-
-    for (let i in this.map) {
-      let selector = this.map[i].selector;
-      let span = this.doc.querySelector(selector);
-      if (span.textContent.length > 0 &&
-          span.textContent == this.map[i].value) {
-        continue;
-      }
-      span.textContent = this.map[i].value;
-    }
-
-    width -= this.map.borderLeft.value + this.map.borderRight.value +
-             this.map.paddingLeft.value + this.map.paddingRight.value;
-
-    height -= this.map.borderTop.value + this.map.borderBottom.value +
-              this.map.paddingTop.value + this.map.paddingBottom.value;
-
-    let newValue = width + "x" + height;
-    if (this.sizeLabel.textContent != newValue) {
-      this.sizeLabel.textContent = newValue;
-    }
-  },
-
-  /**
-   * Find margins declared 'auto'
-   */
-  processMargins: function LV_processMargins(node) {
-    let margins = {};
-
-    for each (let prop in ["top", "bottom", "left", "right"]) {
-      let info = this.cssLogic.getPropertyInfo("margin-" + prop);
-      let selectors = info.matchedSelectors;
-      if (selectors && selectors.length > 0 && selectors[0].value == "auto") {
-        margins[prop] = "auto";
-      }
-    }
-
-    return margins;
-  },
-}
diff --git a/browser/devtools/layoutview/Makefile.in b/browser/devtools/layoutview/Makefile.in
--- a/browser/devtools/layoutview/Makefile.in
+++ b/browser/devtools/layoutview/Makefile.in
@@ -8,11 +8,8 @@ topsrcdir	= @top_srcdir@
 srcdir		= @srcdir@
 VPATH		= @srcdir@
 
 include $(DEPTH)/config/autoconf.mk
 
 TEST_DIRS += test
 
 include $(topsrcdir)/config/rules.mk
-
-libs::
-	$(NSINSTALL) $(srcdir)/*.jsm $(FINAL_TARGET)/modules/devtools
diff --git a/browser/devtools/layoutview/test/browser_layoutview.js b/browser/devtools/layoutview/test/browser_layoutview.js
--- a/browser/devtools/layoutview/test/browser_layoutview.js
+++ b/browser/devtools/layoutview/test/browser_layoutview.js
@@ -1,20 +1,25 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
+let tempScope = {};
+Cu.import("resource:///modules/devtools/Target.jsm", tempScope);
+let TargetFactory = tempScope.TargetFactory;
+
 function test() {
   waitForExplicitFinish();
 
   Services.prefs.setBoolPref("devtools.layoutview.enabled", true);
   Services.prefs.setBoolPref("devtools.inspector.sidebarOpen", true);
 
   let doc;
   let node;
   let view;
+  let inspector;
 
   // Expected values:
   let res1 = [
         {selector: "#element-size",              value: "160x160"},
         {selector: ".size > span",               value: "100x100"},
         {selector: ".margin.top > span",         value: 30},
         {selector: ".margin.left > span",        value: "auto"},
         {selector: ".margin.bottom > span",      value: 30},
@@ -56,83 +61,73 @@ function test() {
   let style = "div { position: absolute; top: 42px; left: 42px; height: 100px; width: 100px; border: 10px solid black; padding: 20px; margin: 30px auto;}";
   let html = "<style>" + style + "</style><div></div>"
   content.location = "data:text/html," + encodeURIComponent(html);
 
   function setupTest() {
     node = doc.querySelector("div");
     ok(node, "node found");
 
-    Services.obs.addObserver(openLayoutView,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-    InspectorUI.toggleInspectorUI();
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    let toolbox = gDevTools.openToolboxForTab(target, "inspector");
+    toolbox.once("inspector-ready", function(event, panel) {
+      let inspector = gDevTools.getPanelForTarget("inspector", target);
+      openLayoutView(inspector);
+    });
   }
 
-  function openLayoutView() {
-    Services.obs.removeObserver(openLayoutView,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
+  function openLayoutView(aInspector) {
+    inspector = aInspector;
 
     info("Inspector open");
 
-    let highlighter = InspectorUI.highlighter;
-    highlighter.highlight(node);
-    highlighter.lock();
-
-    window.addEventListener("message", viewReady, true);
+    inspector.selection.setNode(node);
+    inspector.sidebar.select("layoutview");
+    inspector.sidebar.once("layoutview-ready", viewReady);
   }
 
-  function viewReady(e) {
-    if (e.data != "layoutview-ready") return;
-
-    window.removeEventListener("message", viewReady, true);
-
+  function viewReady() {
     info("Layout view ready");
 
-    view = InspectorUI._sidebar._layoutview;
+    view = inspector.sidebar.getWindowForTab("layoutview");
 
-    ok(!!view, "LayoutView document is alive.");
-
-    view.open();
-
-    ok(view.iframe.getAttribute("open"), "true", "View is open.");
+    ok(!!view.layoutview, "LayoutView document is alive.");
 
     test1();
   }
 
   function test1() {
-    let viewdoc = view.iframe.contentDocument;
+    let viewdoc = view.document;
 
     for (let i = 0; i < res1.length; i++) {
       let elt = viewdoc.querySelector(res1[i].selector);
       is(elt.textContent, res1[i].value, res1[i].selector + " has the right value.");
     }
 
     gBrowser.selectedBrowser.addEventListener("MozAfterPaint", test2, false);
 
-    InspectorUI.selection.style.height = "150px";
-    InspectorUI.selection.style.paddingRight = "50px";
+    inspector.selection.node.style.height = "150px";
+    inspector.selection.node.style.paddingRight = "50px";
   }
 
   function test2() {
     gBrowser.selectedBrowser.removeEventListener("MozAfterPaint", test2, false);
 
-    let viewdoc = view.iframe.contentDocument;
+    let viewdoc = view.document;
 
     for (let i = 0; i < res2.length; i++) {
       let elt = viewdoc.querySelector(res2[i].selector);
       is(elt.textContent, res2[i].value, res2[i].selector + " has the right value after style update.");
     }
 
     executeSoon(function() {
-      Services.obs.addObserver(finishUp,
-        InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED, false);
-      InspectorUI.closeInspectorUI();
+      gDevTools.once("toolbox-destroyed", finishUp);
+      inspector._toolbox.destroy();
     });
   }
 
   function finishUp() {
     Services.prefs.clearUserPref("devtools.layoutview.enabled");
     Services.prefs.clearUserPref("devtools.inspector.sidebarOpen");
-    Services.obs.removeObserver(finishUp, InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED);
     gBrowser.removeCurrentTab();
     finish();
   }
 }
diff --git a/browser/devtools/layoutview/view.css b/browser/devtools/layoutview/view.css
--- a/browser/devtools/layoutview/view.css
+++ b/browser/devtools/layoutview/view.css
@@ -33,20 +33,16 @@ body {
 #element-size {
   -moz-box-flex: 1;
 }
 
 #element-size:-moz-dir(rtl) {
   -moz-box-pack: end;
 }
 
-#header:focus {
-  outline: none;
-}
-
 #main {
   margin: 0 10px 10px 10px;
   -moz-box-sizing: border-box;
   width: calc(100% - 2 * 10px);
   position: absolute;
   border-width: 1px;
   font: 10px/12px monospace;
 }
diff --git a/browser/devtools/layoutview/view.js b/browser/devtools/layoutview/view.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/layoutview/view.js
@@ -0,0 +1,248 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const Cu = Components.utils;
+Cu.import("resource://gre/modules/Services.jsm");
+Cu.import("resource:///modules/devtools/LayoutHelpers.jsm");
+Cu.import("resource:///modules/devtools/CssLogic.jsm");
+Cu.import("resource:///modules/devtools/gDevTools.jsm");
+
+function LayoutView(aInspector, aWindow)
+{
+  this.inspector = aInspector;
+
+  // <browser> is not always available (for Chrome targets for example)
+  if (this.inspector.target.tab) {
+    this.browser = aInspector.target.tab.linkedBrowser;
+  }
+
+  this.doc = aWindow.document;
+  this.sizeLabel = this.doc.querySelector(".size > span");
+  this.sizeHeadingLabel = this.doc.getElementById("element-size");
+
+  this.init();
+}
+
+LayoutView.prototype = {
+  init: function LV_init() {
+    this.cssLogic = new CssLogic();
+
+    this.update = this.update.bind(this);
+    this.onNewNode = this.onNewNode.bind(this);
+    this.onHighlighterLocked = this.onHighlighterLocked.bind(this);
+    this.inspector.selection.on("detached", this.onNewNode);
+    this.inspector.selection.on("new-node", this.onNewNode);
+    this.inspector.sidebar.on("layoutview-selected", this.onNewNode);
+    if (this.inspector.highlighter) {
+      this.inspector.highlighter.on("locked", this.onHighlighterLocked);
+    }
+
+    // Store for the different dimensions of the node.
+    // 'selector' refers to the element that holds the value in view.xhtml;
+    // 'property' is what we are measuring;
+    // 'value' is the computed dimension, computed in update().
+    this.map = {
+      marginTop: {selector: ".margin.top > span",
+                  property: "margin-top",
+                  value: undefined},
+      marginBottom: {selector: ".margin.bottom > span",
+                  property: "margin-bottom",
+                  value: undefined},
+      marginLeft: {selector: ".margin.left > span",
+                  property: "margin-left",
+                  value: undefined},
+      marginRight: {selector: ".margin.right > span",
+                  property: "margin-right",
+                  value: undefined},
+      paddingTop: {selector: ".padding.top > span",
+                  property: "padding-top",
+                  value: undefined},
+      paddingBottom: {selector: ".padding.bottom > span",
+                  property: "padding-bottom",
+                  value: undefined},
+      paddingLeft: {selector: ".padding.left > span",
+                  property: "padding-left",
+                  value: undefined},
+      paddingRight: {selector: ".padding.right > span",
+                  property: "padding-right",
+                  value: undefined},
+      borderTop: {selector: ".border.top > span",
+                  property: "border-top-width",
+                  value: undefined},
+      borderBottom: {selector: ".border.bottom > span",
+                  property: "border-bottom-width",
+                  value: undefined},
+      borderLeft: {selector: ".border.left > span",
+                  property: "border-left-width",
+                  value: undefined},
+      borderRight: {selector: ".border.right > span",
+                  property: "border-right-width",
+                  value: undefined},
+    };
+
+    this.onNewNode();
+  },
+
+  /**
+   * Is the layoutview visible in the sidebar?
+   */
+  isActive: function LV_isActive() {
+    return this.inspector.sidebar.getCurrentTabID() == "layoutview";
+  },
+
+  /**
+   * Destroy the nodes. Remove listeners.
+   */
+  destroy: function LV_destroy() {
+    this.inspector.sidebar.off("layoutview-selected", this.onNewNode);
+    this.inspector.selection.off("new-node", this.onNewNode);
+    this.inspector.selection.off("detached", this.onNewNode);
+    if (this.browser) {
+      this.browser.removeEventListener("MozAfterPaint", this.update, true);
+    }
+    if (this.inspector.highlighter) {
+      this.inspector.highlighter.on("locked", this.onHighlighterLocked);
+    }
+    this.sizeHeadingLabel = null;
+    this.sizeLabel = null;
+    this.inspector = null;
+    this.doc = null;
+  },
+
+  /**
+   * Selection 'new-node' event handler.
+   */
+  onNewNode: function LV_onNewNode() {
+    if (this.isActive() &&
+        this.inspector.selection.isConnected() &&
+        this.inspector.selection.isElementNode() &&
+        this.inspector.selection.reason != "highlighter") {
+      this.cssLogic.highlight(this.inspector.selection.node);
+      this.undim();
+      this.update();
+    } else {
+      this.dim();
+    }
+  },
+
+  /**
+   * Highlighter 'locked' event handler
+   */
+  onHighlighterLocked: function LV_onHighlighterLocked() {
+    this.cssLogic.highlight(this.inspector.selection.node);
+    this.undim();
+    this.update();
+  },
+
+  /**
+   * Hide the layout boxes. No node are selected.
+   */
+  dim: function LV_dim() {
+    if (this.browser) {
+      this.browser.removeEventListener("MozAfterPaint", this.update, true);
+    }
+    this.trackingPaint = false;
+    this.doc.body.classList.add("dim");
+    this.dimmed = true;
+  },
+
+  /**
+   * Show the layout boxes. A node is selected.
+   */
+  undim: function LV_undim() {
+    if (!this.trackingPaint) {
+      if (this.browser) {
+        this.browser.addEventListener("MozAfterPaint", this.update, true);
+      }
+      this.trackingPaint = true;
+    }
+    this.doc.body.classList.remove("dim");
+    this.dimmed = false;
+  },
+
+  /**
+   * Compute the dimensions of the node and update the values in
+   * the layoutview/view.xhtml document.
+   */
+  update: function LV_update() {
+    if (!this.isActive() ||
+        !this.inspector.selection.isConnected() ||
+        !this.inspector.selection.isElementNode()) {
+      return;
+    }
+
+    let node = this.inspector.selection.node;
+
+    // First, we update the first part of the layout view, with
+    // the size of the element.
+
+    let clientRect = node.getBoundingClientRect();
+    let width = Math.round(clientRect.width);
+    let height = Math.round(clientRect.height);
+
+    let newLabel = width + "x" + height;
+    if (this.sizeHeadingLabel.textContent != newLabel) {
+      this.sizeHeadingLabel.textContent = newLabel;
+    }
+
+    // If the view is dimmed, no need to do anything more.
+    if (this.dimmed) return;
+
+    // We compute and update the values of margins & co.
+    let style = node.ownerDocument.defaultView.getComputedStyle(node);
+
+    for (let i in this.map) {
+      let property = this.map[i].property;
+      this.map[i].value = parseInt(style.getPropertyValue(property));
+    }
+
+    let margins = this.processMargins(node);
+    if ("top" in margins) this.map.marginTop.value = "auto";
+    if ("right" in margins) this.map.marginRight.value = "auto";
+    if ("bottom" in margins) this.map.marginBottom.value = "auto";
+    if ("left" in margins) this.map.marginLeft.value = "auto";
+
+    for (let i in this.map) {
+      let selector = this.map[i].selector;
+      let span = this.doc.querySelector(selector);
+      if (span.textContent.length > 0 &&
+          span.textContent == this.map[i].value) {
+        continue;
+      }
+      span.textContent = this.map[i].value;
+    }
+
+    width -= this.map.borderLeft.value + this.map.borderRight.value +
+             this.map.paddingLeft.value + this.map.paddingRight.value;
+
+    height -= this.map.borderTop.value + this.map.borderBottom.value +
+              this.map.paddingTop.value + this.map.paddingBottom.value;
+
+    let newValue = width + "x" + height;
+    if (this.sizeLabel.textContent != newValue) {
+      this.sizeLabel.textContent = newValue;
+    }
+  },
+
+  /**
+   * Find margins declared 'auto'
+   */
+  processMargins: function LV_processMargins(node) {
+    let margins = {};
+
+    for each (let prop in ["top", "bottom", "left", "right"]) {
+      let info = this.cssLogic.getPropertyInfo("margin-" + prop);
+      let selectors = info.matchedSelectors;
+      if (selectors && selectors.length > 0 && selectors[0].value == "auto") {
+        margins[prop] = "auto";
+      }
+    }
+
+    return margins;
+  },
+}
diff --git a/browser/devtools/layoutview/view.xhtml b/browser/devtools/layoutview/view.xhtml
--- a/browser/devtools/layoutview/view.xhtml
+++ b/browser/devtools/layoutview/view.xhtml
@@ -5,27 +5,29 @@
 <!DOCTYPE html [
 <!ENTITY % layoutviewDTD SYSTEM "chrome://browser/locale/devtools/layoutview.dtd" >
  %layoutviewDTD;
 ]>
 
 <html xmlns="http://www.w3.org/1999/xhtml"
       xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
   <head>
-    <title>Layout View</title>
+    <title>&title;</title>
 
+    <script type="application/javascript;version=1.8" src="view.js"></script>
     <script type="application/javascript;version=1.8">
     <![CDATA[
       let elts;
       let tooltip;
 
       const Ci = Components.interfaces;
       const Cc = Components.classes;
 
-      window.onload = function() {
+      window.setPanel = function(panel) {
+        this.layoutview = new LayoutView(panel, window);
 
         // Tooltip mechanism
         elts = document.querySelectorAll("*[tooltip]");
         tooltip = document.querySelector(".tooltip");
         for (let i = 0; i < elts.length; i++) {
           let elt = elts[i];
           elt.addEventListener("mouseover", onmouseover, true);
           elt.addEventListener("mouseout", onmouseout, true);
@@ -36,52 +38,46 @@
           getService(Ci.nsIXULChromeRegistry);
         let dir = chromeReg.isLocaleRTL("global");
         document.body.setAttribute("dir", dir ? "rtl" : "ltr");
 
         window.parent.postMessage("layoutview-ready", "*");
       }
 
       window.onunload = function() {
+        this.layoutview.destroy();
         if (elts) {
           for (let i = 0; i < elts.length; i++) {
             let elt = elts[i];
             elt.removeEventListener("mouseover", onmouseover, true);
             elt.removeEventListener("mouseout", onmouseout, true);
           }
         }
       }
 
       function onmouseover(e) {
         tooltip.textContent = e.target.getAttribute("tooltip");
       }
 
       function onmouseout(e) {
         tooltip.textContent = "";
       }
-
-      function toggleView() {
-        window.parent.postMessage("layoutview-toggle-view", "*");
-      }
     ]]>
     </script>
 
     <link rel="stylesheet" href="chrome://browser/skin/devtools/layoutview.css" type="text/css"/>
     <link rel="stylesheet" href="view.css" type="text/css"/>
 
   </head>
   <body>
 
-    <!-- Header: always visible, even when the view is closed. -->
-    <a onclick="toggleView()" href="#" id="header">
+    <p id="header">
         <span id="element-size"></span>
-        <span id="togglebutton"></span>
-    </a>
+    </p>
 
-    <!-- Boxes: hidden when the view is closed. -->
     <div id="main">
 
       <div id="margins" tooltip="&margins.tooltip;">
         <div id="borders" tooltip="&borders.tooltip;">
           <div id="padding" tooltip="&padding.tooltip;">
             <div id="content" tooltip="&content.tooltip;">
             </div>
           </div>
diff --git a/browser/devtools/markupview/MarkupView.jsm b/browser/devtools/markupview/MarkupView.jsm
--- a/browser/devtools/markupview/MarkupView.jsm
+++ b/browser/devtools/markupview/MarkupView.jsm
@@ -34,53 +34,46 @@ Cu.import("resource://gre/modules/Servic
  * The markup tree.  Manages the mapping of nodes to MarkupContainers,
  * updating based on mutations, and the undo/redo bindings.
  *
  * @param Inspector aInspector
  *        The inspector we're watching.
  * @param iframe aFrame
  *        An iframe in which the caller has kindly loaded markup-view.xhtml.
  */
-this.MarkupView = function MarkupView(aInspector, aFrame)
+this.MarkupView = function MarkupView(aInspector, aFrame, aControllerWindow)
 {
   this._inspector = aInspector;
   this._frame = aFrame;
   this.doc = this._frame.contentDocument;
   this._elt = this.doc.querySelector("#root");
 
   this.undo = new UndoStack();
-  this.undo.installController(this._frame.ownerDocument.defaultView);
+  this.undo.installController(aControllerWindow);
 
   this._containers = new WeakMap();
 
   this._observer = new this.doc.defaultView.MutationObserver(this._mutationObserver.bind(this));
 
-  this._boundSelect = this._onSelect.bind(this);
-  this._inspector.on("select", this._boundSelect);
-  this._onSelect();
+  this._boundOnNewSelection = this._onNewSelection.bind(this);
+  this._inspector.selection.on("new-node", this._boundOnNewSelection);
+  this._onNewSelection();
 
   this._boundKeyDown = this._onKeyDown.bind(this);
   this._frame.addEventListener("keydown", this._boundKeyDown, false);
 
   this._boundFocus = this._onFocus.bind(this);
   this._frame.addEventListener("focus", this._boundFocus, false);
 
   this._initPreview();
 }
 
 MarkupView.prototype = {
   _selectedContainer: null,
 
-  /**
-   * Return the selected node.
-   */
-  get selected() {
-    return this._selectedContainer ? this._selectedContainer.node : null;
-  },
-
   template: function MT_template(aName, aDest, aOptions)
   {
     let node = this.doc.getElementById("template-" + aName).cloneNode(true);
     node.removeAttribute("id");
     template(node, aDest, aOptions);
     return node;
   },
 
@@ -89,24 +82,26 @@ MarkupView.prototype = {
    * none exists.
    */
   getContainer: function MT_getContainer(aNode)
   {
     return this._containers.get(aNode);
   },
 
   /**
-   * Highlight the given element in the markup panel.
+   * Highlight the inspector selected node.
    */
-  _onSelect: function MT__onSelect()
+  _onNewSelection: function MT__onNewSelection()
   {
-    if (this._inspector.selection) {
-      this.showNode(this._inspector.selection, true);
+    if (this._inspector.selection.isNode()) {
+      this.showNode(this._inspector.selection.node, true);
+      this.markNodeAsSelected(this._inspector.selection.node);
+    } else {
+      this.unmarkSelectedNode();
     }
-    this.selectNode(this._inspector.selection);
   },
 
   /**
    * Create a TreeWalker to find the next/previous
    * node for selection.
    */
   _selectionWalker: function MT__seletionWalker(aStart)
   {
@@ -250,22 +245,21 @@ MarkupView.prototype = {
   navigate: function MT__navigate(aContainer, aIgnoreFocus)
   {
     if (!aContainer) {
       return;
     }
 
     let node = aContainer.node;
     this.showNode(node, false);
-    this.selectNode(node);
 
-    if (this._inspector._IUI.highlighter.isNodeHighlightable(node)) {
-      this._inspector._IUI.select(node, true, false, "treepanel");
-      this._inspector._IUI.highlighter.highlight(node);
-    }
+    this._inspector.selection.setNode(node, "treepanel");
+    // This event won't be fired if the node is the same. But the highlighter
+    // need to lock the node if it wasn't.
+    this._inspector.selection.emit("new-node");
 
     if (!aIgnoreFocus) {
       aContainer.focus();
     }
   },
 
   /**
    * Make sure a node is included in the markup tool.
@@ -408,33 +402,42 @@ MarkupView.prototype = {
   {
     let container = this._containers.get(aNode);
     container.expanded = false;
   },
 
   /**
    * Mark the given node selected.
    */
-  selectNode: function MT_selectNode(aNode)
+  markNodeAsSelected: function MT_markNodeAsSelected(aNode)
   {
     let container = this._containers.get(aNode);
     if (this._selectedContainer === container) {
       return false;
     }
     if (this._selectedContainer) {
       this._selectedContainer.selected = false;
     }
     this._selectedContainer = container;
     if (aNode) {
       this._selectedContainer.selected = true;
     }
 
-    this._selectedContainer.focus();
+    return true;
+  },
 
-    return true;
+  /**
+   * Unmark selected node (no node selected).
+   */
+  unmarkSelectedNode: function MT_unmarkSelectedNode()
+  {
+    if (this._selectedContainer) {
+      this._selectedContainer.selected = false;
+      this._selectedContainer = null;
+    }
   },
 
   /**
    * Called when the markup panel initiates a change on a node.
    */
   nodeChanged: function MT_nodeChanged(aNode)
   {
     if (aNode === this._inspector.selection) {
@@ -485,18 +488,18 @@ MarkupView.prototype = {
     this._frame.contentWindow.removeEventListener("resize", this._boundUpdatePreview, true);
     this._frame.contentWindow.removeEventListener("overflow", this._boundResizePreview, true);
     this._frame.contentWindow.removeEventListener("underflow", this._boundResizePreview, true);
     delete this._boundUpdatePreview;
 
     this._frame.removeEventListener("keydown", this._boundKeyDown, true);
     delete this._boundKeyDown;
 
-    this._inspector.off("select", this._boundSelect);
-    delete this._boundSelect;
+    this._inspector.selection.off("new-node", this._boundOnNewSelection);
+    delete this._boundOnNewSelection;
 
     delete this._elt;
 
     delete this._containers;
     this._observer.disconnect();
     delete this._observer;
   },
 
@@ -942,19 +945,19 @@ ElementEditor.prototype = {
       _editableField({
         element: inner,
         trigger: "dblclick",
         stopOnReturn: true,
         selectAll: false,
         start: function EE_editAttribute_start(aEditor, aEvent) {
           // If the editing was started inside the name or value areas,
           // select accordingly.
-          if (aEvent.target === name) {
+          if (aEvent && aEvent.target === name) {
             aEditor.input.setSelectionRange(0, name.textContent.length);
-          } else if (aEvent.target === val) {
+          } else if (aEvent && aEvent.target === val) {
             let length = val.textContent.length;
             let editorLength = aEditor.input.value.length;
             let start = editorLength - (length + 1);
             aEditor.input.setSelectionRange(start, start + length);
           } else {
             aEditor.input.select();
           }
         },
diff --git a/browser/devtools/markupview/test/browser_inspector_markup_edit.js b/browser/devtools/markupview/test/browser_inspector_markup_edit.js
--- a/browser/devtools/markupview/test/browser_inspector_markup_edit.js
+++ b/browser/devtools/markupview/test/browser_inspector_markup_edit.js
@@ -12,18 +12,20 @@ http://creativecommons.org/publicdomain/
  * - Redo the change, check that the node change was made again correctly.
  *
  * This test mostly tries to verify that the editor makes changes to the
  * underlying DOM, not that the UI updates - UI updates are based on
  * underlying DOM changes, and the mutation tests should cover those cases.
  */
 
 function test() {
+  let inspector;
   let tempScope = {}
   Cu.import("resource:///modules/devtools/CssRuleView.jsm", tempScope);
+
   let inplaceEditor = tempScope._getInplaceEditorForSpan;
 
   waitForExplicitFinish();
 
   // Will hold the doc we're viewing
   let doc;
 
   // Holds the MarkupTool object we're testing.
@@ -47,18 +49,18 @@ function test() {
     is(aElement.attributes.length, attrs.length, "Node has the correct number of attributes");
     for (let attr of attrs) {
       is(aElement.getAttribute(attr), aAttributes[attr], "Node has the correct " + attr + " attribute.");
     }
   }
 
   // All the mutation types we want to test.
   let edits = [
-    // Change an attribute
     {
+      desc: "Change an attribute",
       before: function() {
         assertAttributes(doc.querySelector("#node1"), {
           id: "node1",
           class: "node1"
         });
       },
       execute: function() {
         let editor = markup.getContainer(doc.querySelector("#node1")).editor;
@@ -68,18 +70,18 @@ function test() {
       after: function() {
         assertAttributes(doc.querySelector("#node1"), {
           id: "node1",
           class: "changednode1"
         });
       }
     },
 
-    // Try change an attribute to a badly formed string
     {
+      desc: "Try change an attribute to a badly formed string",
       before: function() {
         assertAttributes(doc.querySelector("#node22"), {
           id: "node22",
           class: "unchanged"
         });
       },
       execute: function() {
         let editor = markup.getContainer(doc.querySelector("#node22")).editor;
@@ -89,19 +91,18 @@ function test() {
       after: function() {
         assertAttributes(doc.querySelector("#node22"), {
           id: "node22",
           class: "unchanged"
         });
       }
     },
 
-
-    // Remove an attribute
     {
+      desc: "Remove an attribute",
       before: function() {
         assertAttributes(doc.querySelector("#node4"), {
           id: "node4",
           class: "node4"
         });
       },
       execute: function() {
         let editor = markup.getContainer(doc.querySelector("#node4")).editor;
@@ -110,18 +111,18 @@ function test() {
       },
       after: function() {
         assertAttributes(doc.querySelector("#node4"), {
           id: "node4",
         });
       }
     },
 
-    // Add an attribute by clicking the empty space after a node
     {
+      desc: "Add an attribute by clicking the empty space after a node",
       before: function() {
         assertAttributes(doc.querySelector("#node14"), {
           id: "node14",
         });
       },
       execute: function() {
         let editor = markup.getContainer(doc.querySelector("#node14")).editor;
         let attr = editor.newAttr;
@@ -131,18 +132,18 @@ function test() {
         assertAttributes(doc.querySelector("#node14"), {
           id: "node14",
           class: "newclass",
           style: "color:green"
         });
       }
     },
 
-    // Try add a badly formed attribute by clicking the empty space after a node
     {
+      desc: "Try add a badly formed attribute by clicking the empty space after a node",
       before: function() {
         assertAttributes(doc.querySelector("#node23"), {
           id: "node23",
         });
       },
       execute: function() {
         let editor = markup.getContainer(doc.querySelector("#node23")).editor;
         let attr = editor.newAttr;
@@ -150,44 +151,18 @@ function test() {
       },
       after: function() {
         assertAttributes(doc.querySelector("#node23"), {
           id: "node23",
         });
       }
     },
 
-    // Add attributes by adding to an existing attribute's entry
     {
-      setup: function() {
-        InspectorUI.select(doc.querySelector("#node18"), true, true, true);
-      },
-      before: function() {
-        assertAttributes(doc.querySelector("#node18"), {
-          id: "node18",
-        });
-        is(InspectorUI.highlighter.nodeInfo.classesBox.textContent, "", "No classes in the infobar before edit.");
-      },
-      execute: function() {
-        let editor = markup.getContainer(doc.querySelector("#node18")).editor;
-        let attr = editor.attrs["id"].querySelector(".editable");
-        editField(attr, attr.textContent + ' class="newclass" style="color:green"');
-      },
-      after: function() {
-        assertAttributes(doc.querySelector("#node18"), {
-          id: "node18",
-          class: "newclass",
-          style: "color:green"
-        });
-        is(InspectorUI.highlighter.nodeInfo.classesBox.textContent, ".newclass", "Correct classes in the infobar after edit.");
-      }
-    },
-
-    // Try add attributes by adding to an existing attribute's entry
-    {
+      desc: "Try add attributes by adding to an existing attribute's entry",
       before: function() {
         assertAttributes(doc.querySelector("#node24"), {
           id: "node24",
         });
       },
       execute: function() {
         let editor = markup.getContainer(doc.querySelector("#node24")).editor;
         let attr = editor.attrs["id"].querySelector(".editable");
@@ -195,128 +170,213 @@ function test() {
       },
       after: function() {
         assertAttributes(doc.querySelector("#node24"), {
           id: "node24",
         });
       }
     },
 
-    // Remove an element with the delete key
     {
-      before: function() {
-        ok(!!doc.querySelector("#node18"), "Node 18 should exist.");
-      },
-      execute: function() {
-        markup.selectNode(doc.querySelector("#node18"));
-        EventUtils.sendKey("delete");
-      },
-      after: function() {
-        ok(!doc.querySelector("#node18"), "Node 18 should not exist.")
-      }
-    },
-
-    // Edit text
-    {
+      desc: "Edit text",
       before: function() {
         let node = doc.querySelector('.node6').firstChild;
         is(node.nodeValue, "line6", "Text should be unchanged");
       },
       execute: function() {
         let node = doc.querySelector('.node6').firstChild;
         let editor = markup.getContainer(node).editor;
         let field = editor.elt.querySelector("pre");
         editField(field, "New text");
       },
       after: function() {
         let node = doc.querySelector('.node6').firstChild;
         is(node.nodeValue, "New text", "Text should be changed.");
       },
     },
+  ];
 
-    // Edit the tag name
-    {
+  // Create the helper tab for parsing...
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function onload() {
+    gBrowser.selectedBrowser.removeEventListener("load", onload, true);
+    doc = content.document;
+    waitForFocus(setupTest, content);
+  }, true);
+  content.location = "http://mochi.test:8888/browser/browser/devtools/markupview/test/browser_inspector_markup_edit.html";
+
+  function setupTest() {
+    var target = TargetFactory.forTab(gBrowser.selectedTab);
+    let toolbox = gDevTools.openToolboxForTab(target, "inspector");
+    toolbox.once("inspector-selected", function SE_selected(id, aInspector) {
+      inspector = aInspector;
+      runTests();
+    });
+  }
+
+  function runTests() {
+    inspector.selection.once("new-node", startTests);
+    executeSoon(function() {
+      inspector.selection.setNode(doc.body);
+    });
+  }
+
+  function startTests() {
+    let startNode = doc.documentElement.cloneNode();
+    markup = inspector.markup;
+    markup.expandAll();
+    for (let step of edits) {
+      info("START " + step.desc);
+      if (step.setup) {
+        step.setup();
+      }
+      step.before();
+      step.execute();
+      step.after();
+      ok(markup.undo.canUndo(), "Should be able to undo.");
+      markup.undo.undo();
+      step.before();
+      ok(markup.undo.canRedo(), "Should be able to redo.");
+      markup.undo.redo();
+      step.after();
+      info("END " + step.desc);
+    }
+    addAttributes();
+  }
+
+  function addAttributes() {
+    let test = {
+      desc: "Add attributes by adding to an existing attribute's entry",
       setup: function() {
-        markup.selectNode(doc.querySelector("#retag-me"));
+        inspector.selection.setNode(doc.querySelector("#node18"));
+      },
+      before: function() {
+        assertAttributes(doc.querySelector("#node18"), {
+          id: "node18",
+        });
+
+        is(inspector.highlighter.nodeInfo.classesBox.textContent, "",
+          "No classes in the infobar before edit.");
+      },
+      execute: function() {
+        let editor = markup.getContainer(doc.querySelector("#node18")).editor;
+        let attr = editor.attrs["id"].querySelector(".editable");
+        editField(attr, attr.textContent + ' class="newclass" style="color:green"');
+      },
+      after: function() {
+        assertAttributes(doc.querySelector("#node18"), {
+          id: "node18",
+          class: "newclass",
+          style: "color:green"
+        });
+        is(inspector.highlighter.nodeInfo.classesBox.textContent, ".newclass",
+          "Correct classes in the infobar after edit.");
+      }
+    };
+    testAsyncSetup(test, editTagName);
+  }
+
+  function editTagName() {
+    let test =  {
+      desc: "Edit the tag name",
+      setup: function() {
+        inspector.selection.setNode(doc.querySelector("#retag-me"));
       },
       before: function() {
         let node = doc.querySelector("#retag-me");
         let container = markup.getContainer(node);
+
         is(node.tagName, "DIV", "retag-me should be a div.");
         ok(container.selected, "retag-me should be selected.");
         ok(container.expanded, "retag-me should be expanded.");
-        is(doc.querySelector("#retag-me-2").parentNode, node, "retag-me-2 should be a child of the old element.");
+        is(doc.querySelector("#retag-me-2").parentNode, node,
+          "retag-me-2 should be a child of the old element.");
       },
       execute: function() {
         let node = doc.querySelector("#retag-me");
         let editor = markup.getContainer(node).editor;
         let field = editor.tag;
         editField(field, "p");
       },
       after: function() {
         let node = doc.querySelector("#retag-me");
         let container = markup.getContainer(node);
         is(node.tagName, "P", "retag-me should be a p.");
         ok(container.selected, "retag-me should be selected.");
         ok(container.expanded, "retag-me should be expanded.");
-        is(doc.querySelector("#retag-me-2").parentNode, node, "retag-me-2 should be a child of the new element.");
+        is(doc.querySelector("#retag-me-2").parentNode, node,
+          "retag-me-2 should be a child of the new element.");
       }
-    },
-  ];
-
-  // Create the helper tab for parsing...
-  gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function onload() {
-    gBrowser.selectedBrowser.removeEventListener("load", onload, true);
-    doc = content.document;
-    waitForFocus(setupTest, content);
-  }, true);
-  content.location = "http://mochi.test:8888/browser/browser/devtools/markupview/test/browser_inspector_markup_edit.html";
-
-  function setupTest() {
-    Services.obs.addObserver(runTests, InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-    InspectorUI.toggleInspectorUI();
+    };
+    testAsyncSetup(test, removeElementWithDelete);
   }
 
-  function runTests() {
-    Services.obs.removeObserver(runTests, InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
-    InspectorUI.currentInspector.once("markuploaded", startTests);
-    InspectorUI.select(doc.body, true, true, true);
-    InspectorUI.stopInspecting();
-    InspectorUI.toggleHTMLPanel();
+  function removeElementWithDelete() {
+    let test =  {
+      desc: "Remove an element with the delete key",
+      before: function() {
+        ok(!!doc.querySelector("#node18"), "Node 18 should exist.");
+      },
+      execute: function() {
+        inspector.selection.setNode(doc.querySelector("#node18"));
+      },
+      executeCont: function() {
+        EventUtils.sendKey("delete");
+      },
+      after: function() {
+        ok(!doc.querySelector("#node18"), "Node 18 should not exist.")
+      }
+    };
+    testAsyncExecute(test, finishUp);
   }
 
-  function startTests() {
-    let startNode = doc.documentElement.cloneNode();
-    markup = InspectorUI.currentInspector.markup;
-    markup.expandAll();
-    for (let step of edits) {
-      if (step.setup) {
-        step.setup();
-      }
-      step.before();
-      step.execute();
-      step.after();
-      ok(markup.undo.canUndo(), "Should be able to undo.");
-      markup.undo.undo();
-      step.before();
+  function testAsyncExecute(test, callback) {
+    info("START " + test.desc);
+
+    test.before();
+    inspector.selection.once("new-node", function BIMET_testAsyncExecNewNode() {
+      test.executeCont();
+      test.after();
+      undoRedo(test, callback);
+    });
+    executeSoon(function BIMET_setNode1() {
+      test.execute();
+    });
+  }
+
+  function testAsyncSetup(test, callback) {
+    info("START " + test.desc);
+
+    inspector.selection.once("new-node", function BIMET_testAsyncSetupNewNode() {
+      test.before();
+      test.execute();
+      test.after();
+      undoRedo(test, callback);
+    });
+    executeSoon(function BIMET_setNode2() {
+      test.setup();
+    });
+  }
+
+  function undoRedo(test, callback) {
+    ok(markup.undo.canUndo(), "Should be able to undo.");
+    markup.undo.undo();
+    executeSoon(function() {
+      test.before();
       ok(markup.undo.canRedo(), "Should be able to redo.");
       markup.undo.redo();
-      step.after();
-    }
+      executeSoon(function() {
+        test.after();
+        info("END " + test.desc);
+        callback();
+      });
+    });
+  }
 
+  function finishUp() {
     while (markup.undo.canUndo()) {
       markup.undo.undo();
     }
-    // By now we should have a healthy undo stack, clear it out and we should be back where
-    // we started.
-    ok(doc.documentElement.isEqualNode(startNode), "Clearing the undo stack should leave us where we started.");
-    Services.obs.addObserver(finishUp, InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED, false);
-    InspectorUI.closeInspectorUI();
-  }
-
-  function finishUp() {
-    Services.obs.removeObserver(finishUp, InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED);
-    doc = null;
+    doc = inspector = null;
     gBrowser.removeCurrentTab();
     finish();
   }
 }
diff --git a/browser/devtools/markupview/test/browser_inspector_markup_mutation.js b/browser/devtools/markupview/test/browser_inspector_markup_mutation.js
--- a/browser/devtools/markupview/test/browser_inspector_markup_mutation.js
+++ b/browser/devtools/markupview/test/browser_inspector_markup_mutation.js
@@ -19,16 +19,18 @@ function test() {
 
   // Holds the MarkupTool object we're testing.
   let markup;
 
   // Holds the document we use to help re-parse the markup tool's output.
   let parseTab;
   let parseDoc;
 
+  let inspector;
+
   // Strip whitespace from a node and its children.
   function stripWhitespace(node)
   {
     node.normalize();
     let iter = node.ownerDocument.createNodeIterator(node, NodeFilter.SHOW_TEXT + NodeFilter.SHOW_COMMENT,
       null, false);
 
     while ((node = iter.nextNode())) {
@@ -138,49 +140,43 @@ function test() {
       waitForFocus(setupTest, content);
     }, true);
     content.location = "http://mochi.test:8888/browser/browser/devtools/markupview/test/browser_inspector_markup_mutation.html";
   }, true);
 
   content.location = "data:text/html,<html></html>";
 
   function setupTest() {
-    Services.obs.addObserver(runTests, InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-    InspectorUI.toggleInspectorUI();
-  }
-
-  function runTests() {
-    Services.obs.removeObserver(runTests, InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
-    InspectorUI.currentInspector.once("markuploaded", startTests);
-    InspectorUI.select(doc.body, true, true, true);
-    InspectorUI.stopInspecting();
-    InspectorUI.toggleHTMLPanel();
+    var target = TargetFactory.forTab(gBrowser.selectedTab);
+    let toolbox = gDevTools.openToolboxForTab(target, "inspector");
+    toolbox.once("inspector-selected", function BIMMT_selected(id, aInspector) {
+      inspector = aInspector;
+      startTests();
+    });
   }
 
   function startTests() {
-    markup = InspectorUI.currentInspector.markup;
+    markup = inspector.markup;
     checkMarkup();
     nextStep(0);
   }
 
   function nextStep(cursor) {
     if (cursor >= mutations.length) {
-      Services.obs.addObserver(finishUp, InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED, false);
-      InspectorUI.closeInspectorUI();
+      finishUp();
       return;
     }
     mutations[cursor]();
-    InspectorUI.currentInspector.once("markupmutation", function() {
+    inspector.once("markupmutation", function() {
       executeSoon(function() {
         checkMarkup();
         nextStep(cursor + 1);
       });
     });
   }
 
   function finishUp() {
-    Services.obs.removeObserver(finishUp, InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED);
-    doc = null;
+    doc = inspector = null;
     gBrowser.removeTab(contentTab);
     gBrowser.removeTab(parseTab);
     finish();
   }
 }
diff --git a/browser/devtools/markupview/test/browser_inspector_markup_navigation.html b/browser/devtools/markupview/test/browser_inspector_markup_navigation.html
--- a/browser/devtools/markupview/test/browser_inspector_markup_navigation.html
+++ b/browser/devtools/markupview/test/browser_inspector_markup_navigation.html
@@ -1,12 +1,14 @@
 <!DOCTYPE html>
 
 <html class="html">
-  <meta charset=utf-8 />
+  <head class="head">
+    <meta charset=utf-8 />
+  </head>
 
   <body class="body">
     <div class="node0">
       <p class="node1">line1</p>
       <p class="node2">line2</p>
       <p class="node3">line3</p>
       <!-- A comment -->
       <p class="node4">line4
diff --git a/browser/devtools/markupview/test/browser_inspector_markup_navigation.js b/browser/devtools/markupview/test/browser_inspector_markup_navigation.js
--- a/browser/devtools/markupview/test/browser_inspector_markup_navigation.js
+++ b/browser/devtools/markupview/test/browser_inspector_markup_navigation.js
@@ -1,19 +1,23 @@
 /* Any copyright", " is dedicated to the Public Domain.
 http://creativecommons.org/publicdomain/zero/1.0/ */
 
 
 function test() {
+  let inspector;
 
   waitForExplicitFinish();
 
   let doc;
 
   let keySequences = [
+    ["right", "html"],
+    ["down", "head"],
+    ["down", "body"],
     ["right", "body"],
     ["down", "node0"],
     ["right", "node0"],
     ["down", "node1"],
     ["down", "node2"],
     ["down", "node3"],
     ["down", "*comment*"],
     ["down", "node4"],
@@ -63,44 +67,38 @@ function test() {
   gBrowser.selectedBrowser.addEventListener("load", function onload() {
     gBrowser.selectedBrowser.removeEventListener("load", onload, true);
     doc = content.document;
     waitForFocus(setupTest, content);
   }, true);
 
   content.location = "http://mochi.test:8888/browser/browser/devtools/markupview/test/browser_inspector_markup_navigation.html";
 
-  let markup = null;
-
   function setupTest() {
-    Services.obs.addObserver(runTests, InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-    InspectorUI.toggleInspectorUI();
-  }
-
-  function runTests() {
-    Services.obs.removeObserver(runTests, InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
-    InspectorUI.currentInspector.once("markuploaded", startNavigation);
-    InspectorUI.select(doc.body, true, true, true);
-    InspectorUI.toggleHTMLPanel();
+    var target = TargetFactory.forTab(gBrowser.selectedTab);
+    let toolbox = gDevTools.openToolboxForTab(target, "inspector");
+    toolbox.once("inspector-selected", function BIMNT_selected(id, aInspector) {
+      inspector = aInspector;
+      startNavigation();
+    });
   }
 
   function startNavigation() {
-    markup = InspectorUI.currentInspector.markup;
     nextStep(0);
   }
 
   function nextStep(cursor) {
     if (cursor >= keySequences.length) {
-      Services.obs.addObserver(finishUp, InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED, false);
-      InspectorUI.closeInspectorUI();
+      finishUp();
       return;
     }
 
     let key = keySequences[cursor][0];
     let className = keySequences[cursor][1];
+    inspector.markup._frame.focus();
 
     switch(key) {
       case "right":
         EventUtils.synthesizeKey("VK_RIGHT", {});
         break;
       case "down":
         EventUtils.synthesizeKey("VK_DOWN", {});
         break;
@@ -116,30 +114,31 @@ function test() {
       case "pagedown":
         EventUtils.synthesizeKey("VK_PAGE_DOWN", {});
         break;
       case "home":
         EventUtils.synthesizeKey("VK_HOME", {});
         break;
     }
 
-    executeSoon(function() {
-      let node = markup.selected;
+    executeSoon(function BIMNT_newNode() {
+      let node = inspector.selection.node;
+
       if (className == "*comment*") {
         is(node.nodeType, Node.COMMENT_NODE, "[" + cursor + "] should be a comment after moving " + key);
       } else if (className == "*text*") {
         is(node.nodeType, Node.TEXT_NODE, "[" + cursor + "] should be text after moving " + key);
       } else if (className == "*doctype*") {
         is(node.nodeType, Node.DOCUMENT_TYPE_NODE, "[" + cursor + "] should be doctype after moving " + key);
       } else {
         is(node.className, className, "[" + cursor + "] right node selected: " + className + " after moving " + key);
       }
+
       nextStep(cursor + 1);
     });
   }
 
   function finishUp() {
-    Services.obs.removeObserver(finishUp, InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED);
-    doc = null;
+    doc = inspector = null;
     gBrowser.removeCurrentTab();
     finish();
   }
 }
diff --git a/browser/devtools/markupview/test/head.js b/browser/devtools/markupview/test/head.js
--- a/browser/devtools/markupview/test/head.js
+++ b/browser/devtools/markupview/test/head.js
@@ -1,14 +1,20 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 const Cu = Components.utils;
 
+let TargetFactory = (function() {
+  let tempScope = {};
+  Components.utils.import("resource:///modules/devtools/Target.jsm", tempScope);
+  return tempScope.TargetFactory;
+})();
+
 // Clear preferences that may be set during the course of tests.
 function clearUserPrefs()
 {
   Services.prefs.clearUserPref("devtools.inspector.htmlPanelOpen");
   Services.prefs.clearUserPref("devtools.inspector.sidebarOpen");
   Services.prefs.clearUserPref("devtools.inspector.activeSidebar");
 }
 
diff --git a/browser/devtools/responsivedesign/CmdResize.jsm b/browser/devtools/responsivedesign/CmdResize.jsm
--- a/browser/devtools/responsivedesign/CmdResize.jsm
+++ b/browser/devtools/responsivedesign/CmdResize.jsm
@@ -25,16 +25,18 @@ gcli.addCommand({
   name: 'resize off',
   description: gcli.lookup('resizeModeOffDesc'),
   manual: gcli.lookup('resizeModeManual'),
   exec: gcli_cmd_resize
 });
 
 gcli.addCommand({
   name: 'resize toggle',
+  buttonId: "command-button-responsive",
+  buttonClass: "command-button",
   description: gcli.lookup('resizeModeToggleDesc'),
   manual: gcli.lookup('resizeModeManual'),
   exec: gcli_cmd_resize
 });
 
 gcli.addCommand({
   name: 'resize to',
   description: gcli.lookup('resizeModeToDesc'),
diff --git a/browser/devtools/responsivedesign/responsivedesign.jsm b/browser/devtools/responsivedesign/responsivedesign.jsm
--- a/browser/devtools/responsivedesign/responsivedesign.jsm
+++ b/browser/devtools/responsivedesign/responsivedesign.jsm
@@ -4,18 +4,20 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 const Ci = Components.interfaces;
 const Cu = Components.utils;
 
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+Cu.import("resource:///modules/devtools/gDevTools.jsm");
 Cu.import("resource:///modules/devtools/FloatingScrollbars.jsm");
 Cu.import("resource:///modules/devtools/EventEmitter.jsm");
+Cu.import("resource:///modules/devtools/Target.jsm");
 
 this.EXPORTED_SYMBOLS = ["ResponsiveUIManager"];
 
 const MIN_WIDTH = 50;
 const MIN_HEIGHT = 50;
 
 const MAX_WIDTH = 10000;
 const MAX_HEIGHT = 10000;
@@ -156,17 +158,18 @@ function ResponsiveUI(aWindow, aTab)
   // Events
   this.tab.addEventListener("TabClose", this);
   this.tabContainer.addEventListener("TabSelect", this);
   this.mainWindow.document.addEventListener("keypress", this.bound_onKeypress, false);
 
   this.buildUI();
   this.checkMenus();
 
-  this.inspectorWasOpen = this.mainWindow.InspectorUI.isInspectorOpen;
+  let target = TargetFactory.forTab(this.tab);
+  this.toolboxWasOpen = !!gDevTools.getToolboxForTarget(target);
 
   try {
     if (Services.prefs.getBoolPref("devtools.responsiveUI.rotate")) {
       this.rotate();
     }
   } catch(e) {}
 
   if (this._floatingScrollbars)
@@ -236,22 +239,23 @@ ResponsiveUI.prototype = {
    * Handle keypressed.
    *
    * @param aEvent
    */
   onKeypress: function RUI_onKeypress(aEvent) {
     if (aEvent.keyCode == this.mainWindow.KeyEvent.DOM_VK_ESCAPE &&
         this.mainWindow.gBrowser.selectedBrowser == this.browser) {
 
-      // If the inspector wasn't open at first but is open now,
+      // If the toolbox wasn't open at first but is open now,
       // we don't want to close the Responsive Mode on Escape.
-      // We let the inspector close first.
+      // We let the toolbox close first.
 
-      let isInspectorOpen = this.mainWindow.InspectorUI.isInspectorOpen;
-      if (this.inspectorWasOpen || !isInspectorOpen) {
+      let target = TargetFactory.forTab(this.tab);
+      let isToolboxOpen =  !!gDevTools.getToolboxForTarget(target);
+      if (this.toolboxWasOpen || !isToolboxOpen) {
         aEvent.preventDefault();
         aEvent.stopPropagation();
         this.close();
       }
     }
   },
 
   /**
diff --git a/browser/devtools/responsivedesign/test/browser_responsivecomputedview.js b/browser/devtools/responsivedesign/test/browser_responsivecomputedview.js
--- a/browser/devtools/responsivedesign/test/browser_responsivecomputedview.js
+++ b/browser/devtools/responsivedesign/test/browser_responsivecomputedview.js
@@ -1,15 +1,16 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 function test() {
   let instance;
 
   let computedView;
+  let inspector;
 
   waitForExplicitFinish();
 
   gBrowser.selectedTab = gBrowser.addTab();
   gBrowser.selectedBrowser.addEventListener("load", function onload() {
     gBrowser.selectedBrowser.removeEventListener("load", onload, true);
     waitForFocus(startTest, content);
   }, true);
@@ -47,39 +48,37 @@ function test() {
 
     instance.stack.setAttribute("notransition", "true");
     registerCleanupFunction(function() {
       instance.stack.removeAttribute("notransition");
     });
 
     instance.setSize(500, 500);
 
-    Services.obs.addObserver(onInspectorUIOpen,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-    InspectorUI.openInspectorUI();
+    openInspector(onInspectorUIOpen);
   }
 
-  function onInspectorUIOpen() {
-    Services.obs.removeObserver(onInspectorUIOpen,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
+  function onInspectorUIOpen(aInspector) {
+    inspector = aInspector;
+    ok(inspector, "Got inspector instance");
+    inspector.sidebar.select("computedview");
 
     let div = content.document.getElementsByTagName("div")[0];
-    InspectorUI.inspectNode(div);
-    InspectorUI.stopInspecting();
 
-    Services.obs.addObserver(testShrink, "StyleInspector-populated", false);
-
-    InspectorUI.sidebar.show();
-    InspectorUI.sidebar.activatePanel("computedview");
+    inspector.sidebar.once("computedview-ready", function() {
+      Services.obs.addObserver(testShrink, "StyleInspector-populated", false);
+      inspector.selection.setNode(div);
+    });
   }
 
   function testShrink() {
     Services.obs.removeObserver(testShrink, "StyleInspector-populated", false);
 
-    computedView = InspectorUI.sidebar._toolContext("computedview").view;
+    computedView = inspector.sidebar.getWindowForTab("computedview").computedview.view;
+    ok(computedView, "We have access to the Computed View object");
 
     is(computedWidth(), "500px", "Should show 500px initially.");
 
     Services.obs.addObserver(function onShrink() {
       Services.obs.removeObserver(onShrink, "StyleInspector-populated");
       is(computedWidth(), "100px", "div should be 100px after shrinking.");
       testGrow();
     }, "StyleInspector-populated", false);
@@ -98,14 +97,12 @@ function test() {
   }
 
   function finishUp() {
     document.getElementById("Tools:ResponsiveUI").doCommand();
 
     // Menus are correctly updated?
     is(document.getElementById("Tools:ResponsiveUI").getAttribute("checked"), "false", "menu unchecked");
 
-    InspectorUI.closeInspectorUI();
-
     gBrowser.removeCurrentTab();
     finish();
   }
 }
diff --git a/browser/devtools/responsivedesign/test/browser_responsiveruleview.js b/browser/devtools/responsivedesign/test/browser_responsiveruleview.js
--- a/browser/devtools/responsivedesign/test/browser_responsiveruleview.js
+++ b/browser/devtools/responsivedesign/test/browser_responsiveruleview.js
@@ -1,15 +1,16 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 function test() {
   let instance;
 
   let ruleView;
+  let inspector;
 
   waitForExplicitFinish();
 
   gBrowser.selectedTab = gBrowser.addTab();
   gBrowser.selectedBrowser.addEventListener("load", function onload() {
     gBrowser.selectedBrowser.removeEventListener("load", onload, true);
     waitForFocus(startTest, content);
   }, true);
@@ -42,37 +43,36 @@ function test() {
 
     instance.stack.setAttribute("notransition", "true");
     registerCleanupFunction(function() {
       instance.stack.removeAttribute("notransition");
     });
 
     instance.setSize(500, 500);
 
-    Services.obs.addObserver(onInspectorUIOpen,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-    InspectorUI.openInspectorUI();
+    openInspector(onInspectorUIOpen);
   }
 
-  function onInspectorUIOpen() {
-    Services.obs.removeObserver(onInspectorUIOpen,
-      InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED);
+  function onInspectorUIOpen(aInspector) {
+    inspector = aInspector;
+    ok(inspector, "Got inspector instance");
+    inspector.sidebar.select("ruleview");
 
     let div = content.document.getElementsByTagName("div")[0];
-    InspectorUI.inspectNode(div);
-    InspectorUI.stopInspecting();
 
-    InspectorUI.currentInspector.once("sidebaractivated-ruleview", testShrink);
-
-    InspectorUI.sidebar.show();
-    InspectorUI.sidebar.activatePanel("ruleview");
+    inspector.sidebar.once("ruleview-ready", function() {
+      Services.obs.addObserver(testShrink, "StyleInspector-populated", false);
+      inspector.selection.setNode(div);
+    });
   }
 
   function testShrink() {
-    ruleView = InspectorUI.sidebar._toolContext("ruleview").view;
+    Services.obs.removeObserver(testShrink, "StyleInspector-populated");
+
+    ruleView = inspector.sidebar.getWindowForTab("ruleview").ruleview.view;
 
     is(numberOfRules(), 2, "Should have two rules initially.");
 
     ruleView.element.addEventListener("CssRuleViewRefreshed", function refresh() {
       ruleView.element.removeEventListener("CssRuleViewRefreshed", refresh, false);
       is(numberOfRules(), 3, "Should have three rules after shrinking.");
       testGrow();
     }, false);
@@ -91,13 +91,12 @@ function test() {
   }
 
   function finishUp() {
     document.getElementById("Tools:ResponsiveUI").doCommand();
 
     // Menus are correctly updated?
     is(document.getElementById("Tools:ResponsiveUI").getAttribute("checked"), "false", "menu unchecked");
 
-    InspectorUI.closeInspectorUI();
     gBrowser.removeCurrentTab();
     finish();
   }
 }
diff --git a/browser/devtools/responsivedesign/test/head.js b/browser/devtools/responsivedesign/test/head.js
--- a/browser/devtools/responsivedesign/test/head.js
+++ b/browser/devtools/responsivedesign/test/head.js
@@ -1,8 +1,29 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 "use strict";
 
+let tempScope = {};
+Cu.import("resource:///modules/devtools/Target.jsm", tempScope);
+let TargetFactory = tempScope.TargetFactory;
+
 // Import the GCLI test helper
 let testDir = gTestPath.substr(0, gTestPath.lastIndexOf("/"));
 Services.scriptloader.loadSubScript(testDir + "/helpers.js", this);
+
+function openInspector(callback)
+{
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+
+  let inspector = gDevTools.getPanelForTarget("inspector", target);
+  if (inspector && inspector.isReady) {
+    callback(inspector);
+  } else {
+    let toolbox = gDevTools.openToolboxForTab(target, "inspector");
+    toolbox.once("inspector-ready", function(event, panel) {
+      let inspector = gDevTools.getPanelForTarget("inspector", target);
+      callback(inspector);
+    });
+  }
+}
+
diff --git a/browser/devtools/scratchpad/CmdScratchpad.jsm b/browser/devtools/scratchpad/CmdScratchpad.jsm
new file mode 100644
--- /dev/null
+++ b/browser/devtools/scratchpad/CmdScratchpad.jsm
@@ -0,0 +1,21 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+this.EXPORTED_SYMBOLS = [ ];
+
+Components.utils.import("resource:///modules/devtools/gcli.jsm");
+
+/**
+ * 'scratchpad' command
+ */
+gcli.addCommand({
+  name: "scratchpad",
+  buttonId: "command-button-scratchpad",
+  buttonClass: "command-button",
+  hidden: true,
+  exec: function(args, context) {
+    let chromeWindow = context.environment.chromeDocument.defaultView;
+    chromeWindow.Scratchpad.ScratchpadManager.openScratchpad();
+  }
+});
diff --git a/browser/devtools/scratchpad/scratchpad.js b/browser/devtools/scratchpad/scratchpad.js
--- a/browser/devtools/scratchpad/scratchpad.js
+++ b/browser/devtools/scratchpad/scratchpad.js
@@ -21,16 +21,18 @@ const Cu = Components.utils;
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/NetUtil.jsm");
 Cu.import("resource:///modules/PropertyPanel.jsm");
 Cu.import("resource:///modules/source-editor.jsm");
 Cu.import("resource:///modules/devtools/LayoutHelpers.jsm");
 Cu.import("resource:///modules/devtools/scratchpad-manager.jsm");
 Cu.import("resource://gre/modules/jsdebugger.jsm");
+Cu.import("resource:///modules/devtools/gDevTools.jsm");
+Cu.import("resource:///modules/devtools/Target.jsm");
 
 const SCRATCHPAD_CONTEXT_CONTENT = 1;
 const SCRATCHPAD_CONTEXT_BROWSER = 2;
 const SCRATCHPAD_L10N = "chrome://browser/locale/devtools/scratchpad.properties";
 const DEVTOOLS_CHROME_ENABLED = "devtools.chrome.enabled";
 const PREF_RECENT_FILES_MAX = "devtools.scratchpad.recentFilesMax";
 const BUTTON_POSITION_SAVE = 0;
 const BUTTON_POSITION_CANCEL = 1;
@@ -1048,19 +1050,18 @@ var Scratchpad = {
     this.browserWindow.toJavaScriptConsole();
   },
 
   /**
    * Open the Web Console.
    */
   openWebConsole: function SP_openWebConsole()
   {
-    if (!this.browserWindow.HUDConsoleUI.getOpenHUD()) {
-      this.browserWindow.HUDConsoleUI.toggleHUD();
-    }
+    let target = TargetFactory.forTab(this.gBrowser.selectedTab);
+    gDevTools.openToolboxForTab(target, "webconsole");
     this.browserWindow.focus();
   },
 
   /**
    * Set the current execution context to be the active tab content window.
    */
   setContentContext: function SP_setContentContext()
   {
diff --git a/browser/devtools/scratchpad/scratchpad.xul b/browser/devtools/scratchpad/scratchpad.xul
--- a/browser/devtools/scratchpad/scratchpad.xul
+++ b/browser/devtools/scratchpad/scratchpad.xul
@@ -95,20 +95,16 @@
   <key id="sp-key-reloadAndRun"
        key="&reloadAndRun.key;"
        command="sp-cmd-reloadAndRun"
        modifiers="accel,shift"/>
   <key id="sp-key-errorConsole"
        key="&errorConsoleCmd.commandkey;"
        command="sp-cmd-errorConsole"
        modifiers="accel,shift"/>
-  <key id="sp-key-webConsole"
-       key="&webConsoleCmd.commandkey;"
-       command="sp-cmd-webConsole"
-       modifiers="accel,shift"/>
   <key id="key_openHelp"
        keycode="VK_F1"
        command="sp-cmd-documentationLink"/>
 </keyset>
 
 
 <menubar id="sp-menubar">
   <menu id="sp-file-menu" label="&fileMenu.label;"
diff --git a/browser/devtools/shared/DeveloperToolbar.jsm b/browser/devtools/shared/DeveloperToolbar.jsm
--- a/browser/devtools/shared/DeveloperToolbar.jsm
+++ b/browser/devtools/shared/DeveloperToolbar.jsm
@@ -1,15 +1,15 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
-this.EXPORTED_SYMBOLS = [ "DeveloperToolbar" ];
+this.EXPORTED_SYMBOLS = [ "DeveloperToolbar", "CommandUtils" ];
 
 const NS_XHTML = "http://www.w3.org/1999/xhtml";
 const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
 
 Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");
 Components.utils.import("resource://gre/modules/Services.jsm");
 Components.utils.import("resource:///modules/devtools/Commands.jsm");
 
@@ -22,16 +22,102 @@ XPCOMUtils.defineLazyModuleGetter(this, 
                                   "resource:///modules/devtools/gcli.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "CmdCommands",
                                   "resource:///modules/devtools/CmdCmd.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "PageErrorListener",
                                   "resource://gre/modules/devtools/WebConsoleUtils.jsm");
 
+XPCOMUtils.defineLazyGetter(this, "prefBranch", function() {
+  var prefService = Components.classes["@mozilla.org/preferences-service;1"]
+          .getService(Components.interfaces.nsIPrefService);
+  return prefService.getBranch(null)
+          .QueryInterface(Components.interfaces.nsIPrefBranch2);
+});
+
+/**
+ * A collection of utilities to help working with commands
+ */
+this.CommandUtils = {
+  /**
+   * Read a toolbarSpec from preferences
+   * @param aPref The name of the preference to read
+   */
+  getCommandbarSpec: function CU_getCommandbarSpec(aPref) {
+    let value = prefBranch.getComplexValue(aPref,
+                               Components.interfaces.nsISupportsString).data;
+    return JSON.parse(value);
+  },
+
+  /**
+   * A toolbarSpec is an array of buttonSpecs. A buttonSpec is an array of
+   * strings each of which is a GCLI command (including args if needed).
+   */
+  createButtons: function CU_createButtons(toolbarSpec, document, requisition) {
+    var reply = [];
+
+    toolbarSpec.forEach(function(buttonSpec) {
+      var button = document.createElement("toolbarbutton");
+      reply.push(button);
+
+      if (typeof buttonSpec == "string") {
+        buttonSpec = { typed: buttonSpec };
+      }
+      // Ask GCLI to parse the typed string (doesn't execute it)
+      requisition.update(buttonSpec.typed);
+
+      // Ignore invalid commands
+      var command = requisition.commandAssignment.value;
+      if (command == null) {
+        // TODO: Have a broken icon
+        // button.icon = 'Broken';
+        button.setAttribute("label", "X");
+        button.setAttribute("tooltip", "Unknown command: " + buttonSpec.typed);
+        button.setAttribute("disabled", "true");
+      }
+      else {
+        if (command.buttonId != null) {
+          button.id = command.buttonId;
+        }
+        if (command.buttonClass != null) {
+          button.className = command.buttonClass;
+        }
+
+        button.addEventListener("click", function() {
+          requisition.update(buttonSpec.typed);
+          //if (requisition.getStatus() == Status.VALID) {
+            requisition.exec();
+          /*
+          }
+          else {
+            console.error('incomplete commands not yet supported');
+          }
+          */
+        }, false);
+
+        // Allow the command button to be toggleable
+        /*
+        if (command.checkedState) {
+          button.setAttribute("type", "checkbox");
+          button.setAttribute("checked", command.checkedState.get() ? "true" : "false");
+          command.checkedState.on("change", function() {
+            button.checked = command.checkedState.get();
+          });
+        }
+        */
+      }
+    });
+
+    requisition.update('');
+
+    return reply;
+  }
+};
+
 /**
  * Due to a number of panel bugs we need a way to check if we are running on
  * Linux. See the comments for TooltipPanel and OutputPanel for further details.
  *
  * When bug 780102 is fixed all isLinux checks can be removed and we can revert
  * to using panels.
  */
 XPCOMUtils.defineLazyGetter(this, "isLinux", function () {
@@ -52,20 +138,20 @@ this.DeveloperToolbar = function Develop
 
   this._element = aToolbarElement;
   this._element.hidden = true;
   this._doc = this._element.ownerDocument;
 
   this._lastState = NOTIFICATIONS.HIDE;
   this._pendingShowCallback = undefined;
   this._pendingHide = false;
-  this._errorsCount = Object.create(null);
-  this._errorListeners = Object.create(null);
-  this._webConsoleButton = this._doc
-                           .getElementById("developer-toolbar-webconsole");
+  this._errorsCount = {};
+  this._errorListeners = {};
+  this._errorCounterButton = this._doc
+                             .getElementById("developer-toolbar-toolbox-button");
 
   try {
     CmdCommands.refreshAutoCommands(aChromeWindow);
   }
   catch (ex) {
     console.error(ex);
   }
 }
@@ -492,19 +578,19 @@ function DT__updateErrorsCount(aChangedT
   let tabId = this._chromeWindow.getBrowser().selectedTab.linkedPanel;
   if (aChangedTabId && tabId != aChangedTabId) {
     return;
   }
 
   let errors = this._errorsCount[tabId];
 
   if (errors) {
-    this._webConsoleButton.setAttribute("error-count", errors);
+    this._errorCounterButton.setAttribute("error-count", errors);
   } else {
-    this._webConsoleButton.removeAttribute("error-count");
+    this._errorCounterButton.removeAttribute("error-count");
   }
 };
 
 /**
  * Reset the errors counter for the given tab.
  *
  * @param nsIDOMElement aTab The xul:tab for which you want to reset the page
  * errors counters.
diff --git a/browser/devtools/shared/EventEmitter.jsm b/browser/devtools/shared/EventEmitter.jsm
--- a/browser/devtools/shared/EventEmitter.jsm
+++ b/browser/devtools/shared/EventEmitter.jsm
@@ -1,13 +1,28 @@
-// XXXkhuey this should have a license header.
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 this.EXPORTED_SYMBOLS = ["EventEmitter"];
 
-this.EventEmitter = function EventEmitter() {
+/**
+ * EventEmitter.
+ *
+ * @param Object aObjectToExtend
+ *        If aObjectToExtend is not null, the public methods of EventEmitter
+ *        are bound to the object.
+ */
+this.EventEmitter = function EventEmitter(aObjectToExtend) {
+  if (aObjectToExtend) {
+    aObjectToExtend.on = this.on.bind(this);
+    aObjectToExtend.off = this.off.bind(this);
+    aObjectToExtend.once = this.once.bind(this);
+    aObjectToExtend.emit = this.emit.bind(this);
+  }
 }
 
 EventEmitter.prototype = {
   /**
    * Connect a listener.
    *
    * @param string aEvent
    *        The event name to which we're connecting.
@@ -29,17 +44,17 @@ EventEmitter.prototype = {
    * @param string aEvent
    *        The event name to which we're connecting.
    * @param function aListener
    *        Called when the event is fired.  Will be called at most one time.
    */
   once: function EventEmitter_once(aEvent, aListener) {
     let handler = function() {
       this.off(aEvent, handler);
-      aListener();
+      aListener.apply(null, arguments);
     }.bind(this);
     this.on(aEvent, handler);
   },
 
   /**
    * Remove a previously-registered event listener.  Works for events
    * registered with either on or once.
    *
@@ -47,17 +62,19 @@ EventEmitter.prototype = {
    *        The event name whose listener we're disconnecting.
    * @param function aListener
    *        The listener to remove.
    */
   off: function EventEmitter_off(aEvent, aListener) {
     if (!this._eventEmitterListeners)
       return;
     let listeners = this._eventEmitterListeners.get(aEvent);
-    this._eventEmitterListeners.set(aEvent, listeners.filter(function(l) aListener != l));
+    if (listeners) {
+      this._eventEmitterListeners.set(aEvent, listeners.filter(function(l) aListener != l));
+    }
   },
 
   /**
    * Emit an event.  All arguments to this method will
    * be sent to listner functions.
    */
   emit: function EventEmitter_emit(aEvent) {
     if (!this._eventEmitterListeners || !this._eventEmitterListeners.has(aEvent))
diff --git a/browser/devtools/shared/test/browser_eventemitter_basic.js b/browser/devtools/shared/test/browser_eventemitter_basic.js
--- a/browser/devtools/shared/test/browser_eventemitter_basic.js
+++ b/browser/devtools/shared/test/browser_eventemitter_basic.js
@@ -1,15 +1,29 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
+function test() {
+  testEmitter();
+  testEmitter({});
+}
 
-function test() {
+
+function testEmitter(aObject) {
   Cu.import("resource:///modules/devtools/EventEmitter.jsm", this);
-  let emitter = new EventEmitter();
+
+  let emitter;
+
+  if (aObject) {
+    emitter = aObject;
+    new EventEmitter(emitter);
+  } else {
+    emitter = new EventEmitter();
+  }
+
   ok(emitter, "We have an event emitter");
 
   emitter.on("next", next);
   emitter.emit("next", "abc", "def");
 
   let beenHere1 = false;
   function next(eventName, str1, str2) {
     is(eventName, "next", "Got event");
diff --git a/browser/devtools/shared/test/browser_toolbar_basic.js b/browser/devtools/shared/test/browser_toolbar_basic.js
--- a/browser/devtools/shared/test/browser_toolbar_basic.js
+++ b/browser/devtools/shared/test/browser_toolbar_basic.js
@@ -26,131 +26,54 @@ function runTest() {
 }
 
 function isChecked(b) {
   return b.getAttribute("checked") == "true";
 }
 
 function checkOpen() {
   ok(DeveloperToolbar.visible, "DeveloperToolbar is visible in checkOpen");
-
   let close = document.getElementById("developer-toolbar-closebutton");
-  let webconsole = document.getElementById("developer-toolbar-webconsole");
-  let inspector = document.getElementById("developer-toolbar-inspector");
-  let styleeditor = document.getElementById("developer-toolbar-styleeditor");
-  let debuggr = document.getElementById("developer-toolbar-debugger");
-
   ok(close, "Close button exists");
 
-  ok(!isChecked(webconsole), "web console button state 1");
-  ok(!isChecked(inspector), "inspector button state 1");
-  ok(!isChecked(debuggr), "debugger button state 1");
-  ok(!isChecked(styleeditor), "styleeditor button state 1");
+  let toggleToolbox =
+    document.getElementById("devtoolsMenuBroadcaster_DevToolbox");
+  ok(!isChecked(toggleToolbox), "toggle toolbox button is not checked");
 
-  document.getElementById("Tools:WebConsole").doCommand();
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+  let toolbox = gDevTools.openToolboxForTab(target, "webconsole");
+  toolbox.once("webconsole-selected", function BTBT_selected(id, aInspector) {
+    ok(isChecked(toggleToolbox), "toggle toolbox button is checked");
 
-  ok(isChecked(webconsole), "web console button state 2");
-  ok(!isChecked(inspector), "inspector button state 2");
-  ok(!isChecked(debuggr), "debugger button state 2");
-  ok(!isChecked(styleeditor), "styleeditor button state 2");
+    addTab("about:blank", function(browser, tab) {
+      info("Opened a new tab");
 
-  document.getElementById("Tools:Inspect").doCommand();
+      ok(!isChecked(toggleToolbox), "toggle toolbox button is not checked");
 
-  ok(isChecked(webconsole), "web console button state 3");
-  ok(isChecked(inspector), "inspector button state 3");
-  ok(!isChecked(debuggr), "debugger button state 3");
-  ok(!isChecked(styleeditor), "styleeditor button state 3");
+      gBrowser.removeCurrentTab();
 
-  // Christmas tree!
-
-  // The web console opens synchronously, but closes asynchronously.
-  let hud = imported.HUDService.getHudByWindow(content);
-  imported.HUDService.disableAnimation(hud.hudId);
-
-  document.getElementById("Tools:WebConsole").doCommand();
-
-  ok(!isChecked(webconsole), "web console button state 6");
-  ok(isChecked(inspector), "inspector button state 6");
-  ok(!isChecked(debuggr), "debugger button state 6");
-  ok(!isChecked(styleeditor), "styleeditor button state 6");
-
-  document.getElementById("Tools:Inspect").doCommand();
-
-  ok(!isChecked(webconsole), "web console button state 7");
-  ok(!isChecked(inspector), "inspector button state 7");
-  ok(!isChecked(debuggr), "debugger button state 7");
-  ok(!isChecked(styleeditor), "styleeditor button state 7");
-
-  // All closed
-
-  // Check we can open and close and retain button state
-  document.getElementById("Tools:Inspect").doCommand();
-
-  ok(!isChecked(webconsole), "web console button state 8");
-  ok(isChecked(inspector), "inspector button state 8");
-  ok(!isChecked(debuggr), "debugger button state 8");
-  ok(!isChecked(styleeditor), "styleeditor button state 8");
-
-
-  // Test Style Editor
-  document.getElementById("Tools:StyleEditor").doCommand();
-
-  ok(!isChecked(webconsole), "web console button state 9");
-  ok(isChecked(inspector), "inspector button state 9");
-  ok(!isChecked(debuggr), "debugger button state 9");
-  ok(isChecked(styleeditor), "styleeditor button state 9");
-
-  // Test Debugger
-  document.getElementById("Tools:Debugger").doCommand();
-
-  ok(!isChecked(webconsole), "web console button state 9");
-  ok(isChecked(inspector), "inspector button state 9");
-  ok(isChecked(debuggr), "debugger button state 9");
-  ok(isChecked(styleeditor), "styleeditor button state 9");
-
-  addTab("about:blank", function(browser, tab) {
-    info("Opening a new tab");
-
-    ok(!isChecked(webconsole), "web console button state 10");
-    ok(!isChecked(inspector), "inspector button state 10");
-    ok(!isChecked(debuggr), "debugger button state 10");
-    ok(!isChecked(styleeditor), "styleeditor button state 10");
-
-    gBrowser.removeCurrentTab();
-
-    oneTimeObserve(DeveloperToolbar.NOTIFICATIONS.HIDE, catchFail(checkClosed));
-    document.getElementById("Tools:DevToolbar").doCommand();
+      oneTimeObserve(DeveloperToolbar.NOTIFICATIONS.HIDE, catchFail(checkClosed));
+      document.getElementById("Tools:DevToolbar").doCommand();
+    });
   });
 }
 
 function checkClosed() {
   ok(!DeveloperToolbar.visible, "DeveloperToolbar is not visible in checkClosed");
 
-  // Check we grok state even when closed
-  document.getElementById("Tools:WebConsole").doCommand();
-
   oneTimeObserve(DeveloperToolbar.NOTIFICATIONS.SHOW, catchFail(checkReOpen));
   document.getElementById("Tools:DevToolbar").doCommand();
 }
 
 function checkReOpen() {
   ok(DeveloperToolbar.visible, "DeveloperToolbar is visible in checkReOpen");
 
-  let webconsole = document.getElementById("developer-toolbar-webconsole");
-  let inspector = document.getElementById("developer-toolbar-inspector");
-  let debuggr = document.getElementById("developer-toolbar-debugger");
-  let styleeditor = document.getElementById("developer-toolbar-styleeditor");
-
-  ok(isChecked(webconsole), "web console button state 99");
-  ok(isChecked(inspector), "inspector button state 99");
-  ok(isChecked(debuggr), "debugger button state 99");
-  ok(isChecked(styleeditor), "styleeditor button state 99");
-
-  // We close the style editor (not automatically closed)
-  document.getElementById("Tools:StyleEditor").doCommand();
+  let toggleToolbox =
+    document.getElementById("devtoolsMenuBroadcaster_DevToolbox");
+  ok(isChecked(toggleToolbox), "toggle toolbox button is checked");
 
   oneTimeObserve(DeveloperToolbar.NOTIFICATIONS.HIDE, catchFail(checkReClosed));
   document.getElementById("developer-toolbar-closebutton").doCommand();
 }
 
 function checkReClosed() {
   ok(!DeveloperToolbar.visible, "DeveloperToolbar is not visible in checkReClosed");
 
diff --git a/browser/devtools/shared/test/browser_toolbar_webconsole_errors_count.js b/browser/devtools/shared/test/browser_toolbar_webconsole_errors_count.js
--- a/browser/devtools/shared/test/browser_toolbar_webconsole_errors_count.js
+++ b/browser/devtools/shared/test/browser_toolbar_webconsole_errors_count.js
@@ -1,21 +1,28 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // Tests that the developer toolbar errors count works properly.
 
 function test() {
-  const TEST_URI = "http://example.com/browser/browser/devtools/shared/test/browser_toolbar_webconsole_errors_count.html";
+  const TEST_URI = "http://example.com/browser/browser/devtools/shared/test/" +
+                   "browser_toolbar_webconsole_errors_count.html";
 
   let imported = {};
   Components.utils.import("resource:///modules/HUDService.jsm", imported);
   let HUDService = imported.HUDService;
 
-  let webconsole = document.getElementById("developer-toolbar-webconsole");
+  Components.utils.import("resource:///modules/devtools/gDevTools.jsm", imported);
+  let gDevTools = imported.gDevTools;
+
+  Components.utils.import("resource:///modules/devtools/Target.jsm", imported);
+  let TargetFactory = imported.TargetFactory;
+
+  let webconsole = document.getElementById("developer-toolbar-toolbox-button");
   let toolbar = document.getElementById("Tools:DevToolbar");
   let tab1, tab2;
 
   function openToolbar(browser, tab) {
     tab1 = tab;
     ignoreAllUncaughtExceptions(false);
 
     ok(!DeveloperToolbar.visible, "DeveloperToolbar is not visible");
@@ -99,17 +106,18 @@ function test() {
     {
       subject.QueryInterface(Ci.nsISupportsString);
       let hud = HUDService.getHudReferenceById(subject.data);
       executeSoon(callback.bind(null, hud));
     }
 
     oneTimeObserve("web-console-created", _onWebConsoleOpen);
 
-    HUDService.activateHUDForContext(tab);
+    let target = TargetFactory.forTab(tab);
+    gDevTools.openToolboxForTab(target, "webconsole");
   }
 
   function onWebConsoleOpen(hud) {
     waitForValue({
       name: "web console shows the page errors",
       validator: function() {
         return hud.outputNode.querySelectorAll(".hud-exception").length;
       },
@@ -201,17 +209,18 @@ function test() {
         testEnd();
       },
       failure: testEnd,
     };
   }
 
   function testEnd() {
     document.getElementById("developer-toolbar-closebutton").doCommand();
-    HUDService.deactivateHUDForContext(tab1);
+    let target1 = TargetFactory.forTab(tab1);
+    gDevTools.closeToolbox(target1);
     gBrowser.removeTab(tab1);
     gBrowser.removeTab(tab2);
     finish();
   }
 
   function oneTimeObserve(name, callback) {
     function _onObserve(aSubject, aTopic, aData) {
       Services.obs.removeObserver(_onObserve, name);
diff --git a/browser/devtools/shared/test/head.js b/browser/devtools/shared/test/head.js
--- a/browser/devtools/shared/test/head.js
+++ b/browser/devtools/shared/test/head.js
@@ -3,16 +3,22 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 let console = (function() {
   let tempScope = {};
   Components.utils.import("resource://gre/modules/devtools/Console.jsm", tempScope);
   return tempScope.console;
 })();
 
+let TargetFactory = (function() {
+  let tempScope = {};
+  Components.utils.import("resource:///modules/devtools/Target.jsm", tempScope);
+  return tempScope.TargetFactory;
+})();
+
 // Import the GCLI test helper
 let testDir = gTestPath.substr(0, gTestPath.lastIndexOf("/"));
 Services.scriptloader.loadSubScript(testDir + "/helpers.js", this);
 
 /**
  * Open a new tab at a URL and call a callback on load
  */
 function addTab(aURL, aCallback)
diff --git a/browser/devtools/shared/test/leakhunt.js b/browser/devtools/shared/test/leakhunt.js
--- a/browser/devtools/shared/test/leakhunt.js
+++ b/browser/devtools/shared/test/leakhunt.js
@@ -5,153 +5,166 @@
 /**
  * Memory leak hunter. Walks a tree of objects looking for DOM nodes.
  * Usage:
  * leakHunt({
  *   thing: thing,
  *   otherthing: otherthing
  * });
  */
-
-var noRecurse = [
-  /^string$/, /^number$/, /^boolean$/, /^null/, /^undefined/,
-  /^Window$/, /^Document$/,
-  /^XULDocument$/, /^XULElement$/,
-  /^DOMWindow$/, /^HTMLDocument$/, /^HTML.*Element$/
-];
-
-var hide = [ /^string$/, /^number$/, /^boolean$/, /^null/, /^undefined/ ];
-
-function leakHunt(root, path, seen) {
-  path = path || [];
-  seen = seen || [];
+function leakHunt(root) {
+  var path = [];
+  var seen = [];
 
   try {
-    var output = leakHuntInner(root, path, seen);
+    var output = leakHunt.inner(root, path, seen);
     output.forEach(function(line) {
       dump(line + '\n');
     });
   }
   catch (ex) {
     dump(ex + '\n');
   }
 }
 
-function leakHuntInner(root, path, seen) {
+leakHunt.inner = function LH_inner(root, path, seen) {
   var prefix = new Array(path.length).join('  ');
 
   var reply = [];
   function log(msg) {
     reply.push(msg);
   }
 
   var direct
   try {
     direct = Object.keys(root);
   }
   catch (ex) {
     log(prefix + '  Error enumerating: ' + ex);
     return reply;
   }
 
+  try {
+    var index = 0;
+    for (var data of root) {
+      var prop = '' + index;
+      leakHunt.digProperty(prop, data, path, seen, direct, log);
+      index++;
+    }
+  }
+  catch (ex) { /* Ignore things that are not enumerable */ }
+
   for (var prop in root) {
-    var newPath = path.slice();
-    newPath.push(prop);
-    prefix = new Array(newPath.length).join('  ');
-
     var data;
     try {
       data = root[prop];
     }
     catch (ex) {
-      log(prefix + prop + '  Error reading: ' + ex);
+      log(prefix + '  ' + prop + ' = Error: ' + ex.toString().substring(0, 30));
       continue;
     }
 
-    var recurse = true;
-    var message = getType(data);
-
-    if (matchesAnyPattern(message, hide)) {
-      continue;
-    }
-
-    if (message === 'function' && direct.indexOf(prop) == -1) {
-      continue;
-    }
-
-    if (message === 'string') {
-      var extra = data.length > 10 ? data.substring(0, 9) + '_' : data;
-      message += ' "' + extra.replace(/\n/g, "|") + '"';
-      recurse = false;
-    }
-    else if (matchesAnyPattern(message, noRecurse)) {
-      message += ' (no recurse)'
-      recurse = false;
-    }
-    else if (seen.indexOf(data) !== -1) {
-      message += ' (already seen)';
-      recurse = false;
-    }
-
-    if (recurse) {
-      seen.push(data);
-      var lines = leakHuntInner(data, newPath, seen);
-      if (lines.length == 0) {
-        if (message !== 'function') {
-          log(prefix + prop + ' = ' + message + ' { }');
-        }
-      }
-      else {
-        log(prefix + prop + ' = ' + message + ' {');
-        lines.forEach(function(line) {
-          reply.push(line);
-        });
-        log(prefix + '}');
-      }
-    }
-    else {
-      log(prefix + prop + ' = ' + message);
-    }
+    leakHunt.digProperty(prop, data, path, seen, direct, log);
   }
 
   return reply;
 }
 
-function matchesAnyPattern(str, patterns) {
+leakHunt.hide = [ /^string$/, /^number$/, /^boolean$/, /^null/, /^undefined/ ];
+
+leakHunt.noRecurse = [
+  /^string$/, /^number$/, /^boolean$/, /^null/, /^undefined/,
+  /^Window$/, /^Document$/,
+  /^XULDocument$/, /^XULElement$/,
+  /^DOMWindow$/, /^HTMLDocument$/, /^HTML.*Element$/, /^ChromeWindow$/
+];
+
+leakHunt.digProperty = function LH_digProperty(prop, data, path, seen, direct, log) {
+  var newPath = path.slice();
+  newPath.push(prop);
+  var prefix = new Array(newPath.length).join('  ');
+
+  var recurse = true;
+  var message = leakHunt.getType(data);
+
+  if (leakHunt.matchesAnyPattern(message, leakHunt.hide)) {
+    return;
+  }
+
+  if (message === 'function' && direct.indexOf(prop) == -1) {
+    return;
+  }
+
+  if (message === 'string') {
+    var extra = data.length > 10 ? data.substring(0, 9) + '_' : data;
+    message += ' "' + extra.replace(/\n/g, "|") + '"';
+    recurse = false;
+  }
+  else if (leakHunt.matchesAnyPattern(message, leakHunt.noRecurse)) {
+    message += ' (no recurse)'
+    recurse = false;
+  }
+  else if (seen.indexOf(data) !== -1) {
+    message += ' (already seen)';
+    recurse = false;
+  }
+
+  if (recurse) {
+    seen.push(data);
+    var lines = leakHunt.inner(data, newPath, seen);
+    if (lines.length == 0) {
+      if (message !== 'function') {
+        log(prefix + prop + ' = ' + message + ' { }');
+      }
+    }
+    else {
+      log(prefix + prop + ' = ' + message + ' {');
+      lines.forEach(function(line) {
+        log(line);
+      });
+      log(prefix + '}');
+    }
+  }
+  else {
+    log(prefix + prop + ' = ' + message);
+  }
+};
+
+leakHunt.matchesAnyPattern = function LH_matchesAnyPattern(str, patterns) {
   var match = false;
   patterns.forEach(function(pattern) {
     if (str.match(pattern)) {
       match = true;
     }
   });
   return match;
-}
+};
 
-function getType(data) {
+leakHunt.getType = function LH_getType(data) {
   if (data === null) {
     return 'null';
   }
   if (data === undefined) {
     return 'undefined';
   }
 
   var type = typeof data;
   if (type === 'object' || type === 'Object') {
-    type = getCtorName(data);
+    type = leakHunt.getCtorName(data);
   }
 
   return type;
-}
+};
 
-function getCtorName(aObj) {
+leakHunt.getCtorName = function LH_getCtorName(aObj) {
   try {
     if (aObj.constructor && aObj.constructor.name) {
       return aObj.constructor.name;
     }
   }
   catch (ex) {
     return 'UnknownObject';
   }
 
   // If that fails, use Objects toString which sometimes gives something
   // better than 'Object', and at least defaults to Object if nothing better
   return Object.prototype.toString.call(aObj).slice(8, -1);
-}
+};
diff --git a/browser/devtools/styleeditor/StyleEditor.jsm b/browser/devtools/styleeditor/StyleEditor.jsm
--- a/browser/devtools/styleeditor/StyleEditor.jsm
+++ b/browser/devtools/styleeditor/StyleEditor.jsm
@@ -1,16 +1,16 @@
 /* vim:set ts=2 sw=2 sts=2 et: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
-this.EXPORTED_SYMBOLS = ["StyleEditor", "StyleEditorFlags", "StyleEditorManager"];
+this.EXPORTED_SYMBOLS = ["StyleEditor", "StyleEditorFlags"];
 
 const Cc = Components.classes;
 const Ci = Components.interfaces;
 const Cu = Components.utils;
 
 const DOMUtils = Cc["@mozilla.org/inspector/dom-utils;1"]
                    .getService(Ci.inIDOMUtils);
 
@@ -293,17 +293,17 @@ StyleEditor.prototype = {
         this._savedFile = aFile; // remember filename for next save if any
 
         NetUtil.asyncFetch(aFile, function onAsyncFetch(aStream, aStatus) {
           if (!Components.isSuccessCode(aStatus)) {
             return this._signalError(LOAD_ERROR);
           }
           let source = NetUtil.readInputStreamToString(aStream, aStream.available());
           aStream.close();
-    
+
           this._appendNewStyleSheet(source);
           this.clearFlag(StyleEditorFlags.ERROR);
         }.bind(this));
       }
     }.bind(this);
 
     this._showFilePicker(aFile, false, aParentWindow, callback);
   },
@@ -1115,26 +1115,28 @@ StyleEditor.prototype = {
     let bindings = [];
 
     bindings.push({
       action: "StyleEditor.save",
       code: _("saveStyleSheet.commandkey"),
       accel: true,
       callback: function save() {
         this.saveToFile(this._savedFile);
+        return true;
       }.bind(this)
     });
 
     bindings.push({
       action: "StyleEditor.saveAs",
       code: _("saveStyleSheet.commandkey"),
       accel: true,
       shift: true,
       callback: function saveAs() {
         this.saveToFile();
+        return true;
       }.bind(this)
     });
 
     return bindings;
   }
 };
 
 /**
@@ -1272,139 +1274,8 @@ function setupBracketCompletion(aSourceE
                   getInterface(Ci.nsIDOMWindowUtils);
     let handled = utils.sendKeyEvent("keydown", keyCode, 0, modifiers);
     utils.sendKeyEvent("keypress", 0, charCode, modifiers, !handled);
     utils.sendKeyEvent("keyup", keyCode, 0, modifiers);
     // and rewind caret
     aSourceEditor.setCaretOffset(aSourceEditor.getCaretOffset() - 1);
   }, false);
 }
-
-/**
-  * Manage the different editors instances.
-  */
-
-this.StyleEditorManager = function StyleEditorManager(aWindow) {
-  this.chromeWindow = aWindow;
-  this.listenToTabs();
-  this.editors = new WeakMap();
-}
-
-StyleEditorManager.prototype = {
-
-  /**
-   * Get the editor for a specific content window.
-   */
-  getEditorForWindow: function SEM_getEditorForWindow(aContentWindow) {
-    return this.editors.get(aContentWindow);
-  },
-
-  /**
-   * Focus the editor and select a stylesheet.
-   *
-   * @param {CSSStyleSheet} [aSelectedStyleSheet] default Stylesheet.
-   * @param {Number} [aLine] Line to which the caret should be moved (one-indexed).
-   * @param {Number} [aCol] Column to which the caret should be moved (one-indexed).
-   */
-  selectEditor: function SEM_selectEditor(aWindow, aSelectedStyleSheet, aLine, aCol) {
-    if (aSelectedStyleSheet) {
-      aWindow.styleEditorChrome.selectStyleSheet(aSelectedStyleSheet, aLine, aCol);
-    }
-    aWindow.focus();
-  },
-
-  /**
-   * Open a new editor.
-   *
-   * @param {Window} content window.
-   * @param {Window} chrome window.
-   * @param {CSSStyleSheet} [aSelectedStyleSheet] default Stylesheet.
-   * @param {Number} [aLine] Line to which the caret should be moved (one-indexed).
-   * @param {Number} [aCol] Column to which the caret should be moved (one-indexed).
-   */
-  newEditor: function SEM_newEditor(aContentWindow, aChromeWindow, aSelectedStyleSheet, aLine, aCol) {
-    const CHROME_URL = "chrome://browser/content/styleeditor.xul";
-    const CHROME_WINDOW_FLAGS = "chrome,centerscreen,resizable,dialog=no";
-
-    let args = {
-      contentWindow: aContentWindow,
-      selectedStyleSheet: aSelectedStyleSheet,
-      line: aLine,
-      col: aCol
-    };
-    args.wrappedJSObject = args;
-    let chromeWindow = Services.ww.openWindow(aChromeWindow, CHROME_URL, "_blank",
-                                              CHROME_WINDOW_FLAGS, args);
-
-    chromeWindow.onunload = function() {
-      if (chromeWindow.location == CHROME_URL) {
-        // not about:blank being unloaded
-        this.unregisterEditor(aContentWindow);
-      }
-    }.bind(this);
-    chromeWindow.focus();
-
-    this.editors.set(aContentWindow, chromeWindow);
-
-    this.refreshCommand();
-
-    return chromeWindow;
-  },
-
-  /**
-   * Toggle an editor.
-   *
-   * @param {Window} associated content window.
-   */
-  toggleEditor: function SEM_toggleEditor(aContentWindow, aChromeWindow) {
-    let editor = this.getEditorForWindow(aContentWindow);
-    if (editor) {
-      editor.close();
-    } else {
-      this.newEditor(aContentWindow, aChromeWindow);
-    }
-  },
-
-  /**
-   * Close an editor.
-   *
-   * @param {Window} associated content window.
-   */
-  unregisterEditor: function SEM_unregisterEditor(aContentWindow) {
-    let chromeWindow = this.editors.get(aContentWindow);
-    if (chromeWindow) {
-      chromeWindow.close();
-    }
-    this.editors.delete(aContentWindow);
-    this.refreshCommand();
-  },
-
-  /**
-   * Update the status of tool's menuitems and buttons.
-   */
-  refreshCommand: function SEM_refreshCommand() {
-    let contentWindow = this.chromeWindow.gBrowser.contentWindow;
-    let command = this.chromeWindow.document.getElementById("Tools:StyleEditor");
-
-    let win = this.getEditorForWindow(contentWindow);
-    if (win) {
-      command.setAttribute("checked", "true");
-    } else {
-      command.setAttribute("checked", "false");
-    }
-  },
-
-  /**
-   * Trigger refreshCommand when needed.
-   */
-  listenToTabs: function SEM_listenToTabs() {
-    let win = this.chromeWindow;
-    let tabs = win.gBrowser.tabContainer;
-
-    let bound_refreshCommand = this.refreshCommand.bind(this);
-    tabs.addEventListener("TabSelect", bound_refreshCommand, true);
-
-    win.addEventListener("unload", function onClose(aEvent) {
-      tabs.removeEventListener("TabSelect", bound_refreshCommand, true);
-      win.removeEventListener("unload", onClose, false);
-    }, false);
-  },
-}
diff --git a/browser/devtools/styleeditor/StyleEditorChrome.jsm b/browser/devtools/styleeditor/StyleEditorChrome.jsm
--- a/browser/devtools/styleeditor/StyleEditorChrome.jsm
+++ b/browser/devtools/styleeditor/StyleEditorChrome.jsm
@@ -64,16 +64,18 @@ this.StyleEditorChrome = function StyleE
   if (this._document.readyState == "complete") {
     initializeUI();
   } else {
     this._window.addEventListener("load", initializeUI, false);
   }
 }
 
 StyleEditorChrome.prototype = {
+  _styleSheetToSelect: null,
+
   /**
    * Retrieve the content window attached to this chrome.
    *
    * @return DOMWindow
    *         Content window or null if no content window is attached.
    */
   get contentWindow() this._contentWindow,
 
@@ -269,17 +271,17 @@ StyleEditorChrome.prototype = {
       editor.addActionListener(this);
       editor.importFromFile(this._mockImportFile || null, this._window);
     }.bind(this));
   },
 
   /**
    * Reset the chrome UI to an empty and ready state.
    */
-  _resetChrome: function SEC__resetChrome()
+  resetChrome: function SEC__resetChrome()
   {
     this._editors.forEach(function (aEditor) {
       aEditor.removeActionListener(this);
     }.bind(this));
     this._editors = [];
 
     this._view.removeAll();
 
@@ -292,17 +294,17 @@ StyleEditorChrome.prototype = {
 
   /**
    * Populate the chrome UI according to the content document.
    *
    * @see StyleEditor._setupShadowStyleSheet
    */
   _populateChrome: function SEC__populateChrome()
   {
-    this._resetChrome();
+    this.resetChrome();
 
     let document = this.contentDocument;
     this._document.title = _("chromeWindowTitle",
       document.title || document.location.href);
 
     for (let i = 0; i < document.styleSheets.length; ++i) {
       let styleSheet = document.styleSheets[i];
 
@@ -332,59 +334,70 @@ StyleEditorChrome.prototype = {
    *        the call.
    * @param {Number} [aLine]
    *        Line to which the caret should be moved (one-indexed).
    * @param {Number} [aCol]
    *        Column to which the caret should be moved (one-indexed).
    */
   selectStyleSheet: function SEC_selectSheet(aSheet, aLine, aCol)
   {
+    let alreadyCalled = !!this._styleSheetToSelect;
+
+    this._styleSheetToSelect = {
+      sheet: aSheet,
+      line: aLine,
+      col: aCol,
+    };
+
+    if (alreadyCalled) {
+      return;
+    }
+
     let select = function DEC_select(aEditor) {
-      let summary = aSheet ? this.getSummaryElementForEditor(aEditor)
-                           : this._view.getSummaryElementByOrdinal(0);
-      let setCaret = false;
+      let sheet = this._styleSheetToSelect.sheet;
+      let line = this._styleSheetToSelect.line;
+      let col = this._styleSheetToSelect.col;
+      let summary = sheet ? this.getSummaryElementForEditor(aEditor)
+                          : this._view.getSummaryElementByOrdinal(0);
 
-      if (aLine || aCol) {
-        aLine = aLine || 1;
-        aCol = aCol || 1;
-        setCaret = true;
-      }
-      if (!aEditor.sourceEditor) {
-        // If a line or column was specified we move the caret appropriately.
-        if (setCaret) {
+      if (line) {
+        col = col || 1;
+
+        if (!aEditor.sourceEditor) {
+          // If a line or column was specified we move the caret appropriately.
           let self = this;
           aEditor.addActionListener({
             onAttach: function SEC_selectSheet_onAttach()
             {
               aEditor.removeActionListener(this);
               self.selectedStyleSheetIndex = aEditor.styleSheetIndex;
-              aEditor.sourceEditor.setCaretPosition(aLine - 1, aCol - 1);
+              aEditor.sourceEditor.setCaretPosition(line - 1, col - 1);
             }
           });
-        }
-        this._view.activeSummary = summary;
-      } else {
-        this._view.activeSummary = summary;
-
-        // If a line or column was specified we move the caret appropriately.
-        if (setCaret) {
-          aEditor.sourceEditor.setCaretPosition(aLine - 1, aCol - 1);
+        } else {
+          // If a line or column was specified we move the caret appropriately.
+          aEditor.sourceEditor.setCaretPosition(line - 1, col - 1);
         }
       }
+
+      this._view.activeSummary = summary;
       this.selectedStyleSheetIndex = aEditor.styleSheetIndex;
+      this._styleSheetToSelect = null;
     }.bind(this);
 
     if (!this.editors.length) {
       // We are in the main initialization phase so we wait for the editor
       // containing the target stylesheet to be added and select the target
       // stylesheet, optionally moving the cursor to a selected line.
+      let self = this;
       this.addChromeListener({
         onEditorAdded: function SEC_selectSheet_onEditorAdded(aChrome, aEditor) {
-          if ((!aSheet && aEditor.styleSheetIndex == 0) ||
-              aEditor.styleSheet == aSheet) {
+          let sheet = self._styleSheetToSelect.sheet;
+          if ((sheet && aEditor.styleSheet == sheet) ||
+              aEditor.styleSheetIndex == 0) {
             aChrome.removeChromeListener(this);
             select(aEditor);
           }
         }
       });
     } else if (aSheet) {
       // We are already initialized and a stylesheet has been specified. Here
       // we iterate through the editors and select the one containing the target
diff --git a/browser/devtools/styleeditor/StyleEditorDefinition.jsm b/browser/devtools/styleeditor/StyleEditorDefinition.jsm
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleeditor/StyleEditorDefinition.jsm
@@ -0,0 +1,56 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+this.EXPORTED_SYMBOLS = [ "StyleEditorDefinition" ];
+
+const Cu = Components.utils;
+const STRINGS_URI = "chrome://browser/locale/devtools/styleeditor.properties";
+
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+Cu.import("resource:///modules/devtools/StyleEditorChrome.jsm");
+Cu.import("resource://gre/modules/Services.jsm");
+
+XPCOMUtils.defineLazyGetter(this, "_strings",
+  function() Services.strings.createBundle(STRINGS_URI));
+
+XPCOMUtils.defineLazyModuleGetter(this, "StyleEditorPanel",
+  "resource:///modules/devtools/StyleEditorPanel.jsm");
+
+/**
+ * The external API allowing us to be registered with DevTools.jsm
+ */
+this.StyleEditorDefinition = {
+  id: "styleeditor",
+  key: l10n("open.commandkey"),
+  ordinal: 3,
+  accesskey: l10n("open.accesskey"),
+  modifiers: "shift",
+  label: l10n("ToolboxStyleEditor.label"),
+  url: "chrome://browser/content/styleeditor.xul",
+
+  isTargetSupported: function(target) {
+    return !target.isRemote && !target.isChrome;
+  },
+
+  build: function(iframeWindow, toolbox) {
+    return new StyleEditorPanel(iframeWindow, toolbox);
+  }
+};
+
+/**
+ * Lookup l10n string from a string bundle.
+ * @param {string} aName The key to lookup.
+ * @returns A localized version of the given key.
+ */
+function l10n(aName)
+{
+  try {
+    return _strings.GetStringFromName(aName);
+  } catch (ex) {
+    Services.console.logStringMessage("Error reading '" + aName + "'");
+    throw new Error("l10n error with " + aName);
+  }
+}
diff --git a/browser/devtools/styleeditor/StyleEditorPanel.jsm b/browser/devtools/styleeditor/StyleEditorPanel.jsm
new file mode 100644
--- /dev/null
+++ b/browser/devtools/styleeditor/StyleEditorPanel.jsm
@@ -0,0 +1,109 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ft=javascript ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const Cu = Components.utils;
+const Ci = Components.interfaces;
+
+this.EXPORTED_SYMBOLS = ["StyleEditorPanel"];
+
+Cu.import("resource:///modules/devtools/EventEmitter.jsm");
+Cu.import("resource:///modules/devtools/StyleEditorChrome.jsm");
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+
+this.StyleEditorPanel = function StyleEditorPanel(panelWin, toolbox) {
+  new EventEmitter(this);
+
+  this._toolbox = toolbox;
+  this._target = toolbox.target;
+
+  this.reset = this.reset.bind(this);
+  this.newPage = this.newPage.bind(this);
+  this.destroy = this.destroy.bind(this);
+
+  this._target.on("will-navigate", this.reset);
+  this._target.on("navigate", this.newPage);
+  this._target.on("close", this.destroy);
+
+  this._panelWin = panelWin;
+  this._panelDoc = panelWin.document;
+
+  let contentWin = toolbox.target.tab.linkedBrowser.contentWindow;
+  this.setPage(contentWin);
+
+  this.isReady = true;
+}
+
+StyleEditorPanel.prototype = {
+  /**
+   * Target getter.
+   */
+  get target() {
+    return this._target;
+  },
+
+  /**
+   * Panel window getter.
+   */
+  get panelWindow() this._panelWin,
+
+  /**
+   * StyleEditorChrome instance getter.
+   */
+  get styleEditorChrome() this._panelWin.styleEditorChrome,
+
+  /**
+   * Set the page to target.
+   */
+  setPage: function StyleEditor_setPage(contentWindow) {
+    if (this._panelWin.styleEditorChrome) {
+      this._panelWin.styleEditorChrome.contentWindow = contentWindow;
+    } else {
+      let chromeRoot = this._panelDoc.getElementById("style-editor-chrome");
+      let chrome = new StyleEditorChrome(chromeRoot, contentWindow);
+      this._panelWin.styleEditorChrome = chrome;
+    }
+    this.selectStyleSheet(null, null, null);
+  },
+
+  /**
+   * Navigated to a new page.
+   */
+  newPage: function StyleEditor_newPage(event, window) {
+    this.setPage(window);
+  },
+
+  /**
+   * No window available anymore.
+   */
+  reset: function StyleEditor_reset() {
+    this._panelWin.styleEditorChrome.resetChrome();
+  },
+
+  /**
+   * Select a stylesheet.
+   */
+  selectStyleSheet: function StyleEditor_selectStyleSheet(stylesheet, line, col) {
+    this._panelWin.styleEditorChrome.selectStyleSheet(stylesheet, line, col);
+  },
+
+  /**
+   * Destroy StyleEditor
+   */
+  destroy: function StyleEditor_destroy() {
+    if (this._destroyed) {
+      return;
+    }
+    this._destroyed = true;
+
+    this._target.off("will-navigate", this.reset);
+    this._target.off("navigate", this.newPage);
+    this._target.off("close", this.destroy);
+    this._target = null;
+    this._toolbox = null;
+    this._panelWin = null;
+    this._panelDoc = null;
+  },
+}
diff --git a/browser/devtools/styleeditor/styleeditor.xul b/browser/devtools/styleeditor/styleeditor.xul
--- a/browser/devtools/styleeditor/styleeditor.xul
+++ b/browser/devtools/styleeditor/styleeditor.xul
@@ -11,122 +11,100 @@
 <?xml-stylesheet href="chrome://browser/skin/devtools/common.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/devtools/splitview.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/content/styleeditor.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/devtools/styleeditor.css" type="text/css"?>
 <?xul-overlay href="chrome://global/content/editMenuOverlay.xul"?>
 <?xul-overlay href="chrome://browser/content/source-editor-overlay.xul"?>
 <xul:window xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
         xmlns="http://www.w3.org/1999/xhtml"
-        id="style-editor-chrome-window"
-        title="&window.title;"
-        windowtype="Tools:StyleEditor"
-        width="800" height="280"
-        persist="screenX screenY width height sizemode">
-<xul:script type="application/javascript" src="chrome://global/content/globalOverlay.js"/>
+        id="style-editor-chrome-window">
 
-<xul:popupset id="style-editor-popups">
-  <xul:menupopup id="sourceEditorContextMenu"
-                 onpopupshowing="goUpdateSourceEditorMenuItems()">
-    <xul:menuitem id="se-cMenu-undo"/>
-    <xul:menuseparator/>
-    <xul:menuitem id="se-cMenu-cut"/>
-    <xul:menuitem id="se-cMenu-copy"/>
-    <xul:menuitem id="se-cMenu-paste"/>
-    <xul:menuitem id="se-cMenu-delete"/>
-    <xul:menuseparator/>
-    <xul:menuitem id="se-cMenu-selectAll"/>
-    <xul:menuseparator/>
-    <xul:menuitem id="se-cMenu-find"/>
-    <xul:menuitem id="se-cMenu-findAgain"/>
-    <xul:menuseparator/>
-    <xul:menuitem id="se-cMenu-gotoLine"/>
-  </xul:menupopup>
-</xul:popupset>
+  <xul:script type="application/javascript" src="chrome://global/content/globalOverlay.js"/>
 
-<xul:commandset id="editMenuCommands"/>
-<xul:commandset id="sourceEditorCommands"/>
-<xul:commandset id="style-editor-commandset">
-  <xul:command id="style-editor-cmd-close" oncommand="window.close();"/>
-</xul:commandset>
+  <xul:popupset id="style-editor-popups">
+    <xul:menupopup id="sourceEditorContextMenu"
+                  onpopupshowing="goUpdateSourceEditorMenuItems()">
+      <xul:menuitem id="se-cMenu-undo"/>
+      <xul:menuseparator/>
+      <xul:menuitem id="se-cMenu-cut"/>
+      <xul:menuitem id="se-cMenu-copy"/>
+      <xul:menuitem id="se-cMenu-paste"/>
+      <xul:menuitem id="se-cMenu-delete"/>
+      <xul:menuseparator/>
+      <xul:menuitem id="se-cMenu-selectAll"/>
+      <xul:menuseparator/>
+      <xul:menuitem id="se-cMenu-find"/>
+      <xul:menuitem id="se-cMenu-findAgain"/>
+      <xul:menuseparator/>
+      <xul:menuitem id="se-cMenu-gotoLine"/>
+    </xul:menupopup>
+  </xul:popupset>
 
-<xul:keyset id="sourceEditorKeys"/>
-<xul:keyset id="style-editor-keyset">
-  <xul:key id="style-editor-key-close"
-           key="&closeCmd.key;"
-           command="style-editor-cmd-close"
-           modifiers="accel"/>
-</xul:keyset>
+  <xul:commandset id="editMenuCommands"/>
+  <xul:commandset id="sourceEditorCommands"/>
 
-<xul:box id="style-editor-chrome" class="splitview-root loading">
-  <xul:box class="splitview-controller">
-    <xul:box class="splitview-main">
-      <xul:toolbar class="devtools-toolbar">
-        <xul:toolbarbutton class="style-editor-newButton devtools-toolbarbutton"
-                    accesskey="&newButton.accesskey;"
-                    tooltiptext="&newButton.tooltip;"
-                    label="&newButton.label;"
-                    disabled="true"/>
-        <xul:toolbarbutton class="style-editor-importButton devtools-toolbarbutton"
-                    accesskey="&importButton.accesskey;"
-                    tooltiptext="&importButton.tooltip;"
-                    label="&importButton.label;"
-                    disabled="true"/>
-      </xul:toolbar>
-    </xul:box>
-    <xul:box id="splitview-resizer-target" class="splitview-nav-container"
-             persist="width height">
-      <ol class="splitview-nav" tabindex="0"></ol>
-      <div class="splitview-nav placeholder empty">
-        <p><strong>&noStyleSheet.label;</strong></p>
-        <p>&noStyleSheet-tip-start.label;
-          <a href="#"
-             class="style-editor-newButton">&noStyleSheet-tip-action.label;</a>
-          &noStyleSheet-tip-end.label;</p>
-      </div>
-    </xul:box> <!-- .splitview-nav-container -->
-  </xul:box>   <!-- .splitview-controller -->
-  <xul:box class="splitview-side-details"/>
+  <xul:keyset id="sourceEditorKeys"/>
 
-  <div id="splitview-templates" hidden="true">
-    <li id="splitview-tpl-summary-stylesheet" tabindex="0">
-      <a class="stylesheet-enabled" tabindex="0" href="#"
-         title="&visibilityToggle.tooltip;"
-         accesskey="&saveButton.accesskey;"></a>
-      <hgroup class="stylesheet-info">
-        <h1><a class="stylesheet-name" href="#"><xul:label crop="start"/></a></h1>
-        <div class="stylesheet-more">
-          <h3 class="stylesheet-title"></h3>
-          <h3 class="stylesheet-rule-count"></h3>
-          <h3 class="stylesheet-error-message"></h3>
-          <xul:spacer/>
-          <h3><a class="stylesheet-saveButton" href="#"
-                 title="&saveButton.tooltip;"
-                 accesskey="&saveButton.accesskey;">&saveButton.label;</a></h3>
+  <xul:box id="style-editor-chrome" class="splitview-root loading">
+    <xul:box class="splitview-controller">
+      <xul:box class="splitview-main">
+        <xul:toolbar class="devtools-toolbar">
+          <xul:toolbarbutton class="style-editor-newButton devtools-toolbarbutton"
+                      accesskey="&newButton.accesskey;"
+                      tooltiptext="&newButton.tooltip;"
+                      label="&newButton.label;"
+                      disabled="true"/>
+          <xul:toolbarbutton class="style-editor-importButton devtools-toolbarbutton"
+                      accesskey="&importButton.accesskey;"
+                      tooltiptext="&importButton.tooltip;"
+                      label="&importButton.label;"
+                      disabled="true"/>
+        </xul:toolbar>
+      </xul:box>
+      <xul:box id="splitview-resizer-target" class="splitview-nav-container"
+              persist="width height">
+        <ol class="splitview-nav" tabindex="0"></ol>
+        <div class="splitview-nav placeholder empty">
+          <p><strong>&noStyleSheet.label;</strong></p>
+          <p>&noStyleSheet-tip-start.label;
+            <a href="#"
+              class="style-editor-newButton">&noStyleSheet-tip-action.label;</a>
+            &noStyleSheet-tip-end.label;</p>
         </div>
-      </hgroup>
-    </li>
+      </xul:box> <!-- .splitview-nav-container -->
+    </xul:box>   <!-- .splitview-controller -->
+    <xul:box class="splitview-side-details"/>
 
-    <xul:box id="splitview-tpl-details-stylesheet" class="splitview-details">
-      <xul:resizer class="splitview-portrait-resizer"
-                   dir="bottom"
-                   element="splitview-resizer-target"/>
-      <xul:toolbar id="splitview-details-toolbar" class="devtools-toolbar">
-        <xul:resizer class="splitview-landscape-resizer"
-                     dir="bottomend"
-                     element="splitview-resizer-target"/>
-      </xul:toolbar>
-      <xul:box class="stylesheet-editor-input textbox"
-               data-placeholder="&editorTextbox.placeholder;"/>
-    </xul:box>
-  </div> <!-- #splitview-templates -->
-</xul:box>   <!-- .splitview-root -->
+    <div id="splitview-templates" hidden="true">
+      <li id="splitview-tpl-summary-stylesheet" tabindex="0">
+        <a class="stylesheet-enabled" tabindex="0" href="#"
+          title="&visibilityToggle.tooltip;"
+          accesskey="&saveButton.accesskey;"></a>
+        <hgroup class="stylesheet-info">
+          <h1><a class="stylesheet-name" href="#"><xul:label crop="start"/></a></h1>
+          <div class="stylesheet-more">
+            <h3 class="stylesheet-title"></h3>
+            <h3 class="stylesheet-rule-count"></h3>
+            <h3 class="stylesheet-error-message"></h3>
+            <xul:spacer/>
+            <h3><a class="stylesheet-saveButton" href="#"
+                  title="&saveButton.tooltip;"
+                  accesskey="&saveButton.accesskey;">&saveButton.label;</a></h3>
+          </div>
+        </hgroup>
+      </li>
 
-<xul:script type="application/javascript"><![CDATA[
-Components.utils.import("resource:///modules/devtools/StyleEditorChrome.jsm");
-let chromeRoot = document.getElementById("style-editor-chrome");
-let args = window.arguments[0].wrappedJSObject;
-let contentWindow = args.contentWindow;
-let chrome = new StyleEditorChrome(chromeRoot, contentWindow);
-chrome.selectStyleSheet(args.selectedStyleSheet, args.line, args.col);
-window.styleEditorChrome = chrome;
-]]></xul:script>
+      <xul:box id="splitview-tpl-details-stylesheet" class="splitview-details">
+        <xul:resizer class="splitview-portrait-resizer"
+                    dir="bottom"
+                    element="splitview-resizer-target"/>
+        <xul:toolbar id="splitview-details-toolbar" class="devtools-toolbar">
+          <xul:resizer class="splitview-landscape-resizer"
+                      dir="bottomend"
+                      element="splitview-resizer-target"/>
+        </xul:toolbar>
+        <xul:box class="stylesheet-editor-input textbox"
+                data-placeholder="&editorTextbox.placeholder;"/>
+      </xul:box>
+    </div> <!-- #splitview-templates -->
+  </xul:box>   <!-- .splitview-root -->
 </xul:window>
diff --git a/browser/devtools/styleeditor/test/Makefile.in b/browser/devtools/styleeditor/test/Makefile.in
--- a/browser/devtools/styleeditor/test/Makefile.in
+++ b/browser/devtools/styleeditor/test/Makefile.in
@@ -18,19 +18,21 @@ include $(topsrcdir)/config/rules.mk
                  browser_styleeditor_cmd_edit.html \
                  browser_styleeditor_import.js \
                  browser_styleeditor_init.js \
                  browser_styleeditor_loading.js \
                  browser_styleeditor_new.js \
                  browser_styleeditor_passedinsheet.js \
                  browser_styleeditor_pretty.js \
                  browser_styleeditor_readonly.js \
-		 $(filter disabled-for-intermittent-failures--bug-707891, browser_styleeditor_reopen.js) \
+                 $(filter disabled-for-intermittent-failures--bug-707891, browser_styleeditor_reopen.js) \
                  browser_styleeditor_sv_keynav.js \
                  browser_styleeditor_sv_resize.js \
+                 head.js \
+                 helpers.js \
                  four.html \
                  head.js \
                  helpers.js \
                  media.html \
                  media-small.css \
                  minified.html \
                  resources_inpage.jsi \
                  resources_inpage1.css \
diff --git a/browser/devtools/styleeditor/test/browser_styleeditor_init.js b/browser/devtools/styleeditor/test/browser_styleeditor_init.js
--- a/browser/devtools/styleeditor/test/browser_styleeditor_init.js
+++ b/browser/devtools/styleeditor/test/browser_styleeditor_init.js
@@ -27,29 +27,21 @@ function run(aChrome)
 {
   gContentAttachHandled = true;
   is(aChrome.contentWindow.document.readyState, "complete",
      "content document is complete");
 
   let SEC = gChromeWindow.styleEditorChrome;
   is(SEC, aChrome, "StyleEditorChrome object exists as new window property");
 
-  ok(gChromeWindow.document.title.indexOf("simple testcase") >= 0,
-     "the Style Editor window title contains the document's title");
-
   // check editors are instantiated
   is(SEC.editors.length, 2,
      "there is two StyleEditor instances managed");
   ok(SEC.editors[0].styleSheetIndex < SEC.editors[1].styleSheetIndex,
      "editors are ordered by styleSheetIndex");
-
-  // check StyleEditorChrome is a singleton wrt to the same DOMWindow
-  let chromeWindow = StyleEditor.openChrome();
-  is(chromeWindow, gChromeWindow,
-     "attempt to edit the same document returns the same Style Editor window");
 }
 
 let gEditorAddedCount = 0;
 function testEditorAdded(aChrome, aEditor)
 {
   if (!gEditorAddedCount) {
     is(gContentAttachHandled, true,
        "ContentAttach event triggered before EditorAdded");
diff --git a/browser/devtools/styleeditor/test/browser_styleeditor_loading.js b/browser/devtools/styleeditor/test/browser_styleeditor_loading.js
--- a/browser/devtools/styleeditor/test/browser_styleeditor_loading.js
+++ b/browser/devtools/styleeditor/test/browser_styleeditor_loading.js
@@ -10,41 +10,42 @@ function test()
   waitForExplicitFinish();
 
   gBrowser.selectedTab = gBrowser.addTab();
 
   // launch Style Editor right when the tab is created (before load)
   // this checks that the Style Editor still launches correctly when it is opened
   // *while* the page is still loading
   launchStyleEditorChrome(function (aChrome) {
-    isnot(gBrowser.selectedBrowser.contentWindow.document.readyState, "complete",
-          "content document is still loading");
+    content.location = TESTCASE_URI;
+    executeSoon(function() {
+      isnot(gBrowser.selectedBrowser.contentWindow.document.readyState, "complete",
+            "content document is still loading");
 
-    let root = gChromeWindow.document.querySelector(".splitview-root");
-    ok(root.classList.contains("loading"),
-       "style editor root element has 'loading' class name");
+      let root = gChromeWindow.document.querySelector(".splitview-root");
+      ok(root.classList.contains("loading"),
+        "style editor root element has 'loading' class name");
 
-    let button = gChromeWindow.document.querySelector(".style-editor-newButton");
-    ok(button.hasAttribute("disabled"),
-       "new style sheet button is disabled");
+      let button = gChromeWindow.document.querySelector(".style-editor-newButton");
+      ok(button.hasAttribute("disabled"),
+        "new style sheet button is disabled");
 
-    button = gChromeWindow.document.querySelector(".style-editor-importButton");
-    ok(button.hasAttribute("disabled"),
-       "import button is disabled");
+      button = gChromeWindow.document.querySelector(".style-editor-importButton");
+      ok(button.hasAttribute("disabled"),
+        "import button is disabled");
 
-    if (!aChrome.isContentAttached) {
-      aChrome.addChromeListener({
-        onContentAttach: run
-      });
-    } else {
-      run(aChrome);
-    }
+      if (!aChrome.isContentAttached) {
+        aChrome.addChromeListener({
+          onContentAttach: run
+        });
+      } else {
+        run(aChrome);
+      }
+    });
   });
-
-  content.location = TESTCASE_URI;
 }
 
 function run(aChrome)
 {
   is(aChrome.contentWindow.document.readyState, "complete",
      "content document is complete");
 
   let root = gChromeWindow.document.querySelector(".splitview-root");
diff --git a/browser/devtools/styleeditor/test/browser_styleeditor_passedinsheet.js b/browser/devtools/styleeditor/test/browser_styleeditor_passedinsheet.js
--- a/browser/devtools/styleeditor/test/browser_styleeditor_passedinsheet.js
+++ b/browser/devtools/styleeditor/test/browser_styleeditor_passedinsheet.js
@@ -1,61 +1,58 @@
 /* vim: set ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 const TESTCASE_URI = TEST_BASE + "simple.html";
 const LINE = 6;
 const COL = 2;
 
-let editor = null;
-let sheet = null;
-
 function test()
 {
+  let editor = null;
+  let sheet = null;
+
   waitForExplicitFinish();
-  gBrowser.selectedBrowser.addEventListener("load", function () {
-    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
+
+  gBrowser.selectedTab = gBrowser.addTab();
+  gBrowser.selectedBrowser.addEventListener("load", function onLoad() {
+    gBrowser.selectedBrowser.removeEventListener("load", onLoad, true);
     run();
   }, true);
   content.location = TESTCASE_URI;
-}
 
-function run()
-{
-  sheet = content.document.styleSheets[1];
-  launchStyleEditorChrome(function attachListeners(aChrome) {
-    aChrome.addChromeListener({
-      onEditorAdded: checkSourceEditor
-    });
-  }, sheet, LINE, COL);
-}
+  function run()
+  {
+    sheet = content.document.styleSheets[1];
+    launchStyleEditorChrome(function attachListeners(aChrome) {
+      aChrome.addChromeListener({
+        onEditorAdded: checkSourceEditor
+      });
+    }, sheet, LINE, COL);
+  }
 
-function checkSourceEditor(aChrome, aEditor)
-{
-  if (!aEditor.sourceEditor) {
-    aEditor.addActionListener({
-      onAttach: function (aEditor) {
-        aEditor.removeActionListener(this);
-        validate(aEditor);
-      }
-    });
-  } else {
-    validate(aEditor);
+  function checkSourceEditor(aChrome, aEditor)
+  {
+    aChrome.removeChromeListener(this);
+    if (!aEditor.sourceEditor) {
+      aEditor.addActionListener({
+        onAttach: function (aEditor) {
+          aEditor.removeActionListener(this);
+          validate(aEditor);
+        }
+      });
+    } else {
+      validate(aEditor);
+    }
+  }
+
+  function validate(aEditor)
+  {
+    info("validating style editor");
+    let sourceEditor = aEditor.sourceEditor;
+    let caretPosition = sourceEditor.getCaretPosition();
+    is(caretPosition.line, LINE - 1, "caret row is correct"); // index based
+    is(caretPosition.col, COL - 1, "caret column is correct");
+    is(aEditor.styleSheet, sheet, "loaded stylesheet matches document stylesheet");
+    finish();
   }
 }
-
-function validate(aEditor)
-{
-  info("validating style editor");
-  let sourceEditor = aEditor.sourceEditor;
-  let caretPosition = sourceEditor.getCaretPosition();
-  is(caretPosition.line, LINE - 1, "caret row is correct"); // index based
-  is(caretPosition.col, COL - 1, "caret column is correct");
-  is(aEditor.styleSheet, sheet, "loaded stylesheet matches document stylesheet");
-  finishUp();
-}
-
-function finishUp()
-{
-  editor = sheet = null;
-  finish();
-}
diff --git a/browser/devtools/styleeditor/test/browser_styleeditor_private.js b/browser/devtools/styleeditor/test/browser_styleeditor_private.js
--- a/browser/devtools/styleeditor/test/browser_styleeditor_private.js
+++ b/browser/devtools/styleeditor/test/browser_styleeditor_private.js
@@ -14,28 +14,38 @@ function test() {
 
   function checkCache() {
     checkDiskCacheFor(TEST_HOST);
     pb.privateBrowsingEnabled = false;
     gPrefService.clearUserPref("browser.privatebrowsing.keep_current_session");
     finish();
   }
 
+  gBrowser.selectedTab = gBrowser.addTab();
+
   gBrowser.selectedBrowser.addEventListener("load", function onLoad() {
     gBrowser.selectedBrowser.removeEventListener("load", onLoad, true);
     cache.evictEntries(Ci.nsICache.STORE_ANYWHERE);
     launchStyleEditorChrome(function(aChrome) {
-      aChrome.addChromeListener({
-        onEditorAdded: function(aChrome, aEditor) {
-          if (aEditor.isLoaded) {
-            checkCache();
-          } else {
-            aEditor.addActionListener({
-              onLoad: checkCache
-            });
-          }
-        }
-      });
+      if (aChrome.isContentAttached) {
+        onEditorAdded(aChrome, aChrome.editors[0]);
+      } else {
+        aChrome.addChromeListener({
+          onEditorAdded: onEditorAdded
+        });
+      }
     });
   }, true);
 
+  function onEditorAdded(aChrome, aEditor) {
+    aChrome.removeChromeListener(this);
+
+    if (aEditor.isLoaded) {
+      checkCache();
+    } else {
+      aEditor.addActionListener({
+        onLoad: checkCache
+      });
+    }
+  }
+
   content.location = 'http://' + TEST_HOST + '/browser/browser/devtools/styleeditor/test/test_private.html';
 }
diff --git a/browser/devtools/styleeditor/test/browser_styleeditor_reopen.js b/browser/devtools/styleeditor/test/browser_styleeditor_reopen.js
--- a/browser/devtools/styleeditor/test/browser_styleeditor_reopen.js
+++ b/browser/devtools/styleeditor/test/browser_styleeditor_reopen.js
@@ -1,55 +1,62 @@
 /* vim: set ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
-// http rather than chrome to improve coverage
-const TESTCASE_URI = TEST_BASE_HTTP + "simple.gz.html";
+let tempScope = {};
+Cu.import("resource:///modules/devtools/Target.jsm", tempScope);
+let TargetFactory = tempScope.TargetFactory;
 
-const Cc = Components.classes;
-const Ci = Components.interfaces;
+function test() {
 
-let tempScope = {};
-Components.utils.import("resource://gre/modules/FileUtils.jsm", tempScope);
-let FileUtils = tempScope.FileUtils;
+  // http rather than chrome to improve coverage
+  const TESTCASE_URI = TEST_BASE_HTTP + "simple.gz.html";
 
+  const Cc = Components.classes;
+  const Ci = Components.interfaces;
 
-function test()
-{
+  let toolbox;
+  let tempScope = {};
+  Components.utils.import("resource://gre/modules/FileUtils.jsm", tempScope);
+  let FileUtils = tempScope.FileUtils;
+
+
   waitForExplicitFinish();
 
   addTabAndLaunchStyleEditorChromeWhenLoaded(function (aChrome) {
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    toolbox = gDevTools.getToolboxForTarget(target);
+
     aChrome.addChromeListener({
       onEditorAdded: function (aChrome, aEditor) {
         if (aEditor.styleSheetIndex != 0) {
           return; // we want to test against the first stylesheet
         }
 
         if (aEditor.sourceEditor) {
           run(aEditor); // already attached to input element
         } else {
           aEditor.addActionListener({
             onAttach: run
           });
         }
       }
     });
 
-    gChromeWindow.addEventListener("unload", function onClose() {
-      gChromeWindow.removeEventListener("unload", onClose, true);
+    toolbox.once("destroyed", function onClose() {
       gChromeWindow = null;
       executeSoon(function () {
         waitForFocus(function () {
           // wait that browser has focus again
           // open StyleEditorChrome again (a new one since we closed the previous one)
           launchStyleEditorChrome(function (aChrome) {
             is(gChromeWindow.document.documentElement.hasAttribute("data-marker"),
-               false,
-               "opened a completely new StyleEditorChrome window");
+              false,
+              "opened a completely new StyleEditorChrome window");
 
             aChrome.addChromeListener({
               onEditorAdded: function (aChrome, aEditor) {
                 if (aEditor.styleSheetIndex != 0) {
                   return; // we want to test against the first stylesheet
                 }
 
                 if (aEditor.sourceEditor) {
@@ -63,96 +70,96 @@ function test()
             });
           });
         });
       });
     }, true);
   });
 
   content.location = TESTCASE_URI;
-}
 
-let gFilename;
+  let gFilename;
 
-function run(aEditor)
-{
-  gFilename = FileUtils.getFile("ProfD", ["styleeditor-test.css"])
+  function run(aEditor)
+  {
+    gFilename = FileUtils.getFile("ProfD", ["styleeditor-test.css"])
 
-  aEditor.saveToFile(gFilename, function (aFile) {
-    ok(aFile, "file got saved successfully");
+    aEditor.saveToFile(gFilename, function (aFile) {
+      ok(aFile, "file got saved successfully");
 
-    aEditor.addActionListener({
-      onFlagChange: function (aEditor, aFlag) {
-        if (aFlag != "unsaved") {
-          return;
+      aEditor.addActionListener({
+        onFlagChange: function (aEditor, aFlag) {
+          if (aFlag != "unsaved") {
+            return;
+          }
+
+          ok(aEditor.hasFlag("unsaved"),
+            "first stylesheet has UNSAVED flag after making a change");
+
+          // marker used to check it does not exist when we reopen
+          // ie. the window we opened is indeed a new one
+          gChromeWindow.document.documentElement.setAttribute("data-marker", "true");
+          toolbox.destroy();
         }
+      });
 
-        ok(aEditor.hasFlag("unsaved"),
-           "first stylesheet has UNSAVED flag after making a change");
-
-        // marker used to check it does not exist when we reopen
-        // ie. the window we opened is indeed a new one
-        gChromeWindow.document.documentElement.setAttribute("data-marker", "true");
-        gChromeWindow.close();
-      }
-    });
-
-    waitForFocus(function () {
-      // insert char so that this stylesheet has the UNSAVED flag
-      EventUtils.synthesizeKey("x", {}, gChromeWindow);
-    }, gChromeWindow);
-  });
-}
-
-function testNewChrome(aEditor)
-{
-  ok(aEditor.savedFile,
-     "first stylesheet editor will save directly into the same file");
-
-  is(aEditor.getFriendlyName(), gFilename.leafName,
-     "first stylesheet still has the filename as it was saved");
-  gFilename = null;
-
-  ok(aEditor.hasFlag("unsaved"),
-     "first stylesheet still has UNSAVED flag at reopening");
-
-  ok(!aEditor.hasFlag("inline"),
-     "first stylesheet does not have INLINE flag");
-
-  ok(!aEditor.hasFlag("error"),
-     "editor does not have error flag initially");
-  let hadError = false;
-
-  let onSaveCallback = function (aFile) {
-    aEditor.addActionListener({
-      onFlagChange: function (aEditor, aFlag) {
-        if (!hadError && aFlag == "error") {
-          ok(aEditor.hasFlag("error"),
-             "editor has ERROR flag after attempting to save with invalid path");
-          hadError = true;
-
-          // save using source editor key binding (previous successful path)
-          waitForFocus(function () {
-            EventUtils.synthesizeKey("S", {accelKey: true}, gChromeWindow);
-          }, gChromeWindow);
-          return;
-        }
-
-        if (hadError && aFlag == "unsaved") {
-          executeSoon(function () {
-            ok(!aEditor.hasFlag("unsaved"),
-               "first stylesheet has no UNSAVED flag after successful save");
-            ok(!aEditor.hasFlag("error"),
-               "ERROR flag has been removed since last operation succeeded");
-            finish();
-          });
-        }
-      }
+      waitForFocus(function () {
+        // insert char so that this stylesheet has the UNSAVED flag
+        EventUtils.synthesizeKey("x", {}, gChromeWindow);
+      }, gChromeWindow);
     });
   }
 
-  let os = Cc["@mozilla.org/xre/app-info;1"].getService(Ci.nsIXULRuntime).OS;
-  if (os == "WINNT") {
-    aEditor.saveToFile("C:\\I_DO_NOT_EXIST_42\\bogus.css", onSaveCallback);
-  } else {
-    aEditor.saveToFile("/I_DO_NOT_EXIST_42/bogos.css", onSaveCallback);
+  function testNewChrome(aEditor)
+  {
+    ok(aEditor.savedFile,
+      "first stylesheet editor will save directly into the same file");
+
+    is(aEditor.getFriendlyName(), gFilename.leafName,
+      "first stylesheet still has the filename as it was saved");
+    gFilename = null;
+
+    ok(aEditor.hasFlag("unsaved"),
+      "first stylesheet still has UNSAVED flag at reopening");
+
+    ok(!aEditor.hasFlag("inline"),
+      "first stylesheet does not have INLINE flag");
+
+    ok(!aEditor.hasFlag("error"),
+      "editor does not have error flag initially");
+    let hadError = false;
+
+    let onSaveCallback = function (aFile) {
+      aEditor.addActionListener({
+        onFlagChange: function (aEditor, aFlag) {
+          if (!hadError && aFlag == "error") {
+            ok(aEditor.hasFlag("error"),
+              "editor has ERROR flag after attempting to save with invalid path");
+            hadError = true;
+
+            // save using source editor key binding (previous successful path)
+            waitForFocus(function () {
+              EventUtils.synthesizeKey("S", {accelKey: true}, gChromeWindow);
+            }, gChromeWindow);
+            return;
+          }
+
+          if (hadError && aFlag == "unsaved") {
+            executeSoon(function () {
+              ok(!aEditor.hasFlag("unsaved"),
+                "first stylesheet has no UNSAVED flag after successful save");
+              ok(!aEditor.hasFlag("error"),
+                "ERROR flag has been removed since last operation succeeded");
+              finish();
+            });
+          }
+        }
+      });
+    }
+
+    let os = Cc["@mozilla.org/xre/app-info;1"].getService(Ci.nsIXULRuntime).OS;
+    if (os == "WINNT") {
+      aEditor.saveToFile("C:\\I_DO_NOT_EXIST_42\\bogus.css", onSaveCallback);
+    } else {
+      aEditor.saveToFile("/I_DO_NOT_EXIST_42/bogos.css", onSaveCallback);
+    }
   }
 }
diff --git a/browser/devtools/styleeditor/test/head.js b/browser/devtools/styleeditor/test/head.js
--- a/browser/devtools/styleeditor/test/head.js
+++ b/browser/devtools/styleeditor/test/head.js
@@ -1,48 +1,59 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 const TEST_BASE = "chrome://mochitests/content/browser/browser/devtools/styleeditor/test/";
 const TEST_BASE_HTTP = "http://example.com/browser/browser/devtools/styleeditor/test/";
 const TEST_BASE_HTTPS = "https://example.com/browser/browser/devtools/styleeditor/test/";
 const TEST_HOST = 'mochi.test:8888';
 
+let tempScope = {};
+Cu.import("resource:///modules/devtools/Target.jsm", tempScope);
+let TargetFactory = tempScope.TargetFactory;
+
 let gChromeWindow;               //StyleEditorChrome window
 let cache = Cc["@mozilla.org/network/cache-service;1"]
               .getService(Ci.nsICacheService);
 
 
 // Import the GCLI test helper
 let testDir = gTestPath.substr(0, gTestPath.lastIndexOf("/"));
 Services.scriptloader.loadSubScript(testDir + "/helpers.js", this);
 
 function cleanup()
 {
-  if (gChromeWindow) {
-    gChromeWindow.close();
-    gChromeWindow = null;
-  }
+  gChromeWindow = null;
   while (gBrowser.tabs.length > 1) {
     gBrowser.removeCurrentTab();
   }
 }
 
 function launchStyleEditorChrome(aCallback, aSheet, aLine, aCol)
 {
-  gChromeWindow = StyleEditor.openChrome(aSheet, aLine, aCol);
-  if (gChromeWindow.document.readyState != "complete") {
-    gChromeWindow.addEventListener("load", function onChromeLoad() {
-      gChromeWindow.removeEventListener("load", onChromeLoad, true);
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+
+  let panel = gDevTools.getPanelForTarget("styleeditor", target);
+  if (panel && panel.isReady) {
+    gChromeWindow = panel._panelWin;
+    gChromeWindow.styleEditorChrome._alwaysDisableAnimations = true;
+    if (aSheet) {
+      panel.selectStyleSheet(aSheet, aLine, aCol);
+    }
+    aCallback(gChromeWindow.styleEditorChrome);
+  } else {
+    let toolbox = gDevTools.openToolboxForTab(target, "styleeditor");
+    toolbox.once("styleeditor-ready", function(event, panel) {
+      gChromeWindow = panel._panelWin;
       gChromeWindow.styleEditorChrome._alwaysDisableAnimations = true;
+      if (aSheet) {
+        panel.selectStyleSheet(aSheet, aLine, aCol);
+      }
       aCallback(gChromeWindow.styleEditorChrome);
-    }, true);
-  } else {
-    gChromeWindow.styleEditorChrome._alwaysDisableAnimations = true;
-    aCallback(gChromeWindow.styleEditorChrome);
+    });
   }
 }
 
 function launchStyleEditorChromeFromWindow(aWindow, aCallback, aSheet, aLine, aCol)
 {
   gChromeWindow = aWindow.StyleEditor.openChrome(aSheet, aLine, aCol);
   if (gChromeWindow.document.readyState != "complete") {
     gChromeWindow.addEventListener("load", function onChromeLoad() {
diff --git a/browser/devtools/styleinspector/CssHtmlTree.jsm b/browser/devtools/styleinspector/CssHtmlTree.jsm
--- a/browser/devtools/styleinspector/CssHtmlTree.jsm
+++ b/browser/devtools/styleinspector/CssHtmlTree.jsm
@@ -12,16 +12,20 @@ const FILTER_CHANGED_TIMEOUT = 300;
 const HTML_NS = "http://www.w3.org/1999/xhtml";
 const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
 
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/PluralForm.jsm");
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 Cu.import("resource:///modules/devtools/CssLogic.jsm");
 Cu.import("resource:///modules/devtools/Templater.jsm");
+Cu.import("resource:///modules/devtools/StyleEditorDefinition.jsm");
+
+XPCOMUtils.defineLazyModuleGetter(this, "gDevTools",
+                                  "resource:///modules/devtools/gDevTools.jsm");
 
 this.EXPORTED_SYMBOLS = ["CssHtmlTree", "PropertyView"];
 
 /**
  * Helper for long-running processes that should yield occasionally to
  * the mainloop.
  *
  * @param {Window} aWin
@@ -113,34 +117,33 @@ UpdateProcess.prototype = {
  * There should be one instance of CssHtmlTree per style display (of which there
  * will generally only be one).
  *
  * @params {StyleInspector} aStyleInspector The owner of this CssHtmlTree
  * @constructor
  */
 this.CssHtmlTree = function CssHtmlTree(aStyleInspector)
 {
-  this.styleWin = aStyleInspector.iframe;
+  this.styleWindow = aStyleInspector.window;
+  this.styleDocument = aStyleInspector.window.document;
   this.styleInspector = aStyleInspector;
   this.cssLogic = aStyleInspector.cssLogic;
-  this.doc = aStyleInspector.document;
-  this.win = aStyleInspector.window;
-  this.getRTLAttr = this.win.getComputedStyle(this.win.gBrowser).direction;
   this.propertyViews = [];
 
+  let chromeReg = Cc["@mozilla.org/chrome/chrome-registry;1"].
+    getService(Ci.nsIXULChromeRegistry);
+  this.getRTLAttr = chromeReg.isLocaleRTL("global") ? "rtl" : "ltr";
+
   // Create bound methods.
   this.siBoundMenuUpdate = this.computedViewMenuUpdate.bind(this);
   this.siBoundCopy = this.computedViewCopy.bind(this);
   this.siBoundCopyDeclaration = this.computedViewCopyDeclaration.bind(this);
   this.siBoundCopyProperty = this.computedViewCopyProperty.bind(this);
   this.siBoundCopyPropertyValue = this.computedViewCopyPropertyValue.bind(this);
 
-  // The document in which we display the results (csshtmltree.xul).
-  this.styleDocument = this.styleWin.contentWindow.document;
-
   this.styleDocument.addEventListener("copy", this.siBoundCopy);
 
   // Nodes used in templating
   this.root = this.styleDocument.getElementById("root");
   this.templateRoot = this.styleDocument.getElementById("templateRoot");
   this.propertyContainer = this.styleDocument.getElementById("propertyContainer");
   this.panel = aStyleInspector.panel;
 
@@ -261,18 +264,18 @@ CssHtmlTree.prototype = {
       }
 
       CssHtmlTree.processTemplate(this.templateRoot, this.root, this);
 
       // Refresh source filter ... this must be done after templateRoot has been
       // processed.
       this.refreshSourceFilter();
       this.numVisibleProperties = 0;
-      let fragment = this.doc.createDocumentFragment();
-      this._refreshProcess = new UpdateProcess(this.win, CssHtmlTree.propertyNames, {
+      let fragment = this.styleDocument.createDocumentFragment();
+      this._refreshProcess = new UpdateProcess(this.styleWindow, CssHtmlTree.propertyNames, {
         onItem: function(aPropertyName) {
           // Per-item callback.
           let propView = new PropertyView(this, aPropertyName);
           fragment.appendChild(propView.buildMain());
           fragment.appendChild(propView.buildSelectorContainer());
 
           if (propView.visible) {
             this.numVisibleProperties++;
@@ -322,17 +325,17 @@ CssHtmlTree.prototype = {
 
     // Reset visible property count
     this.numVisibleProperties = 0;
 
     // Reset zebra striping.
     this._darkStripe = true;
 
     let display = this.propertyContainer.style.display;
-    this._refreshProcess = new UpdateProcess(this.win, this.propertyViews, {
+    this._refreshProcess = new UpdateProcess(this.styleWindow, this.propertyViews, {
       onItem: function(aPropView) {
         aPropView.refresh();
       }.bind(this),
       onDone: function() {
         this._refreshProcess = null;
         this.noResults.hidden = this.numVisibleProperties > 0;
         Services.obs.notifyObservers(null, "StyleInspector-populated", null);
       }.bind(this)
@@ -342,17 +345,17 @@ CssHtmlTree.prototype = {
 
   /**
    * Called when the user enters a search term.
    *
    * @param {Event} aEvent the DOM Event object.
    */
   filterChanged: function CssHtmlTree_filterChanged(aEvent)
   {
-    let win = this.styleWin.contentWindow;
+    let win = this.styleWindow;
 
     if (this._filterChangedTimeout) {
       win.clearTimeout(this._filterChangedTimeout);
     }
 
     this._filterChangedTimeout = win.setTimeout(function() {
       this.refreshPanel();
       this._filterChangeTimeout = null;
@@ -392,17 +395,17 @@ CssHtmlTree.prototype = {
     if (CssHtmlTree.propertyNames) {
       return;
     }
 
     CssHtmlTree.propertyNames = [];
 
     // Here we build and cache a list of css properties supported by the browser
     // We could use any element but let's use the main document's root element
-    let styles = this.styleWin.contentWindow.getComputedStyle(this.styleDocument.documentElement);
+    let styles = this.styleWindow.getComputedStyle(this.styleDocument.documentElement);
     let mozProps = [];
     for (let i = 0, numStyles = styles.length; i < numStyles; i++) {
       let prop = styles.item(i);
       if (prop.charAt(0) == "-") {
         mozProps.push(prop);
       } else {
         CssHtmlTree.propertyNames.push(prop);
       }
@@ -463,95 +466,99 @@ CssHtmlTree.prototype = {
     return this._unmatchedProperties[aProperty];
   },
 
   /**
    * Create a context menu.
    */
   createContextMenu: function SI_createContextMenu()
   {
-    let popupSet = this.doc.getElementById("mainPopupSet");
+    let iframe = this.styleInspector.outerIFrame;
+    let outerDoc = iframe.ownerDocument;
 
-    let menu = this.doc.createElement("menupopup");
+    let popupSet = outerDoc.getElementById("inspectorPopupSet");
+
+    let menu = outerDoc.createElement("menupopup");
     menu.addEventListener("popupshowing", this.siBoundMenuUpdate);
     menu.id = "computed-view-context-menu";
     popupSet.appendChild(menu);
 
     // Copy selection
     let label = CssHtmlTree.l10n("style.contextmenu.copyselection");
     let accessKey = CssHtmlTree.l10n("style.contextmenu.copyselection.accesskey");
-    let item = this.doc.createElement("menuitem");
+    let item = outerDoc.createElement("menuitem");
     item.id = "computed-view-copy";
     item.setAttribute("label", label);
     item.setAttribute("accesskey", accessKey);
     item.addEventListener("command", this.siBoundCopy);
     menu.appendChild(item);
 
     // Copy declaration
     label = CssHtmlTree.l10n("style.contextmenu.copydeclaration");
     accessKey = CssHtmlTree.l10n("style.contextmenu.copydeclaration.accesskey");
-    item = this.doc.createElement("menuitem");
+    item = outerDoc.createElement("menuitem");
     item.id = "computed-view-copy-declaration";
     item.setAttribute("label", label);
     item.setAttribute("accesskey", accessKey);
     item.addEventListener("command", this.siBoundCopyDeclaration);
     menu.appendChild(item);
 
     // Copy property name
     label = CssHtmlTree.l10n("style.contextmenu.copyproperty");
     accessKey = CssHtmlTree.l10n("style.contextmenu.copyproperty.accesskey");
-    item = this.doc.createElement("menuitem");
+    item = outerDoc.createElement("menuitem");
     item.id = "computed-view-copy-property";
     item.setAttribute("label", label);
     item.setAttribute("accesskey", accessKey);
     item.addEventListener("command", this.siBoundCopyProperty);
     menu.appendChild(item);
 
     // Copy property value
     label = CssHtmlTree.l10n("style.contextmenu.copypropertyvalue");
     accessKey = CssHtmlTree.l10n("style.contextmenu.copypropertyvalue.accesskey");
-    item = this.doc.createElement("menuitem");
+    item = outerDoc.createElement("menuitem");
     item.id = "computed-view-copy-property-value";
     item.setAttribute("label", label);
     item.setAttribute("accesskey", accessKey);
     item.addEventListener("command", this.siBoundCopyPropertyValue);
     menu.appendChild(item);
 
-    this.styleWin.setAttribute("context", menu.id);
+    iframe.setAttribute("context", menu.id);
   },
 
   /**
    * Update the context menu by disabling irrelevant menuitems and enabling
    * relevant ones.
    */
   computedViewMenuUpdate: function si_computedViewMenuUpdate()
   {
-    let win = this.styleDocument.defaultView;
-    let disable = win.getSelection().isCollapsed;
-    let menuitem = this.doc.querySelector("#computed-view-copy");
+    let disable = this.styleWindow.getSelection().isCollapsed;
+
+    let outerDoc = this.styleInspector.outerIFrame.ownerDocument;
+    let menuitem = outerDoc.querySelector("#computed-view-copy");
     menuitem.disabled = disable;
 
-    let node = this.doc.popupNode;
+    let node = outerDoc.popupNode;
     if (!node) {
       return;
     }
 
     if (!node.classList.contains("property-view")) {
       while (node = node.parentElement) {
         if (node.classList.contains("property-view")) {
           break;
         }
       }
     }
     let disablePropertyItems = !node;
-    menuitem = this.doc.querySelector("#computed-view-copy-declaration");
+    menuitem = outerDoc.querySelector("#computed-view-copy-declaration");
     menuitem.disabled = disablePropertyItems;
-    menuitem = this.doc.querySelector("#computed-view-copy-property");
+    menuitem = outerDoc.querySelector("#computed-view-copy-property");
     menuitem.disabled = disablePropertyItems;
-    menuitem = this.doc.querySelector("#computed-view-copy-property-value");
+    menuitem = outerDoc.querySelector("#computed-view-copy-property-value");
     menuitem.disabled = disablePropertyItems;
   },
 
   /**
    * Copy selected text.
    *
    * @param aEvent The event object
    */
@@ -561,97 +568,101 @@ CssHtmlTree.prototype = {
     let text = win.getSelection().toString();
 
     // Tidy up block headings by moving CSS property names and their values onto
     // the same line and inserting a colon between them.
     text = text.replace(/\t(.+)\t\t(.+)/g, "$1: $2");
 
     // Remove any MDN link titles
     text = text.replace(CssHtmlTree.HELP_LINK_TITLE, "");
-    clipboardHelper.copyString(text, this.doc);
+    let outerDoc = this.styleInspector.outerIFrame.ownerDocument;
+    clipboardHelper.copyString(text, outerDoc);
 
     if (aEvent) {
       aEvent.preventDefault();
     }
   },
 
   /**
    * Copy declaration.
    *
    * @param aEvent The event object
    */
   computedViewCopyDeclaration: function si_computedViewCopyDeclaration(aEvent)
   {
-    let node = this.doc.popupNode;
+    let outerDoc = this.styleInspector.outerIFrame.ownerDocument;
+    let node = outerDoc.popupNode;
     if (!node) {
       return;
     }
 
     if (!node.classList.contains("property-view")) {
       while (node = node.parentElement) {
         if (node.classList.contains("property-view")) {
           break;
         }
       }
     }
     if (node) {
       let name = node.querySelector(".property-name").textContent;
       let value = node.querySelector(".property-value").textContent;
 
-      clipboardHelper.copyString(name + ": " + value + ";", this.doc);
+      clipboardHelper.copyString(name + ": " + value + ";", outerDoc);
     }
   },
 
   /**
    * Copy property name.
    *
    * @param aEvent The event object
    */
   computedViewCopyProperty: function si_computedViewCopyProperty(aEvent)
   {
-    let node = this.doc.popupNode;
+    let outerDoc = this.styleInspector.outerIFrame.ownerDocument;
+    let node = outerDoc.popupNode;
     if (!node) {
       return;
     }
 
     if (!node.classList.contains("property-view")) {
       while (node = node.parentElement) {
         if (node.classList.contains("property-view")) {
           break;
         }
       }
     }
     if (node) {
       node = node.querySelector(".property-name");
-      clipboardHelper.copyString(node.textContent, this.doc);
+      clipboardHelper.copyString(node.textContent, outerDoc);
     }
   },
 
   /**
    * Copy property value.
    *
    * @param aEvent The event object
    */
   computedViewCopyPropertyValue: function si_computedViewCopyPropertyValue(aEvent)
   {
-    let node = this.doc.popupNode;
+    let outerDoc = this.styleInspector.outerIFrame.ownerDocument;
+    let node = outerDoc.popupNode;
     if (!node) {
       return;
     }
 
     if (!node.classList.contains("property-view")) {
       while (node = node.parentElement) {
         if (node.classList.contains("property-view")) {
           break;
         }
       }
     }
     if (node) {
       node = node.querySelector(".property-value");
-      clipboardHelper.copyString(node.textContent, this.doc);
+      clipboardHelper.copyString(node.textContent, outerDoc);
     }
   },
 
   /**
    * Destructor for CssHtmlTree.
    */
   destroy: function CssHtmlTree_destroy()
   {
@@ -663,32 +674,33 @@ CssHtmlTree.prototype = {
     this.searchField.removeEventListener("command", this.filterChanged);
 
     // Cancel tree construction
     if (this._refreshProcess) {
       this._refreshProcess.cancel();
     }
 
     // Remove context menu
-    let menu = this.doc.querySelector("#computed-view-context-menu");
+    let outerDoc = this.styleInspector.outerIFrame.ownerDocument;
+    let menu = outerDoc.querySelector("#computed-view-context-menu");
     if (menu) {
       // Copy selected
-      let menuitem = this.doc.querySelector("#computed-view-copy");
+      let menuitem = outerDoc.querySelector("#computed-view-copy");
       menuitem.removeEventListener("command", this.siBoundCopy);
 
       // Copy property
-      menuitem = this.doc.querySelector("#computed-view-copy-declaration");
+      menuitem = outerDoc.querySelector("#computed-view-copy-declaration");
       menuitem.removeEventListener("command", this.siBoundCopyDeclaration);
 
       // Copy property name
-      menuitem = this.doc.querySelector("#computed-view-copy-property");
+      menuitem = outerDoc.querySelector("#computed-view-copy-property");
       menuitem.removeEventListener("command", this.siBoundCopyProperty);
 
       // Copy property value
-      menuitem = this.doc.querySelector("#computed-view-copy-property-value");
+      menuitem = outerDoc.querySelector("#computed-view-copy-property-value");
       menuitem.removeEventListener("command", this.siBoundCopyPropertyValue);
 
       menu.removeEventListener("popupshowing", this.siBoundMenuUpdate);
       menu.parentNode.removeChild(menu);
     }
 
     // Remove bound listeners
     this.styleDocument.removeEventListener("copy", this.siBoundCopy);
@@ -698,20 +710,19 @@ CssHtmlTree.prototype = {
     delete this.propertyContainer;
     delete this.panel;
 
     // The document in which we display the results (csshtmltree.xul).
     delete this.styleDocument;
 
     // The element that we're inspecting, and the document that it comes from.
     delete this.propertyViews;
-    delete this.styleWin;
+    delete this.styleWindow;
+    delete this.styleDocument;
     delete this.cssLogic;
-    delete this.doc;
-    delete this.win;
     delete this.styleInspector;
   },
 };
 
 /**
  * A container to give easy access to property data from the template engine.
  *
  * @constructor
@@ -857,17 +868,17 @@ PropertyView.prototype = {
                       "property-content darkrow" : "property-content";
       return darkValue;
     }
     return "property-content-hidden";
   },
 
   buildMain: function PropertyView_buildMain()
   {
-    let doc = this.tree.doc;
+    let doc = this.tree.styleDocument;
     this.element = doc.createElementNS(HTML_NS, "tr");
     this.element.setAttribute("class", this.propertyHeaderClassName);
 
     this.expanderContainer = doc.createElementNS(HTML_NS, "td");
     this.element.appendChild(this.expanderContainer);
     this.expanderContainer.setAttribute("class", "expander-container");
 
     this.matchedExpander = doc.createElementNS(HTML_NS, "div");
@@ -912,17 +923,17 @@ PropertyView.prototype = {
     this.valueNode.setAttribute("dir", "ltr");
     this.valueNode.textContent = this.value;
 
     return this.element;
   },
 
   buildSelectorContainer: function PropertyView_buildSelectorContainer()
   {
-    let doc = this.tree.doc;
+    let doc = this.tree.styleDocument;
     let element = doc.createElementNS(HTML_NS, "tr");
     element.setAttribute("class", this.propertyContentClassName);
     this.matchedSelectorsContainer = doc.createElementNS(HTML_NS, "td");
     this.matchedSelectorsContainer.setAttribute("colspan", "0");
     this.matchedSelectorsContainer.setAttribute("class", "rulelink");
     element.appendChild(this.matchedSelectorsContainer);
 
     return element;
@@ -1081,17 +1092,22 @@ PropertyView.prototype = {
     aEvent.preventDefault();
   },
 
   /**
    * The action when a user clicks on the MDN help link for a property.
    */
   mdnLinkClick: function PropertyView_mdnLinkClick(aEvent)
   {
-    this.tree.win.openUILinkIn(this.link, "tab");
+    let inspector = this.tree.styleInspector.inspector;
+
+    if (inspector.target.tab) {
+      let browserWin = inspector.target.tab.ownerDocument.defaultView;
+      browserWin.openUILinkIn(this.link, "tab");
+    }
     aEvent.preventDefault();
   },
 };
 
 /**
  * A container to view us easy access to display data from a CssRule
  * @param CssHtmlTree aTree, the owning CssHtmlTree
  * @param aSelectorInfo
@@ -1192,53 +1208,70 @@ SelectorView.prototype = {
     let keyEvent = Ci.nsIDOMKeyEvent;
     if (aEvent.keyCode == keyEvent.DOM_VK_RETURN) {
       this.openStyleEditor();
     }
   },
 
   /**
    * When a css link is clicked this method is called in order to either:
-   *   1. Open the link in view source (for element style attributes).
+   *   1. Open the link in view source (for chrome stylesheets).
    *   2. Open the link in the style editor.
    *
-   *   Like the style editor, we only view stylesheets contained in
-   *   document.styleSheets inside the style editor.
+   *   We can only view stylesheets contained in document.styleSheets inside the
+   *   style editor.
    *
    * @param aEvent The click event
    */
   openStyleEditor: function(aEvent)
   {
-    let rule = this.selectorInfo.selector._cssRule;
-    let doc = this.tree.win.content.document;
+    let inspector = this.tree.styleInspector.inspector;
+    let contentDoc = inspector.selection.document;
+    let cssSheet = this.selectorInfo.selector._cssRule._cssSheet;
     let line = this.selectorInfo.ruleLine || 0;
-    let cssSheet = rule._cssSheet;
     let contentSheet = false;
     let styleSheet;
     let styleSheets;
 
+    // The style editor can only display stylesheets coming from content because
+    // chrome stylesheets are not listed in the editor's stylesheet selector.
+    //
+    // If the stylesheet is a content stylesheet we send it to the style
+    // editor else we display it in the view source window.
+    //
+    // We check if cssSheet exists in case of inline styles (which contain no
+    // sheet)
     if (cssSheet) {
       styleSheet = cssSheet.domSheet;
-      styleSheets = doc.styleSheets;
+      styleSheets = contentDoc.styleSheets;
 
       // Array.prototype.indexOf always returns -1 here so we loop through
       // the styleSheets array instead.
       for each (let sheet in styleSheets) {
         if (sheet == styleSheet) {
           contentSheet = true;
           break;
         }
       }
     }
 
     if (contentSheet) {
-      this.tree.win.StyleEditor.openChrome(styleSheet, line);
+      let target = inspector.target;
+
+      if (StyleEditorDefinition.isTargetSupported(target)) {
+        let toolbox = gDevTools.getToolboxForTarget(target);
+
+        toolbox.once("styleeditor-selected", function SE_selected(id, styleEditor) {
+          styleEditor.selectStyleSheet(styleSheet, line);
+        });
+        toolbox.selectTool("styleeditor");
+      }
     } else {
       let href = styleSheet ? styleSheet.href : "";
-      let viewSourceUtils = this.tree.win.gViewSourceUtils;
+      let viewSourceUtils = inspector.viewSourceUtils;
 
       if (this.selectorInfo.sourceElement) {
         href = this.selectorInfo.sourceElement.ownerDocument.location.href;
       }
-      viewSourceUtils.viewSource(href, null, doc, line);
+      viewSourceUtils.viewSource(href, null, contentDoc, line);
     }
   },
 };
diff --git a/browser/devtools/styleinspector/StyleInspector.jsm b/browser/devtools/styleinspector/StyleInspector.jsm
--- a/browser/devtools/styleinspector/StyleInspector.jsm
+++ b/browser/devtools/styleinspector/StyleInspector.jsm
@@ -6,230 +6,236 @@
 
 const Cc = Components.classes;
 const Cu = Components.utils;
 const Ci = Components.interfaces;
 
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 Cu.import("resource:///modules/devtools/CssRuleView.jsm");
-Cu.import("resource:///modules/inspector.jsm");
+Cu.import("resource:///modules/devtools/StyleEditorDefinition.jsm");
+
+XPCOMUtils.defineLazyModuleGetter(this, "gDevTools",
+                                  "resource:///modules/devtools/gDevTools.jsm");
 
 // This module doesn't currently export any symbols directly, it only
 // registers inspector tools.
-this.EXPORTED_SYMBOLS = [];
+this.EXPORTED_SYMBOLS = ["RuleViewTool", "ComputedViewTool"];
 
-/**
- * Lookup l10n string from a string bundle.
- * @param {string} aName The key to lookup.
- * @returns A localized version of the given key.
- */
-function l10n(aName)
-{
-  try {
-    return _strings.GetStringFromName(aName);
-  } catch (ex) {
-    Services.console.logStringMessage("Error reading '" + aName + "'");
-    throw new Error("l10n error with " + aName);
-  }
-}
-
-function RegisterStyleTools()
-{
-  // Register the rules view
-  if (Services.prefs.getBoolPref("devtools.ruleview.enabled")) {
-    InspectorUI.registerSidebar({
-      id: "ruleview",
-      label: l10n("ruleView.label"),
-      tooltiptext: l10n("ruleView.tooltiptext"),
-      accesskey: l10n("ruleView.accesskey"),
-      contentURL: "chrome://browser/content/devtools/cssruleview.xul",
-      load: function(aInspector, aFrame) new RuleViewTool(aInspector, aFrame),
-      destroy: function(aContext) aContext.destroy()
-    });
-  }
-
-  // Register the computed styles view
-  if (Services.prefs.getBoolPref("devtools.styleinspector.enabled")) {
-    InspectorUI.registerSidebar({
-      id: "computedview",
-      label: this.l10n("style.highlighter.button.label2"),
-      tooltiptext: this.l10n("style.highlighter.button.tooltip2"),
-      accesskey: this.l10n("style.highlighter.accesskey2"),
-      contentURL: "chrome://browser/content/devtools/csshtmltree.xul",
-      load: function(aInspector, aFrame) new ComputedViewTool(aInspector, aFrame),
-      destroy: function(aContext) aContext.destroy()
-    });
-  }
-}
-
-function RuleViewTool(aInspector, aFrame)
+this.RuleViewTool = function RVT_RuleViewTool(aInspector, aWindow, aIFrame)
 {
   this.inspector = aInspector;
-  this.chromeWindow = this.inspector.chromeWindow;
-  this.doc = aFrame.contentDocument;
+  this.doc = aWindow.document;
+  this.outerIFrame = aIFrame;
 
-  if (!this.inspector._ruleViewStore) {
-   this.inspector._ruleViewStore = {};
-  }
-  this.view = new CssRuleView(this.doc, this.inspector._ruleViewStore);
+  this.view = new CssRuleView(this.doc);
   this.doc.documentElement.appendChild(this.view.element);
 
   this._changeHandler = function() {
     this.inspector.markDirty();
-    this.inspector.change("ruleview");
   }.bind(this);
 
   this.view.element.addEventListener("CssRuleViewChanged", this._changeHandler)
 
   this._cssLinkHandler = function(aEvent) {
+    let contentDoc = this.inspector.selection.document;
     let rule = aEvent.detail.rule;
+    let line = rule.ruleLine || 0;
     let styleSheet = rule.sheet;
-    let doc = this.chromeWindow.content.document;
-    let styleSheets = doc.styleSheets;
+    let styleSheets = contentDoc.styleSheets;
     let contentSheet = false;
-    let line = rule.ruleLine || 0;
 
+    // The style editor can only display stylesheets coming from content because
+    // chrome stylesheets are not listed in the editor's stylesheet selector.
+    //
+    // If the stylesheet is a content stylesheet we send it to the style
+    // editor else we display it in the view source window.
+    //
     // Array.prototype.indexOf always returns -1 here so we loop through
     // the styleSheets object instead.
     for each (let sheet in styleSheets) {
       if (sheet == styleSheet) {
         contentSheet = true;
         break;
       }
     }
 
     if (contentSheet)  {
-      this.chromeWindow.StyleEditor.openChrome(styleSheet, line);
+      let target = this.inspector.target;
+
+      if (StyleEditorDefinition.isTargetSupported(target)) {
+        let toolbox = gDevTools.getToolboxForTarget(target);
+
+        toolbox.once("styleeditor-selected", function SE_selected(id, styleEditor) {
+          styleEditor.selectStyleSheet(styleSheet, line);
+        });
+        toolbox.selectTool("styleeditor");
+      }
     } else {
       let href = styleSheet ? styleSheet.href : "";
       if (rule.elementStyle.element) {
         href = rule.elementStyle.element.ownerDocument.location.href;
       }
-      let viewSourceUtils = this.chromeWindow.gViewSourceUtils;
-      viewSourceUtils.viewSource(href, null, doc, line);
+      let viewSourceUtils = this.inspector.viewSourceUtils;
+      viewSourceUtils.viewSource(href, null, contentDoc, line);
     }
   }.bind(this);
 
   this.view.element.addEventListener("CssRuleViewCSSLinkClicked",
                                      this._cssLinkHandler);
 
   this._onSelect = this.onSelect.bind(this);
-  this.inspector.on("select", this._onSelect);
-
-  this._onChange = this.onChange.bind(this);
-  this.inspector.on("change", this._onChange);
-  this.inspector.on("sidebaractivated-ruleview", this._onChange);
+  this.inspector.selection.on("new-node", this._onSelect);
+  this.refresh = this.refresh.bind(this);
+  this.inspector.on("layout-change", this.refresh);
+  this.inspector.sidebar.on("ruleview-selected", this.refresh);
+  this.inspector.selection.on("pseudoclass", this.refresh);
+  if (this.inspector.highlighter) {
+    this.inspector.highlighter.on("locked", this._onSelect);
+  }
 
   this.onSelect();
 }
 
 RuleViewTool.prototype = {
-  onSelect: function RVT_onSelect(aEvent, aFrom) {
-    let node = this.inspector.selection;
-    if (!node) {
+  onSelect: function RVT_onSelect(aEvent) {
+    if (!this.inspector.selection.isConnected() ||
+        !this.inspector.selection.isElementNode()) {
       this.view.highlight(null);
       return;
     }
 
-    if (this.inspector.locked) {
-      this.view.highlight(node);
+    if (!aEvent || aEvent == "new-node") {
+      if (this.inspector.selection.reason == "highlighter") {
+        this.view.highlight(null);
+      } else {
+        this.view.highlight(this.inspector.selection.node);
+      }
+    }
+
+    if (aEvent == "locked") {
+      this.view.highlight(this.inspector.selection.node);
     }
   },
 
-  onChange: function RVT_onChange(aEvent, aFrom) {
-    if (aFrom == "ruleview" || aFrom == "createpanel") {
-      return;
-    }
+  isActive: function RVT_isActive() {
+    return this.inspector.sidebar.getCurrentTabID() == "ruleview";
+  },
 
-    if (this.inspector.locked && this.inspector.isPanelVisible("ruleview")) {
+  refresh: function RVT_refresh() {
+    if (this.isActive()) {
       this.view.nodeChanged();
     }
   },
 
   destroy: function RVT_destroy() {
-    this.inspector.off("select", this._onSelect);
-    this.inspector.off("change", this._onChange);
-    this.inspector.off("sidebaractivated-ruleview", this._onChange);
+    this.inspector.off("layout-change", this.refresh);
+    this.inspector.sidebar.off("ruleview-selected", this.refresh);
+    this.inspector.selection.off("pseudoclass", this.refresh);
+    this.inspector.selection.off("new-node", this._onSelect);
+    if (this.inspector.highlighter) {
+      this.inspector.highlighter.off("locked", this._onSelect);
+    }
+
+    this.view.element.removeEventListener("CssRuleViewCSSLinkClicked",
+      this._cssLinkHandler);
+
     this.view.element.removeEventListener("CssRuleViewChanged",
-                                          this._changeHandler);
-    this.view.element.removeEventListener("CssRuleViewCSSLinkClicked",
-                                          this._cssLinkHandler);
+      this._changeHandler);
+
     this.doc.documentElement.removeChild(this.view.element);
 
     this.view.destroy();
 
-    delete this._changeHandler;
+    delete this.outerIFrame;
     delete this.view;
     delete this.doc;
     delete this.inspector;
   }
 }
 
-function ComputedViewTool(aInspector, aFrame)
+this.ComputedViewTool = function CVT_ComputedViewTool(aInspector, aWindow, aIFrame)
 {
   this.inspector = aInspector;
-  this.iframe = aFrame;
-  this.window = aInspector.chromeWindow;
-  this.document = this.window.document;
+  this.window = aWindow;
+  this.document = aWindow.document;
+  this.outerIFrame = aIFrame;
   this.cssLogic = new CssLogic();
   this.view = new CssHtmlTree(this);
 
   this._onSelect = this.onSelect.bind(this);
-  this.inspector.on("select", this._onSelect);
-  this._onChange = this.onChange.bind(this);
-  this.inspector.on("change", this._onChange);
-
-  // Since refreshes of the computed view are non-destructive,
-  // refresh when the tab is changed so we can notice script-driven
-  // changes.
-  this.inspector.on("sidebaractivated-computedview", this._onChange);
+  this.inspector.selection.on("new-node", this._onSelect);
+  if (this.inspector.highlighter) {
+    this.inspector.highlighter.on("locked", this._onSelect);
+  }
+  this.refresh = this.refresh.bind(this);
+  this.inspector.on("layout-change", this.refresh);
+  this.inspector.sidebar.on("computedview-selected", this.refresh);
+  this.inspector.selection.on("pseudoclass", this.refresh);
 
   this.cssLogic.highlight(null);
   this.view.highlight(null);
 
   this.onSelect();
 }
 
 ComputedViewTool.prototype = {
   onSelect: function CVT_onSelect(aEvent)
   {
-    if (this.inspector.locked) {
-      this.cssLogic.highlight(this.inspector.selection);
-      this.view.highlight(this.inspector.selection);
+    if (!this.inspector.selection.isConnected() ||
+        !this.inspector.selection.isElementNode()) {
+      // FIXME: We should hide view's content
+      return;
+    }
+
+    if (!aEvent || aEvent == "new-node") {
+      if (this.inspector.selection.reason == "highlighter") {
+        // FIXME: We should hide view's content
+      } else {
+        this.cssLogic.highlight(this.inspector.selection.node);
+        this.view.highlight(this.inspector.selection.node);
+      }
+    }
+
+    if (aEvent == "locked") {
+      this.cssLogic.highlight(this.inspector.selection.node);
+      this.view.highlight(this.inspector.selection.node);
     }
   },
 
-  onChange: function CVT_change(aEvent, aFrom)
-  {
-    if (aFrom == "computedview" ||
-        aFrom == "createpanel" ||
-        this.inspector.selection != this.cssLogic.viewedElement) {
-      return;
-    }
+  isActive: function CVT_isActive() {
+    return this.inspector.sidebar.getCurrentTabID() == "computedview";
+  },
 
-    if (this.inspector.locked && this.inspector.isPanelVisible("computedview")) {
-      this.cssLogic.highlight(this.inspector.selection);
+  refresh: function CVT_refresh() {
+    if (this.isActive()) {
+      this.cssLogic.highlight(this.inspector.selection.node);
       this.view.refreshPanel();
     }
   },
 
   destroy: function CVT_destroy(aContext)
   {
-    this.inspector.off("select", this._onSelect);
-    this.inspector.off("change", this._onChange);
-    this.inspector.off("sidebaractivated-computedview", this._onChange);
+    this.inspector.off("layout-change", this.refresh);
+    this.inspector.sidebar.off("computedview-selected", this.refresh);
+    this.inspector.selection.off("pseudoclass", this.refresh);
+    this.inspector.selection.off("new-node", this._onSelect);
+    if (this.inspector.highlighter) {
+      this.inspector.highlighter.off("locked", this._onSelect);
+    }
+
     this.view.destroy();
     delete this.view;
 
+    delete this.outerIFrame;
     delete this.cssLogic;
     delete this.cssHtmlTree;
-    delete this.iframe;
     delete this.window;
     delete this.document;
+    delete this.inspector;
   }
 }
 
 XPCOMUtils.defineLazyGetter(this, "_strings", function() Services.strings
   .createBundle("chrome://browser/locale/devtools/styleinspector.properties"));
 
 XPCOMUtils.defineLazyGetter(this, "CssLogic", function() {
   let tmp = {};
@@ -237,10 +243,8 @@ XPCOMUtils.defineLazyGetter(this, "CssLo
   return tmp.CssLogic;
 });
 
 XPCOMUtils.defineLazyGetter(this, "CssHtmlTree", function() {
   let tmp = {};
   Cu.import("resource:///modules/devtools/CssHtmlTree.jsm", tmp);
   return tmp.CssHtmlTree;
 });
-
-RegisterStyleTools();
diff --git a/browser/devtools/styleinspector/csshtmltree.xul b/browser/devtools/styleinspector/csshtmltree.xul
--- a/browser/devtools/styleinspector/csshtmltree.xul
+++ b/browser/devtools/styleinspector/csshtmltree.xul
@@ -19,17 +19,30 @@
   <!ATTLIST div _id CDATA #IMPLIED>
   <!ATTLIST div save CDATA #IMPLIED>
   <!ATTLIST table save CDATA #IMPLIED>
   <!ATTLIST loop if CDATA #IMPLIED>
   <!ATTLIST tr if CDATA #IMPLIED>
 ]>
 
 <xul:window xmlns="http://www.w3.org/1999/xhtml"
-            xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
+            xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
+            title="&computedViewTitle;">
+
+<script type="application/javascript;version=1.8">
+  window.setPanel = function(panel, iframe) {
+    Components.utils.import("resource:///modules/devtools/StyleInspector.jsm");
+    this.computedview = new ComputedViewTool(panel, window, iframe);
+  }
+  window.onunload = function() {
+    if (this.computedview) {
+      this.computedview.destroy();
+    }
+  }
+</script>
 
 <!-- The output from #templateRoot (below) is inserted here. -->
 <div id="root"></div>
 
 <!-- When no properties are found the following block is displayed. -->
 <div id="noResults" hidden="">
   &noPropertiesFound;
 </div>
diff --git a/browser/devtools/styleinspector/cssruleview.xul b/browser/devtools/styleinspector/cssruleview.xul
--- a/browser/devtools/styleinspector/cssruleview.xul
+++ b/browser/devtools/styleinspector/cssruleview.xul
@@ -4,9 +4,21 @@
    - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
 <?xml-stylesheet href="chrome://global/skin/global.css"?>
 <?xml-stylesheet href="chrome://browser/content/devtools/styleinspector.css" type="text/css"?>
 <?xml-stylesheet href="chrome://browser/skin/devtools/csshtmltree.css" type="text/css"?>
 <!DOCTYPE window [
   <!ENTITY % inspectorDTD SYSTEM "chrome://browser/locale/devtools/styleinspector.dtd">
   %inspectorDTD;
 ]>
-<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"/>
+<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" title="&ruleViewTitle;">
+  <script type="application/javascript;version=1.8">
+    window.setPanel = function(panel, iframe) {
+      Components.utils.import("resource:///modules/devtools/StyleInspector.jsm");
+      this.ruleview = new RuleViewTool(panel, window, iframe);
+    }
+    window.onunload = function() {
+      if (this.ruleview) {
+        this.ruleview.destroy();
+      }
+    }
+  </script>
+</window>
diff --git a/browser/devtools/styleinspector/test/Makefile.in b/browser/devtools/styleinspector/test/Makefile.in
--- a/browser/devtools/styleinspector/test/Makefile.in
+++ b/browser/devtools/styleinspector/test/Makefile.in
@@ -11,37 +11,37 @@ relativesrcdir  = @relativesrcdir@
 
 include $(DEPTH)/config/autoconf.mk
 
 MOCHITEST_BROWSER_FILES = \
   browser_styleinspector.js \
   browser_bug683672.js \
   browser_styleinspector_bug_672746_default_styles.js \
   browser_styleinspector_bug_672744_search_filter.js \
-  browser_bug589375_keybindings.js \
+  $(filter awaiting-promise-based-init browser_bug589375_keybindings.js) \
   browser_styleinspector_bug_689759_no_results_placeholder.js \
   browser_bug_692400_element_style.js \
   browser_csslogic_inherited.js \
+  browser_ruleview_734259_style_editor_link.js \
   browser_ruleview_editor.js \
   browser_ruleview_editor_changedvalues.js \
+  browser_ruleview_bug_703643_context_menu_copy.js \
+  browser_ruleview_focus.js \
   browser_ruleview_inherit.js \
   browser_ruleview_manipulation.js \
   browser_ruleview_override.js \
   browser_ruleview_ui.js \
   browser_ruleview_update.js \
-  browser_ruleview_focus.js \
   browser_bug705707_is_content_stylesheet.js \
   browser_bug722196_property_view_media_queries.js \
   browser_bug722196_rule_view_media_queries.js \
   browser_bug_592743_specificity.js \
-  browser_ruleview_bug_703643_context_menu_copy.js \
-  browser_computedview_bug_703643_context_menu_copy.js \
-  browser_ruleview_734259_style_editor_link.js \
+  browser_bug722691_rule_view_increment.js \
   browser_computedview_734259_style_editor_link.js \
-  browser_bug722691_rule_view_increment.js \
+  browser_computedview_bug_703643_context_menu_copy.js\
   head.js \
   $(NULL)
 
 MOCHITEST_BROWSER_FILES += \
   browser_bug683672.html \
   browser_bug705707_is_content_stylesheet.html \
   browser_bug705707_is_content_stylesheet_imported.css \
   browser_bug705707_is_content_stylesheet_imported2.css \
diff --git a/browser/devtools/styleinspector/test/browser_bug589375_keybindings.js b/browser/devtools/styleinspector/test/browser_bug589375_keybindings.js
--- a/browser/devtools/styleinspector/test/browser_bug589375_keybindings.js
+++ b/browser/devtools/styleinspector/test/browser_bug589375_keybindings.js
@@ -1,93 +1,95 @@
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // Tests that the key bindings work properly.
 
 let doc;
-let stylePanel;
+let inspector;
+let computedView;
+let iframe;
 
 function createDocument()
 {
   doc.body.innerHTML = '<style type="text/css"> ' +
     '.matches {color: #F00;}</style>' +
     '<span class="matches">Some styled text</span>' +
     '</div>';
   doc.title = "Style Inspector key binding test";
-  stylePanel = new ComputedViewPanel(window);
-  stylePanel.createPanel(doc.body, runStyleInspectorTests);
+
+  openInspector(openComputedView);
 }
 
-function runStyleInspectorTests()
+function openComputedView(aInspector)
 {
-  Services.obs.addObserver(SI_test, "StyleInspector-populated", false);
-  SI_inspectNode();
+  inspector = aInspector;
+  iframe = inspector._toolbox.frame;
+
+  Services.obs.addObserver(runTests, "StyleInspector-populated", false);
+
+  inspector.sidebar.select("computedview");
 }
 
-function SI_inspectNode()
+function runTests()
 {
+  Services.obs.removeObserver(runTests, "StyleInspector-populated");
+  computedView = getComputedView(inspector);
+
   var span = doc.querySelector(".matches");
   ok(span, "captain, we have the matches span");
 
-  let htmlTree = stylePanel.cssHtmlTree;
-  stylePanel.selectNode(span);
+  inspector.selection.setNode(span);
 
-  is(span, htmlTree.viewedElement,
+  is(span, computedView.viewedElement,
     "style inspector node matches the selected node");
-  is(htmlTree.viewedElement, stylePanel.cssLogic.viewedElement,
+  is(computedView.viewedElement, computedView.cssLogic.viewedElement,
      "cssLogic node matches the cssHtmlTree node");
-}
-
-function SI_test()
-{
-  Services.obs.removeObserver(SI_test, "StyleInspector-populated", false);
 
   info("checking keybindings");
 
-  let iframe = stylePanel.iframe;
-  let searchbar = stylePanel.cssHtmlTree.searchField;
+  let searchbar = computedView.searchField;
   let propView = getFirstVisiblePropertyView();
   let rulesTable = propView.matchedSelectorsContainer;
   let matchedExpander = propView.matchedExpander;
 
   info("Adding focus event handler to property expander");
   matchedExpander.addEventListener("focus", function expanderFocused() {
     this.removeEventListener("focus", expanderFocused);
     info("property expander is focused");
     info("checking expand / collapse");
     testKey(iframe.contentWindow, "VK_SPACE", rulesTable);
     testKey(iframe.contentWindow, "VK_RETURN", rulesTable);
 
     checkHelpLinkKeybinding();
-    stylePanel.destroy();
+    computedView.destroy();
     finishUp();
   });
 
   info("Adding focus event handler to search filter");
   searchbar.addEventListener("focus", function searchbarFocused() {
     this.removeEventListener("focus", searchbarFocused);
     info("search filter is focused");
     info("tabbing to property expander node");
     EventUtils.synthesizeKey("VK_TAB", {}, iframe.contentWindow);
   });
 
   info("Making sure that the style inspector panel is focused");
   SimpleTest.waitForFocus(function windowFocused() {
     info("window is focused");
     info("focusing search filter");
     searchbar.focus();
-  }, stylePanel.iframe.contentWindow);
+  }, iframe.contentWindow);
 }
 
 function getFirstVisiblePropertyView()
 {
   let propView = null;
-  stylePanel.cssHtmlTree.propertyViews.some(function(aPropView) {
+  computedView.propertyViews.some(function(aPropView) {
     if (aPropView.visible) {
       propView = aPropView;
       return true;
     }
     return false;
   });
 
   return propView;
@@ -102,31 +104,30 @@ function testKey(aContext, aVirtKey, aRu
   info("collapsing rules table");
   EventUtils.synthesizeKey(aVirtKey, {}, aContext);
   is(aRulesTable.innerHTML, "", "rules Table is not populated");
 }
 
 function checkHelpLinkKeybinding()
 {
   info("checking help link keybinding");
-  let iframe = stylePanel.iframe;
   let propView = getFirstVisiblePropertyView();
 
   info("check that MDN link is opened on \"F1\"");
   let linkClicked = false;
   propView.mdnLinkClick = function(aEvent) {
     linkClicked = true;
   };
   EventUtils.synthesizeKey("VK_F1", {}, iframe.contentWindow);
   is(linkClicked, true, "MDN link will be shown");
 }
 
 function finishUp()
 {
-  doc = stylePanel = null;
+  doc = inspector = iframe = computedView = null;
   gBrowser.removeCurrentTab();
   finish();
 }
 
 function test()
 {
   waitForExplicitFinish();
   gBrowser.selectedTab = gBrowser.addTab();
diff --git a/browser/devtools/styleinspector/test/browser_bug683672.js b/browser/devtools/styleinspector/test/browser_bug683672.js
--- a/browser/devtools/styleinspector/test/browser_bug683672.js
+++ b/browser/devtools/styleinspector/test/browser_bug683672.js
@@ -1,16 +1,18 @@
 /* vim: set ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // Tests that the style inspector works properly
 
 let doc;
-let stylePanel;
+let inspector;
+let div;
+let computedView;
 
 const TEST_URI = "http://example.com/browser/browser/devtools/styleinspector/test/browser_bug683672.html";
 
 let tempScope = {};
 Cu.import("resource:///modules/devtools/CssHtmlTree.jsm", tempScope);
 let CssHtmlTree = tempScope.CssHtmlTree;
 let PropertyView = tempScope.PropertyView;
 
@@ -20,77 +22,82 @@ function test()
   addTab(TEST_URI);
   browser.addEventListener("load", tabLoaded, true);
 }
 
 function tabLoaded()
 {
   browser.removeEventListener("load", tabLoaded, true);
   doc = content.document;
-  // ok(StyleInspector.isEnabled, "style inspector preference is enabled");
-  stylePanel = new ComputedViewPanel(window);
-  stylePanel.createPanel(doc.body, runTests);
+  openInspector(selectNode);
+}
+
+function selectNode(aInspector)
+{
+  inspector = aInspector;
+
+  div = content.document.getElementById("test");
+  ok(div, "captain, we have the div");
+
+  inspector.selection.setNode(div);
+
+  inspector.sidebar.once("computedview-ready", function() {
+    computedView = getComputedView(inspector);
+
+    inspector.sidebar.select("computedview");
+    runTests();
+  });
 }
 
 function runTests()
 {
   testMatchedSelectors();
   //testUnmatchedSelectors();
 
   info("finishing up");
-  stylePanel.destroy();
   finishUp();
 }
 
 function testMatchedSelectors()
 {
   info("checking selector counts, matched rules and titles");
-  let div = content.document.getElementById("test");
-  ok(div, "captain, we have the div");
 
-  info("selecting the div");
-  stylePanel.selectNode(div);
-
-  let htmlTree = stylePanel.cssHtmlTree;
-
-  is(div, htmlTree.viewedElement,
+  is(div, computedView.viewedElement,
       "style inspector node matches the selected node");
 
-  let propertyView = new PropertyView(htmlTree, "color");
+  let propertyView = new PropertyView(computedView, "color");
   let numMatchedSelectors = propertyView.propertyInfo.matchedSelectors.length;
 
   is(numMatchedSelectors, 6,
       "CssLogic returns the correct number of matched selectors for div");
 
   is(propertyView.hasMatchedSelectors, true,
       "hasMatchedSelectors returns true");
 }
 
 function testUnmatchedSelectors()
 {
   info("checking selector counts, unmatched rules and titles");
   let body = content.document.body;
   ok(body, "captain, we have a body");
 
   info("selecting content.document.body");
-  stylePanel.selectNode(body);
+  inspector.selection.setNode(body);
 
-  let htmlTree = stylePanel.cssHtmlTree;
-
-  is(body, htmlTree.viewedElement,
+  is(body, computedView.viewedElement,
       "style inspector node matches the selected node");
 
-  let propertyView = new PropertyView(htmlTree, "color");
+  let propertyView = new PropertyView(computedView, "color");
   let numUnmatchedSelectors = propertyView.propertyInfo.unmatchedSelectors.length;
 
   is(numUnmatchedSelectors, 13,
       "CssLogic returns the correct number of unmatched selectors for body");
 
   is(propertyView.hasUnmatchedSelectors, true,
       "hasUnmatchedSelectors returns true");
 }
 
 function finishUp()
 {
-  doc = stylePanel = null;
+  doc = inspector = div = computedView = null;
   gBrowser.removeCurrentTab();
   finish();
 }
diff --git a/browser/devtools/styleinspector/test/browser_bug722196_property_view_media_queries.js b/browser/devtools/styleinspector/test/browser_bug722196_property_view_media_queries.js
--- a/browser/devtools/styleinspector/test/browser_bug722196_property_view_media_queries.js
+++ b/browser/devtools/styleinspector/test/browser_bug722196_property_view_media_queries.js
@@ -1,60 +1,68 @@
 /* vim: set ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
  http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // Tests that we correctly display appropriate media query titles in the
 // property view.
 
 let doc;
-let stylePanel;
+let computedView;
 
 const TEST_URI = "http://example.com/browser/browser/devtools/styleinspector/" +
   "test/browser_bug722196_identify_media_queries.html";
 
 function test()
 {
   waitForExplicitFinish();
   addTab(TEST_URI);
   browser.addEventListener("load", docLoaded, true);
 }
 
 function docLoaded()
 {
   browser.removeEventListener("load", docLoaded, true);
   doc = content.document;
-  stylePanel = new ComputedViewPanel(window);
-  stylePanel.createPanel(doc.body, checkSheets);
+
+  openInspector(selectNode);
+}
+
+function selectNode(aInspector)
+{
+  var div = doc.querySelector("div");
+  ok(div, "captain, we have the div");
+
+  aInspector.selection.setNode(div);
+
+  aInspector.sidebar.once("computedview-ready", function() {
+    aInspector.sidebar.select("computedview");
+    computedView = getComputedView(aInspector);
+    checkSheets();
+  });
 }
 
 function checkSheets()
 {
-  var div = doc.querySelector("div");
-  ok(div, "captain, we have the div");
-
-  stylePanel.selectNode(div);
-
-  let cssLogic = stylePanel.cssLogic;
+  let cssLogic = computedView.cssLogic;
   cssLogic.processMatchedSelectors();
 
   let _strings = Services.strings
     .createBundle("chrome://browser/locale/devtools/styleinspector.properties");
 
   let inline = _strings.GetStringFromName("rule.sourceInline");
 
   let source1 = inline + ":8";
   let source2 = inline + ":15 @media screen and (min-width: 1px)";
   is(cssLogic._matchedRules[0][0].source, source1,
     "rule.source gives correct output for rule 1");
   is(cssLogic._matchedRules[1][0].source, source2,
     "rule.source gives correct output for rule 2");
 
-  stylePanel.destroy();
   finishUp();
 }
 
 function finishUp()
 {
-  doc = null;
+  doc = computedView = null;
   gBrowser.removeCurrentTab();
   finish();
 }
diff --git a/browser/devtools/styleinspector/test/browser_bug_692400_element_style.js b/browser/devtools/styleinspector/test/browser_bug_692400_element_style.js
--- a/browser/devtools/styleinspector/test/browser_bug_692400_element_style.js
+++ b/browser/devtools/styleinspector/test/browser_bug_692400_element_style.js
@@ -1,38 +1,48 @@
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // Tests for selector text errors.
 
 let doc;
-let stylePanel;
+let computedView;
 
 function createDocument()
 {
   doc.body.innerHTML = "<div style='color:blue;'></div>";
 
   doc.title = "Style Inspector Selector Text Test";
-  stylePanel = new ComputedViewPanel(window);
 
-  Services.obs.addObserver(SI_checkText, "StyleInspector-populated", false);
+  openInspector(openComputedView);
+}
 
-  let span = doc.querySelector("div");
-  ok(span, "captain, we have the test div");
 
-  stylePanel.createPanel(span);
+function openComputedView(aInspector)
+{
+  let div = doc.querySelector("div");
+  ok(div, "captain, we have the test div");
+
+  aInspector.selection.setNode(div);
+
+  aInspector.sidebar.once("computedview-ready", function() {
+    aInspector.sidebar.select("computedview");
+    computedView = getComputedView(aInspector);
+
+    Services.obs.addObserver(SI_checkText, "StyleInspector-populated", false);
+  });
 }
 
 function SI_checkText()
 {
   Services.obs.removeObserver(SI_checkText, "StyleInspector-populated", false);
 
   let propertyView = null;
-  stylePanel.cssHtmlTree.propertyViews.some(function(aView) {
+  computedView.propertyViews.some(function(aView) {
     if (aView.name == "color") {
       propertyView = aView;
       return true;
     }
     return false;
   });
 
   ok(propertyView, "found PropertyView for color");
@@ -51,23 +61,22 @@ function SI_checkText()
   try {
     is(td.textContent.trim(), selector.humanReadableText(td).trim(),
       "selector text is correct");
   } catch (ex) {
     info("EXCEPTION: " + ex);
     ok(false, "getting the selector text should not raise an exception");
   }
 
-  stylePanel.destroy();
   finishUp();
 }
 
 function finishUp()
 {
-  doc = stylePanel = null;
+  doc = computedView = null;
   gBrowser.removeCurrentTab();
   finish();
 }
 
 function test()
 {
   waitForExplicitFinish();
   gBrowser.selectedTab = gBrowser.addTab();
diff --git a/browser/devtools/styleinspector/test/browser_computedview_734259_style_editor_link.js b/browser/devtools/styleinspector/test/browser_computedview_734259_style_editor_link.js
--- a/browser/devtools/styleinspector/test/browser_computedview_734259_style_editor_link.js
+++ b/browser/devtools/styleinspector/test/browser_computedview_734259_style_editor_link.js
@@ -1,15 +1,15 @@
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
  http://creativecommons.org/publicdomain/zero/1.0/ */
 
 let doc;
-let win;
-let stylePanel;
+let inspector;
+let computedView;
 
 function createDocument()
 {
   doc.body.innerHTML = '<style type="text/css"> ' +
     'html { color: #000000; } ' +
     'span { font-variant: small-caps; color: #000000; } ' +
     '.nomatches {color: #ff0000;}</style> <div id="first" style="margin: 10em; ' +
     'font-size: 14pt; font-family: helvetica, sans-serif; color: #AAA">\n' +
@@ -22,36 +22,50 @@ function createDocument()
     'you should go do something else instead. Maybe read a book. Or better ' +
     'yet, write some test-cases for another bit of code. ' +
     '<span style="font-style: italic">some text</span></p>\n' +
     '<p id="closing">more text</p>\n' +
     '<p>even more text</p>' +
     '</div>';
   doc.title = "Rule view style editor link test";
 
+  openInspector(selectNode);
+}
+
+
+function selectNode(aInspector)
+{
+  inspector = aInspector;
+
   let span = doc.querySelector("span");
   ok(span, "captain, we have the span");
 
-  Services.obs.addObserver(testInlineStyle, "StyleInspector-populated", false);
-  stylePanel = new ComputedViewPanel(window);
-  stylePanel.createPanel(span);
+  aInspector.selection.setNode(span);
+
+  aInspector.sidebar.once("computedview-ready", function() {
+    aInspector.sidebar.select("computedview");
+
+    computedView = getComputedView(aInspector);
+
+    Services.obs.addObserver(testInlineStyle, "StyleInspector-populated", false);
+  });
 }
 
 function testInlineStyle()
 {
   Services.obs.removeObserver(testInlineStyle, "StyleInspector-populated", false);
 
   info("expanding property");
   expandProperty(0, function propertyExpanded() {
     Services.ww.registerNotification(function onWindow(aSubject, aTopic) {
       if (aTopic != "domwindowopened") {
         return;
       }
       info("window opened");
-      win = aSubject.QueryInterface(Ci.nsIDOMWindow);
+      let win = aSubject.QueryInterface(Ci.nsIDOMWindow);
       win.addEventListener("load", function windowLoad() {
         win.removeEventListener("load", windowLoad);
         info("window load completed");
         let windowType = win.document.documentElement.getAttribute("windowtype");
         is(windowType, "navigator:view-source", "view source window is open");
         info("closing window");
         win.close();
         Services.ww.unregisterNotification(onWindow);
@@ -62,84 +76,72 @@ function testInlineStyle()
     link.click();
   });
 }
 
 function testInlineStyleSheet()
 {
   info("clicking an inline stylesheet");
 
-  Services.ww.registerNotification(function onWindow(aSubject, aTopic) {
-    if (aTopic != "domwindowopened") {
-      return;
-    }
-    info("window opened");
-    win = aSubject.QueryInterface(Ci.nsIDOMWindow);
-    win.addEventListener("load", function windowLoad() {
-      win.removeEventListener("load", windowLoad);
-      info("window load completed");
-      let windowType = win.document.documentElement.getAttribute("windowtype");
-      is(windowType, "Tools:StyleEditor", "style editor window is open");
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+  let toolbox = gDevTools.openToolboxForTab(target, "styleeditor");
 
-      win.styleEditorChrome.addChromeListener({
-        onEditorAdded: function checkEditor(aChrome, aEditor) {
-          if (!aEditor.sourceEditor) {
-            aEditor.addActionListener({
-              onAttach: function (aEditor) {
-                aEditor.removeActionListener(this);
-                validateStyleEditorSheet(aEditor);
-              }
-            });
-          } else {
-            validateStyleEditorSheet(aEditor);
-          }
+  toolbox.once("styleeditor-ready", function(event, panel) {
+    let win = panel._panelWin;
+
+    win.styleEditorChrome.addChromeListener({
+      onEditorAdded: function checkEditor(aChrome, aEditor) {
+        if (!aEditor.sourceEditor) {
+          aEditor.addActionListener({
+            onAttach: function (aEditor) {
+              aEditor.removeActionListener(this);
+              validateStyleEditorSheet(aEditor);
+            }
+          });
+        } else {
+          validateStyleEditorSheet(aEditor);
         }
-      });
-      Services.ww.unregisterNotification(onWindow);
+      }
     });
   });
+
   let link = getLinkByIndex(1);
   link.click();
 }
 
 function validateStyleEditorSheet(aEditor)
 {
   info("validating style editor stylesheet");
 
   let sheet = doc.styleSheets[0];
   is(aEditor.styleSheet, sheet, "loaded stylesheet matches document stylesheet");
-  info("closing window");
-  win.close();
 
-  stylePanel.destroy();
   finishUp();
 }
 
 function expandProperty(aIndex, aCallback)
 {
-  let iframe = stylePanel.iframe;
-  let contentDoc = iframe.contentDocument;
-  let contentWindow = iframe.contentWindow;
+  let contentDoc = computedView.styleDocument;
   let expando = contentDoc.querySelectorAll(".expandable")[aIndex];
   expando.click();
 
   // We use executeSoon to give the property time to expand.
   executeSoon(aCallback);
 }
 
 function getLinkByIndex(aIndex)
 {
-  let contentDoc = stylePanel.iframe.contentDocument;
+  let contentDoc = computedView.styleDocument;
   let links = contentDoc.querySelectorAll(".rule-link .link");
   return links[aIndex];
 }
 
 function finishUp()
 {
-  doc = win = stylePanel = null;
+  doc = inspector = computedView = null;
   gBrowser.removeCurrentTab();
   finish();
 }
 
 function test()
 {
   waitForExplicitFinish();
 
diff --git a/browser/devtools/styleinspector/test/browser_computedview_bug_703643_context_menu_copy.js b/browser/devtools/styleinspector/test/browser_computedview_bug_703643_context_menu_copy.js
--- a/browser/devtools/styleinspector/test/browser_computedview_bug_703643_context_menu_copy.js
+++ b/browser/devtools/styleinspector/test/browser_computedview_bug_703643_context_menu_copy.js
@@ -1,17 +1,17 @@
 /* vim: set ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
  http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // Tests that the style inspector works properly
 
 let doc;
-let stylePanel;
-let cssHtmlTree;
+let win;
+let computedView;
 
 XPCOMUtils.defineLazyGetter(this, "osString", function() {
   return Cc["@mozilla.org/xre/app-info;1"].getService(Ci.nsIXULRuntime).OS;
 });
 
 function createDocument()
 {
   doc.body.innerHTML = '<style type="text/css"> ' +
@@ -27,111 +27,122 @@ function createDocument()
     'you should go do something else instead. Maybe read a book. Or better ' +
     'yet, write some test-cases for another bit of code. ' +
     '<span style="font-style: italic">some text</span></p>\n' +
     '<p id="closing">more text</p>\n' +
     '<p>even more text</p>' +
     '</div>';
   doc.title = "Computed view context menu test";
 
+  openInspector(selectNode)
+}
+
+function selectNode(aInspector)
+{
   let span = doc.querySelector("span");
   ok(span, "captain, we have the span");
 
-  stylePanel = new ComputedViewPanel(window);
-  Services.obs.addObserver(runStyleInspectorTests, "StyleInspector-populated", false);
-  stylePanel.createPanel(span);
+  aInspector.selection.setNode(span);
+
+  aInspector.sidebar.once("computedview-ready", function() {
+    aInspector.sidebar.select("computedview");
+
+    computedView = getComputedView(aInspector);
+    win = aInspector.sidebar.getWindowForTab("computedview");
+
+    Services.obs.addObserver(runStyleInspectorTests,
+      "StyleInspector-populated", false);
+  });
 }
 
+
 function runStyleInspectorTests()
 {
-  Services.obs.removeObserver(runStyleInspectorTests, "StyleInspector-populated", false);
+  Services.obs.removeObserver(runStyleInspectorTests,
+    "StyleInspector-populated", false);
 
-  cssHtmlTree = stylePanel.cssHtmlTree;
-
-  let contentDocument = stylePanel.iframe.contentDocument;
+  let contentDocument = computedView.styleDocument;
   let prop = contentDocument.querySelector(".property-view");
   ok(prop, "captain, we have the property-view node");
 
   // We need the context menu to open in the correct place in order for
   // popupNode to be propertly set.
-  EventUtils.synthesizeMouse(prop, 1, 1, { type: "contextmenu", button: 2 },
-    stylePanel.iframe.contentWindow);
+  contextMenuClick(prop);
 
-  checkCopyProperty()
+  checkCopyProperty();
 }
 
 function checkCopyProperty()
 {
   info("Checking that cssHtmlTree.siBoundCopyDeclaration() returns the " +
        "correct clipboard value");
   let expectedPattern = "color: rgb\\(255, 255, 0\\);";
 
   SimpleTest.waitForClipboard(function CS_boundCopyPropCheck() {
       return checkClipboardData(expectedPattern);
     },
-    cssHtmlTree.siBoundCopyDeclaration,
+    computedView.siBoundCopyDeclaration,
     checkCopyPropertyName, function() {
       failedClipboard(expectedPattern, checkCopyPropertyName);
     });
 }
 
 function checkCopyPropertyName()
 {
   info("Checking that cssHtmlTree.siBoundCopyProperty() returns the " +
        "correct clipboard value");
   let expectedPattern = "color";
 
   SimpleTest.waitForClipboard(function CS_boundCopyPropNameCheck() {
       return checkClipboardData(expectedPattern);
     },
-    cssHtmlTree.siBoundCopyProperty,
+    computedView.siBoundCopyProperty,
     checkCopyPropertyValue, function() {
       failedClipboard(expectedPattern, checkCopyPropertyValue);
     });
 }
 
 function checkCopyPropertyValue()
 {
   info("Checking that cssHtmlTree.siBoundCopyPropertyValue() returns the " +
        "correct clipboard value");
   let expectedPattern = "rgb\\(255, 255, 0\\)";
 
   SimpleTest.waitForClipboard(function CS_boundCopyPropValueCheck() {
       return checkClipboardData(expectedPattern);
     },
-    cssHtmlTree.siBoundCopyPropertyValue,
+    computedView.siBoundCopyPropertyValue,
     checkCopySelection, function() {
       failedClipboard(expectedPattern, checkCopySelection);
     });
 }
 
 function checkCopySelection()
 {
-  let contentDocument = stylePanel.iframe.contentDocument;
-  let contentWindow = stylePanel.iframe.contentWindow;
+  let contentDocument = computedView.styleDocument;
   let props = contentDocument.querySelectorAll(".property-view");
   ok(props, "captain, we have the property-view nodes");
 
   let range = document.createRange();
   range.setStart(props[0], 0);
   range.setEnd(props[3], 4);
-  contentWindow.getSelection().addRange(range);
+  win.getSelection().addRange(range);
 
   info("Checking that cssHtmlTree.siBoundCopy() " +
        " returns the correct clipboard value");
 
   let expectedPattern = "color: rgb\\(255, 255, 0\\)[\\r\\n]+" +
                  "font-family: helvetica,sans-serif[\\r\\n]+" +
                  "font-size: 16px[\\r\\n]+" +
                  "font-variant: small-caps[\\r\\n]*";
 
   SimpleTest.waitForClipboard(function CS_boundCopyCheck() {
       return checkClipboardData(expectedPattern);
     },
-    cssHtmlTree.siBoundCopy, closeStyleInspector, function() {
+    computedView.siBoundCopy, closeStyleInspector, function() {
       failedClipboard(expectedPattern, closeStyleInspector);
     });
 }
 
 function checkClipboardData(aExpectedPattern)
 {
   let actual = SpecialPowers.getClipboardData("text/unicode");
   let expectedRegExp = new RegExp(aExpectedPattern, "g");
@@ -157,23 +168,22 @@ function failedClipboard(aExpectedPatter
     "results (escaped for accurate comparison):\n");
   info("Actual: " + escape(actual));
   info("Expected: " + escape(aExpectedPattern));
   aCallback();
 }
 
 function closeStyleInspector()
 {
-  stylePanel.destroy();
   finishUp();
 }
 
 function finishUp()
 {
-  doc = stylePanel = cssHtmlTree = null;
+  computedView = doc = win = null;
   gBrowser.removeCurrentTab();
   finish();
 }
 
 function test()
 {
   waitForExplicitFinish();
   gBrowser.selectedTab = gBrowser.addTab();
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_734259_style_editor_link.js b/browser/devtools/styleinspector/test/browser_ruleview_734259_style_editor_link.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_734259_style_editor_link.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_734259_style_editor_link.js
@@ -1,15 +1,17 @@
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
  http://creativecommons.org/publicdomain/zero/1.0/ */
 
 let win;
 let doc;
 let contentWindow;
+let inspector;
+let toolbox;
 
 let tempScope = {};
 Cu.import("resource://gre/modules/Services.jsm", tempScope);
 let Services = tempScope.Services;
 
 function createDocument()
 {
   doc.body.innerHTML = '<style type="text/css"> ' +
@@ -26,51 +28,37 @@ function createDocument()
     'you should go do something else instead. Maybe read a book. Or better ' +
     'yet, write some test-cases for another bit of code. ' +
     '<span style="font-style: italic">some text</span></p>\n' +
     '<p id="closing">more text</p>\n' +
     '<p>even more text</p>' +
     '</div>';
   doc.title = "Rule view style editor link test";
 
-  openInspector();
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+  toolbox = gDevTools.openToolboxForTab(target, "inspector");
+  toolbox.once("inspector-selected", function SE_selected(id, aInspector) {
+    inspector = aInspector;
+    inspector.sidebar.select("ruleview");
+    highlightNode();
+  });
 }
 
-function openInspector()
+function highlightNode()
 {
-  ok(window.InspectorUI, "InspectorUI variable exists");
-  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
-  ok(InspectorUI.store.isEmpty(), "Inspector.store is empty");
-
-  Services.obs.addObserver(inspectorUIOpen,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-  InspectorUI.openInspectorUI();
-}
-
-function inspectorUIOpen()
-{
-  Services.obs.removeObserver(inspectorUIOpen,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-
-  // Make sure the inspector is open.
-  ok(InspectorUI.inspecting, "Inspector is highlighting");
-  ok(!InspectorUI.isSidebarOpen, "Inspector Sidebar is not open");
-  ok(!InspectorUI.store.isEmpty(), "InspectorUI.store is not empty");
-  is(InspectorUI.store.length, 1, "Inspector.store.length = 1");
-
   // Highlight a node.
   let div = content.document.getElementsByTagName("div")[0];
-  InspectorUI.inspectNode(div);
-  InspectorUI.stopInspecting();
-  is(InspectorUI.selection, div, "selection matches the div element");
 
-  InspectorUI.currentInspector.once("sidebaractivated-ruleview", testInlineStyle);
-
-  InspectorUI.sidebar.show();
-  InspectorUI.sidebar.activatePanel("ruleview");
+  inspector.selection.once("new-node", function() {
+    is(inspector.selection.node, div, "selection matches the div element");
+    testInlineStyle();
+  });
+  executeSoon(function() {
+    inspector.selection.setNode(div);
+  });
 }
 
 function testInlineStyle()
 {
   executeSoon(function() {
     info("clicking an inline style");
 
     Services.ww.registerNotification(function onWindow(aSubject, aTopic) {
@@ -83,59 +71,39 @@ function testInlineStyle()
         win.removeEventListener("load", windowLoad);
         let windowType = win.document.documentElement.getAttribute("windowtype");
         is(windowType, "navigator:view-source", "view source window is open");
         win.close();
         Services.ww.unregisterNotification(onWindow);
         testInlineStyleSheet();
       });
     });
-    EventUtils.synthesizeMouseAtCenter(getLinkByIndex(0), { }, contentWindow);
+
+    let link = getLinkByIndex(0);
+    link.scrollIntoView();
+    link.click();
   });
 }
 
 function testInlineStyleSheet()
 {
   info("clicking an inline stylesheet");
 
-  Services.ww.registerNotification(function onWindow(aSubject, aTopic) {
-    if (aTopic != "domwindowopened") {
-      return;
-    }
-
-    win = aSubject.QueryInterface(Ci.nsIDOMWindow);
-    win.addEventListener("load", function windowLoad() {
-      win.removeEventListener("load", windowLoad);
-
-      let windowType = win.document.documentElement.getAttribute("windowtype");
-      is(windowType, "Tools:StyleEditor", "style editor window is open");
-
-      win.styleEditorChrome.addChromeListener({
-        onEditorAdded: function checkEditor(aChrome, aEditor) {
-          if (!aEditor.sourceEditor) {
-            aEditor.addActionListener({
-              onAttach: function (aEditor) {
-                aEditor.removeActionListener(this);
-                validateStyleEditorSheet(aEditor);
-              }
-            });
-          } else {
-            validateStyleEditorSheet(aEditor);
-          }
-        }
-      });
-
-      Services.ww.unregisterNotification(onWindow);
+  toolbox.once("styleeditor-ready", function(id, aToolbox) {
+    aToolbox.panelWindow.styleEditorChrome.addChromeListener({
+      onEditorAdded: validateStyleEditorSheet
     });
   });
 
-  EventUtils.synthesizeMouse(getLinkByIndex(1), 5, 5, { }, contentWindow);
+  let link = getLinkByIndex(1);
+  link.scrollIntoView();
+  link.click();
 }
 
-function validateStyleEditorSheet(aEditor)
+function validateStyleEditorSheet(aChrome, aEditor)
 {
   info("validating style editor stylesheet");
 
   let sheet = doc.styleSheets[0];
 
   is(aEditor.styleSheet, sheet, "loaded stylesheet matches document stylesheet");
   win.close();
 
@@ -147,20 +115,18 @@ function getLinkByIndex(aIndex)
   let contentDoc = ruleView().doc;
   contentWindow = contentDoc.defaultView;
   let links = contentDoc.querySelectorAll(".ruleview-rule-source");
   return links[aIndex];
 }
 
 function finishup()
 {
-  InspectorUI.sidebar.hide();
-  InspectorUI.closeInspectorUI();
   gBrowser.removeCurrentTab();
-  doc = contentWindow = win = null;
+  contentWindow = doc = inspector = toolbox = win = null;
   finish();
 }
 
 function test()
 {
   waitForExplicitFinish();
 
   gBrowser.selectedTab = gBrowser.addTab();
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_bug_703643_context_menu_copy.js b/browser/devtools/styleinspector/test/browser_ruleview_bug_703643_context_menu_copy.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_bug_703643_context_menu_copy.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_bug_703643_context_menu_copy.js
@@ -1,26 +1,23 @@
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
  http://creativecommons.org/publicdomain/zero/1.0/ */
 
 let doc;
 let tempScope = {};
 Cu.import("resource:///modules/devtools/CssRuleView.jsm", tempScope);
 let inplaceEditor = tempScope._getInplaceEditorForSpan;
+let inspector;
+let win;
 
 XPCOMUtils.defineLazyGetter(this, "osString", function() {
   return Cc["@mozilla.org/xre/app-info;1"].getService(Ci.nsIXULRuntime).OS;
 });
 
-function ruleViewFrame()
-{
-  return InspectorUI.sidebar._tools["ruleview"].frame;
-}
-
 function createDocument()
 {
   doc.body.innerHTML = '<style type="text/css"> ' +
     'html { color: #000000; } ' +
     'span { font-variant: small-caps; color: #000000; } ' +
     '.nomatches {color: #ff0000;}</style> <div id="first" style="margin: 10em; ' +
     'font-size: 14pt; font-family: helvetica, sans-serif; color: #AAA">\n' +
     '<h1>Some header text</h1>\n' +
@@ -32,50 +29,38 @@ function createDocument()
     'you should go do something else instead. Maybe read a book. Or better ' +
     'yet, write some test-cases for another bit of code. ' +
     '<span style="font-style: italic">some text</span></p>\n' +
     '<p id="closing">more text</p>\n' +
     '<p>even more text</p>' +
     '</div>';
   doc.title = "Rule view context menu test";
 
-  openInspector();
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+  let toolbox = gDevTools.openToolboxForTab(target, "inspector");
+  toolbox.once("inspector-selected", function SE_selected(id, aInspector) {
+    inspector = aInspector;
+    inspector.sidebar.select("ruleview");
+    win = inspector.sidebar.getWindowForTab("ruleview");
+    highlightNode();
+  });
 }
 
-function openInspector()
+function highlightNode()
 {
-  ok(window.InspectorUI, "InspectorUI variable exists");
-  ok(!InspectorUI.inspecting, "Inspector is not highlighting");
-  ok(InspectorUI.store.isEmpty(), "Inspector.store is empty");
-
-  Services.obs.addObserver(inspectorUIOpen,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-  InspectorUI.openInspectorUI();
-}
-
-function inspectorUIOpen()
-{
-  Services.obs.removeObserver(inspectorUIOpen,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-
-  // Make sure the inspector is open.
-  ok(InspectorUI.inspecting, "Inspector is highlighting");
-  ok(!InspectorUI.isSidebarOpen, "Inspector Sidebar is not open");
-  ok(!InspectorUI.store.isEmpty(), "InspectorUI.store is not empty");
-  is(InspectorUI.store.length, 1, "Inspector.store.length = 1");
-
   // Highlight a node.
   let div = content.document.getElementsByTagName("div")[0];
-  InspectorUI.inspectNode(div);
-  InspectorUI.stopInspecting();
-  is(InspectorUI.selection, div, "selection matches the div element");
 
-  InspectorUI.currentInspector.once("sidebaractivated-ruleview", testClip)
-  InspectorUI.sidebar.show();
-  InspectorUI.sidebar.activatePanel("ruleview");
+  inspector.selection.once("new-node", function() {
+    is(inspector.selection.node, div, "selection matches the div element");
+    testClip();
+  });
+  executeSoon(function() {
+    inspector.selection.setNode(div);
+  });
 }
 
 function testClip()
 {
   executeSoon(function() {
     info("Checking that _onCopyRule() returns " +
          "the correct clipboard value");
     let expectedPattern = "element {[\\r\\n]+" +
@@ -90,53 +75,51 @@ function testClip()
       },
       checkCopyRule, checkCopyProperty, function() {
         failedClipboard(expectedPattern, checkCopyProperty);
       });
   });
 }
 
 function checkCopyRule() {
-  let contentDoc = ruleViewFrame().contentDocument;
+  let contentDoc = win.document;
   let props = contentDoc.querySelectorAll(".ruleview-property");
 
   is(props.length, 5, "checking property length");
 
   let prop = props[2];
   let propName = prop.querySelector(".ruleview-propertyname").textContent;
   let propValue = prop.querySelector(".ruleview-propertyvalue").textContent;
 
   is(propName, "font-family", "checking property name");
   is(propValue, "helvetica,sans-serif", "checking property value");
 
   // We need the context menu to open in the correct place in order for
   // popupNode to be propertly set.
-  EventUtils.synthesizeMouse(prop, 1, 1, { type: "contextmenu", button: 2 },
-    ruleViewFrame().contentWindow);
+  contextMenuClick(prop);
 
   ruleView()._boundCopyRule();
   let menu = contentDoc.querySelector("#rule-view-context-menu");
   ok(menu, "we have the context menu");
   menu.hidePopup();
 }
 
 function checkCopyProperty()
 {
-  let contentDoc = ruleViewFrame().contentDocument;
+  let contentDoc = win.document;
   let props = contentDoc.querySelectorAll(".ruleview-property");
   let prop = props[2];
 
   info("Checking that _onCopyDeclaration() returns " +
        "the correct clipboard value");
   let expectedPattern = "font-family: helvetica,sans-serif;";
 
   // We need the context menu to open in the correct place in order for
   // popupNode to be propertly set.
-  EventUtils.synthesizeMouse(prop, 1, 1, { type: "contextmenu", button: 2 },
-    ruleViewFrame().contentWindow);
+  contextMenuClick(prop);
 
   SimpleTest.waitForClipboard(function IUI_boundCopyPropCheck() {
     return checkClipboardData(expectedPattern);
   },
   ruleView()._boundCopyDeclaration,
   checkCopyPropertyName, function() {
     failedClipboard(expectedPattern, checkCopyPropertyName);
   });
@@ -169,25 +152,25 @@ function checkCopyPropertyValue()
   ruleView()._boundCopyPropertyValue,
   checkCopySelection, function() {
     failedClipboard(expectedPattern, checkCopySelection);
   });
 }
 
 function checkCopySelection()
 {
-  let contentDoc = ruleViewFrame().contentDocument;
+  let contentDoc = win.document;
   let props = contentDoc.querySelectorAll(".ruleview-property");
   let values = contentDoc.querySelectorAll(".ruleview-propertycontainer");
 
   let range = document.createRange();
   range.setStart(props[0], 0);
   range.setEnd(values[4], 2);
 
-  let selection = ruleViewFrame().contentWindow.getSelection();
+  let selection = win.getSelection();
   selection.addRange(range);
 
   info("Checking that _boundCopy() returns the correct " +
     "clipboard value");
   let expectedPattern = "    margin: 10em;[\\r\\n]+" +
                         "    font-size: 14pt;[\\r\\n]+" +
                         "    font-family: helvetica,sans-serif;[\\r\\n]+" +
                         "    color: rgb\\(170, 170, 170\\);[\\r\\n]+" +
@@ -218,29 +201,28 @@ function testSimpleCopy()
       },
       checkSimpleCopy, finishup, function() {
         failedClipboard(expectedPattern, finishup);
       });
   });
 }
 
 function checkSimpleCopy() {
-  let contentDoc = ruleViewFrame().contentDocument;
+  let contentDoc = win.document;
   let props = contentDoc.querySelectorAll(".ruleview-code");
 
   is(props.length, 2, "checking property length");
 
   let prop = props[0];
 
   selectNode(prop);
 
   // We need the context menu to open in the correct place in order for
   // popupNode to be propertly set.
-  EventUtils.synthesizeMouse(prop, 1, 1, { type: "contextmenu", button: 2 },
-    ruleViewFrame().contentWindow);
+  contextMenuClick(prop);
 
   ruleView()._boundCopy();
   let menu = contentDoc.querySelector("#rule-view-context-menu");
   ok(menu, "we have the context menu");
   menu.hidePopup();
 }
 
 function selectNode(aNode) {
@@ -278,20 +260,18 @@ function failedClipboard(aExpectedPatter
     "results (escaped for accurate comparison):\n");
   info("Actual: " + escape(actual));
   info("Expected: " + escape(aExpectedPattern));
   aCallback();
 }
 
 function finishup()
 {
-  InspectorUI.sidebar.hide();
-  InspectorUI.closeInspectorUI();
   gBrowser.removeCurrentTab();
-  doc = null;
+  doc = inspector = null;
   finish();
 }
 
 function test()
 {
   waitForExplicitFinish();
 
   gBrowser.selectedTab = gBrowser.addTab();
diff --git a/browser/devtools/styleinspector/test/browser_ruleview_focus.js b/browser/devtools/styleinspector/test/browser_ruleview_focus.js
--- a/browser/devtools/styleinspector/test/browser_ruleview_focus.js
+++ b/browser/devtools/styleinspector/test/browser_ruleview_focus.js
@@ -4,49 +4,41 @@
 
 // Test that focus doesn't leave the style editor when adding a property
 // (bug 719916)
 
 let tempScope = {};
 Cu.import("resource:///modules/devtools/CssRuleView.jsm", tempScope);
 let inplaceEditor = tempScope._getInplaceEditorForSpan;
 let doc;
+let inspector;
 let stylePanel;
 
-function waitForRuleView(aCallback)
-{
-  InspectorUI.currentInspector.once("sidebaractivated-ruleview", aCallback);
-}
-
 function openRuleView()
 {
-  Services.obs.addObserver(function onOpened() {
-    Services.obs.removeObserver(onOpened,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
+  var target = TargetFactory.forTab(gBrowser.selectedTab);
+  let toolbox = gDevTools.openToolboxForTab(target, "inspector");
+  toolbox.once("inspector-selected", function SE_selected(id, aInspector) {
+    inspector = aInspector;
+    inspector.sidebar.select("ruleview");
 
     // Highlight a node.
     let node = content.document.getElementsByTagName("h1")[0];
-    InspectorUI.inspectNode(node);
-    InspectorUI.stopInspecting();
-
-    // Open the rule view sidebar.
-    waitForRuleView(testFocus);
-
-    InspectorUI.sidebar.show();
-    InspectorUI.sidebar.activatePanel("ruleview");
-
-    testFocus();
-  }, InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-  InspectorUI.openInspectorUI();
+    inspector.selection.once("new-node", testFocus);
+    executeSoon(function() {
+      inspector.selection.setNode(doc.body);
+    });
+  });
 }
 
 function testFocus()
 {
-  let ruleViewFrame = InspectorUI.sidebar._tools["ruleview"].frame;
-  let brace = ruleViewFrame.contentDocument.querySelectorAll(".ruleview-ruleclose")[0];
+  let win = inspector.sidebar.getWindowForTab("ruleview");
+  let brace = win.document.querySelectorAll(".ruleview-ruleclose")[0];
+
   waitForEditorFocus(brace.parentNode, function onNewElement(aEditor) {
     aEditor.input.value = "color";
     waitForEditorFocus(brace.parentNode, function onEditingValue(aEditor) {
       // If we actually get this focus we're ok.
       ok(true, "We got focus.");
       aEditor.input.value = "green";
 
       // If we've retained focus, pressing return will start a new editor.
@@ -60,19 +52,17 @@ function testFocus()
     EventUtils.sendKey("return");
   });
 
   brace.click();
 }
 
 function finishUp()
 {
-  InspectorUI.sidebar.hide();
-  InspectorUI.closeInspectorUI();
-  doc = stylePanel = null;
+  doc = inspector = stylePanel = null;
   gBrowser.removeCurrentTab();
   finish();
 }
 
 function test()
 {
   waitForExplicitFinish();
   gBrowser.selectedTab = gBrowser.addTab();
diff --git a/browser/devtools/styleinspector/test/browser_styleinspector.js b/browser/devtools/styleinspector/test/browser_styleinspector.js
--- a/browser/devtools/styleinspector/test/browser_styleinspector.js
+++ b/browser/devtools/styleinspector/test/browser_styleinspector.js
@@ -1,16 +1,17 @@
 /* vim: set ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // Tests that the style inspector works properly
 
 let doc;
-let stylePanel;
+let inspector;
+let computedView;
 
 function createDocument()
 {
   doc.body.innerHTML = '<style type="text/css"> ' +
     'span { font-variant: small-caps; color: #000000; } ' +
     '.nomatches {color: #ff0000;}</style> <div id="first" style="margin: 10em; ' +
     'font-size: 14pt; font-family: helvetica, sans-serif; color: #AAA">\n' +
     '<h1>Some header text</h1>\n' +
@@ -21,52 +22,61 @@ function createDocument()
     'style list-items in the box at right. If you are reading this, ' +
     'you should go do something else instead. Maybe read a book. Or better ' +
     'yet, write some test-cases for another bit of code. ' +
     '<span style="font-style: italic">Maybe more inspector test-cases!</span></p>\n' +
     '<p id="closing">end transmission</p>\n' +
     '<p>Inspect using inspectstyle(document.querySelectorAll("span")[0])</p>' +
     '</div>';
   doc.title = "Style Inspector Test";
-  stylePanel = new ComputedViewPanel(window);
-  stylePanel.createPanel(doc.body, runStyleInspectorTests);
+
+  openInspector(openComputedView);
+}
+
+function openComputedView(aInspector)
+{
+  inspector = aInspector;
+
+  inspector.sidebar.once("computedview-ready", function() {
+    computedView = getComputedView(inspector);
+
+    inspector.sidebar.select("computedview");
+    runStyleInspectorTests();
+  });
 }
 
 function runStyleInspectorTests()
 {
   var spans = doc.querySelectorAll("span");
   ok(spans, "captain, we have the spans");
 
-  let htmlTree = stylePanel.cssHtmlTree;
+  for (var i = 0, numSpans = spans.length; i < numSpans; i++) {
+    inspector.selection.setNode(spans[i]);
 
-  for (var i = 0, numSpans = spans.length; i < numSpans; i++) {
-    stylePanel.selectNode(spans[i]);
-
-    is(spans[i], htmlTree.viewedElement,
+    is(spans[i], computedView.viewedElement,
       "style inspector node matches the selected node");
-    is(htmlTree.viewedElement, stylePanel.cssLogic.viewedElement,
+    is(computedView.viewedElement, computedView.cssLogic.viewedElement,
        "cssLogic node matches the cssHtmlTree node");
   }
 
   SI_CheckProperty();
-  stylePanel.destroy();
   finishUp();
 }
 
 function SI_CheckProperty()
 {
-  let cssLogic = stylePanel.cssLogic;
+  let cssLogic = computedView.cssLogic;
   let propertyInfo = cssLogic.getPropertyInfo("color");
   ok(propertyInfo.matchedRuleCount > 0, "color property has matching rules");
   //ok(propertyInfo.unmatchedRuleCount > 0, "color property has unmatched rules");
 }
 
 function finishUp()
 {
-  doc = stylePanel = null;
+  doc = computedView = null;
   gBrowser.removeCurrentTab();
   finish();
 }
 
 function test()
 {
   waitForExplicitFinish();
   gBrowser.selectedTab = gBrowser.addTab();
diff --git a/browser/devtools/styleinspector/test/browser_styleinspector_bug_672744_search_filter.js b/browser/devtools/styleinspector/test/browser_styleinspector_bug_672744_search_filter.js
--- a/browser/devtools/styleinspector/test/browser_styleinspector_bug_672744_search_filter.js
+++ b/browser/devtools/styleinspector/test/browser_styleinspector_bug_672744_search_filter.js
@@ -1,96 +1,108 @@
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // Tests that the search filter works properly.
 
 let doc;
-let stylePanel;
+let inspector;
+let computedView;
 
 function createDocument()
 {
   doc.body.innerHTML = '<style type="text/css"> ' +
     '.matches {color: #F00;}</style>' +
     '<span id="matches" class="matches">Some styled text</span>' +
     '</div>';
   doc.title = "Style Inspector Search Filter Test";
-  // ok(StyleInspector.isEnabled, "style inspector preference is enabled");
-  stylePanel = new ComputedViewPanel(window);
-  stylePanel.createPanel(doc.body, runStyleInspectorTests);
+
+  openInspector(openComputedView);
+}
+
+function openComputedView(aInspector)
+{
+  inspector = aInspector;
+
+  inspector.sidebar.once("computedview-ready", function() {
+    inspector.sidebar.select("computedview");
+    computedView = getComputedView(inspector);
+
+    runStyleInspectorTests();
+  });
 }
 
 function runStyleInspectorTests()
 {
   Services.obs.addObserver(SI_toggleDefaultStyles, "StyleInspector-populated", false);
   SI_inspectNode();
 }
 
 function SI_inspectNode()
 {
   var span = doc.querySelector("#matches");
   ok(span, "captain, we have the matches span");
 
-  let htmlTree = stylePanel.cssHtmlTree;
-  stylePanel.selectNode(span);
+  inspector.selection.setNode(span);
 
-  is(span, htmlTree.viewedElement,
+  is(span, computedView.viewedElement,
     "style inspector node matches the selected node");
-  is(htmlTree.viewedElement, stylePanel.cssLogic.viewedElement,
+  is(computedView.viewedElement, computedView.cssLogic.viewedElement,
      "cssLogic node matches the cssHtmlTree node");
 }
 
 function SI_toggleDefaultStyles()
 {
   Services.obs.removeObserver(SI_toggleDefaultStyles, "StyleInspector-populated", false);
 
   info("clearing \"only user styles\" checkbox");
 
-  let iframe = stylePanel.iframe;
-  let checkbox = iframe.contentDocument.querySelector(".onlyuserstyles");
+  let doc = computedView.styleDocument;
+  let checkbox = doc.querySelector(".onlyuserstyles");
   Services.obs.addObserver(SI_AddFilterText, "StyleInspector-populated", false);
-  EventUtils.synthesizeMouse(checkbox, 5, 5, {}, iframe.contentWindow);
+  checkbox.click();
 }
 
 function SI_AddFilterText()
 {
   Services.obs.removeObserver(SI_AddFilterText, "StyleInspector-populated", false);
 
-  let iframe = stylePanel.iframe;
-  let searchbar = iframe.contentDocument.querySelector(".searchfield");
+  let doc = computedView.styleDocument;
+  let searchbar = doc.querySelector(".searchfield");
   Services.obs.addObserver(SI_checkFilter, "StyleInspector-populated", false);
   info("setting filter text to \"color\"");
   searchbar.focus();
-  EventUtils.synthesizeKey("c", {}, iframe.contentWindow);
-  EventUtils.synthesizeKey("o", {}, iframe.contentWindow);
-  EventUtils.synthesizeKey("l", {}, iframe.contentWindow);
-  EventUtils.synthesizeKey("o", {}, iframe.contentWindow);
-  EventUtils.synthesizeKey("r", {}, iframe.contentWindow);
+
+  let win =computedView.styleWindow;
+  EventUtils.synthesizeKey("c", {}, win);
+  EventUtils.synthesizeKey("o", {}, win);
+  EventUtils.synthesizeKey("l", {}, win);
+  EventUtils.synthesizeKey("o", {}, win);
+  EventUtils.synthesizeKey("r", {}, win);
 }
 
 function SI_checkFilter()
 {
   Services.obs.removeObserver(SI_checkFilter, "StyleInspector-populated", false);
-  let propertyViews = stylePanel.cssHtmlTree.propertyViews;
+  let propertyViews = computedView.propertyViews;
 
   info("check that the correct properties are visible");
   propertyViews.forEach(function(propView) {
     let name = propView.name;
     is(propView.visible, name.indexOf("color") > -1,
       "span " + name + " property visibility check");
   });
 
-  stylePanel.destroy();
   finishUp();
 }
 
 function finishUp()
 {
-  doc = stylePanel = null;
+  doc = inspector = computedView = null;
   gBrowser.removeCurrentTab();
   finish();
 }
 
 function test()
 {
   waitForExplicitFinish();
   gBrowser.selectedTab = gBrowser.addTab();
diff --git a/browser/devtools/styleinspector/test/browser_styleinspector_bug_672746_default_styles.js b/browser/devtools/styleinspector/test/browser_styleinspector_bug_672746_default_styles.js
--- a/browser/devtools/styleinspector/test/browser_styleinspector_bug_672746_default_styles.js
+++ b/browser/devtools/styleinspector/test/browser_styleinspector_bug_672746_default_styles.js
@@ -1,46 +1,57 @@
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // Tests that the checkbox to show only user styles works properly.
 
 let doc;
-let stylePanel;
+let inspector;
+let computedView;
 
 function createDocument()
 {
   doc.body.innerHTML = '<style type="text/css"> ' +
     '.matches {color: #F00;}</style>' +
     '<span id="matches" class="matches">Some styled text</span>' +
     '</div>';
   doc.title = "Style Inspector Default Styles Test";
-  // ok(StyleInspector.isEnabled, "style inspector preference is enabled");
-  stylePanel = new ComputedViewPanel(window);
-  stylePanel.createPanel(doc.body, runStyleInspectorTests);
+
+  openInspector(openComputedView);
+}
+
+function openComputedView(aInspector)
+{
+  inspector = aInspector;
+
+  inspector.sidebar.once("computedview-ready", function() {
+    inspector.sidebar.select("computedview");
+    computedView = getComputedView(inspector);
+
+    runStyleInspectorTests();
+  });
 }
 
 function runStyleInspectorTests()
 {
   Services.obs.addObserver(SI_check, "StyleInspector-populated", false);
   SI_inspectNode();
 }
 
 function SI_inspectNode()
 {
   let span = doc.querySelector("#matches");
   ok(span, "captain, we have the matches span");
 
-  let htmlTree = stylePanel.cssHtmlTree;
-  stylePanel.selectNode(span);
+  inspector.selection.setNode(span);
 
-  is(span, htmlTree.viewedElement,
+  is(span, computedView.viewedElement,
     "style inspector node matches the selected node");
-  is(htmlTree.viewedElement, stylePanel.cssLogic.viewedElement,
+  is(computedView.viewedElement, computedView.cssLogic.viewedElement,
      "cssLogic node matches the cssHtmlTree node");
 }
 
 function SI_check()
 {
   Services.obs.removeObserver(SI_check, "StyleInspector-populated", false);
   is(propertyVisible("color"), true,
     "span #matches color property is visible");
@@ -48,50 +59,50 @@ function SI_check()
     "span #matches background-color property is hidden");
 
   SI_toggleDefaultStyles();
 }
 
 function SI_toggleDefaultStyles()
 {
   // Click on the checkbox.
-  let iframe = stylePanel.iframe;
-  let checkbox = iframe.contentDocument.querySelector(".onlyuserstyles");
+  let doc = computedView.styleDocument;
+  let checkbox = doc.querySelector(".onlyuserstyles");
   Services.obs.addObserver(SI_checkDefaultStyles, "StyleInspector-populated", false);
-  EventUtils.synthesizeMouse(checkbox, 5, 5, {}, iframe.contentWindow);
+
+  checkbox.click();
 }
 
 function SI_checkDefaultStyles()
 {
   Services.obs.removeObserver(SI_checkDefaultStyles, "StyleInspector-populated", false);
   // Check that the default styles are now applied.
   is(propertyVisible("color"), true,
       "span color property is visible");
   is(propertyVisible("background-color"), true,
       "span background-color property is visible");
 
-  stylePanel.destroy();
   finishUp();
 }
 
 function propertyVisible(aName)
 {
   info("Checking property visibility for " + aName);
-  let propertyViews = stylePanel.cssHtmlTree.propertyViews;
+  let propertyViews = computedView.propertyViews;
   for each (let propView in propertyViews) {
     if (propView.name == aName) {
       return propView.visible;
     }
   }
   return false;
 }
 
 function finishUp()
 {
-  doc = stylePanel = null;
+  doc = inspector = computedView = null;
   gBrowser.removeCurrentTab();
   finish();
 }
 
 function test()
 {
   waitForExplicitFinish();
   gBrowser.selectedTab = gBrowser.addTab();
diff --git a/browser/devtools/styleinspector/test/browser_styleinspector_bug_689759_no_results_placeholder.js b/browser/devtools/styleinspector/test/browser_styleinspector_bug_689759_no_results_placeholder.js
--- a/browser/devtools/styleinspector/test/browser_styleinspector_bug_689759_no_results_placeholder.js
+++ b/browser/devtools/styleinspector/test/browser_styleinspector_bug_689759_no_results_placeholder.js
@@ -1,100 +1,110 @@
 /* vim: set ft=javascript ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 // Tests that the no results placeholder works properly.
 
 let doc;
-let stylePanel;
+let inspector;
+let computedView;
 
 function createDocument()
 {
   doc.body.innerHTML = '<style type="text/css"> ' +
     '.matches {color: #F00;}</style>' +
     '<span id="matches" class="matches">Some styled text</span>';
   doc.title = "Tests that the no results placeholder works properly";
-  stylePanel = new ComputedViewPanel(window);
-  stylePanel.createPanel(doc.body, runStyleInspectorTests);
+
+  openInspector(openComputedView);
 }
 
+function openComputedView(aInspector)
+{
+  inspector = aInspector;
+
+  inspector.sidebar.once("computedview-ready", function() {
+    inspector.sidebar.select("computedview");
+    computedView = getComputedView(inspector);
+
+    runStyleInspectorTests();
+  });
+}
+
+
 function runStyleInspectorTests()
 {
   Services.obs.addObserver(SI_AddFilterText, "StyleInspector-populated", false);
 
   let span = doc.querySelector("#matches");
   ok(span, "captain, we have the matches span");
 
-  let htmlTree = stylePanel.cssHtmlTree;
-  stylePanel.selectNode(span);
+  inspector.selection.setNode(span);
 
-  is(span, htmlTree.viewedElement,
+  is(span, computedView.viewedElement,
     "style inspector node matches the selected node");
-  is(htmlTree.viewedElement, stylePanel.cssLogic.viewedElement,
+  is(computedView.viewedElement, computedView.cssLogic.viewedElement,
      "cssLogic node matches the cssHtmlTree node");
 }
 
 function SI_AddFilterText()
 {
   Services.obs.removeObserver(SI_AddFilterText, "StyleInspector-populated", false);
 
-  let iframe = stylePanel.iframe;
-  let searchbar = stylePanel.cssHtmlTree.searchField;
+  let searchbar = computedView.searchField;
   let searchTerm = "xxxxx";
 
   Services.obs.addObserver(SI_checkPlaceholderVisible, "StyleInspector-populated", false);
   info("setting filter text to \"" + searchTerm + "\"");
   searchbar.focus();
   for each (let c in searchTerm) {
-    EventUtils.synthesizeKey(c, {}, iframe.contentWindow);
+    EventUtils.synthesizeKey(c, {}, computedView.styleWindow);
   }
 }
 
 function SI_checkPlaceholderVisible()
 {
   Services.obs.removeObserver(SI_checkPlaceholderVisible, "StyleInspector-populated", false);
   info("SI_checkPlaceholderVisible called");
-  let placeholder = stylePanel.cssHtmlTree.noResults;
-  let iframe = stylePanel.iframe;
-  let display = iframe.contentWindow.getComputedStyle(placeholder).display;
+  let placeholder = computedView.noResults;
+  let win = computedView.styleWindow;
+  let display = win.getComputedStyle(placeholder).display;
 
   is(display, "block", "placeholder is visible");
 
   SI_ClearFilterText();
 }
 
 function SI_ClearFilterText()
 {
-  let iframe = stylePanel.iframe;
-  let searchbar = stylePanel.cssHtmlTree.searchField;
+  let searchbar = computedView.searchField;
 
   Services.obs.addObserver(SI_checkPlaceholderHidden, "StyleInspector-populated", false);
   info("clearing filter text");
   searchbar.focus();
   searchbar.value = "";
-  EventUtils.synthesizeKey("c", {}, iframe.contentWindow);
+  EventUtils.synthesizeKey("c", {}, computedView.styleWindow);
 }
 
 function SI_checkPlaceholderHidden()
 {
   Services.obs.removeObserver(SI_checkPlaceholderHidden, "StyleInspector-populated", false);
-  let placeholder = stylePanel.cssHtmlTree.noResults;
-  let iframe = stylePanel.iframe;
-  let display = iframe.contentWindow.getComputedStyle(placeholder).display;
+  let placeholder = computedView.noResults;
+  let win = computedView.styleWindow;
+  let display = win.getComputedStyle(placeholder).display;
 
   is(display, "none", "placeholder is hidden");
 
-  stylePanel.destroy();
   finishUp();
 }
 
 function finishUp()
 {
-  doc = stylePanel = null;
+  doc = inspector = computedView = null;
   gBrowser.removeCurrentTab();
   finish();
 }
 
 function test()
 {
   waitForExplicitFinish();
   gBrowser.selectedTab = gBrowser.addTab();
diff --git a/browser/devtools/styleinspector/test/head.js b/browser/devtools/styleinspector/test/head.js
--- a/browser/devtools/styleinspector/test/head.js
+++ b/browser/devtools/styleinspector/test/head.js
@@ -1,313 +1,84 @@
 /* vim:set ts=2 sw=2 sts=2 et: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 let tempScope = {};
 Cu.import("resource:///modules/devtools/CssLogic.jsm", tempScope);
 Cu.import("resource:///modules/devtools/CssHtmlTree.jsm", tempScope);
-Cu.import("resource:///modules/HUDService.jsm", tempScope);
-let HUDService = tempScope.HUDService;
+Cu.import("resource:///modules/devtools/gDevTools.jsm", tempScope);
 let ConsoleUtils = tempScope.ConsoleUtils;
 let CssLogic = tempScope.CssLogic;
 let CssHtmlTree = tempScope.CssHtmlTree;
+let gDevTools = tempScope.gDevTools;
+Cu.import("resource:///modules/devtools/Target.jsm", tempScope);
+let TargetFactory = tempScope.TargetFactory;
 
-function log(aMsg)
-{
-  dump("*** WebConsoleTest: " + aMsg + "\n");
-}
-
-function pprint(aObj)
-{
-  for (let prop in aObj) {
-    if (typeof aObj[prop] == "function") {
-      log("function " + prop);
-    }
-    else {
-      log(prop + ": " + aObj[prop]);
-    }
-  }
-}
-
-let tab, browser, hudId, hud, hudBox, filterBox, outputNode, cs;
+let browser, hudId, hud, hudBox, filterBox, outputNode, cs;
 
 function addTab(aURL)
 {
   gBrowser.selectedTab = gBrowser.addTab();
   content.location = aURL;
-  tab = gBrowser.selectedTab;
-  browser = gBrowser.getBrowserForTab(tab);
+  browser = gBrowser.getBrowserForTab(gBrowser.selectedTab);
 }
 
-function afterAllTabsLoaded(callback, win) {
-  win = win || window;
-
-  let stillToLoad = 0;
-
-  function onLoad() {
-    this.removeEventListener("load", onLoad, true);
-    stillToLoad--;
-    if (!stillToLoad)
-      callback();
+function openInspector(callback)
+{
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+  let inspector = gDevTools.getPanelForTarget("inspector", target);
+  if (inspector && inspector.isReady) {
+    callback(inspector);
+  } else {
+    let toolbox = gDevTools.openToolboxForTab(target, "inspector");
+    toolbox.once("inspector-ready", function(event, panel) {
+      let inspector = gDevTools.getPanelForTarget("inspector", target);
+      callback(inspector);
+    });
   }
-
-  for (let a = 0; a < win.gBrowser.tabs.length; a++) {
-    let browser = win.gBrowser.tabs[a].linkedBrowser;
-    if (browser.contentDocument.readyState != "complete") {
-      stillToLoad++;
-      browser.addEventListener("load", onLoad, true);
-    }
-  }
-
-  if (!stillToLoad)
-    callback();
-}
-
-/**
- * Check if a log entry exists in the HUD output node.
- *
- * @param {Element} aOutputNode
- *        the HUD output node.
- * @param {string} aMatchString
- *        the string you want to check if it exists in the output node.
- * @param {string} aMsg
- *        the message describing the test
- * @param {boolean} [aOnlyVisible=false]
- *        find only messages that are visible, not hidden by the filter.
- * @param {boolean} [aFailIfFound=false]
- *        fail the test if the string is found in the output node.
- * @param {string} aClass [optional]
- *        find only messages with the given CSS class.
- */
-function testLogEntry(aOutputNode, aMatchString, aMsg, aOnlyVisible,
-                      aFailIfFound, aClass)
-{
-  let selector = ".hud-msg-node";
-  // Skip entries that are hidden by the filter.
-  if (aOnlyVisible) {
-    selector += ":not(.hud-filtered-by-type)";
-  }
-  if (aClass) {
-    selector += "." + aClass;
-  }
-
-  let msgs = aOutputNode.querySelectorAll(selector);
-  let found = false;
-  for (let i = 0, n = msgs.length; i < n; i++) {
-    let message = msgs[i].textContent.indexOf(aMatchString);
-    if (message > -1) {
-      found = true;
-      break;
-    }
-
-    // Search the labels too.
-    let labels = msgs[i].querySelectorAll("label");
-    for (let j = 0; j < labels.length; j++) {
-      if (labels[j].getAttribute("value").indexOf(aMatchString) > -1) {
-        found = true;
-        break;
-      }
-    }
-  }
-
-  is(found, !aFailIfFound, aMsg);
-}
-
-/**
- * A convenience method to call testLogEntry().
- *
- * @param string aString
- *        The string to find.
- */
-function findLogEntry(aString)
-{
-  testLogEntry(outputNode, aString, "found " + aString);
 }
 
 function addStyle(aDocument, aString)
 {
   let node = aDocument.createElement('style');
   node.setAttribute("type", "text/css");
   node.textContent = aString;
   aDocument.getElementsByTagName("head")[0].appendChild(node);
   return node;
 }
 
-function openConsole()
-{
-  HUDService.activateHUDForContext(tab);
-}
-
-function closeConsole()
-{
-  HUDService.deactivateHUDForContext(tab);
-}
-
 function finishTest()
 {
   finish();
 }
 
 function tearDown()
 {
   try {
-    HUDService.deactivateHUDForContext(gBrowser.selectedTab);
+    let target = TargetFactory.forTab(gBrowser.selectedTab);
+    gDevTools.closeToolbox(target);
   }
   catch (ex) {
-    log(ex);
+    dump(ex);
   }
   while (gBrowser.tabs.length > 1) {
     gBrowser.removeCurrentTab();
   }
-  tab = browser = hudId = hud = filterBox = outputNode = cs = null;
+  browser = hudId = hud = filterBox = outputNode = cs = null;
 }
 
-/**
- * Shows the computed view in its own panel.
- */
-function ComputedViewPanel(aContext)
-{
-  this._init(aContext);
+function getComputedView(inspector) {
+  return inspector.sidebar.getWindowForTab("computedview").computedview.view;
 }
 
-ComputedViewPanel.prototype = {
-  _init: function CVP_init(aContext)
-  {
-    this.window = aContext;
-    this.document = this.window.document;
-    this.cssLogic = new CssLogic();
-    this.panelReady = false;
-    this.iframeReady = false;
-  },
-
-  /**
-   * Factory method to create the actual style panel
-   * @param {function} aCallback (optional) callback to fire when ready.
-   */
-  createPanel: function SI_createPanel(aSelection, aCallback)
-  {
-    let popupSet = this.document.getElementById("mainPopupSet");
-    let panel = this.document.createElement("panel");
-
-    panel.setAttribute("class", "styleInspector");
-    panel.setAttribute("orient", "vertical");
-    panel.setAttribute("ignorekeys", "true");
-    panel.setAttribute("noautofocus", "true");
-    panel.setAttribute("noautohide", "true");
-    panel.setAttribute("titlebar", "normal");
-    panel.setAttribute("close", "true");
-    panel.setAttribute("label", "Computed View");
-    panel.setAttribute("width", 350);
-    panel.setAttribute("height", this.window.screen.height / 2);
-
-    this._openCallback = aCallback;
-    this.selectedNode = aSelection;
-
-    let iframe = this.document.createElement("iframe");
-    let boundIframeOnLoad = function loadedInitializeIframe()
-    {
-      this.iframeReady = true;
-      this.iframe.removeEventListener("load", boundIframeOnLoad, true);
-      this.panel.openPopup(this.window.gBrowser.selectedBrowser, "end_before", 0, 0, false, false);
-    }.bind(this);
-
-    iframe.flex = 1;
-    iframe.setAttribute("tooltip", "aHTMLTooltip");
-    iframe.addEventListener("load", boundIframeOnLoad, true);
-    iframe.setAttribute("src", "chrome://browser/content/devtools/csshtmltree.xul");
-
-    panel.appendChild(iframe);
-    popupSet.appendChild(panel);
-
-    this._boundPopupShown = this.popupShown.bind(this);
-    panel.addEventListener("popupshown", this._boundPopupShown, false);
-
-    this.panel = panel;
-    this.iframe = iframe;
-
-    return panel;
-  },
-
-  /**
-   * Event handler for the popupshown event.
-   */
-  popupShown: function SI_popupShown()
-  {
-    this.panelReady = true;
-    this.cssHtmlTree = new CssHtmlTree(this);
-    let selectedNode = this.selectedNode || null;
-    this.cssLogic.highlight(selectedNode);
-    this.cssHtmlTree.highlight(selectedNode);
-    if (this._openCallback) {
-      this._openCallback();
-      delete this._openCallback;
-    }
-  },
-
-  isLoaded: function SI_isLoaded()
-  {
-    return this.iframeReady && this.panelReady;
-  },
-
-  /**
-   * Select from Path (via CssHtmlTree_pathClick)
-   * @param aNode The node to inspect.
-   */
-  selectFromPath: function SI_selectFromPath(aNode)
-  {
-    this.selectNode(aNode);
-  },
-
-  /**
-   * Select a node to inspect in the Style Inspector panel
-   * @param aNode The node to inspect.
-   */
-  selectNode: function SI_selectNode(aNode)
-  {
-    this.selectedNode = aNode;
-
-    if (this.isLoaded()) {
-      this.cssLogic.highlight(aNode);
-      this.cssHtmlTree.highlight(aNode);
-    }
-  },
-
-  /**
-   * Destroy the style panel, remove listeners etc.
-   */
-  destroy: function SI_destroy()
-  {
-    this.panel.hidePopup();
-
-    if (this.cssHtmlTree) {
-      this.cssHtmlTree.destroy();
-      delete this.cssHtmlTree;
-    }
-
-    if (this.iframe) {
-      this.iframe.parentNode.removeChild(this.iframe);
-      delete this.iframe;
-    }
-
-    delete this.cssLogic;
-    this.panel.removeEventListener("popupshown", this._boundPopupShown, false);
-    delete this._boundPopupShown;
-    this.panel.parentNode.removeChild(this.panel);
-    delete this.panel;
-    delete this.doc;
-    delete this.win;
-    delete CssHtmlTree.win;
-  },
-};
-
 function ruleView()
 {
-  return InspectorUI.sidebar._toolContext("ruleview").view;
+  return inspector.sidebar.getWindowForTab("ruleview").ruleview.view;
 }
 
 function waitForEditorFocus(aParent, aCallback)
 {
   aParent.addEventListener("focus", function onFocus(evt) {
     if (inplaceEditor(evt.target) && evt.target.tagName == "input") {
       aParent.removeEventListener("focus", onFocus, true);
       let editor = inplaceEditor(evt.target);
@@ -324,12 +95,24 @@ function waitForEditorBlur(aEditor, aCal
   input.addEventListener("blur", function onBlur() {
     input.removeEventListener("blur", onBlur, false);
     executeSoon(function() {
       aCallback();
     });
   }, false);
 }
 
+function contextMenuClick(element) {
+  var evt = element.ownerDocument.createEvent('MouseEvents');
+
+  var button = 2;  // right click
+
+  evt.initMouseEvent('contextmenu', true, true,
+       element.ownerDocument.defaultView, 1, 0, 0, 0, 0, false,
+       false, false, false, button, null);
+
+  element.dispatchEvent(evt);
+}
+
 registerCleanupFunction(tearDown);
 
 waitForExplicitFinish();
 
diff --git a/browser/devtools/tilt/CmdTilt.jsm b/browser/devtools/tilt/CmdTilt.jsm
--- a/browser/devtools/tilt/CmdTilt.jsm
+++ b/browser/devtools/tilt/CmdTilt.jsm
@@ -2,16 +2,17 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 
 this.EXPORTED_SYMBOLS = [ ];
 
 Components.utils.import("resource:///modules/devtools/gcli.jsm");
 Components.utils.import("resource:///modules/HUDService.jsm");
+Components.utils.import("resource:///modules/devtools/Tilt.jsm");
 
 
 /**
  * 'tilt' command
  */
 gcli.addCommand({
   name: 'tilt',
   description: gcli.lookup("tiltDesc"),
@@ -21,41 +22,42 @@ gcli.addCommand({
 
 /**
  * 'tilt open' command
  */
 gcli.addCommand({
   name: 'tilt open',
   description: gcli.lookup("tiltOpenDesc"),
   manual: gcli.lookup("tiltOpenManual"),
-  params: [
-    {
-      name: "node",
-      type: "node",
-      defaultValue: null,
-      description: gcli.lookup("inspectNodeDesc"),
-      manual: gcli.lookup("inspectNodeManual")
-    }
-  ],
   exec: function(args, context) {
     let chromeWindow = context.environment.chromeDocument.defaultView;
-    let InspectorUI = chromeWindow.InspectorUI;
-    let Tilt = chromeWindow.Tilt;
+    let Tilt = TiltManager.getTiltForBrowser(chromeWindow);
+    Tilt.initializeForCurrentTab();
+  }
+});
 
-    if (Tilt.currentInstance) {
-      Tilt.update(args.node);
-    } else {
-      let hudId = chromeWindow.HUDConsoleUI.getOpenHUD();
-      let hud = HUDService.getHudReferenceById(hudId);
 
-      if (hud && !hud.consolePanel) {
-        HUDService.deactivateHUDForContext(chromeWindow.gBrowser.selectedTab);
-      }
-      InspectorUI.openInspectorUI(args.node);
-      Tilt.initialize();
+/**
+ * 'tilt toggle' command
+ */
+gcli.addCommand({
+  name: "tilt toggle",
+  buttonId: "command-button-tilt",
+  buttonClass: "command-button",
+  hidden: true,
+  exec: function(args, context) {
+    let chromeWindow = context.environment.chromeDocument.defaultView;
+
+    if (TiltManager._instances.has(chromeWindow)) {
+      let Tilt = TiltManager.getTiltForBrowser(chromeWindow);
+      Tilt.destroy(Tilt.currentWindowId);
+    }
+    else {
+      let Tilt = TiltManager.getTiltForBrowser(chromeWindow);
+      Tilt.initializeForCurrentTab();
     }
   }
 });
 
 
 /**
  * 'tilt translate' command
  */
@@ -76,18 +78,17 @@ gcli.addCommand({
       type: "number",
       defaultValue: 0,
       description: gcli.lookup("tiltTranslateYDesc"),
       manual: gcli.lookup("tiltTranslateYManual")
     }
   ],
   exec: function(args, context) {
     let chromeWindow = context.environment.chromeDocument.defaultView;
-    let Tilt = chromeWindow.Tilt;
-
+    let Tilt = TiltManager.getTiltForBrowser(chromeWindow);
     if (Tilt.currentInstance) {
       Tilt.currentInstance.controller.arcball.translate([args.x, args.y]);
     }
   }
 });
 
 
 /**
@@ -117,18 +118,17 @@ gcli.addCommand({
       type: { name: 'number', min: -360, max: 360, step: 10 },
       defaultValue: 0,
       description: gcli.lookup("tiltRotateZDesc"),
       manual: gcli.lookup("tiltRotateZManual")
     }
   ],
   exec: function(args, context) {
     let chromeWindow = context.environment.chromeDocument.defaultView;
-    let Tilt = chromeWindow.Tilt;
-
+    let Tilt = TiltManager.getTiltForBrowser(chromeWindow);
     if (Tilt.currentInstance) {
       Tilt.currentInstance.controller.arcball.rotate([args.x, args.y, args.z]);
     }
   }
 });
 
 
 /**
@@ -143,17 +143,17 @@ gcli.addCommand({
       name: "zoom",
       type: { name: 'number' },
       description: gcli.lookup("tiltZoomAmountDesc"),
       manual: gcli.lookup("tiltZoomAmountManual")
     }
   ],
   exec: function(args, context) {
     let chromeWindow = context.environment.chromeDocument.defaultView;
-    let Tilt = chromeWindow.Tilt;
+    let Tilt = TiltManager.getTiltForBrowser(chromeWindow);
 
     if (Tilt.currentInstance) {
       Tilt.currentInstance.controller.arcball.zoom(-args.zoom);
     }
   }
 });
 
 
@@ -161,17 +161,17 @@ gcli.addCommand({
  * 'tilt reset' command
  */
 gcli.addCommand({
   name: 'tilt reset',
   description: gcli.lookup("tiltResetDesc"),
   manual: gcli.lookup("tiltResetManual"),
   exec: function(args, context) {
     let chromeWindow = context.environment.chromeDocument.defaultView;
-    let Tilt = chromeWindow.Tilt;
+    let Tilt = TiltManager.getTiltForBrowser(chromeWindow);
 
     if (Tilt.currentInstance) {
       Tilt.currentInstance.controller.arcball.reset();
     }
   }
 });
 
 
@@ -179,13 +179,13 @@ gcli.addCommand({
  * 'tilt close' command
  */
 gcli.addCommand({
   name: 'tilt close',
   description: gcli.lookup("tiltCloseDesc"),
   manual: gcli.lookup("tiltCloseManual"),
   exec: function(args, context) {
     let chromeWindow = context.environment.chromeDocument.defaultView;
-    let Tilt = chromeWindow.Tilt;
+    let Tilt = TiltManager.getTiltForBrowser(chromeWindow);
 
     Tilt.destroy(Tilt.currentWindowId);
   }
 });
diff --git a/browser/devtools/tilt/Tilt.jsm b/browser/devtools/tilt/Tilt.jsm
--- a/browser/devtools/tilt/Tilt.jsm
+++ b/browser/devtools/tilt/Tilt.jsm
@@ -43,17 +43,31 @@ const TILT_NOTIFICATIONS = {
   NODE_REMOVED: "tilt-node-removed"
 };
 
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource:///modules/devtools/TiltGL.jsm");
 Cu.import("resource:///modules/devtools/TiltUtils.jsm");
 Cu.import("resource:///modules/devtools/TiltVisualizer.jsm");
 
-this.EXPORTED_SYMBOLS = ["Tilt"];
+this.EXPORTED_SYMBOLS = ["TiltManager"];
+
+this.TiltManager = {
+  _instances: new WeakMap(),
+  getTiltForBrowser: function(aChromeWindow)
+  {
+    if (this._instances.has(aChromeWindow)) {
+      return this._instances.get(aChromeWindow);
+    } else {
+      let tilt = new Tilt(aChromeWindow);
+      this._instances.set(aChromeWindow, tilt);
+      return tilt;
+    }
+  },
+}
 
 /**
  * Object managing instances of the visualizer.
  *
  * @param {Window} aWindow
  *                 the chrome window used by each visualizer instance
  */
 this.Tilt = function Tilt(aWindow)
@@ -67,39 +81,49 @@ this.Tilt = function Tilt(aWindow)
    * All the instances of TiltVisualizer.
    */
   this.visualizers = {};
 
   /**
    * Shortcut for accessing notifications strings.
    */
   this.NOTIFICATIONS = TILT_NOTIFICATIONS;
+
+  this.setup();
 }
 
 Tilt.prototype = {
 
   /**
    * Initializes a visualizer for the current tab.
    */
-  initialize: function T_initialize()
+  initializeForCurrentTab: function T_initializeForCurrentTab()
   {
+    let contentWindow = this.chromeWindow.gBrowser.selectedBrowser.contentWindow;
     let id = this.currentWindowId;
+    let self = this;
+
+    contentWindow.addEventListener("beforeunload", function onUnload() {
+      contentWindow.removeEventListener("beforeunload", onUnload, false);
+      self.destroy(id, true);
+    }, false);
 
     // if the visualizer for the current tab is already open, destroy it now
     if (this.visualizers[id]) {
       this.destroy(id, true);
       return;
     }
 
     // create a visualizer instance for the current tab
     this.visualizers[id] = new TiltVisualizer({
       chromeWindow: this.chromeWindow,
       contentWindow: this.chromeWindow.gBrowser.selectedBrowser.contentWindow,
       parentNode: this.chromeWindow.gBrowser.selectedBrowser.parentNode,
-      notifications: this.NOTIFICATIONS
+      notifications: this.NOTIFICATIONS,
+      tab: this.chromeWindow.gBrowser.selectedTab
     });
 
     // make sure the visualizer object was initialized properly
     if (!this.visualizers[id].isInitialized()) {
       this.destroy(id);
       this.failureCallback && this.failureCallback();
       return;
     }
@@ -158,137 +182,37 @@ Tilt.prototype = {
     this.visualizers[aId] = null;
 
     this._isDestroying = false;
     this.chromeWindow.gBrowser.selectedBrowser.focus();
     Services.obs.notifyObservers(null, TILT_NOTIFICATIONS.DESTROYED, null);
   },
 
   /**
-   * Handles any supplementary post-initialization work, done immediately
-   * after a TILT_NOTIFICATIONS.INITIALIZING notification.
-   */
-  _whenInitializing: function T__whenInitializing()
-  {
-    this._whenShown();
-  },
-
-  /**
-   * Handles any supplementary post-destruction work, done immediately
-   * after a TILT_NOTIFICATIONS.DESTROYED notification.
-   */
-  _whenDestroyed: function T__whenDestroyed()
-  {
-    this._whenHidden();
-  },
-
-  /**
-   * Handles any necessary changes done when the Tilt surface is shown,
-   * after a TILT_NOTIFICATIONS.SHOWN notification.
-   */
-  _whenShown: function T__whenShown()
-  {
-    this.tiltButton.checked = true;
-  },
-
-  /**
-   * Handles any necessary changes done when the Tilt surface is hidden,
-   * after a TILT_NOTIFICATIONS.HIDDEN notification.
-   */
-  _whenHidden: function T__whenHidden()
-  {
-    this.tiltButton.checked = false;
-  },
-
-  /**
    * Handles the event fired when a tab is selected.
    */
   _onTabSelect: function T__onTabSelect()
   {
     if (this.currentInstance) {
       Services.obs.notifyObservers(null, TILT_NOTIFICATIONS.SHOWN, null);
     } else {
       Services.obs.notifyObservers(null, TILT_NOTIFICATIONS.HIDDEN, null);
     }
   },
 
   /**
-   * A node was selected in the Inspector.
-   * Called from InspectorUI.
-   *
-   * @param {Element} aNode
-   *                  the newly selected node
-   */
-  update: function T_update(aNode) {
-    if (this.currentInstance) {
-      this.currentInstance.presenter.highlightNode(aNode, "moveIntoView");
-    }
-  },
-
-  /**
    * Add the browser event listeners to handle state changes.
-   * Called from InspectorUI.
    */
   setup: function T_setup()
   {
-    if (this._setupFinished) {
-      return;
-    }
-
     // load the preferences from the devtools.tilt branch
     TiltVisualizer.Prefs.load();
 
-    // hide the button in the Inspector toolbar if Tilt is not enabled
-    this.tiltButton.hidden = !this.enabled;
-
-    // add the necessary observers to handle specific notifications
-    Services.obs.addObserver(
-      this._whenInitializing.bind(this), TILT_NOTIFICATIONS.INITIALIZING, false);
-    Services.obs.addObserver(
-      this._whenDestroyed.bind(this), TILT_NOTIFICATIONS.DESTROYED, false);
-    Services.obs.addObserver(
-      this._whenShown.bind(this), TILT_NOTIFICATIONS.SHOWN, false);
-    Services.obs.addObserver(
-      this._whenHidden.bind(this), TILT_NOTIFICATIONS.HIDDEN, false);
-
-    Services.obs.addObserver(function(aSubject, aTopic, aWinId) {
-      this.destroy(aWinId); }.bind(this),
-      this.chromeWindow.InspectorUI.INSPECTOR_NOTIFICATIONS.DESTROYED, false);
-
-    this.chromeWindow.gBrowser.tabContainer.addEventListener("TabSelect",
-      this._onTabSelect.bind(this), false);
-
-
-    // FIXME: this shouldn't be done here, see bug #705131
-    let onOpened = function() {
-      if (this.inspector && this.highlighter && this.currentInstance) {
-        this.inspector.stopInspecting();
-        this.inspectButton.disabled = true;
-        this.highlighter.hide();
-      }
-    }.bind(this);
-
-    let onClosed = function() {
-      if (this.inspector && this.highlighter) {
-        this.inspectButton.disabled = false;
-        this.highlighter.show();
-      }
-    }.bind(this);
-
-    Services.obs.addObserver(onOpened,
-      this.chromeWindow.InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-    Services.obs.addObserver(onClosed,
-      this.chromeWindow.InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED, false);
-    Services.obs.addObserver(onOpened,
-      TILT_NOTIFICATIONS.INITIALIZING, false);
-    Services.obs.addObserver(onClosed,
-      TILT_NOTIFICATIONS.DESTROYED, false);
-
-
-    this._setupFinished = true;
+    this.chromeWindow.gBrowser.tabContainer.addEventListener(
+      "TabSelect", this._onTabSelect.bind(this), false);
   },
 
   /**
    * Returns true if this tool is enabled.
    */
   get enabled()
   {
     return (TiltVisualizer.Prefs.enabled &&
@@ -306,40 +230,9 @@ Tilt.prototype = {
 
   /**
    * Gets the visualizer instance for the current tab.
    */
   get currentInstance()
   {
     return this.visualizers[this.currentWindowId];
   },
-
-  /**
-   * Gets the current InspectorUI instance.
-   */
-  get inspector()
-  {
-    return this.chromeWindow.InspectorUI;
-  },
-
-  /**
-   * Gets the current Highlighter instance from the InspectorUI.
-   */
-  get highlighter()
-  {
-    return this.inspector.highlighter;
-  },
-
-  /**
-   * Gets the Tilt button in the Inspector toolbar.
-   */
-  get tiltButton()
-  {
-    return this.chromeWindow.document.getElementById("inspector-3D-button");
-  },
-
-  /**
-   * Gets the Inspect button in the Inspector toolbar.
-   */
-  get inspectButton() {
-    return this.chromeWindow.document.getElementById("inspector-inspect-toolbutton");
-  }
 };
diff --git a/browser/devtools/tilt/TiltVisualizer.jsm b/browser/devtools/tilt/TiltVisualizer.jsm
--- a/browser/devtools/tilt/TiltVisualizer.jsm
+++ b/browser/devtools/tilt/TiltVisualizer.jsm
@@ -46,16 +46,18 @@ const ARCBALL_ZOOM_MIN = -3000;
 const ARCBALL_ZOOM_MAX = 500;
 const ARCBALL_RESET_SPHERICAL_FACTOR = 0.1;
 const ARCBALL_RESET_LINEAR_FACTOR = 0.01;
 
 const TILT_CRAFTER = "resource:///modules/devtools/TiltWorkerCrafter.js";
 const TILT_PICKER = "resource:///modules/devtools/TiltWorkerPicker.js";
 
 Cu.import("resource://gre/modules/Services.jsm");
+Cu.import("resource:///modules/devtools/gDevTools.jsm");
+Cu.import("resource:///modules/devtools/Target.jsm");
 Cu.import("resource:///modules/devtools/TiltGL.jsm");
 Cu.import("resource:///modules/devtools/TiltMath.jsm");
 Cu.import("resource:///modules/devtools/TiltUtils.jsm");
 Cu.import("resource:///modules/devtools/TiltVisualizerStyle.jsm");
 
 this.EXPORTED_SYMBOLS = ["TiltVisualizer"];
 
 /**
@@ -93,16 +95,18 @@ this.TiltVisualizer = function TiltVisua
    */
   this.presenter = new TiltVisualizer.Presenter(this.canvas,
     aProperties.chromeWindow,
     aProperties.contentWindow,
     aProperties.notifications,
     aProperties.onError || null,
     aProperties.onLoad || null);
 
+  this.bindToInspector(aProperties.tab);
+
   /**
    * Visualization mouse and keyboard controller.
    */
   this.controller = new TiltVisualizer.Controller(this.canvas, this.presenter);
 }
 
 TiltVisualizer.prototype = {
 
@@ -127,29 +131,148 @@ TiltVisualizer.prototype = {
     }
   },
 
   /**
    * Explicitly cleans up this visualizer and sets everything to null.
    */
   cleanup: function TV_cleanup()
   {
+    this.unbindInspector();
+
     if (this.controller) {
       TiltUtils.destroyObject(this.controller);
     }
     if (this.presenter) {
       TiltUtils.destroyObject(this.presenter);
     }
 
     let chromeWindow = this.chromeWindow;
 
     TiltUtils.destroyObject(this);
     TiltUtils.clearCache();
     TiltUtils.gc(chromeWindow);
-  }
+  },
+
+  /**
+   * Listen to the inspector activity.
+   */
+  bindToInspector: function TV_bindToInspector(aTab)
+  {
+    this._browserTab = aTab;
+
+    this.onNewNodeFromInspector = this.onNewNodeFromInspector.bind(this);
+    this.onNewNodeFromTilt = this.onNewNodeFromTilt.bind(this);
+    this.onInspectorReady = this.onInspectorReady.bind(this);
+    this.onToolboxDestroyed = this.onToolboxDestroyed.bind(this);
+
+    gDevTools.on("inspector-ready", this.onInspectorReady);
+    gDevTools.on("toolbox-destroyed", this.onToolboxDestroyed);
+
+    Services.obs.addObserver(this.onNewNodeFromTilt,
+                             this.presenter.NOTIFICATIONS.HIGHLIGHTING,
+                             false);
+    Services.obs.addObserver(this.onNewNodeFromTilt,
+                             this.presenter.NOTIFICATIONS.UNHIGHLIGHTING,
+                             false);
+
+    let target = TargetFactory.forTab(aTab);
+    let inspector = gDevTools.getPanelForTarget("inspector", target);
+    if (inspector) {
+      this.inspector = inspector;
+      this.inspector.selection.on("new-node", this.onNewNodeFromInspector);
+      this.inspector.selection.on("detached", this.onNewNodeFromInspector);
+      this.onNewNodeFromInspector();
+    }
+  },
+
+  /**
+   * Unregister inspector event listeners.
+   */
+  unbindInspector: function TV_unbindInspector()
+  {
+    this._browserTab = null;
+
+    if (this.inspector) {
+      this.inspector.selection.off("new-node", this.onNewNodeFromInspector);
+      this.inspector.selection.off("detached", this.onNewNodeFromInspector);
+      this.inspector = null;
+    }
+
+    gDevTools.off("inspector-ready", this.onInspectorReady);
+    gDevTools.off("toolbox-destroyed", this.onToolboxDestroyed);
+
+    Services.obs.removeObserver(this.onNewNodeFromTilt,
+                                this.presenter.NOTIFICATIONS.HIGHLIGHTING);
+    Services.obs.removeObserver(this.onNewNodeFromTilt,
+                                this.presenter.NOTIFICATIONS.UNHIGHLIGHTING);
+  },
+
+  /**
+   * When a new inspector is started.
+   */
+  onInspectorReady: function TV_onInspectorReady(event, toolbox, panel)
+  {
+    if (toolbox.target.tab === this._browserTab) {
+      this.inspector = panel;
+      this.inspector.selection.on("new-node", this.onNewNodeFromInspector);
+      this.inspector.selection.on("detached", this.onNewNodeFromInspector);
+      this.onNewNodeFromTilt();
+    }
+  },
+
+  /**
+   * When the toolbox, therefor the inspector, is closed.
+   */
+  onToolboxDestroyed: function TV_onToolboxDestroyed(event, tab)
+  {
+    if (tab === this._browserTab &&
+        this.inspector) {
+      if (this.inspector.selection) {
+        this.inspector.selection.off("new-node", this.onNewNodeFromInspector);
+        this.inspector.selection.off("detached", this.onNewNodeFromInspector);
+      }
+      this.inspector = null;
+    }
+  },
+
+  /**
+   * When a new node is selected in the inspector.
+   */
+  onNewNodeFromInspector: function TV_onNewNodeFromInspector()
+  {
+    if (this.inspector &&
+        this.inspector.selection.reason != "tilt") {
+      let selection = this.inspector.selection;
+      let canHighlightNode = selection.isNode() &&
+                              selection.isConnected() &&
+                              selection.isElementNode();
+      if (canHighlightNode) {
+        this.presenter.highlightNode(selection.node);
+      } else {
+        this.presenter.highlightNodeFor(-1);
+      }
+    }
+  },
+
+  /**
+   * When a new node is selected in Tilt.
+   */
+  onNewNodeFromTilt: function TV_onNewNodeFromTilt()
+  {
+    if (!this.inspector) {
+      return;
+    }
+    let nodeIndex = this.presenter._currentSelection;
+    if (nodeIndex < 0) {
+      this.inspector.selection.setNode(null, "tilt");
+    }
+    let node = this.presenter._traverseData.nodes[nodeIndex];
+    this.inspector.selection.setNode(node, "tilt");
+  },
 };
 
 /**
  * This object manages the visualization logic and drawing loop.
  *
  * @param {HTMLCanvasElement} aCanvas
  *                            the canvas element used for rendering
  * @param {Window} aChromeWindow
@@ -167,17 +290,17 @@ TiltVisualizer.Presenter = function TV_P
   aCanvas, aChromeWindow, aContentWindow, aNotifications, onError, onLoad)
 {
   /**
    * A canvas overlay used for drawing the visualization.
    */
   this.canvas = aCanvas;
 
   /**
-   * Save a reference to the top-level window, to access InspectorUI or Tilt.
+   * Save a reference to the top-level window, to access Tilt.
    */
   this.chromeWindow = aChromeWindow;
 
   /**
    * The content window generating the visualization
    */
   this.contentWindow = aContentWindow;
 
@@ -226,17 +349,16 @@ TiltVisualizer.Presenter = function TV_P
     translation: vec3.create(), // scene translation, on the [x, y, z] axis
     rotation: quat4.create()    // scene rotation, expressed as a quaternion
   };
 
   /**
    * Variables holding information about the initial and current node selected.
    */
   this._currentSelection = -1; // the selected node index
-  this._initialSelection = false; // true if an initial selection was made
   this._initialMeshConfiguration = false; // true if the 3D mesh was configured
 
   /**
    * Variable specifying if the scene should be redrawn.
    * This should happen usually when the visualization is translated/rotated.
    */
   this._redraw = true;
 
@@ -262,47 +384,55 @@ TiltVisualizer.Presenter = function TV_P
 TiltVisualizer.Presenter.prototype = {
 
   /**
    * The initialization logic.
    */
   _setup: function TVP__setup()
   {
     let renderer = this._renderer;
-    let inspector = this.chromeWindow.InspectorUI;
 
     // if the renderer was destroyed, don't continue setup
     if (!renderer || !renderer.context) {
       return;
     }
 
     // create the visualization shaders and program to draw the stacks mesh
     this._visualizationProgram = new renderer.Program({
       vs: TiltVisualizer.MeshShader.vs,
       fs: TiltVisualizer.MeshShader.fs,
       attributes: ["vertexPosition", "vertexTexCoord", "vertexColor"],
       uniforms: ["mvMatrix", "projMatrix", "sampler"]
     });
 
     // get the document zoom to properly scale the visualization
-    if (inspector.highlighter) {
-      this.transforms.zoom = inspector.highlighter.zoom;
-    }
+    this.transforms.zoom = this._getPageZoom();
 
     // bind the owner object to the necessary functions
     TiltUtils.bindObjectFunc(this, "^_on");
     TiltUtils.bindObjectFunc(this, "_loop");
 
     this._setupTexture();
     this._setupMeshData();
     this._setupEventListeners();
     this.canvas.focus();
   },
 
   /**
+   * Get page zoom factor.
+   * @return {Number}
+   */
+  _getPageZoom: function TVP__getPageZoom() {
+    return this.contentWindow
+      .QueryInterface(Ci.nsIInterfaceRequestor)
+      .getInterface(Ci.nsIDOMWindowUtils)
+      .fullZoom;
+  },
+
+  /**
    * The animation logic.
    */
   _loop: function TVP__loop()
   {
     let renderer = this._renderer;
 
     // if the renderer was destroyed, don't continue rendering
     if (!renderer || !renderer.context) {
@@ -548,26 +678,16 @@ TiltVisualizer.Presenter.prototype = {
       // additionally, create a wireframe representation to make the
       // visualization a bit more pretty
       this._meshWireframe.push({
         vertices: this._meshStacks[i].vertices,
         indices: new renderer.IndexBuffer(group.wireframeIndices)
       });
     }
 
-    // if there's no initial selection made, highlight the required node
-    if (!this._initialSelection) {
-      this._initialSelection = true;
-      this.highlightNode(this.chromeWindow.InspectorUI.selection);
-
-      if (this._currentSelection === 0) { // if the "html" node is selected
-        this._highlight.disabled = true;
-      }
-    }
-
     // configure the required mesh transformations and background only once
     if (!this._initialMeshConfiguration) {
       this._initialMeshConfiguration = true;
 
       // set the necessary mesh offsets
       this.transforms.offset[0] = -renderer.width * 0.5;
       this.transforms.offset[1] = -renderer.height * 0.5;
 
@@ -630,17 +750,17 @@ TiltVisualizer.Presenter.prototype = {
     this.contentWindow.addEventListener("resize", this._onResize, false);
   },
 
   /**
    * Called when the content window of the current browser is resized.
    */
   _onResize: function TVP_onResize(e)
   {
-    let zoom = this.chromeWindow.InspectorUI.highlighter.zoom;
+    let zoom = this._getPageZoom();
     let width = e.target.innerWidth * zoom;
     let height = e.target.innerHeight * zoom;
 
     // handle aspect ratio changes to update the projection matrix
     this._renderer.width = width;
     this._renderer.height = height;
 
     this._redraw = true;
@@ -733,17 +853,16 @@ TiltVisualizer.Presenter.prototype = {
       this._highlight.disabled = true;
 
       Services.obs.notifyObservers(null, this.NOTIFICATIONS.UNHIGHLIGHTING, null);
       return;
     }
 
     let highlight = this._highlight;
     let info = this._traverseData.info[aNodeIndex];
-    let node = this._traverseData.nodes[aNodeIndex];
     let style = TiltVisualizerStyle.nodes;
 
     highlight.disabled = false;
     highlight.fill = style[info.name] || style.highlight.defaultFill;
     highlight.stroke = style.highlight.defaultStroke;
     highlight.strokeWeight = style.highlight.defaultStrokeWeight;
 
     let x = info.coord.left;
@@ -754,20 +873,16 @@ TiltVisualizer.Presenter.prototype = {
 
     vec3.set([x,     y,     z * STACK_THICKNESS], highlight.v0);
     vec3.set([x + w, y,     z * STACK_THICKNESS], highlight.v1);
     vec3.set([x + w, y + h, z * STACK_THICKNESS], highlight.v2);
     vec3.set([x,     y + h, z * STACK_THICKNESS], highlight.v3);
 
     this._currentSelection = aNodeIndex;
 
-    this.chromeWindow.InspectorUI.inspectNode(node,
-      this.contentWindow.innerHeight < y ||
-      this.contentWindow.pageYOffset > 0);
-
     // if something is highlighted, make sure it's inside the current viewport;
     // the point which should be moved into view is considered the center [x, y]
     // position along the top edge of the currently selected node
 
     if (aFlags && aFlags.indexOf("moveIntoView") !== -1)
     {
       this.controller.arcball.moveIntoView(vec3.lerp(
         vec3.scale(this._highlight.v0, this.transforms.zoom, []),
@@ -841,17 +956,17 @@ TiltVisualizer.Presenter.prototype = {
         }
       } else {
         if ("function" === typeof aProperties.onfail) {
           aProperties.onfail();
         }
       }
     }, false);
 
-    let zoom = this.chromeWindow.InspectorUI.highlighter.zoom;
+    let zoom = this._getPageZoom();
     let width = this._renderer.width * zoom;
     let height = this._renderer.height * zoom;
     x *= zoom;
     y *= zoom;
 
     // create a ray following the mouse direction from the near clipping plane
     // to the far clipping plane, to check for intersections with the mesh,
     // and do all the heavy lifting in a separate thread
@@ -1278,19 +1393,21 @@ TiltVisualizer.Controller.prototype = {
     }
   },
 
   /**
    * Called when a key is pressed.
    */
   _onKeyPress: function TVC__onKeyPress(e)
   {
-    let tilt = this.presenter.chromeWindow.Tilt;
-
     if (e.keyCode === e.DOM_VK_ESCAPE) {
+      let mod = {};
+      Cu.import("resource:///modules/devtools/Tilt.jsm", mod);
+      let tilt =
+        mod.TiltManager.getTiltForBrowser(this.presenter.chromeWindow);
       e.preventDefault();
       e.stopPropagation();
       tilt.destroy(tilt.currentWindowId, true);
     }
   },
 
   /**
    * Called when the canvas looses focus.
@@ -1299,17 +1416,17 @@ TiltVisualizer.Controller.prototype = {
     this.arcball.cancelKeyEvents();
   },
 
   /**
    * Called when the content window of the current browser is resized.
    */
   _onResize: function TVC__onResize(e)
   {
-    let zoom = this.presenter.chromeWindow.InspectorUI.highlighter.zoom;
+    let zoom = this.presenter._getPageZoom();
     let width = e.target.innerWidth * zoom;
     let height = e.target.innerHeight * zoom;
 
     this.arcball.resize(width, height);
   },
 
   /**
    * Checks if this object was initialized properly.
diff --git a/browser/devtools/tilt/test/Makefile.in b/browser/devtools/tilt/test/Makefile.in
--- a/browser/devtools/tilt/test/Makefile.in
+++ b/browser/devtools/tilt/test/Makefile.in
@@ -11,17 +11,16 @@ relativesrcdir 	= @relativesrcdir@
 include $(DEPTH)/config/autoconf.mk
 
 MOCHITEST_BROWSER_FILES = \
 	head.js \
 	browser_tilt_01_lazy_getter.js \
 	browser_tilt_02_notifications-seq.js \
 	browser_tilt_02_notifications.js \
 	browser_tilt_03_tab_switch.js \
-	browser_tilt_04_initialization-key.js \
 	browser_tilt_04_initialization.js \
 	browser_tilt_05_destruction-esc.js \
 	browser_tilt_05_destruction-url.js \
 	browser_tilt_05_destruction.js \
 	browser_tilt_arcball-reset-typeahead.js \
 	browser_tilt_arcball-reset.js \
 	browser_tilt_arcball.js \
 	browser_tilt_controller.js \
diff --git a/browser/devtools/tilt/test/browser_tilt_03_tab_switch.js b/browser/devtools/tilt/test/browser_tilt_03_tab_switch.js
--- a/browser/devtools/tilt/test/browser_tilt_03_tab_switch.js
+++ b/browser/devtools/tilt/test/browser_tilt_03_tab_switch.js
@@ -21,146 +21,69 @@ function test() {
   createTab1();
 }
 
 function createTab1() {
   tab0 = gBrowser.selectedTab;
 
   tab1 = createTab(function() {
     createTilt({
-      onInspectorOpen: function()
-      {
-        ok(Tilt.tiltButton.checked === false,
-          "The toolbar tilt button shouldn't be pressed before Tilt is open.");
-        ok(InspectorUI.inspecting,
-          "The Inspector should be inspecting for tab1.");
-        ok(InspectorUI.highlighter.hidden === false,
-          "The Highlighter should be visible for tab1.");
-      },
       onTiltOpen: function()
       {
-        ok(InspectorUI.inspecting === false,
-          "The Inspector should not be inspecting for tab1 after Tilt is open.");
-        ok(InspectorUI.highlighter.hidden,
-          "The Highlighter should not be visible for tab1 after Tilt is open.");
-
         createTab2();
       }
     }, false, function suddenDeath()
     {
       info("Tilt could not be initialized properly.");
       cleanup();
     });
   });
 }
 
 function createTab2() {
   tab2 = createTab(function() {
 
     createTilt({
-      onInspectorOpen: function()
-      {
-        ok(Tilt.tiltButton.checked === false,
-          "The toolbar tilt button shouldn't be pressed before Tilt is open.");
-        ok(InspectorUI.inspecting,
-          "The Inspector should be inspecting for tab2.");
-        ok(InspectorUI.highlighter.hidden === false,
-          "The Highlighter should be visible for tab2.");
-      },
       onTiltOpen: function()
       {
-        ok(InspectorUI.inspecting === false,
-          "The Inspector should not be inspecting for tab2 after Tilt is open.");
-        ok(InspectorUI.highlighter.hidden,
-          "The Highlighter should be visible for tab2 after Tilt is open.");
-
         testStep = 0;
         tabSelect();
       }
     }, false, function suddenDeath()
     {
       info("Tilt could not be initialized properly.");
       cleanup();
     });
   });
 }
 
 let testSteps = [
   function step0() {
-    ok(Tilt.tiltButton.checked === true,
-      "The toolbar tilt button should have been pressed at step0 (tab 2).");
-    ok(InspectorUI.inspecting === false,
-      "The Inspector should not be inspecting at step0.");
-    ok(InspectorUI.highlighter.hidden,
-      "The Highlighter should be hidden at step0.");
-
     gBrowser.selectedTab = tab1;
   },
   function step1() {
-    ok(Tilt.tiltButton.checked === true,
-      "The toolbar tilt button should have been pressed at step1 (tab 1).");
-    ok(InspectorUI.inspecting === false,
-      "The Inspector should not be inspecting at step1.");
-    ok(InspectorUI.highlighter.hidden,
-      "The Highlighter should be hidden at step1.");
-
     gBrowser.selectedTab = tab0;
   },
   function step2() {
-    ok(Tilt.tiltButton.checked === false,
-      "The toolbar tilt button shouldn't have been pressed at step2 (tab 0).");
-    ok(InspectorUI.inspecting === false,
-      "The Inspector should not be inspecting at step2.");
-    is(InspectorUI.highlighter, null,
-      "The Highlighter should be dead while in step2.");
-
     gBrowser.selectedTab = tab1;
   },
   function step3() {
-    ok(Tilt.tiltButton.checked === true,
-      "The toolbar tilt button should have been pressed at step3 (tab 1).");
-    ok(InspectorUI.inspecting === false,
-      "The Inspector should not be inspecting at step3.");
-    ok(InspectorUI.highlighter.hidden,
-      "The Highlighter should be hidden at step3.");
-
     gBrowser.selectedTab = tab2;
   },
   function step4() {
-    ok(Tilt.tiltButton.checked === true,
-      "The toolbar tilt button should have been pressed at step4 (tab 2).");
-    ok(InspectorUI.inspecting === false,
-      "The Inspector should not be inspecting at step4.");
-    ok(InspectorUI.highlighter.hidden,
-      "The Highlighter should be hidden at step4.");
-
     Tilt.destroy(Tilt.currentWindowId);
     gBrowser.removeCurrentTab();
     tab2 = null;
   },
   function step5() {
-    ok(Tilt.tiltButton.checked === true,
-      "The toolbar tilt button should have been pressed at step5 (tab 1).");
-    ok(InspectorUI.inspecting === false,
-      "The Inspector should not be inspecting at step5.");
-    ok(InspectorUI.highlighter.hidden,
-      "The Highlighter should be hidden at step5.");
-
     Tilt.destroy(Tilt.currentWindowId);
     gBrowser.removeCurrentTab();
     tab1 = null;
   },
   function step6_cleanup() {
-    ok(Tilt.tiltButton.checked === false,
-      "The toolbar tilt button shouldn't have been pressed at step6 (tab 0).");
-    ok(InspectorUI.inspecting === false,
-      "The Inspector should not be inspecting at step6.");
-    is(InspectorUI.highlighter, null,
-      "The Highlighter should be dead while in step6.");
-
     cleanup();
   }
 ];
 
 function cleanup() {
   gBrowser.tabContainer.removeEventListener("TabSelect", tabSelect, false);
 
   if (tab1) {
diff --git a/browser/devtools/tilt/test/browser_tilt_04_initialization-key.js b/browser/devtools/tilt/test/browser_tilt_04_initialization-key.js
deleted file mode 100644
--- a/browser/devtools/tilt/test/browser_tilt_04_initialization-key.js
+++ /dev/null
@@ -1,82 +0,0 @@
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-"use strict";
-
-let id;
-let tiltKey;
-let eventType;
-
-function test() {
-  if (!isTiltEnabled()) {
-    info("Skipping initialization key test because Tilt isn't enabled.");
-    return;
-  }
-  if (!isWebGLSupported()) {
-    info("Skipping initialization key test because WebGL isn't supported.");
-    return;
-  }
-
-  waitForExplicitFinish();
-
-  id = TiltUtils.getWindowId(gBrowser.selectedBrowser.contentWindow);
-  tiltKey = Tilt.tiltButton.getAttribute("accesskey");
-
-  if ("nsILocalFileMac" in Ci) {
-    eventType = { type: "keypress", ctrlKey: true };
-  } else {
-    eventType = { type: "keypress", altKey: true };
-  }
-
-  Services.obs.addObserver(onInspectorOpen, INSPECTOR_OPENED, false);
-  InspectorUI.toggleInspectorUI();
-}
-
-function suddenDeath() {
-  Services.obs.removeObserver(onTiltOpen, INITIALIZING);
-  cleanup();
-}
-
-function onInspectorOpen() {
-  Services.obs.removeObserver(onInspectorOpen, INSPECTOR_OPENED);
-
-  executeSoon(function() {
-    is(Tilt.visualizers[id], null,
-      "A instance of the visualizer shouldn't be initialized yet.");
-
-    info("Pressing the accesskey should open Tilt.");
-
-    Tilt.failureCallback = suddenDeath;
-
-    Services.obs.addObserver(onTiltOpen, INITIALIZING, false);
-    EventUtils.synthesizeKey(tiltKey, eventType);
-  });
-}
-
-function onTiltOpen() {
-  Services.obs.removeObserver(onTiltOpen, INITIALIZING);
-
-  executeSoon(function() {
-    ok(Tilt.visualizers[id] instanceof TiltVisualizer,
-      "A new instance of the visualizer wasn't created properly.");
-    ok(Tilt.visualizers[id].isInitialized(),
-      "The new instance of the visualizer wasn't initialized properly.");
-
-    info("Pressing the accesskey again should close Tilt.");
-
-    Services.obs.addObserver(onTiltClose, DESTROYED, false);
-    EventUtils.synthesizeKey(tiltKey, eventType);
-  });
-}
-
-function onTiltClose() {
-  is(Tilt.visualizers[id], null,
-    "The current instance of the visualizer wasn't destroyed properly.");
-
-  cleanup();
-}
-
-function cleanup() {
-  Tilt.failureCallback = null;
-  InspectorUI.closeInspectorUI();
-  finish();
-}
diff --git a/browser/devtools/tilt/test/browser_tilt_04_initialization.js b/browser/devtools/tilt/test/browser_tilt_04_initialization.js
--- a/browser/devtools/tilt/test/browser_tilt_04_initialization.js
+++ b/browser/devtools/tilt/test/browser_tilt_04_initialization.js
@@ -16,20 +16,16 @@ function test() {
 
   createTab(function() {
     let id = TiltUtils.getWindowId(gBrowser.selectedBrowser.contentWindow);
 
     is(id, Tilt.currentWindowId,
       "The unique window identifiers should match for the same window.");
 
     createTilt({
-      onInspectorOpen: function() {
-        is(Tilt.visualizers[id], null,
-          "A instance of the visualizer shouldn't be initialized yet.");
-      },
       onTiltOpen: function(instance)
       {
         is(document.activeElement, instance.presenter.canvas,
           "The visualizer canvas should be focused on initialization.");
 
         ok(Tilt.visualizers[id] instanceof TiltVisualizer,
           "A new instance of the visualizer wasn't created properly.");
         ok(Tilt.visualizers[id].isInitialized(),
diff --git a/browser/devtools/tilt/test/browser_tilt_05_destruction-esc.js b/browser/devtools/tilt/test/browser_tilt_05_destruction-esc.js
--- a/browser/devtools/tilt/test/browser_tilt_05_destruction-esc.js
+++ b/browser/devtools/tilt/test/browser_tilt_05_destruction-esc.js
@@ -34,19 +34,16 @@ function test() {
 }
 
 function finalize() {
   let id = TiltUtils.getWindowId(gBrowser.selectedBrowser.contentWindow);
 
   is(Tilt.visualizers[id], null,
     "The current instance of the visualizer wasn't destroyed properly.");
 
-  ok(InspectorUI.highlighter && InspectorUI.breadcrumbs,
-    "The Inspector should not close while Tilt is opened.");
-
   cleanup();
 }
 
 function cleanup() {
   if (tiltOpened) { Services.obs.removeObserver(finalize, DESTROYED); }
   gBrowser.removeCurrentTab();
   finish();
 }
diff --git a/browser/devtools/tilt/test/browser_tilt_05_destruction.js b/browser/devtools/tilt/test/browser_tilt_05_destruction.js
--- a/browser/devtools/tilt/test/browser_tilt_05_destruction.js
+++ b/browser/devtools/tilt/test/browser_tilt_05_destruction.js
@@ -18,17 +18,17 @@ function test() {
 
   createTab(function() {
     createTilt({
       onTiltOpen: function()
       {
         tiltOpened = true;
 
         Services.obs.addObserver(finalize, DESTROYED, false);
-        InspectorUI.closeInspectorUI();
+        Tilt.destroy(Tilt.currentWindowId);
       }
     }, false, function suddenDeath()
     {
       info("Tilt could not be initialized properly.");
       cleanup();
     });
   });
 }
diff --git a/browser/devtools/tilt/test/browser_tilt_arcball-reset-typeahead.js b/browser/devtools/tilt/test/browser_tilt_arcball-reset-typeahead.js
--- a/browser/devtools/tilt/test/browser_tilt_arcball-reset-typeahead.js
+++ b/browser/devtools/tilt/test/browser_tilt_arcball-reset-typeahead.js
@@ -26,17 +26,17 @@ function test() {
 
         performTest(instance.presenter.canvas,
                     instance.controller.arcball, function() {
 
           info("Killing arcball reset test.");
 
           Services.prefs.setBoolPref("accessibility.typeaheadfind", false);
           Services.obs.addObserver(cleanup, DESTROYED, false);
-          InspectorUI.closeInspectorUI();
+          Tilt.destroy(Tilt.currentWindowId);
         });
       }
     }, false, function suddenDeath()
     {
       info("Tilt could not be initialized properly.");
       cleanup();
     });
   });
diff --git a/browser/devtools/tilt/test/browser_tilt_arcball-reset.js b/browser/devtools/tilt/test/browser_tilt_arcball-reset.js
--- a/browser/devtools/tilt/test/browser_tilt_arcball-reset.js
+++ b/browser/devtools/tilt/test/browser_tilt_arcball-reset.js
@@ -24,17 +24,17 @@ function test() {
         tiltOpened = true;
 
         performTest(instance.presenter.canvas,
                     instance.controller.arcball, function() {
 
           info("Killing arcball reset test.");
 
           Services.obs.addObserver(cleanup, DESTROYED, false);
-          InspectorUI.closeInspectorUI();
+          Tilt.destroy(Tilt.currentWindowId);
         });
       }
     }, false, function suddenDeath()
     {
       info("Tilt could not be initialized properly.");
       cleanup();
     });
   });
diff --git a/browser/devtools/tilt/test/browser_tilt_picking.js b/browser/devtools/tilt/test/browser_tilt_picking.js
--- a/browser/devtools/tilt/test/browser_tilt_picking.js
+++ b/browser/devtools/tilt/test/browser_tilt_picking.js
@@ -29,17 +29,17 @@ function test() {
           presenter.pickNode(p[0], p[1], {
             onpick: function(data)
             {
               ok(data.index > 0,
                 "Simply picking a node didn't work properly.");
 
               pickDone = true;
               Services.obs.addObserver(cleanup, DESTROYED, false);
-              InspectorUI.closeInspectorUI();
+              Tilt.destroy(Tilt.currentWindowId);
             }
           });
         };
       }
     }, false, function suddenDeath()
     {
       info("Tilt could not be initialized properly.");
       cleanup();
diff --git a/browser/devtools/tilt/test/browser_tilt_picking_delete.js b/browser/devtools/tilt/test/browser_tilt_picking_delete.js
--- a/browser/devtools/tilt/test/browser_tilt_picking_delete.js
+++ b/browser/devtools/tilt/test/browser_tilt_picking_delete.js
@@ -60,17 +60,17 @@ function whenNodeRemoved() {
 
   for (let i = 0, k = 36 * nodeIndex; i < 36; i++) {
     is(vertices[i + k], 0,
       "The stack vertices weren't degenerated properly.");
   }
 
   executeSoon(function() {
     Services.obs.addObserver(cleanup, DESTROYED, false);
-    InspectorUI.closeInspectorUI();
+    Tilt.destroy(Tilt.currentWindowId);
   });
 }
 
 function cleanup() {
   if (nodeDeleted) { Services.obs.removeObserver(cleanup, DESTROYED); }
   gBrowser.removeCurrentTab();
   finish();
 }
diff --git a/browser/devtools/tilt/test/browser_tilt_picking_highlight01-offs.js b/browser/devtools/tilt/test/browser_tilt_picking_highlight01-offs.js
--- a/browser/devtools/tilt/test/browser_tilt_picking_highlight01-offs.js
+++ b/browser/devtools/tilt/test/browser_tilt_picking_highlight01-offs.js
@@ -59,17 +59,17 @@ function whenUnhighlighting() {
   ok(presenter._currentSelection < 0,
     "Unhighlighting a should remove the current selection.");
   ok(presenter._highlight.disabled,
     "After unhighlighting a node, it shouldn't be highlighted anymore. D'oh.");
 
   executeSoon(function() {
     Services.obs.removeObserver(whenUnhighlighting, UNHIGHLIGHTING);
     Services.obs.addObserver(cleanup, DESTROYED, false);
-    InspectorUI.closeInspectorUI();
+    Tilt.destroy(Tilt.currentWindowId);
   });
 }
 
 function cleanup() {
   if (nodeHighlighted) { Services.obs.removeObserver(cleanup, DESTROYED); }
   gBrowser.removeCurrentTab();
   finish();
 }
diff --git a/browser/devtools/tilt/test/browser_tilt_picking_highlight01.js b/browser/devtools/tilt/test/browser_tilt_picking_highlight01.js
--- a/browser/devtools/tilt/test/browser_tilt_picking_highlight01.js
+++ b/browser/devtools/tilt/test/browser_tilt_picking_highlight01.js
@@ -59,17 +59,17 @@ function whenUnhighlighting() {
   ok(presenter._currentSelection < 0,
     "Unhighlighting a should remove the current selection.");
   ok(presenter._highlight.disabled,
     "After unhighlighting a node, it shouldn't be highlighted anymore. D'oh.");
 
   executeSoon(function() {
     Services.obs.removeObserver(whenUnhighlighting, UNHIGHLIGHTING);
     Services.obs.addObserver(cleanup, DESTROYED, false);
-    InspectorUI.closeInspectorUI();
+    Tilt.destroy(Tilt.currentWindowId);
   });
 }
 
 function cleanup() {
   if (nodeHighlighted) { Services.obs.removeObserver(cleanup, DESTROYED); }
   gBrowser.removeCurrentTab();
   finish();
 }
diff --git a/browser/devtools/tilt/test/browser_tilt_picking_highlight02.js b/browser/devtools/tilt/test/browser_tilt_picking_highlight02.js
--- a/browser/devtools/tilt/test/browser_tilt_picking_highlight02.js
+++ b/browser/devtools/tilt/test/browser_tilt_picking_highlight02.js
@@ -54,17 +54,17 @@ function whenUnhighlighting() {
   ok(presenter._currentSelection < 0,
     "Unhighlighting a should remove the current selection.");
   ok(presenter._highlight.disabled,
     "After unhighlighting a node, it shouldn't be highlighted anymore. D'oh.");
 
   executeSoon(function() {
     Services.obs.removeObserver(whenUnhighlighting, UNHIGHLIGHTING);
     Services.obs.addObserver(cleanup, DESTROYED, false);
-    InspectorUI.closeInspectorUI();
+    Tilt.destroy(Tilt.currentWindowId);
   });
 }
 
 function cleanup() {
   if (nodeHighlighted) { Services.obs.removeObserver(cleanup, DESTROYED); }
   gBrowser.removeCurrentTab();
   finish();
 }
diff --git a/browser/devtools/tilt/test/browser_tilt_picking_highlight03.js b/browser/devtools/tilt/test/browser_tilt_picking_highlight03.js
--- a/browser/devtools/tilt/test/browser_tilt_picking_highlight03.js
+++ b/browser/devtools/tilt/test/browser_tilt_picking_highlight03.js
@@ -54,17 +54,17 @@ function whenUnhighlighting() {
   ok(presenter._currentSelection < 0,
     "Unhighlighting a should remove the current selection.");
   ok(presenter._highlight.disabled,
     "After unhighlighting a node, it shouldn't be highlighted anymore. D'oh.");
 
   executeSoon(function() {
     Services.obs.removeObserver(whenUnhighlighting, UNHIGHLIGHTING);
     Services.obs.addObserver(cleanup, DESTROYED, false);
-    InspectorUI.closeInspectorUI();
+    Tilt.destroy(Tilt.currentWindowId);
   });
 }
 
 function cleanup() {
   if (nodeHighlighted) { Services.obs.removeObserver(cleanup, DESTROYED); }
   gBrowser.removeCurrentTab();
   finish();
 }
diff --git a/browser/devtools/tilt/test/browser_tilt_picking_miv.js b/browser/devtools/tilt/test/browser_tilt_picking_miv.js
--- a/browser/devtools/tilt/test/browser_tilt_picking_miv.js
+++ b/browser/devtools/tilt/test/browser_tilt_picking_miv.js
@@ -60,17 +60,17 @@ function whenBringingIntoView() {
     "The node should still be highlighted");
   ok(presenter.controller.arcball._resetInProgress,
     "Highlighting a node that's not already visible should trigger a reset " +
     "when this is being explicitly requested!");
 
   executeSoon(function() {
     Services.obs.removeObserver(whenHighlighting, HIGHLIGHTING);
     Services.obs.addObserver(cleanup, DESTROYED, false);
-    InspectorUI.closeInspectorUI();
+    Tilt.destroy(Tilt.currentWindowId);
   });
 }
 
 function cleanup() {
   if (nodeHighlighted) { Services.obs.removeObserver(cleanup, DESTROYED); }
   gBrowser.removeCurrentTab();
   finish();
 }
diff --git a/browser/devtools/tilt/test/browser_tilt_visualizer.js b/browser/devtools/tilt/test/browser_tilt_visualizer.js
--- a/browser/devtools/tilt/test/browser_tilt_visualizer.js
+++ b/browser/devtools/tilt/test/browser_tilt_visualizer.js
@@ -14,17 +14,18 @@ function test() {
 
   let webGLError = false;
   let webGLLoad = false;
 
   let visualizer = new TiltVisualizer({
     chromeWindow: window,
     contentWindow: gBrowser.selectedBrowser.contentWindow,
     parentNode: gBrowser.selectedBrowser.parentNode,
-    inspectorUI: window.InspectorUI,
+    notifications: Tilt.NOTIFICATIONS,
+    tab: gBrowser.selectedTab,
 
     onError: function onWebGLError()
     {
       webGLError = true;
     },
 
     onLoad: function onWebGLLoad()
     {
diff --git a/browser/devtools/tilt/test/browser_tilt_zoom.js b/browser/devtools/tilt/test/browser_tilt_zoom.js
--- a/browser/devtools/tilt/test/browser_tilt_zoom.js
+++ b/browser/devtools/tilt/test/browser_tilt_zoom.js
@@ -14,26 +14,24 @@ function test() {
   if (!isWebGLSupported()) {
     info("Skipping controller test because WebGL isn't supported.");
     return;
   }
 
   waitForExplicitFinish();
 
   createTab(function() {
+    TiltUtils.setDocumentZoom(window, ZOOM);
+
     createTilt({
-      onInspectorOpen: function()
-      {
-        TiltUtils.setDocumentZoom(window, ZOOM);
-      },
       onTiltOpen: function(instance)
       {
         tiltOpened = true;
 
-        ok(isApprox(InspectorUI.highlighter.zoom, ZOOM),
+        ok(isApprox(instance.presenter._getPageZoom(), ZOOM),
           "The Highlighter zoom doesn't have the expected results.");
 
         ok(isApprox(instance.presenter.transforms.zoom, ZOOM),
           "The presenter transforms zoom wasn't initially set correctly.");
 
         let contentWindow = gBrowser.selectedBrowser.contentWindow;
         let initialWidth = contentWindow.innerWidth;
         let initialHeight = contentWindow.innerHeight;
@@ -70,17 +68,17 @@ function test() {
           ok(isApprox(contentWindow.innerHeight * ZOOM, arcball.height, 1),
             "The arcball height wasn't set correctly after the resize.");
 
 
           window.resizeBy(RESIZE * ZOOM, RESIZE * ZOOM);
 
 
           Services.obs.addObserver(cleanup, DESTROYED, false);
-          InspectorUI.closeInspectorUI();
+          Tilt.destroy(Tilt.currentWindowId);
         });
       }
     }, false, function suddenDeath()
     {
       info("Tilt could not be initialized properly.");
       cleanup();
     });
   });
diff --git a/browser/devtools/tilt/test/head.js b/browser/devtools/tilt/test/head.js
--- a/browser/devtools/tilt/test/head.js
+++ b/browser/devtools/tilt/test/head.js
@@ -1,18 +1,20 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 "use strict";
 
 let tempScope = {};
+Components.utils.import("resource:///modules/devtools/Tilt.jsm", tempScope);
 Components.utils.import("resource:///modules/devtools/TiltGL.jsm", tempScope);
 Components.utils.import("resource:///modules/devtools/TiltMath.jsm", tempScope);
 Components.utils.import("resource:///modules/devtools/TiltUtils.jsm", tempScope);
 Components.utils.import("resource:///modules/devtools/TiltVisualizer.jsm", tempScope);
 Components.utils.import("resource:///modules/devtools/LayoutHelpers.jsm", tempScope);
+let TiltManager = tempScope.TiltManager;
 let TiltGL = tempScope.TiltGL;
 let EPSILON = tempScope.EPSILON;
 let TiltMath = tempScope.TiltMath;
 let vec3 = tempScope.vec3;
 let mat3 = tempScope.mat3;
 let mat4 = tempScope.mat4;
 let quat4 = tempScope.quat4;
 let TiltUtils = tempScope.TiltUtils;
@@ -41,18 +43,17 @@ const DEFAULT_HTML = "data:text/html," +
         "does not conflict with the First or Second Laws." +
       "</div>" +
       "<div id='far-far-away' style='position: absolute; top: 250%;'>" +
         "I like bacon." +
       "</div>" +
     "<body>" +
   "</html>";
 
-const INSPECTOR_OPENED = InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED;
-const INSPECTOR_CLOSED = InspectorUI.INSPECTOR_NOTIFICATIONS.CLOSED;
+let Tilt = TiltManager.getTiltForBrowser(window);
 
 const INITIALIZING = Tilt.NOTIFICATIONS.INITIALIZING;
 const INITIALIZED = Tilt.NOTIFICATIONS.INITIALIZED;
 const DESTROYING = Tilt.NOTIFICATIONS.DESTROYING;
 const BEFORE_DESTROYED = Tilt.NOTIFICATIONS.BEFORE_DESTROYED;
 const DESTROYED = Tilt.NOTIFICATIONS.DESTROYED;
 const SHOWN = Tilt.NOTIFICATIONS.SHOWN;
 const HIDDEN = Tilt.NOTIFICATIONS.HIDDEN;
@@ -138,40 +139,24 @@ function createTab(callback, location) {
 }
 
 
 function createTilt(callbacks, close, suddenDeath) {
   info("Creating Tilt, with callbacks {" + Object.keys(callbacks) + "}" +
                    ", autoclose param " + close +
           ", and sudden death handler " + typeof suddenDeath + ".");
 
+  handleFailure(suddenDeath);
+
   Services.prefs.setBoolPref("webgl.verbose", true);
   TiltUtils.Output.suppressAlerts = true;
 
-  info("Attempting to start the inspector.");
-  Services.obs.addObserver(onInspectorOpen, INSPECTOR_OPENED, false);
-  InspectorUI.toggleInspectorUI();
-
-  function onInspectorOpen() {
-    info("Inspector was opened.");
-    Services.obs.removeObserver(onInspectorOpen, INSPECTOR_OPENED);
-
-    executeSoon(function() {
-      if ("function" === typeof callbacks.onInspectorOpen) {
-        info("Calling 'onInspectorOpen'.");
-        callbacks.onInspectorOpen();
-      }
-      executeSoon(function() {
-        info("Attempting to start Tilt.");
-        Services.obs.addObserver(onTiltOpen, INITIALIZING, false);
-        handleFailure(suddenDeath);
-        Tilt.initialize();
-      });
-    });
-  }
+  info("Attempting to start Tilt.");
+  Services.obs.addObserver(onTiltOpen, INITIALIZING, false);
+  Tilt.initializeForCurrentTab();
 
   function onTiltOpen() {
     info("Tilt was opened.");
     Services.obs.removeObserver(onTiltOpen, INITIALIZING);
 
     executeSoon(function() {
       if ("function" === typeof callbacks.onTiltOpen) {
         info("Calling 'onTiltOpen'.");
@@ -191,35 +176,16 @@ function createTilt(callbacks, close, su
     info("Tilt was closed.");
     Services.obs.removeObserver(onTiltClose, DESTROYED);
 
     executeSoon(function() {
       if ("function" === typeof callbacks.onTiltClose) {
         info("Calling 'onTiltClose'.");
         callbacks.onTiltClose();
       }
-      if (close) {
-        executeSoon(function() {
-          info("Attempting to close the Inspector.");
-          Services.obs.addObserver(onInspectorClose, INSPECTOR_CLOSED, false);
-          InspectorUI.closeInspectorUI();
-        });
-      }
-    });
-  }
-
-  function onInspectorClose() {
-    info("Inspector was closed.");
-    Services.obs.removeObserver(onInspectorClose, INSPECTOR_CLOSED);
-
-    executeSoon(function() {
-      if ("function" === typeof callbacks.onInspectorClose) {
-        info("Calling 'onInspectorClose'.");
-        callbacks.onInspectorClose();
-      }
       if ("function" === typeof callbacks.onEnd) {
         info("Calling 'onEnd'.");
         callbacks.onEnd();
       }
     });
   }
 
   function handleFailure(suddenDeath) {
diff --git a/browser/devtools/webconsole/HUDService.jsm b/browser/devtools/webconsole/HUDService.jsm
--- a/browser/devtools/webconsole/HUDService.jsm
+++ b/browser/devtools/webconsole/HUDService.jsm
@@ -8,16 +8,20 @@
 
 const Cc = Components.classes;
 const Ci = Components.interfaces;
 const Cu = Components.utils;
 
 const CONSOLEAPI_CLASS_ID = "{b49c18f8-3379-4fc0-8c90-d7772c1a9ff3}";
 
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+Cu.import("resource:///modules/devtools/gDevTools.jsm");
+
+XPCOMUtils.defineLazyModuleGetter(this, "TargetFactory",
+                                  "resource:///modules/devtools/Target.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "Services",
                                   "resource://gre/modules/Services.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "WebConsoleUtils",
                                   "resource://gre/modules/devtools/WebConsoleUtils.jsm");
 
 const STRINGS_URI = "chrome://browser/locale/devtools/webconsole.properties";
@@ -37,48 +41,25 @@ function LogFactory(aMessagePrefix)
 let log = LogFactory("*** HUDService:");
 
 // The HTML namespace.
 const HTML_NS = "http://www.w3.org/1999/xhtml";
 
 // The XUL namespace.
 const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
 
-
-// Possible directions that can be passed to HUDService.animate().
-const ANIMATE_OUT = 0;
-const ANIMATE_IN = 1;
-
-// Minimum console height, in pixels.
-const MINIMUM_CONSOLE_HEIGHT = 150;
-
-// Minimum page height, in pixels. This prevents the Web Console from
-// remembering a height that covers the whole page.
-const MINIMUM_PAGE_HEIGHT = 50;
-
-// The default console height, as a ratio from the content window inner height.
-const DEFAULT_CONSOLE_HEIGHT = 0.33;
-
-// points to the file to load in the Web Console iframe.
-const UI_IFRAME_URL = "chrome://browser/content/devtools/webconsole.xul";
-
 ///////////////////////////////////////////////////////////////////////////
 //// The HUD service
 
 function HUD_SERVICE()
 {
   // These methods access the "this" object, but they're registered as
   // event listeners. So we hammer in the "this" binding.
-  this.onTabClose = this.onTabClose.bind(this);
-  this.onTabSelect = this.onTabSelect.bind(this);
   this.onWindowUnload = this.onWindowUnload.bind(this);
 
-  // Remembers the last console height, in pixels.
-  this.lastConsoleHeight = Services.prefs.getIntPref("devtools.hud.height");
-
   /**
    * Keeps a reference for each HeadsUpDisplay that is created
    */
   this.hudReferences = {};
 };
 
 HUD_SERVICE.prototype =
 {
@@ -106,76 +87,58 @@ HUD_SERVICE.prototype =
     return Services.wm.getMostRecentWindow("navigator:browser");
   },
 
   /**
    * Activate a HeadsUpDisplay for the given tab context.
    *
    * @param nsIDOMElement aTab
    *        The xul:tab element.
-   * @param boolean aAnimated
-   *        True if you want to animate the opening of the Web console.
-   * @param object aOptions
-   *        Options for the Web Console:
-   *        - host
-   *          Server to connect to.
-   *        - port
-   *          Port to connect to.
+   * @param nsIDOMElement aIframe
+   *        The iframe element into which to place the web console.
+   * @param RemoteTarget aTarget
+   *        The target that the web console will connect to.
    * @return object
    *         The new HeadsUpDisplay instance.
    */
-  activateHUDForContext:
-  function HS_activateHUDForContext(aTab, aAnimated, aOptions)
+  activateHUDForContext: function HS_activateHUDForContext(aTab, aIframe,
+                                                           aTarget)
   {
     let hudId = "hud_" + aTab.linkedPanel;
     if (hudId in this.hudReferences) {
       return this.hudReferences[hudId];
     }
 
     this.wakeup();
 
     let window = aTab.ownerDocument.defaultView;
     let gBrowser = window.gBrowser;
 
-    gBrowser.tabContainer.addEventListener("TabClose", this.onTabClose, false);
-    gBrowser.tabContainer.addEventListener("TabSelect", this.onTabSelect, false);
     window.addEventListener("unload", this.onWindowUnload, false);
 
-    let hud = new WebConsole(aTab, aOptions);
+    let hud = new WebConsole(aTab, aIframe, aTarget);
     this.hudReferences[hudId] = hud;
 
-    if (!aAnimated || hud.consolePanel) {
-      this.disableAnimation(hudId);
-    }
-
-    HeadsUpDisplayUICommands.refreshCommand();
-
     return hud;
   },
 
   /**
    * Deactivate a HeadsUpDisplay for the given tab context.
    *
    * @param nsIDOMElement aTab
    *        The xul:tab element you want to enable the Web Console for.
-   * @param boolean aAnimated
-   *        True if you want to animate the closing of the Web console.
    * @return void
    */
-  deactivateHUDForContext: function HS_deactivateHUDForContext(aTab, aAnimated)
+  deactivateHUDForContext: function HS_deactivateHUDForContext(aTab)
   {
     let hudId = "hud_" + aTab.linkedPanel;
     if (!(hudId in this.hudReferences)) {
       return;
     }
 
-    if (!aAnimated) {
-      this.storeHeight(hudId);
-    }
-
     let hud = this.getHudReferenceById(hudId);
     let document = hud.chromeDocument;
 
     hud.destroy(function() {
       let id = WebConsoleUtils.supportsString(hudId);
       Services.obs.notifyObservers(id, "web-console-destroyed", null);
     });
 
@@ -189,26 +152,22 @@ HUD_SERVICE.prototype =
       }
 
       let window = document.defaultView;
 
       window.removeEventListener("unload", this.onWindowUnload, false);
 
       let gBrowser = window.gBrowser;
       let tabContainer = gBrowser.tabContainer;
-      tabContainer.removeEventListener("TabClose", this.onTabClose, false);
-      tabContainer.removeEventListener("TabSelect", this.onTabSelect, false);
 
       this.suspend();
     }
 
     let contentWindow = aTab.linkedBrowser.contentWindow;
     contentWindow.focus();
-
-    HeadsUpDisplayUICommands.refreshCommand();
   },
 
   /**
    * get a unique ID from the sequence generator
    *
    * @returns integer
    */
   sequenceId: function HS_sequencerId()
@@ -250,17 +209,17 @@ HUD_SERVICE.prototype =
   /**
    * Shutdown all HeadsUpDisplays on quit-application-granted.
    *
    * @returns void
    */
   shutdown: function HS_shutdown()
   {
     for (let hud of this.hudReferences) {
-      this.deactivateHUDForContext(hud.tab, false);
+      this.deactivateHUDForContext(hud.tab);
     }
   },
 
   /**
    * Returns the HeadsUpDisplay object associated to a content window.
    *
    * @param nsIDOMWindow aContentWindow
    * @returns object
@@ -326,200 +285,80 @@ HUD_SERVICE.prototype =
         aInt++;
         yield aInt;
       }
     }
     return sequencer(aInt);
   },
 
   /**
-   * onTabClose event handler function
-   *
-   * @param aEvent
-   * @returns void
-   */
-  onTabClose: function HS_onTabClose(aEvent)
-  {
-    this.deactivateHUDForContext(aEvent.target, false);
-  },
-
-  /**
-   * onTabSelect event handler function
-   *
-   * @param aEvent
-   * @returns void
-   */
-  onTabSelect: function HS_onTabSelect(aEvent)
-  {
-    HeadsUpDisplayUICommands.refreshCommand();
-  },
-
-  /**
    * Called whenever a browser window closes. Cleans up any consoles still
    * around.
    *
    * @param nsIDOMEvent aEvent
    *        The dispatched event.
    * @returns void
    */
   onWindowUnload: function HS_onWindowUnload(aEvent)
   {
     let window = aEvent.target.defaultView;
 
     window.removeEventListener("unload", this.onWindowUnload, false);
 
     let gBrowser = window.gBrowser;
     let tabContainer = gBrowser.tabContainer;
 
-    tabContainer.removeEventListener("TabClose", this.onTabClose, false);
-    tabContainer.removeEventListener("TabSelect", this.onTabSelect, false);
-
     let tab = tabContainer.firstChild;
     while (tab != null) {
-      this.deactivateHUDForContext(tab, false);
+      this.deactivateHUDForContext(tab);
       tab = tab.nextSibling;
     }
   },
-
-  /**
-   * Animates the Console appropriately.
-   *
-   * @param string aHUDId The ID of the console.
-   * @param string aDirection Whether to animate the console appearing
-   *        (ANIMATE_IN) or disappearing (ANIMATE_OUT).
-   * @param function aCallback An optional callback, which will be called with
-   *        the "transitionend" event passed as a parameter once the animation
-   *        finishes.
-   */
-  animate: function HS_animate(aHUDId, aDirection, aCallback)
-  {
-    let hudBox = this.getHudReferenceById(aHUDId).iframe;
-    if (!hudBox.hasAttribute("animated")) {
-      if (aCallback) {
-        aCallback();
-      }
-      return;
-    }
-
-    switch (aDirection) {
-      case ANIMATE_OUT:
-        hudBox.style.height = 0;
-        break;
-      case ANIMATE_IN:
-        this.resetHeight(aHUDId);
-        break;
-    }
-
-    if (aCallback) {
-      hudBox.addEventListener("transitionend", aCallback, false);
-    }
-  },
-
-  /**
-   * Disables all animation for a console, for unit testing. After this call,
-   * the console will instantly take on a reasonable height, and the close
-   * animation will not occur.
-   *
-   * @param string aHUDId The ID of the console.
-   */
-  disableAnimation: function HS_disableAnimation(aHUDId)
-  {
-    let hudBox = HUDService.hudReferences[aHUDId].iframe;
-    if (hudBox.hasAttribute("animated")) {
-      hudBox.removeAttribute("animated");
-      this.resetHeight(aHUDId);
-    }
-  },
-
-  /**
-   * Reset the height of the Web Console.
-   *
-   * @param string aHUDId The ID of the Web Console.
-   */
-  resetHeight: function HS_resetHeight(aHUDId)
-  {
-    let HUD = this.hudReferences[aHUDId];
-    let innerHeight = HUD.tab.linkedBrowser.clientHeight;
-    let chromeWindow = HUD.chromeWindow;
-    if (!HUD.consolePanel) {
-      let splitterStyle = chromeWindow.getComputedStyle(HUD.splitter, null);
-      innerHeight += parseInt(splitterStyle.height) +
-                     parseInt(splitterStyle.borderTopWidth) +
-                     parseInt(splitterStyle.borderBottomWidth) +
-                     parseInt(splitterStyle.marginTop) +
-                     parseInt(splitterStyle.marginBottom);
-    }
-
-    let boxStyle = chromeWindow.getComputedStyle(HUD.iframe, null);
-    innerHeight += parseInt(boxStyle.height) +
-                   parseInt(boxStyle.borderTopWidth) +
-                   parseInt(boxStyle.borderBottomWidth);
-
-    let height = this.lastConsoleHeight > 0 ? this.lastConsoleHeight :
-      Math.ceil(innerHeight * DEFAULT_CONSOLE_HEIGHT);
-
-    if ((innerHeight - height) < MINIMUM_PAGE_HEIGHT) {
-      height = innerHeight - MINIMUM_PAGE_HEIGHT;
-    }
-
-    if (isNaN(height) || height < MINIMUM_CONSOLE_HEIGHT) {
-      height = MINIMUM_CONSOLE_HEIGHT;
-    }
-
-    HUD.iframe.style.height = height + "px";
-  },
-
-  /**
-   * Remember the height of the given Web Console, such that it can later be
-   * reused when other Web Consoles are open.
-   *
-   * @param string aHUDId The ID of the Web Console.
-   */
-  storeHeight: function HS_storeHeight(aHUDId)
-  {
-    let hudBox = this.hudReferences[aHUDId].iframe;
-    let window = hudBox.ownerDocument.defaultView;
-    let style = window.getComputedStyle(hudBox, null);
-    let height = parseInt(style.height);
-    height += parseInt(style.borderTopWidth);
-    height += parseInt(style.borderBottomWidth);
-    this.lastConsoleHeight = height;
-
-    let pref = Services.prefs.getIntPref("devtools.hud.height");
-    if (pref > -1) {
-      Services.prefs.setIntPref("devtools.hud.height", height);
-    }
-  },
 };
 
 
 /**
  * A WebConsole instance is an interactive console initialized *per tab*
  * that displays console log data as well as provides an interactive terminal to
  * manipulate the current tab's document content.
  *
  * This object only wraps the iframe that holds the Web Console UI.
  *
  * @param nsIDOMElement aTab
  *        The xul:tab for which you want the WebConsole object.
- * @param object aOptions
- *        Web Console options: host and port, for the remote Web console.
+ * @param nsIDOMElement aIframe
+ *        iframe into which we should create the WebConsole UI.
+ * @param RemoteTarget aTarget
+ *        The target that the web console will connect to.
  */
-function WebConsole(aTab, aOptions = {})
+function WebConsole(aTab, aIframe, aTarget)
 {
   this.tab = aTab;
+  if (this.tab == null) {
+    throw new Error('Missing tab');
+  }
+
+  this.iframe = aIframe;
+  if (this.iframe == null) {
+    console.trace();
+    throw new Error('Missing iframe');
+  }
+
   this.chromeDocument = this.tab.ownerDocument;
   this.chromeWindow = this.chromeDocument.defaultView;
   this.hudId = "hud_" + this.tab.linkedPanel;
 
-  this.remoteHost = aOptions.host;
-  this.remotePort = aOptions.port;
+  this.target = aTarget;
 
   this._onIframeLoad = this._onIframeLoad.bind(this);
-  this._initUI();
+
+  this.iframe.className = "web-console-frame";
+  this.iframe.addEventListener("load", this._onIframeLoad, true);
+
+  this.positionConsole();
 }
 
 WebConsole.prototype = {
   /**
    * The xul:tab for which the current Web Console instance was created.
    * @type nsIDOMElement
    */
   tab: null,
@@ -531,22 +370,16 @@ WebConsole.prototype = {
    * Getter for HUDService.lastFinishedRequestCallback.
    *
    * @see HUDService.lastFinishedRequestCallback
    * @type function
    */
   get lastFinishedRequestCallback() HUDService.lastFinishedRequestCallback,
 
   /**
-   * The xul:panel that holds the Web Console when it is positioned as a window.
-   * @type nsIDOMElement
-   */
-  consolePanel: null,
-
-  /**
    * Getter for the xul:popupset that holds any popups we open.
    * @type nsIDOMElement
    */
   get mainPopupSet()
   {
     return this.chromeDocument.getElementById("mainPopupSet");
   },
 
@@ -557,348 +390,103 @@ WebConsole.prototype = {
   get outputNode()
   {
     return this.ui ? this.ui.outputNode : null;
   },
 
   get gViewSourceUtils() this.chromeWindow.gViewSourceUtils,
 
   /**
-   * Initialize the Web Console UI. This method sets up the iframe.
-   * @private
-   */
-  _initUI: function WC__initUI()
-  {
-    this.splitter = this.chromeDocument.createElement("splitter");
-    this.splitter.className = "devtools-horizontal-splitter";
-
-    this.iframe = this.chromeDocument.createElement("iframe");
-    this.iframe.setAttribute("id", this.hudId);
-    this.iframe.className = "web-console-frame";
-    this.iframe.setAttribute("animated", "true");
-    this.iframe.setAttribute("tooltip", "aHTMLTooltip");
-    this.iframe.style.height = 0;
-    this.iframe.addEventListener("load", this._onIframeLoad, true);
-    this.iframe.setAttribute("src", UI_IFRAME_URL);
-
-    let position = Services.prefs.getCharPref("devtools.webconsole.position");
-    this.positionConsole(position);
-  },
-
-  /**
    * The "load" event handler for the Web Console iframe.
    * @private
    */
   _onIframeLoad: function WC__onIframeLoad()
   {
     this.iframe.removeEventListener("load", this._onIframeLoad, true);
 
-    let position = Services.prefs.getCharPref("devtools.webconsole.position");
-
     this.iframeWindow = this.iframe.contentWindow.wrappedJSObject;
-    this.ui = new this.iframeWindow.WebConsoleFrame(this, position);
-  },
-
-  /**
-   * Create a panel to open the web console if it should float above
-   * the content in its own window.
-   * @private
-   */
-  _createOwnWindowPanel: function WC__createOwnWindowPanel()
-  {
-    if (this.consolePanel) {
-      return;
-    }
-
-    let width = 0;
-    try {
-      width = Services.prefs.getIntPref("devtools.webconsole.width");
-    }
-    catch (ex) {}
-
-    if (width < 1) {
-      width = this.iframe.clientWidth || this.chromeWindow.innerWidth;
-    }
-
-    let height = this.iframe.clientHeight;
-
-    let top = 0;
-    try {
-      top = Services.prefs.getIntPref("devtools.webconsole.top");
-    }
-    catch (ex) {}
-
-    let left = 0;
-    try {
-      left = Services.prefs.getIntPref("devtools.webconsole.left");
-    }
-    catch (ex) {}
-
-    let panel = this.chromeDocument.createElementNS(XUL_NS, "panel");
-
-    let config = { id: "console_window_" + this.hudId,
-                   label: this.getPanelTitle(),
-                   titlebar: "normal",
-                   noautohide: "true",
-                   norestorefocus: "true",
-                   close: "true",
-                   flex: "1",
-                   hudId: this.hudId,
-                   width: width,
-                   position: "overlap",
-                   top: top,
-                   left: left,
-                 };
-
-    for (let attr in config) {
-      panel.setAttribute(attr, config[attr]);
-    }
-
-    panel.classList.add("web-console-panel");
-
-    let onPopupShown = (function HUD_onPopupShown() {
-      panel.removeEventListener("popupshown", onPopupShown, false);
-
-      // Make sure that the HUDBox size updates when the panel is resized.
-
-      let height = panel.clientHeight;
-
-      this.iframe.style.height = "auto";
-      this.iframe.flex = 1;
-
-      panel.setAttribute("height", height);
-    }).bind(this);
-
-    panel.addEventListener("popupshown", onPopupShown,false);
-
-    let onPopupHidden = (function HUD_onPopupHidden(aEvent) {
-      if (aEvent.target != panel) {
-        return;
-      }
-
-      panel.removeEventListener("popuphidden", onPopupHidden, false);
-
-      let width = 0;
-      try {
-        width = Services.prefs.getIntPref("devtools.webconsole.width");
-      }
-      catch (ex) { }
-
-      if (width > 0) {
-        Services.prefs.setIntPref("devtools.webconsole.width", panel.clientWidth);
-      }
-
-      // Are we destroying the HUD or repositioning it?
-      if (this.consoleWindowUnregisterOnHide) {
-        HUDService.deactivateHUDForContext(this.tab, false);
-      }
-    }).bind(this);
-
-    panel.addEventListener("popuphidden", onPopupHidden, false);
-
-    let lastIndex = -1;
-
-    if (this.outputNode && this.outputNode.getIndexOfFirstVisibleRow) {
-      lastIndex = this.outputNode.getIndexOfFirstVisibleRow() +
-                  this.outputNode.getNumberOfVisibleRows() - 1;
-    }
-
-    if (this.splitter.parentNode) {
-      this.splitter.parentNode.removeChild(this.splitter);
-    }
-
-    this._beforePositionConsole("window", lastIndex);
-
-    panel.appendChild(this.iframe);
-
-    let space = this.chromeDocument.createElement("spacer");
-    space.flex = 1;
-
-    let bottomBox = this.chromeDocument.createElement("hbox");
-
-    let resizer = this.chromeDocument.createElement("resizer");
-    resizer.setAttribute("dir", "bottomend");
-    resizer.setAttribute("element", config.id);
-
-    bottomBox.appendChild(space);
-    bottomBox.appendChild(resizer);
-
-    panel.appendChild(bottomBox);
-
-    this.mainPopupSet.appendChild(panel);
-
-    panel.openPopup(null, "overlay", left, top, false, false);
-
-    this.consolePanel = panel;
-    this.consoleWindowUnregisterOnHide = true;
+    this.ui = new this.iframeWindow.WebConsoleFrame(this);
   },
 
   /**
    * Retrieve the Web Console panel title.
    *
    * @return string
    *         The Web Console panel title.
    */
   getPanelTitle: function WC_getPanelTitle()
   {
     let url = this.ui ? this.ui.contentLocation : "";
     return l10n.getFormatStr("webConsoleWindowTitleAndURL", [url]);
   },
 
-  positions: {
-    above: 0, // the childNode index
-    below: 2,
-    window: null
-  },
-
   consoleWindowUnregisterOnHide: true,
 
   /**
    * Position the Web Console UI.
-   *
-   * @param string aPosition
-   *        The desired Web Console UI location: above, below or window.
    */
-  positionConsole: function WC_positionConsole(aPosition)
+  positionConsole: function WC_positionConsole()
   {
-    if (!(aPosition in this.positions)) {
-      throw new Error("Incorrect argument: " + aPosition +
-        ". Cannot position Web Console");
-    }
-
-    if (aPosition == "window") {
-      this._createOwnWindowPanel();
-      return;
-    }
-
-    let height = this.iframe.clientHeight;
-
-    // get the node position index
-    let nodeIdx = this.positions[aPosition];
-    let nBox = this.chromeDocument.getElementById(this.tab.linkedPanel);
-    let node = nBox.childNodes[nodeIdx];
-
-    // check to see if console is already positioned in aPosition
-    if (node == this.iframe) {
-      return;
-    }
-
     let lastIndex = -1;
 
     if (this.outputNode && this.outputNode.getIndexOfFirstVisibleRow) {
       lastIndex = this.outputNode.getIndexOfFirstVisibleRow() +
                   this.outputNode.getNumberOfVisibleRows() - 1;
     }
 
-    // remove the console and splitter and reposition
-    if (this.splitter.parentNode) {
-      this.splitter.parentNode.removeChild(this.splitter);
-    }
-
-    this._beforePositionConsole(aPosition, lastIndex);
-
-    if (aPosition == "below") {
-      nBox.appendChild(this.splitter);
-      nBox.appendChild(this.iframe);
-    }
-    else {
-      nBox.insertBefore(this.splitter, node);
-      nBox.insertBefore(this.iframe, this.splitter);
-    }
-
-    if (this.consolePanel) {
-      // must destroy the consolePanel
-      this.consoleWindowUnregisterOnHide = false;
-      this.consolePanel.hidePopup();
-      this.consolePanel.parentNode.removeChild(this.consolePanel);
-      this.consolePanel = null;   // remove this as we're not in panel anymore
-      this.iframe.removeAttribute("flex");
-      this.iframe.removeAttribute("height");
-      this.iframe.style.height = height + "px";
-    }
+    this._beforePositionConsole(lastIndex);
   },
 
   /**
    * Common code that needs to execute before the Web Console is repositioned.
    * @private
-   * @param string aPosition
-   *        The new position: "above", "below" or "window".
    * @param number aLastIndex
    *        The last visible message in the console output before repositioning
    *        occurred.
    */
   _beforePositionConsole:
-  function WC__beforePositionConsole(aPosition, aLastIndex)
+  function WC__beforePositionConsole(aLastIndex)
   {
     if (!this.ui) {
       return;
     }
 
     let onLoad = function() {
       this.iframe.removeEventListener("load", onLoad, true);
       this.iframeWindow = this.iframe.contentWindow.wrappedJSObject;
-      this.ui.positionConsole(aPosition, this.iframeWindow);
+      this.ui.positionConsole(this.iframeWindow);
 
       if (aLastIndex > -1 && aLastIndex < this.outputNode.getRowCount()) {
         this.outputNode.ensureIndexIsVisible(aLastIndex);
       }
-
-      this._currentUIPosition = aPosition;
-      Services.prefs.setCharPref("devtools.webconsole.position", aPosition);
     }.bind(this);
 
     this.iframe.addEventListener("load", onLoad, true);
   },
 
   /**
    * The JSTerm object that manages the console's input.
    * @see webconsole.js::JSTerm
    * @type object
    */
   get jsterm()
   {
     return this.ui ? this.ui.jsterm : null;
   },
 
   /**
-   * The close button handler.
-   */
-  onCloseButton: function WC_onCloseButton()
-  {
-    HUDService.animate(this.hudId, ANIMATE_OUT, function() {
-      HUDService.deactivateHUDForContext(this.tab, true);
-    }.bind(this));
-  },
-
-  /**
    * The clear output button handler.
    * @private
    */
   _onClearButton: function WC__onClearButton()
   {
     this.chromeWindow.DeveloperToolbar.resetErrorsCount(this.tab);
   },
 
   /**
-   * Handler for page location changes. If the Web Console is
-   * opened in a panel the panel title is updated.
-   *
-   * @param string aURI
-   *        New page location.
-   * @param string aTitle
-   *        New page title.
-   */
-  onLocationChange: function WC_onLocationChange(aURI, aTitle)
-  {
-    if (this.consolePanel) {
-      this.consolePanel.label = this.getPanelTitle();
-    }
-  },
-
-  /**
    * Alias for the WebConsoleFrame.setFilterState() method.
    * @see webconsole.js::WebConsoleFrame.setFilterState()
    */
   setFilterState: function WC_setFilterState()
   {
     this.ui && this.ui.setFilterState.apply(this.ui, arguments);
   },
 
@@ -940,24 +528,24 @@ WebConsole.prototype = {
    *       To be fixed in bug 793259.
    */
   viewSourceInStyleEditor:
   function WC_viewSourceInStyleEditor(aSourceURL, aSourceLine)
   {
     let styleSheets = this.tab.linkedBrowser.contentWindow.document.styleSheets;
     for each (let style in styleSheets) {
       if (style.href == aSourceURL) {
-        let SEM = this.chromeWindow.StyleEditor.StyleEditorManager;
-        let win = SEM.getEditorForWindow(this.chromeWindow.content.window);
-        if (win) {
-          SEM.selectEditor(win, style, aSourceLine);
-        }
-        else {
-          this.chromeWindow.StyleEditor.openChrome(style, aSourceLine);
-        }
+        let target = TargetFactory.forTab(this.tab);
+        let gDevTools = this.chromeWindow.gDevTools;
+        let toolbox = gDevTools.getToolboxForTarget(target);
+        toolbox.once("styleeditor-selected",
+          function _onStyleEditorReady(aEvent, aPanel) {
+            aPanel.selectStyleSheet(style, aSourceLine);
+          });
+        toolbox.selectTool("styleeditor");
         return;
       }
     }
     // Open view source if style editor fails.
     this.viewSource(aSourceURL, aSourceLine);
   },
 
   /**
@@ -972,38 +560,32 @@ WebConsole.prototype = {
   {
     // Make sure that the console panel does not try to call
     // deactivateHUDForContext() again.
     this.consoleWindowUnregisterOnHide = false;
 
     let popupset = this.mainPopupSet;
     let panels = popupset.querySelectorAll("panel[hudId=" + this.hudId + "]");
     for (let panel of panels) {
-      if (panel != this.consolePanel) {
-        panel.hidePopup();
-      }
+      panel.hidePopup();
     }
 
     let onDestroy = function WC_onDestroyUI() {
       // Remove the iframe and the consolePanel if the Web Console is inside a
       // floating panel.
       if (this.consolePanel && this.consolePanel.parentNode) {
         this.consolePanel.hidePopup();
         this.consolePanel.parentNode.removeChild(this.consolePanel);
         this.consolePanel = null;
       }
 
       if (this.iframe.parentNode) {
         this.iframe.parentNode.removeChild(this.iframe);
       }
 
-      if (this.splitter.parentNode) {
-        this.splitter.parentNode.removeChild(this.splitter);
-      }
-
       aOnDestroy && aOnDestroy();
     }.bind(this);
 
     if (this.ui) {
       this.ui.destroy(onDestroy);
     }
     else {
       onDestroy();
@@ -1011,63 +593,21 @@ WebConsole.prototype = {
   },
 };
 
 //////////////////////////////////////////////////////////////////////////
 // HeadsUpDisplayUICommands
 //////////////////////////////////////////////////////////////////////////
 
 var HeadsUpDisplayUICommands = {
-  refreshCommand: function UIC_refreshCommand() {
-    var window = HUDService.currentContext();
-    if (!window) {
-      return;
-    }
-
-    let command = window.document.getElementById("Tools:WebConsole");
-    if (this.getOpenHUD() != null) {
-      command.setAttribute("checked", true);
-    } else {
-      command.setAttribute("checked", false);
-    }
-  },
-
   toggleHUD: function UIC_toggleHUD(aOptions)
   {
     var window = HUDService.currentContext();
-    var gBrowser = window.gBrowser;
-    var linkedBrowser = gBrowser.selectedTab.linkedBrowser;
-    var tabId = gBrowser.getNotificationBox(linkedBrowser).getAttribute("id");
-    var hudId = "hud_" + tabId;
-    var ownerDocument = gBrowser.selectedTab.ownerDocument;
-    var hud = ownerDocument.getElementById(hudId);
-    var hudRef = HUDService.hudReferences[hudId];
-
-    if (hudRef && hud) {
-      if (hudRef.consolePanel) {
-        hudRef.consolePanel.hidePopup();
-      }
-      else {
-        HUDService.storeHeight(hudId);
-
-        HUDService.animate(hudId, ANIMATE_OUT, function() {
-          // If the user closes the console while the console is animating away,
-          // then these callbacks will queue up, but all the callbacks after the
-          // first will have no console to operate on. This test handles this
-          // case gracefully.
-          if (ownerDocument.getElementById(hudId)) {
-            HUDService.deactivateHUDForContext(gBrowser.selectedTab, true);
-          }
-        });
-      }
-    }
-    else {
-      HUDService.activateHUDForContext(gBrowser.selectedTab, true, aOptions);
-      HUDService.animate(hudId, ANIMATE_IN);
-    }
+    let target = TargetFactory.forTab(window.gBrowser.selectedTab);
+    gDevTools.toggleToolboxForTarget(target, "webconsole");
   },
 
   toggleRemoteHUD: function UIC_toggleRemoteHUD()
   {
     if (this.getOpenHUD()) {
       this.toggleHUD();
       return;
     }
@@ -1139,13 +679,10 @@ var WebConsoleObserver = {
   },
 
   uninit: function WCO_uninit()
   {
     Services.obs.removeObserver(this, "quit-application-granted");
   },
 };
 
+const HUDService = new HUD_SERVICE();
 
-XPCOMUtils.defineLazyGetter(this, "HUDService", function () {
-  return new HUD_SERVICE();
-});
-
diff --git a/browser/devtools/webconsole/Makefile.in b/browser/devtools/webconsole/Makefile.in
--- a/browser/devtools/webconsole/Makefile.in
+++ b/browser/devtools/webconsole/Makefile.in
@@ -10,13 +10,14 @@ VPATH		= @srcdir@
 
 include $(DEPTH)/config/autoconf.mk
 
 EXTRA_JS_MODULES = \
 		HUDService.jsm \
 		PropertyPanel.jsm \
 		NetworkPanel.jsm \
 		AutocompletePopup.jsm \
+		WebConsolePanel.jsm \
 		$(NULL)
 
 TEST_DIRS = test
 
 include $(topsrcdir)/config/rules.mk
diff --git a/browser/devtools/webconsole/WebConsolePanel.jsm b/browser/devtools/webconsole/WebConsolePanel.jsm
new file mode 100644
--- /dev/null
+++ b/browser/devtools/webconsole/WebConsolePanel.jsm
@@ -0,0 +1,102 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+this.EXPORTED_SYMBOLS = [ "WebConsoleDefinition" ];
+
+const { classes: Cc, interfaces: Ci, utils: Cu } = Components;
+
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+
+XPCOMUtils.defineLazyModuleGetter(this, "Services",
+                                  "resource://gre/modules/Services.jsm");
+
+XPCOMUtils.defineLazyModuleGetter(this, "WebConsoleUtils",
+                                  "resource://gre/modules/devtools/WebConsoleUtils.jsm");
+
+XPCOMUtils.defineLazyModuleGetter(this, "HUDService",
+                                  "resource:///modules/HUDService.jsm");
+
+XPCOMUtils.defineLazyModuleGetter(this, "EventEmitter",
+                                  "resource:///modules/devtools/EventEmitter.jsm");
+
+const STRINGS_URI = "chrome://browser/locale/devtools/webconsole.properties";
+let l10n = new WebConsoleUtils.l10n(STRINGS_URI);
+
+/**
+ * The external API allowing us to be registered with DevTools.jsm
+ */
+this.WebConsoleDefinition = {
+  id: "webconsole",
+  key: l10n.getStr("cmd.commandkey"),
+  accesskey: l10n.getStr("webConsoleCmd.accesskey"),
+  modifiers: Services.appinfo.OS == "Darwin" ? "accel,alt" : "accel,shift",
+  ordinal: 0,
+  icon: "chrome://browser/skin/devtools/webconsole-tool-icon.png",
+  url: "chrome://browser/content/devtools/webconsole.xul",
+  label: l10n.getStr("ToolboxWebconsole.label"),
+  isTargetSupported: function(target) {
+    return true;
+  },
+  build: function(iframeWindow, toolbox) {
+    return new WebConsolePanel(iframeWindow, toolbox);
+  }
+};
+
+/**
+ * A DevToolPanel that controls the Web Console.
+ */
+function WebConsolePanel(iframeWindow, toolbox) {
+  this._frameWindow = iframeWindow;
+  this._toolbox = toolbox;
+  new EventEmitter(this);
+
+  let tab = this._toolbox._getHostTab();
+  let parentDoc = iframeWindow.document.defaultView.parent.document;
+  let iframe = parentDoc.getElementById("toolbox-panel-iframe-webconsole");
+  this.hud = HUDService.activateHUDForContext(tab, iframe, toolbox.target);
+
+  let hudId = this.hud.hudId;
+  let onOpen = function _onWebConsoleOpen(aSubject)
+  {
+    aSubject.QueryInterface(Ci.nsISupportsString);
+    if (hudId == aSubject.data) {
+      Services.obs.removeObserver(onOpen, "web-console-created");
+      this.setReady();
+    }
+  }.bind(this);
+
+  Services.obs.addObserver(onOpen, "web-console-created", false);
+}
+
+WebConsolePanel.prototype = {
+  get target() this._toolbox.target,
+
+  _isReady: false,
+  get isReady() this._isReady,
+
+  destroy: function WCP_destroy()
+  {
+    let hudId = this.hud.hudId;
+
+    let onClose = function _onWebConsoleClose(aSubject)
+    {
+      aSubject.QueryInterface(Ci.nsISupportsString);
+      if (hudId == aSubject.data) {
+        Services.obs.removeObserver(onClose, "web-console-destroyed");
+        this.emit("destroyed");
+      }
+    }.bind(this);
+
+    Services.obs.addObserver(onClose, "web-console-destroyed", false);
+    HUDService.deactivateHUDForContext(this.hud.tab, false);
+  },
+
+  setReady: function WCP_setReady()
+  {
+    this._isReady = true;
+    this.emit("ready");
+  },
+}
diff --git a/browser/devtools/webconsole/test/Makefile.in b/browser/devtools/webconsole/test/Makefile.in
--- a/browser/devtools/webconsole/test/Makefile.in
+++ b/browser/devtools/webconsole/test/Makefile.in
@@ -41,32 +41,30 @@ MOCHITEST_BROWSER_FILES = \
 	browser_webconsole_network_panel.js \
 	browser_webconsole_jsterm.js \
 	browser_webconsole_null_and_undefined_output.js \
 	browser_webconsole_output_order.js \
 	browser_webconsole_property_panel.js \
 	browser_webconsole_property_provider.js \
 	browser_webconsole_bug_587617_output_copy.js \
 	browser_webconsole_bug_585237_line_limit.js \
-	browser_webconsole_bug_581231_close_button.js \
 	browser_webconsole_bug_582201_duplicate_errors.js \
 	browser_webconsole_bug_580454_timestamp_l10n.js \
 	browser_webconsole_netlogging.js \
 	browser_webconsole_bug_583816_No_input_and_Tab_key_pressed.js \
 	browser_webconsole_bug_594477_clickable_output.js \
 	browser_webconsole_bug_589162_css_filter.js \
 	browser_webconsole_bug_597103_deactivateHUDForContext_unfocused_window.js \
 	browser_webconsole_bug_595350_multiple_windows_and_tabs.js \
 	browser_webconsole_bug_594497_history_arrow_keys.js \
 	browser_webconsole_bug_588342_document_focus.js \
 	browser_webconsole_bug_595934_message_categories.js \
 	browser_webconsole_bug_601352_scroll.js \
 	browser_webconsole_bug_592442_closing_brackets.js \
 	browser_webconsole_bug_593003_iframe_wrong_hud.js \
-	browser_webconsole_bug_601909_remember_height.js \
 	browser_webconsole_bug_613013_console_api_iframe.js \
 	browser_webconsole_bug_597756_reopen_closed_tab.js \
 	browser_webconsole_bug_600183_charset.js \
 	browser_webconsole_bug_601177_log_levels.js \
 	browser_webconsole_bug_597460_filter_scroll.js \
 	browser_webconsole_console_extras.js \
 	browser_webconsole_bug_598357_jsterm_output.js \
 	browser_webconsole_bug_603750_websocket.js \
@@ -87,37 +85,33 @@ MOCHITEST_BROWSER_FILES = \
 	browser_webconsole_bug_626484_output_copy_order.js \
 	browser_webconsole_bug_632347_iterators_generators.js \
 	browser_webconsole_bug_642108_pruneTest.js \
 	browser_webconsole_bug_585956_console_trace.js \
 	browser_webconsole_bug_595223_file_uri.js \
 	browser_webconsole_bug_632275_getters_document_width.js \
 	browser_webconsole_bug_644419_log_limits.js \
 	browser_webconsole_bug_646025_console_file_location.js \
-	browser_webconsole_position_ui.js \
 	browser_webconsole_bug_642615_autocomplete.js \
 	browser_webconsole_bug_585991_autocomplete_popup.js \
 	browser_webconsole_bug_585991_autocomplete_keys.js \
-	browser_webconsole_bug_663443_panel_title.js \
 	browser_webconsole_bug_660806_history_nav.js \
 	browser_webconsole_bug_651501_document_body_autocomplete.js \
 	browser_webconsole_bug_653531_highlighter_console_helper.js \
 	browser_webconsole_bug_659907_console_dir.js \
 	browser_webconsole_bug_664131_console_group.js \
 	browser_webconsole_bug_704295.js \
 	browser_webconsole_bug_658368_time_methods.js \
 	browser_webconsole_bug_764572_output_open_url.js \
 	browser_webconsole_bug_622303_persistent_filters.js \
-        browser_webconsole_bug_770099_bad_policyuri.js \
-        browser_webconsole_bug_770099_violation.js \
+	browser_webconsole_bug_770099_bad_policyuri.js \
+	browser_webconsole_bug_770099_violation.js \
 	browser_webconsole_bug_782653_CSS_links_in_Style_Editor.js \
-	browser_webconsole_window_zombie.js \
 	browser_cached_messages.js \
 	browser_bug664688_sandbox_update_after_navigation.js \
-	browser_webconsole_menustatus.js \
 	browser_result_format_as_string.js \
 	browser_webconsole_bug_737873_mixedcontent.js \
 	browser_output_breaks_after_console_dir_uninspectable.js \
 	browser_console_log_inspectable_object.js \
 	browser_bug_638949_copy_link_location.js \
 	browser_output_longstring_expand.js \
 	browser_netpanel_longstring_expand.js \
 	head.js \
@@ -197,17 +191,17 @@ MOCHITEST_BROWSER_FILES += \
 	test-bug-646025-console-file-location.html \
 	test-bug-782653-css-errors.html \
 	test-bug-782653-css-errors-1.css \
 	test-bug-782653-css-errors-2.css \
 	test-file-location.js \
 	test-bug-658368-time-methods.html \
 	test-webconsole-error-observer.html \
 	test-for-of.html \
-        test_bug_770099_violation.html \
-        test_bug_770099_violation.html^headers^ \
-        test_bug_770099_bad_policy_uri.html \
-        test_bug_770099_bad_policy_uri.html^headers^ \
+	test_bug_770099_violation.html \
+	test_bug_770099_violation.html^headers^ \
+	test_bug_770099_bad_policy_uri.html \
+	test_bug_770099_bad_policy_uri.html^headers^ \
 	test-result-format-as-string.html \
 	test-bug-737873-mixedcontent.html \
 	$(NULL)
 
 include $(topsrcdir)/config/rules.mk
diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_581231_close_button.js b/browser/devtools/webconsole/test/browser_webconsole_bug_581231_close_button.js
deleted file mode 100644
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_581231_close_button.js
+++ /dev/null
@@ -1,37 +0,0 @@
-/* vim:set ts=2 sw=2 sts=2 et: */
-/* ***** BEGIN LICENSE BLOCK *****
- * Any copyright is dedicated to the Public Domain.
- * http://creativecommons.org/publicdomain/zero/1.0/
- *
- * Contributor(s):
- *  Patrick Walton <pcwalton@mozilla.com>
- *
- * ***** END LICENSE BLOCK ***** */
-
-// Tests that the Web Console close button functions.
-
-const TEST_URI = "http://example.com/browser/browser/devtools/webconsole/test/test-console.html";
-
-function test() {
-  addTab(TEST_URI);
-  browser.addEventListener("load", function onLoad() {
-    browser.removeEventListener("load", onLoad, true);
-    openConsole(null, testCloseButton);
-  }, true);
-}
-
-function testCloseButton(hud) {
-  let hudId = hud.hudId;
-  HUDService.disableAnimation(hudId);
-  waitForFocus(function() {
-    let closeButton = hud.ui.closeButton;
-    ok(closeButton != null, "we have the close button");
-
-    EventUtils.synthesizeMouse(closeButton, 2, 2, {}, hud.iframeWindow);
-
-    ok(!(hudId in HUDService.hudReferences), "the console is closed when " +
-       "the close button is pressed");
-
-    finishTest();
-  }, hud.iframeWindow);
-}
diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_597103_deactivateHUDForContext_unfocused_window.js b/browser/devtools/webconsole/test/browser_webconsole_bug_597103_deactivateHUDForContext_unfocused_window.js
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_597103_deactivateHUDForContext_unfocused_window.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_bug_597103_deactivateHUDForContext_unfocused_window.js
@@ -39,28 +39,30 @@ function tab2Loaded(aEvent) {
       executeSoon(closeConsoles);
     }
   }
 
   Services.obs.addObserver(onWebConsoleOpen, "web-console-created", false);
 
   function openConsoles() {
     try {
-      HUDService.activateHUDForContext(tab1);
+      let target1 = TargetFactory.forTab(tab1);
+      gDevTools.openToolboxForTab(target1, "webconsole");
     }
     catch (ex) {
-      ok(false, "HUDService.activateHUDForContext(tab1) exception: " + ex);
+      ok(false, "gDevTools.openToolboxForTab(target1) exception: " + ex);
       noErrors = false;
     }
 
     try {
-      HUDService.activateHUDForContext(tab2);
+      let target2 = TargetFactory.forTab(tab2);
+      gDevTools.openToolboxForTab(target2, "webconsole");
     }
     catch (ex) {
-      ok(false, "HUDService.activateHUDForContext(tab2) exception: " + ex);
+      ok(false, "gDevTools.openToolboxForTab(target2) exception: " + ex);
       noErrors = false;
     }
   }
 
   let consolesClosed = 0;
   function onWebConsoleClose()
   {
     consolesClosed++;
@@ -69,28 +71,30 @@ function tab2Loaded(aEvent) {
       executeSoon(testEnd);
     }
   }
 
   function closeConsoles() {
     Services.obs.addObserver(onWebConsoleClose, "web-console-destroyed", false);
 
     try {
-      HUDService.deactivateHUDForContext(tab1);
+      let target1 = TargetFactory.forTab(tab1);
+      gDevTools.closeToolbox(target1);
     }
     catch (ex) {
-      ok(false, "HUDService.deactivateHUDForContext(tab1) exception: " + ex);
+      ok(false, "gDevTools.closeToolbox(target1) exception: " + ex);
       noErrors = false;
     }
 
     try {
-      HUDService.deactivateHUDForContext(tab2);
+      let target2 = TargetFactory.forTab(tab2);
+      gDevTools.closeToolbox(target2);
     }
     catch (ex) {
-      ok(false, "HUDService.deactivateHUDForContext(tab2) exception: " + ex);
+      ok(false, "gDevTools.closeToolbox(target2) exception: " + ex);
       noErrors = false;
     }
   }
 
   function testEnd() {
     ok(noErrors, "there were no errors");
 
     Array.forEach(win1.gBrowser.tabs, function(aTab) {
diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_601909_remember_height.js b/browser/devtools/webconsole/test/browser_webconsole_bug_601909_remember_height.js
deleted file mode 100644
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_601909_remember_height.js
+++ /dev/null
@@ -1,107 +0,0 @@
-/* vim:set ts=2 sw=2 sts=2 et: */
-/* ***** BEGIN LICENSE BLOCK *****
- * Any copyright is dedicated to the Public Domain.
- * http://creativecommons.org/publicdomain/zero/1.0/
- *
- * Contributor(s):
- *  Mihai Șucan <mihai.sucan@gmail.com>
- *
- * ***** END LICENSE BLOCK ***** */
-
-// Minimum console height, in pixels.
-const MINIMUM_CONSOLE_HEIGHT = 150;
-
-// Minimum page height, in pixels. This prevents the Web Console from
-// remembering a height that covers the whole page.
-const MINIMUM_PAGE_HEIGHT = 50;
-const HEIGHT_PREF = "devtools.hud.height";
-
-let hud, newHeight, height, innerHeight, testDriver;
-
-function testGen()
-{
-  height = parseInt(hud.style.height);
-
-  toggleConsole();
-  yield;
-
-  is(newHeight, height, "same height after reopening the console");
-  is(Services.prefs.getIntPref(HEIGHT_PREF), HUDService.lastConsoleHeight,
-    "pref is correct");
-
-  setHeight(Math.ceil(innerHeight * 0.5));
-  toggleConsole();
-  yield;
-
-  is(newHeight, height, "same height after reopening the console");
-  is(Services.prefs.getIntPref(HEIGHT_PREF), HUDService.lastConsoleHeight,
-    "pref is correct");
-
-  setHeight(MINIMUM_CONSOLE_HEIGHT - 1);
-  toggleConsole();
-  yield;
-
-  is(newHeight, MINIMUM_CONSOLE_HEIGHT, "minimum console height is respected");
-  is(Services.prefs.getIntPref(HEIGHT_PREF), HUDService.lastConsoleHeight,
-    "pref is correct");
-
-  setHeight(innerHeight - MINIMUM_PAGE_HEIGHT + 1);
-  toggleConsole();
-  yield;
-
-  is(newHeight, innerHeight - MINIMUM_PAGE_HEIGHT,
-    "minimum page height is respected");
-  is(Services.prefs.getIntPref(HEIGHT_PREF), HUDService.lastConsoleHeight,
-    "pref is correct");
-
-  setHeight(Math.ceil(innerHeight * 0.6));
-  Services.prefs.setIntPref(HEIGHT_PREF, -1);
-  toggleConsole();
-  yield;
-
-  is(newHeight, height, "same height after reopening the console");
-  is(Services.prefs.getIntPref(HEIGHT_PREF), -1, "pref is not updated");
-
-  closeConsole();
-  HUDService.lastConsoleHeight = 0;
-  Services.prefs.setIntPref(HEIGHT_PREF, 0);
-
-  hud = testDriver = null;
-  executeSoon(finishTest);
-
-  yield;
-}
-
-function toggleConsole()
-{
-  closeConsole(null, function() {
-    openConsole(null, function() {
-      let hudId = HUDService.getHudIdByWindow(content);
-      hud = HUDService.hudReferences[hudId].iframe;
-      newHeight = parseInt(hud.style.height);
-
-      testDriver.next();
-    });
-  });
-}
-
-function setHeight(aHeight)
-{
-  height = aHeight;
-  hud.style.height = height + "px";
-}
-
-function test()
-{
-  addTab("data:text/html;charset=utf-8,Web Console test for bug 601909");
-  browser.addEventListener("load", function onLoad() {
-    browser.removeEventListener("load", onLoad, true);
-    innerHeight = content.innerHeight;
-    openConsole(null, function(aHud) {
-      hud = aHud.iframe;
-      testDriver = testGen();
-      testDriver.next();
-    });
-  }, true);
-}
-
diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_602572_log_bodies_checkbox.js b/browser/devtools/webconsole/test/browser_webconsole_bug_602572_log_bodies_checkbox.js
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_602572_log_bodies_checkbox.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_bug_602572_log_bodies_checkbox.js
@@ -41,17 +41,16 @@ function test()
 }
 
 function startTest()
 {
   // Find the relevant elements in the Web Console of tab 2.
   let win2 = tabs[runCount*2 + 1].linkedBrowser.contentWindow;
   let hudId2 = HUDService.getHudIdByWindow(win2);
   huds[1] = HUDService.hudReferences[hudId2];
-  HUDService.disableAnimation(hudId2);
 
   if (runCount == 0) {
     menuitems[1] = huds[1].ui.rootElement.querySelector("#saveBodies");
   }
   else {
     menuitems[1] = huds[1].ui.rootElement.querySelector("#saveBodiesContextMenu");
   }
   menupopups[1] = menuitems[1].parentNode;
@@ -110,17 +109,16 @@ function onpopupshown2b(aEvent)
 
     // Switch to tab 1 and open the Web Console context menu from there.
     gBrowser.selectedTab = tabs[runCount*2];
     waitForFocus(function() {
       // Find the relevant elements in the Web Console of tab 1.
       let win1 = tabs[runCount*2].linkedBrowser.contentWindow;
       let hudId1 = HUDService.getHudIdByWindow(win1);
       huds[0] = HUDService.hudReferences[hudId1];
-      HUDService.disableAnimation(hudId1);
 
       info("iframe1 height " + huds[0].iframe.clientHeight);
       info("iframe1 root height " + huds[0].ui.rootElement.clientHeight);
 
       menuitems[0] = huds[0].ui.rootElement.querySelector("#saveBodies");
       menupopups[0] = huds[0].ui.rootElement.querySelector("menupopup");
 
       menupopups[0].addEventListener("popupshown", onpopupshown1, false);
diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_622303_persistent_filters.js b/browser/devtools/webconsole/test/browser_webconsole_bug_622303_persistent_filters.js
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_622303_persistent_filters.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_bug_622303_persistent_filters.js
@@ -1,13 +1,11 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
-let prefService = Services.prefs;
-
 let prefs = {
   "net": [
     "network",
     "networkinfo"
   ],
   "css": [
     "csserror",
     "cssparser"
@@ -23,17 +21,17 @@ let prefs = {
      "log"
   ]
 };
 
 function test() {
   // Set all prefs to true
   for (let category in prefs) {
     prefs[category].forEach(function(pref) {
-      prefService.setBoolPref("devtools.webconsole.filter." + pref, true);
+      Services.prefs.setBoolPref("devtools.webconsole.filter." + pref, true);
     });
   }
 
   addTab("about:blank");
   openConsole(null, onConsoleOpen);
 }
 
 function onConsoleOpen(hud) {
@@ -102,22 +100,21 @@ function onConsoleReopen2(hud) {
     let pref = prefs[category][0];
     let menuitem = hudBox.querySelector("menuitem[prefKey=" + pref + "]");
     ok(isChecked(menuitem), "first " + category + " menuitem is checked");
   }
 
   // Clear prefs
   for (let category in prefs) {
     prefs[category].forEach(function(pref) {
-      prefService.clearUserPref("devtools.webconsole.filter." + pref);
+      Services.prefs.clearUserPref("devtools.webconsole.filter." + pref);
     });
   }
 
-  prefs = prefService = null;
-  gBrowser.removeCurrentTab();
+  prefs = null;
   finishTest();
 }
 
 function isChecked(aNode) {
   return aNode.getAttribute("checked") === "true";
 }
 
 function isUnchecked(aNode) {
diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_653531_highlighter_console_helper.js b/browser/devtools/webconsole/test/browser_webconsole_bug_653531_highlighter_console_helper.js
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_653531_highlighter_console_helper.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_bug_653531_highlighter_console_helper.js
@@ -39,48 +39,52 @@ function createDocument()
   doc.body.appendChild(div2);
   setupHighlighterTests();
 }
 
 function setupHighlighterTests()
 {
   let h1 = content.document.querySelector("h1");
   ok(h1, "we have the header node");
-  Services.obs.addObserver(runSelectionTests,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
-  InspectorUI.toggleInspectorUI();
+
+  openInspector(runSelectionTests);
 }
 
-function runSelectionTests()
+function runSelectionTests(aInspector)
 {
-  Services.obs.removeObserver(runSelectionTests,
-    InspectorUI.INSPECTOR_NOTIFICATIONS.OPENED, false);
+  aInspector.highlighter.unlock();
+  aInspector.highlighter.outline.setAttribute("disable-transitions", "true");
 
   executeSoon(function() {
-    InspectorUI.highlighter.addListener("nodeselected", performTestComparisons);
+    aInspector.selection.once("new-node", performTestComparisons);
     let h1 = content.document.querySelector("h1");
     EventUtils.synthesizeMouse(h1, 2, 2, {type: "mousemove"}, content);
   });
 }
 
 function performTestComparisons()
 {
-  InspectorUI.highlighter.removeListener("nodeselected", performTestComparisons);
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+  let inspector = gDevTools.getPanelForTarget("inspector", target);
+  inspector.highlighter.lock();
 
-  InspectorUI.stopInspecting();
+  let isHighlighting =
+    !(inspector.highlighter.outline.getAttribute("hidden") == "true");
+
+  ok(isHighlighting, "inspector is highlighting");
 
   let h1 = content.document.querySelector("h1");
-  is(InspectorUI.highlighter.node, h1, "node selected");
-  is(InspectorUI.selection, h1, "selection matches node");
+  is(inspector.selection.node, h1, "selection matches node");
 
   openConsole(gBrowser.selectedTab, performWebConsoleTests);
 }
 
 function performWebConsoleTests(hud)
 {
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
   let jsterm = hud.jsterm;
   outputNode = hud.outputNode;
 
   jsterm.clearOutput();
   jsterm.execute("$0");
 
   waitForSuccess({
     name: "$0 output",
@@ -107,34 +111,34 @@ function performWebConsoleTests(hud)
     {
       return outputNode.querySelector(".webconsole-msg-output");
     },
     successFn: function()
     {
       let node = outputNode.querySelector(".webconsole-msg-output");
       isnot(node.textContent.indexOf("bug653531"), -1,
             "correct output for $0.textContent");
-      is(InspectorUI.selection.textContent, "bug653531",
+      let inspector = gDevTools.getPanelForTarget("inspector", target);
+      is(inspector.selection.node.textContent, "bug653531",
          "node successfully updated");
 
       executeSoon(finishUp);
     },
     failureFn: finishUp,
   };
 }
 
 function finishUp() {
-  InspectorUI.closeInspectorUI();
   finishTest();
 }
 
 function test()
 {
   waitForExplicitFinish();
   gBrowser.selectedTab = gBrowser.addTab();
-  gBrowser.selectedBrowser.addEventListener("load", function() {
-    gBrowser.selectedBrowser.removeEventListener("load", arguments.callee, true);
+  gBrowser.selectedBrowser.addEventListener("load", function onLoad() {
+    gBrowser.selectedBrowser.removeEventListener("load", onLoad, true);
     waitForFocus(createDocument, content);
   }, true);
 
   content.location = "data:text/html;charset=utf-8,test for highlighter helper in web console";
 }
 
diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_660806_history_nav.js b/browser/devtools/webconsole/test/browser_webconsole_bug_660806_history_nav.js
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_660806_history_nav.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_bug_660806_history_nav.js
@@ -16,31 +16,33 @@ function consoleOpened(HUD)
 {
   content.wrappedJSObject.foobarBug660806 = {
     "location": "value0",
     "locationbar": "value1",
   };
 
   let jsterm = HUD.jsterm;
   let popup = jsterm.autocompletePopup;
-  popup._panel.addEventListener("popupshown", function() {
-    popup._panel.removeEventListener("popupshown", arguments.callee, false);
+  let onShown = function() {
     ok(false, "popup shown");
-  }, false);
+  };
+
+  popup._panel.addEventListener("popupshown", onShown, false);
 
   ok(!popup.isOpen, "popup is not open");
 
   ok(!jsterm.lastInputValue, "no lastInputValue");
   jsterm.setInputValue("window.foobarBug660806.location");
   is(jsterm.lastInputValue, "window.foobarBug660806.location",
      "lastInputValue is correct");
 
   EventUtils.synthesizeKey("VK_RETURN", {});
   EventUtils.synthesizeKey("VK_UP", {});
 
   is(jsterm.lastInputValue, "window.foobarBug660806.location",
      "lastInputValue is correct, again");
 
   executeSoon(function() {
     ok(!popup.isOpen, "popup is not open");
+    popup._panel.removeEventListener("popupshown", onShown, false);
     executeSoon(finishTest);
   });
 }
diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_663443_panel_title.js b/browser/devtools/webconsole/test/browser_webconsole_bug_663443_panel_title.js
deleted file mode 100644
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_663443_panel_title.js
+++ /dev/null
@@ -1,57 +0,0 @@
-/* vim:set ts=2 sw=2 sts=2 et: */
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-const TEST_URI = "data:text/html;charset=utf-8,<p>test for bug 663443. test1";
-
-const POSITION_PREF = "devtools.webconsole.position";
-const POSITION_WINDOW = "window";
-
-function consoleOpened() {
-  document.removeEventListener("popupshown", consoleOpened, false);
-
-  let HUD = HUDService.getHudByWindow(content);
-  ok(HUD.consolePanel, "Web Console opened in a panel");
-
-  let waitForTitleChange = {
-    name: "panel title change",
-    validatorFn: function() {
-      return HUD.consolePanel.label.indexOf("test2") > -1;
-    },
-    successFn: testEnd,
-    failureFn: testEnd,
-  };
-
-  waitForSuccess({
-    name: "initial panel title",
-    validatorFn: function() {
-      return HUD.consolePanel.label.indexOf("test1") > -1;
-    },
-    successFn: function() {
-      content.location = "data:text/html;charset=utf-8,<p>test2 for bug 663443";
-      waitForSuccess(waitForTitleChange);
-    },
-    failureFn: testEnd,
-  });
-}
-
-function testEnd() {
-  closeConsole(null, finishTest);
-}
-
-function test() {
-  addTab(TEST_URI);
-  browser.addEventListener("load", function onLoad() {
-    browser.removeEventListener("load", onLoad, true);
-
-    Services.prefs.setCharPref(POSITION_PREF, POSITION_WINDOW);
-
-    registerCleanupFunction(function() {
-      Services.prefs.clearUserPref(POSITION_PREF);
-    });
-  
-    document.addEventListener("popupshown", consoleOpened, false);
-
-    openConsole();
-  }, true);
-}
diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_782653_CSS_links_in_Style_Editor.js b/browser/devtools/webconsole/test/browser_webconsole_bug_782653_CSS_links_in_Style_Editor.js
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_782653_CSS_links_in_Style_Editor.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_bug_782653_CSS_links_in_Style_Editor.js
@@ -34,110 +34,122 @@ function testViewSource(aHud)
     {
       return hud.outputNode.querySelector(selector);
     },
     successFn: function()
     {
       nodes = hud.outputNode.querySelectorAll(selector);
       is(nodes.length, 2, "correct number of css messages");
 
-      Services.ww.registerNotification(observer);
+      let target = TargetFactory.forTab(gBrowser.selectedTab);
+      let toolbox = gDevTools.getToolboxForTarget(target);
+      toolbox.once("styleeditor-selected", onStyleEditorReady);
 
       EventUtils.sendMouseEvent({ type: "click" }, nodes[0]);
     },
     failureFn: finishTest,
   });
 }
 
-let observer = {
-  observe: function(aSubject, aTopic, aData)
+function onStyleEditorReady(aEvent, aPanel)
+{
+  info(aEvent + " event fired");
+
+  SEC = aPanel.styleEditorChrome;
+  let win = aPanel.panelWindow;
+  ok(win, "Style Editor Window is defined");
+  ok(SEC, "Style Editor Chrome is defined");
+
+  function sheetForNode(aNode)
   {
-    if (aTopic != "domwindowopened") {
-      return;
-    }
-    Services.ww.unregisterNotification(observer);
-    info("Style Editor window was opened in response to clicking " +
-         "the location node");
-
-    function sheetForNode(aNode)
-    {
-      let href = aNode.getAttribute("title");
-      let sheet, i = 0;
-      while((sheet = content.document.styleSheets[i++])) {
-        if (sheet.href == href) {
-          return sheet;
-        }
+    let href = aNode.getAttribute("title");
+    let sheet, i = 0;
+    while((sheet = content.document.styleSheets[i++])) {
+      if (sheet.href == href) {
+        return sheet;
       }
     }
+  }
 
-    executeSoon(function() {
-      let styleEditorWin = window.StyleEditor.StyleEditorManager
-                          .getEditorForWindow(content.window);
-      ok(styleEditorWin, "Style Editor window is defined");
+  waitForFocus(function() {
+    info("style editor window focused");
 
-      waitForFocus(function() {
-        SEC = styleEditorWin.styleEditorChrome;
-        ok(SEC, "Style Editor Chrome is defined");
+    let sheet = sheetForNode(nodes[0]);
+    ok(sheet, "sheet found");
+    let line = nodes[0].sourceLine;
+    ok(line, "found source line");
 
-        let sheet = sheetForNode(nodes[0]);
-        ok(sheet, "sheet found");
-        let line = nodes[0].sourceLine;
-        ok(line, "found source line");
+    checkStyleEditorForSheetAndLine(sheet, line - 1, function() {
+      info("first check done");
 
-        checkStyleEditorForSheetAndLine(sheet, line - 1, function() {
-          let sheet = sheetForNode(nodes[1]);
-          ok(sheet, "sheet found");
-          let line = nodes[1].sourceLine;
-          ok(line, "found source line");
+      let target = TargetFactory.forTab(gBrowser.selectedTab);
+      let toolbox = gDevTools.getToolboxForTarget(target);
 
-          EventUtils.sendMouseEvent({ type: "click" }, nodes[1]);
+      let sheet = sheetForNode(nodes[1]);
+      ok(sheet, "sheet found");
+      let line = nodes[1].sourceLine;
+      ok(line, "found source line");
+
+      toolbox.once("webconsole-selected", function(aEvent) {
+        info(aEvent + " event fired");
+
+        toolbox.once("styleeditor-selected", function() {
+          info(aEvent + " event fired");
 
           checkStyleEditorForSheetAndLine(sheet, line - 1, function() {
-            window.StyleEditor.toggle();
+            info("second check done");
             finishTest();
           });
         });
-      }, styleEditorWin);
+
+        EventUtils.sendMouseEvent({ type: "click" }, nodes[1]);
+      });
+
+      toolbox.selectTool("webconsole");
     });
-  }
-};
+  }, win);
+}
 
 function checkStyleEditorForSheetAndLine(aStyleSheet, aLine, aCallback)
 {
-  let editor = null;
-
-  let performLineCheck = {
-    name: "source editor load",
+  let foundEditor = null;
+  waitForSuccess({
+    name: "style editor for stylesheet",
     validatorFn: function()
     {
-      return editor.sourceEditor;
-    },
-    successFn: function()
-    {
-      is(editor.sourceEditor.getCaretPosition().line, aLine,
-         "correct line is selected");
-      is(SEC.selectedStyleSheetIndex, editor.styleSheetIndex,
-         "correct stylesheet is selected in the editor");
-
-      executeSoon(aCallback);
-    },
-    failureFn: aCallback,
-  };
-
-  waitForSuccess({
-    name: "editor for stylesheet",
-    validatorFn: function()
-    {
-      for (let item of SEC.editors) {
-        if (item.styleSheet == aStyleSheet) {
-          editor = item;
+      for (let editor of SEC.editors) {
+        if (editor.styleSheet == aStyleSheet) {
+          foundEditor = editor;
           return true;
         }
       }
       return false;
     },
     successFn: function()
     {
-      waitForSuccess(performLineCheck);
+      performLineCheck(foundEditor, aLine, aCallback);
     },
     failureFn: finishTest,
   });
 }
+
+function performLineCheck(aEditor, aLine, aCallback)
+{
+  function checkForCorrectState()
+  {
+    is(aEditor.sourceEditor.getCaretPosition().line, aLine,
+       "correct line is selected");
+    is(SEC.selectedStyleSheetIndex, aEditor.styleSheetIndex,
+       "correct stylesheet is selected in the editor");
+
+    aCallback && executeSoon(aCallback);
+  }
+
+  waitForSuccess({
+    name: "source editor load",
+    validatorFn: function()
+    {
+      return aEditor.sourceEditor;
+    },
+    successFn: checkForCorrectState,
+    failureFn: finishTest,
+  });
+}
diff --git a/browser/devtools/webconsole/test/browser_webconsole_menustatus.js b/browser/devtools/webconsole/test/browser_webconsole_menustatus.js
deleted file mode 100644
--- a/browser/devtools/webconsole/test/browser_webconsole_menustatus.js
+++ /dev/null
@@ -1,33 +0,0 @@
-/* vim:set ts=2 sw=2 sts=2 et: */
-/*
- * Any copyright is dedicated to the Public Domain.
- * http://creativecommons.org/publicdomain/zero/1.0/
- */
-
-function test() {
-  var tab1 = gBrowser.addTab();
-  var tab2 = gBrowser.addTab();
-  gBrowser.selectedTab = tab2;
-
-  openConsole(tab2, function() {
-    let cmd = document.getElementById("Tools:WebConsole");
-    is(cmd.getAttribute("checked"), "true", "<command Tools:WebConsole> is checked.");
-
-    gBrowser.selectedTab = tab1;
-
-    is(cmd.getAttribute("checked"), "false", "<command Tools:WebConsole> is unchecked after tab switch.");
-
-    gBrowser.selectedTab = tab2;
-
-    is(cmd.getAttribute("checked"), "true", "<command Tools:WebConsole> is checked.");
-
-    closeConsole(tab2, function() {
-      is(cmd.getAttribute("checked"), "false", "<command Tools:WebConsole> is checked once closed.");
-
-      gBrowser.removeTab(tab1);
-      gBrowser.removeTab(tab2);
-
-      finish();
-    });
-  });
-}
diff --git a/browser/devtools/webconsole/test/browser_webconsole_position_ui.js b/browser/devtools/webconsole/test/browser_webconsole_position_ui.js
deleted file mode 100644
--- a/browser/devtools/webconsole/test/browser_webconsole_position_ui.js
+++ /dev/null
@@ -1,207 +0,0 @@
-/* vim:set ts=2 sw=2 sts=2 et: */
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-const TEST_URI = "data:text/html;charset=utf-8,<p>test for bug 577721";
-
-const POSITION_PREF = "devtools.webconsole.position";
-const TOP_PREF = "devtools.webconsole.top";
-const LEFT_PREF = "devtools.webconsole.left";
-const WIDTH_PREF = "devtools.webconsole.width";
-const HEIGHT_PREF = "devtools.hud.height";
-
-let hudRef, boxHeight, panelWidth;
-
-function test() {
-  addTab(TEST_URI);
-  browser.addEventListener("load", function onLoad() {
-    browser.removeEventListener("load", onLoad, true);
-    openConsole(null, consoleOpened);
-  }, true);
-  registerCleanupFunction(testEnd);
-}
-
-function testEnd() {
-  hudRef = null;
-  Services.prefs.clearUserPref(POSITION_PREF);
-  Services.prefs.clearUserPref(WIDTH_PREF);
-  Services.prefs.clearUserPref(HEIGHT_PREF);
-  Services.prefs.clearUserPref(TOP_PREF);
-  Services.prefs.clearUserPref(LEFT_PREF);
-}
-
-function waitForPosition(aPosition, aCallback) {
-  waitForSuccess({
-    name: "web console position changed to '" + aPosition + "'",
-    validatorFn: function()
-    {
-      return hudRef._currentUIPosition == aPosition;
-    },
-    successFn: executeSoon.bind(null, aCallback),
-    failureFn: finishTest,
-  });
-}
-
-function consoleOpened(aHudRef) {
-  hudRef = aHudRef;
-  testMenuitems();
-
-  let hudBox = hudRef.iframe;
-
-  is(hudBox.parentNode.childNodes[2].getAttribute("id"), hudRef.hudId,
-     "initial console position is correct");
-
-  is(hudRef.ui.positionMenuitems.below.getAttribute("checked"), "true",
-     "position menu checkbox is below");
-  is(Services.prefs.getCharPref(POSITION_PREF), "below", "pref is below");
-
-  executeSoon(function() {
-    hudRef.positionConsole("above");
-    waitForPosition("above", onPositionAbove);
-  });
-}
-
-function onPositionAbove() {
-  let hudBox = hudRef.iframe;
-
-  let id = hudBox.parentNode.childNodes[0].getAttribute("id");
-  is(id, hudRef.hudId, "above position is correct");
-
-  is(hudRef.ui.positionMenuitems.above.getAttribute("checked"), "true",
-     "position menu checkbox is above");
-  is(Services.prefs.getCharPref(POSITION_PREF), "above", "pref is above");
-
-  boxHeight = content.innerHeight * 0.5;
-  panelWidth = content.innerWidth * 0.5;
-
-  hudBox.style.height = boxHeight + "px";
-
-  boxHeight = hudBox.clientHeight;
-
-  Services.prefs.setIntPref(WIDTH_PREF, panelWidth);
-  Services.prefs.setIntPref(TOP_PREF, 50);
-  Services.prefs.setIntPref(LEFT_PREF, 51);
-
-  executeSoon(function() {
-    hudRef.positionConsole("window");
-    waitForPosition("window", onPositionWindow);
-  });
-}
-
-function onPositionWindow() {
-  let hudBox = hudRef.iframe;
-
-  let id = hudBox.parentNode.getAttribute("id");
-  is(id, "console_window_" + hudRef.hudId, "window position is correct");
-  is(Services.prefs.getCharPref(POSITION_PREF), "window", "pref is window");
-
-  let diffHeight = Math.abs(hudBox.clientHeight - boxHeight);
-  ok(diffHeight < 8, "hudBox height is correct");
-
-  let consolePanel = hudRef.consolePanel;
-
-  is(consolePanel.getAttribute("width"), panelWidth, "panel width is correct");
-  is(consolePanel.getAttribute("top"), 50, "panel top position is correct");
-  is(consolePanel.getAttribute("left"), 51, "panel left position is correct");
-
-  let panelHeight = parseInt(consolePanel.getAttribute("height"));
-  let boxWidth = hudBox.clientWidth;
-  boxHeight = hudBox.clientHeight;
-
-  hudRef.consolePanel.sizeTo(panelWidth - 15, panelHeight - 13);
-
-  let popupBoxObject = consolePanel.popupBoxObject;
-  let screenX = popupBoxObject.screenX;
-  let screenY = popupBoxObject.screenY;
-  consolePanel.moveTo(screenX - 11, screenY - 13);
-
-  isnot(hudBox.clientWidth, boxWidth, "hudBox width was updated");
-  isnot(hudBox.clientHeight, boxHeight, "hudBox height was updated");
-
-  isnot(popupBoxObject.screenX, screenX, "panel screenX was updated");
-  isnot(popupBoxObject.screenY, screenY, "panel screenY was updated");
-
-  panelWidth = consolePanel.clientWidth;
-  boxHeight = hudBox.clientHeight;
-
-  executeSoon(function() {
-    hudRef.positionConsole("below");
-    waitForPosition("below", onPositionBelow);
-  });
-}
-
-function onPositionBelow() {
-  let hudBox = hudRef.iframe;
-
-  let id = hudBox.parentNode.childNodes[2].getAttribute("id");
-  is(id, hudRef.hudId, "below position is correct after reopen");
-
-  let diffHeight = Math.abs(hudBox.clientHeight - boxHeight);
-  // dump("Diffheight: " + diffHeight + " clientHeight: " + hudBox.clientHeight + " boxHeight: " + boxHeight + "\n");
-  // XXX TODO bug 702707
-  ok(diffHeight < 8, "hudBox height is still correct");
-
-  is(Services.prefs.getCharPref(POSITION_PREF), "below", "pref is below");
-
-  // following three disabled due to bug 674562
-  // is(Services.prefs.getIntPref(WIDTH_PREF), panelWidth, "width pref updated - bug 674562");
-  // isnot(Services.prefs.getIntPref(TOP_PREF), 50, "top location pref updated - bug 674562");
-  // isnot(Services.prefs.getIntPref(LEFT_PREF), 51, "left location pref updated - bug 674562");
-
-  Services.obs.addObserver(onConsoleClose, "web-console-destroyed", false);
-
-  // Close the window console via the toolbar button
-  let btn = hudRef.ui.closeButton;
-  executeSoon(function() {
-    EventUtils.synthesizeMouse(btn, 2, 2, {}, hudRef.iframeWindow);
-  });
-}
-
-function onConsoleClose()
-{
-  Services.obs.removeObserver(onConsoleClose, "web-console-destroyed");
-
-  executeSoon(function() {
-    hudRef = null;
-    openConsole(null, onConsoleReopen);
-  });
-}
-
-function onConsoleReopen(aHudRef) {
-  let hudBox = aHudRef.iframe;
-
-  let id = hudBox.parentNode.childNodes[2].getAttribute("id");
-  is(id, aHudRef.hudId, "below position is correct after another reopen");
-
-  is(aHudRef.ui.positionMenuitems.below.getAttribute("checked"), "true",
-     "position menu checkbox is below");
-
-  executeSoon(finishTest);
-}
-
-function testMenuitems() {
-  let positionConsole = hudRef.positionConsole;
-  is(typeof positionConsole, "function", "positionConsole() is available");
-
-  let param = null;
-  hudRef.positionConsole = function(aPosition) {
-    param = aPosition;
-  };
-
-  // Make sure the menuitems call the correct method.
-
-  hudRef.ui.positionMenuitems.above.doCommand();
-
-  is(param, "above", "menuitem for above positioning calls positionConsole() correctly");
-
-  hudRef.ui.positionMenuitems.below.doCommand();
-
-  is(param, "below", "menuitem for below positioning calls positionConsole() correctly");
-
-  hudRef.ui.positionMenuitems.window.doCommand();
-
-  is(param, "window", "menuitem for window positioning calls positionConsole() correctly");
-
-  hudRef.positionConsole = positionConsole;
-}
-
diff --git a/browser/devtools/webconsole/test/browser_webconsole_window_zombie.js b/browser/devtools/webconsole/test/browser_webconsole_window_zombie.js
deleted file mode 100644
--- a/browser/devtools/webconsole/test/browser_webconsole_window_zombie.js
+++ /dev/null
@@ -1,42 +0,0 @@
-/* vim:set ts=2 sw=2 sts=2 et: */
-/* Any copyright is dedicated to the Public Domain.
-   http://creativecommons.org/publicdomain/zero/1.0/ */
-
-const TEST_URI = "data:text/html;charset=utf-8,<p>test for bug 577721";
-
-const POSITION_PREF = "devtools.webconsole.position";
-
-function test() {
-  addTab(TEST_URI);
-  browser.addEventListener("load", function onLoad() {
-    browser.removeEventListener("load", onLoad, true);
-    openConsole(null, consoleOpened);
-  }, true);
-  registerCleanupFunction(testEnd);
-}
-
-function testEnd() {
-  Services.prefs.clearUserPref(POSITION_PREF);
-}
-
-function consoleOpened(hudRef) {
-  let hudBox = hudRef.HUDBox;
-
-  // listen for the panel popupshown event.
-  document.addEventListener("popupshown", function popupShown() {
-    document.removeEventListener("popupshown", popupShown, false);
-
-    ok(hudRef.consolePanel, "console is in a panel");
-
-    Services.obs.addObserver(function onWebConsoleClose() {
-      Services.obs.removeObserver(onWebConsoleClose, "web-console-destroyed");
-      executeSoon(finishTest);
-    }, "web-console-destroyed", false);
-
-    // Close the window console via the menu item
-    let menu = document.getElementById("webConsole");
-    menu.click();
-  }, false);
-
-  hudRef.positionConsole("window");
-}
diff --git a/browser/devtools/webconsole/test/head.js b/browser/devtools/webconsole/test/head.js
--- a/browser/devtools/webconsole/test/head.js
+++ b/browser/devtools/webconsole/test/head.js
@@ -3,16 +3,21 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 let tempScope = {};
 Cu.import("resource:///modules/HUDService.jsm", tempScope);
 let HUDService = tempScope.HUDService;
 Cu.import("resource://gre/modules/devtools/WebConsoleUtils.jsm", tempScope);
 let WebConsoleUtils = tempScope.WebConsoleUtils;
+Cu.import("resource:///modules/devtools/gDevTools.jsm", tempScope);
+let gDevTools = tempScope.gDevTools;
+Cu.import("resource:///modules/devtools/Target.jsm", tempScope);
+let TargetFactory = tempScope.TargetFactory;
+
 const WEBCONSOLE_STRINGS_URI = "chrome://browser/locale/devtools/webconsole.properties";
 let WCU_l10n = new WebConsoleUtils.l10n(WEBCONSOLE_STRINGS_URI);
 
 function log(aMsg)
 {
   dump("*** WebConsoleTest: " + aMsg + "\n");
 }
 
@@ -27,18 +32,17 @@ function pprint(aObj)
     }
   }
 }
 
 let tab, browser, hudId, hud, hudBox, filterBox, outputNode, cs;
 
 function addTab(aURL)
 {
-  gBrowser.selectedTab = gBrowser.addTab();
-  content.location.assign(aURL);
+  gBrowser.selectedTab = gBrowser.addTab(aURL);
   tab = gBrowser.selectedTab;
   browser = gBrowser.getBrowserForTab(tab);
 }
 
 function afterAllTabsLoaded(callback, win) {
   win = win || window;
 
   let stillToLoad = 0;
@@ -128,62 +132,67 @@ function findLogEntry(aString)
  *
  * @param nsIDOMElement [aTab]
  *        Optional tab element for which you want open the Web Console. The
  *        default tab is taken from the global variable |tab|.
  * @param function [aCallback]
  *        Optional function to invoke after the Web Console completes
  *        initialization (web-console-created).
  */
-function openConsole(aTab, aCallback)
+function openConsole(aTab, aCallback = function() { })
 {
-  function onWebConsoleOpen(aSubject, aTopic)
+  function onWebConsoleOpen(aEvent, aPanel)
   {
-    if (aTopic == "web-console-created") {
-      Services.obs.removeObserver(onWebConsoleOpen, "web-console-created");
-      aSubject.QueryInterface(Ci.nsISupportsString);
-      let hud = HUDService.getHudReferenceById(aSubject.data);
-      executeSoon(aCallback.bind(null, hud));
-    }
+    executeSoon(aCallback.bind(null, aPanel.hud));
   }
 
-  if (aCallback) {
-    Services.obs.addObserver(onWebConsoleOpen, "web-console-created", false);
+  let target = TargetFactory.forTab(aTab || tab);
+  let toolbox = gDevTools.getToolboxForTarget(target);
+  if (toolbox) {
+    toolbox.once("webconsole-selected", onWebConsoleOpen);
+    toolbox.selectTool("webconsole");
   }
-
-  HUDService.activateHUDForContext(aTab || tab);
+  else {
+    let target = TargetFactory.forTab(aTab || tab);
+    toolbox = gDevTools.openToolboxForTab(target, "webconsole");
+    toolbox.once("webconsole-selected", onWebConsoleOpen);
+  }
 }
 
 /**
  * Close the Web Console for the given tab.
  *
  * @param nsIDOMElement [aTab]
  *        Optional tab element for which you want close the Web Console. The
  *        default tab is taken from the global variable |tab|.
  * @param function [aCallback]
  *        Optional function to invoke after the Web Console completes
  *        closing (web-console-destroyed).
  */
-function closeConsole(aTab, aCallback)
+function closeConsole(aTab, aCallback = function() { })
 {
-  function onWebConsoleClose(aSubject, aTopic)
-  {
-    if (aTopic == "web-console-destroyed") {
-      Services.obs.removeObserver(onWebConsoleClose, "web-console-destroyed");
-      aSubject.QueryInterface(Ci.nsISupportsString);
-      let hudId = aSubject.data;
-      executeSoon(aCallback.bind(null, hudId));
+  let target = TargetFactory.forTab(aTab || tab);
+  let toolbox = gDevTools.getToolboxForTarget(target);
+  if (toolbox) {
+    let panel = gDevTools.getPanelForTarget("webconsole", target);
+    if (panel) {
+      let hudId = panel.hud.hudId;
+      panel.once("destroyed", function() {
+        executeSoon(aCallback.bind(null, hudId));
+      });
     }
+    else {
+      toolbox.once("destroyed", aCallback.bind(null, null));
+    }
+
+    toolbox.destroy();
   }
-
-  if (aCallback) {
-    Services.obs.addObserver(onWebConsoleClose, "web-console-destroyed", false);
+  else {
+    aCallback();
   }
-
-  HUDService.deactivateHUDForContext(aTab || tab);
 }
 
 /**
  * Polls a given function waiting for opening context menu.
  *
  * @Param {nsIDOMElement} aContextMenu
  * @param object aOptions
  *        Options object with the following properties:
@@ -245,17 +254,18 @@ function finishTest()
 
   closeConsole(hud.tab, finish);
 
   hud = null;
 }
 
 function tearDown()
 {
-  HUDService.deactivateHUDForContext(gBrowser.selectedTab);
+  let target = TargetFactory.forTab(gBrowser.selectedTab);
+  gDevTools.closeToolbox(target);
   while (gBrowser.tabs.length > 1) {
     gBrowser.removeCurrentTab();
   }
   WCU_l10n = tab = browser = hudId = hud = filterBox = outputNode = cs = null;
 }
 
 registerCleanupFunction(tearDown);
 
@@ -302,8 +312,22 @@ function waitForSuccess(aOptions)
     }
     else {
       setTimeout(function() wait(validatorFn, successFn, failureFn), 100);
     }
   }
 
   wait(aOptions.validatorFn, aOptions.successFn, aOptions.failureFn);
 }
+
+function openInspector(aCallback, aTab = gBrowser.selectedTab)
+{
+  let target = TargetFactory.forTab(aTab);
+  let inspector = gDevTools.getPanelForTarget("inspector", target);
+  if (inspector && inspector.isReady) {
+    aCallback(inspector);
+  } else {
+    let toolbox = gDevTools.openToolboxForTab(target, "inspector");
+    toolbox.once("inspector-ready", function _onSelect(aEvent, aPanel) {
+      aCallback(aPanel);
+    });
+  }
+}
diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -172,40 +172,37 @@ const PREF_CONNECTION_TIMEOUT = "devtool
  * that displays console log data as well as provides an interactive terminal to
  * manipulate the current tab's document content.
  *
  * The WebConsoleFrame is responsible for the actual Web Console UI
  * implementation.
  *
  * @param object aWebConsoleOwner
  *        The WebConsole owner object.
- * @param string aPosition
- *        Tells the UI location for the Web Console.
  */
-function WebConsoleFrame(aWebConsoleOwner, aPosition)
+function WebConsoleFrame(aWebConsoleOwner)
 {
   this.owner = aWebConsoleOwner;
   this.hudId = this.owner.hudId;
 
   this._cssNodes = {};
   this._outputQueue = [];
   this._pruneCategoriesQueue = {};
   this._networkRequests = {};
 
   this._toggleFilter = this._toggleFilter.bind(this);
-  this._onPositionConsoleCommand = this._onPositionConsoleCommand.bind(this);
   this._flushMessageQueue = this._flushMessageQueue.bind(this);
   this._connectionTimeout = this._connectionTimeout.bind(this);
 
   this._outputTimer = Cc["@mozilla.org/timer;1"].createInstance(Ci.nsITimer);
   this._outputTimerInitialized = false;
 
   this._initDefaultFilterPrefs();
   this._commandController = new CommandController(this);
-  this.positionConsole(aPosition, window);
+  this.positionConsole(window);
 
   this.jsterm = new JSTerm(this);
   this.jsterm.inputNode.focus();
   this._initConnection();
 }
 
 WebConsoleFrame.prototype = {
   /**
@@ -368,20 +365,17 @@ WebConsoleFrame.prototype = {
   },
 
   /**
    * Connect to the server using the remote debugging protocol.
    * @private
    */
   _initConnection: function WCF__initConnection()
   {
-    this.proxy = new WebConsoleConnectionProxy(this, {
-      host: this.owner.remoteHost,
-      port: this.owner.remotePort,
-    });
+    this.proxy = new WebConsoleConnectionProxy(this, this.owner.target);
 
     let timeout = Services.prefs.getIntPref(PREF_CONNECTION_TIMEOUT);
     this._connectTimer = Cc["@mozilla.org/timer;1"].createInstance(Ci.nsITimer);
     this._connectTimer.initWithCallback(this._connectionTimeout,
                                         timeout, Ci.nsITimer.TYPE_ONE_SHOT);
 
     this.proxy.connect(function() {
       if (this._connectTimer) {
@@ -434,17 +428,16 @@ WebConsoleFrame.prototype = {
     let doc = this.document;
 
     this.filterBox = doc.querySelector(".hud-filter-box");
     this.outputNode = doc.querySelector(".hud-output-node");
     this.completeNode = doc.querySelector(".jsterm-complete-node");
     this.inputNode = doc.querySelector(".jsterm-input-node");
 
     this._setFilterTextBoxEvents();
-    this._initPositionUI();
     this._initFilterButtons();
 
     let fontSize = Services.prefs.getIntPref("devtools.webconsole.fontSize");
 
     if (fontSize != 0) {
       fontSize = Math.max(MIN_FONT_SIZE, fontSize);
 
       this.outputNode.style.fontSize = fontSize + "px";
@@ -478,20 +471,16 @@ WebConsoleFrame.prototype = {
 
     saveBodiesContextMenu.parentNode.addEventListener("popupshowing", function() {
       saveBodiesContextMenu.setAttribute("checked",
                                          this.saveRequestAndResponseBodies);
       saveBodiesContextMenu.disabled = !this.getFilterState("networkinfo") &&
                                        !this.getFilterState("network");
     }.bind(this));
 
-    this.closeButton = doc.getElementById("webconsole-close-button");
-    this.closeButton.addEventListener("command",
-                                      this.owner.onCloseButton.bind(this.owner));
-
     let clearButton = doc.getElementsByClassName("webconsole-clear-console-button")[0];
     clearButton.addEventListener("command", function WCF__onClearButton() {
       this.owner._onClearButton();
       this.jsterm.clearOutput(true);
     }.bind(this));
   },
 
   /**
@@ -540,41 +529,16 @@ WebConsoleFrame.prototype = {
                              Ci.nsITimer.TYPE_ONE_SHOT);
     }.bind(this);
 
     this.filterBox.addEventListener("command", onChange, false);
     this.filterBox.addEventListener("input", onChange, false);
   },
 
   /**
-   * Initialize the UI for re-positioning the console
-   * @private
-   */
-  _initPositionUI: function WCF__initPositionUI()
-  {
-    let doc = this.document;
-
-    let itemAbove = doc.querySelector("menuitem[consolePosition='above']");
-    itemAbove.addEventListener("command", this._onPositionConsoleCommand, false);
-
-    let itemBelow = doc.querySelector("menuitem[consolePosition='below']");
-    itemBelow.addEventListener("command", this._onPositionConsoleCommand, false);
-
-    let itemWindow = doc.querySelector("menuitem[consolePosition='window']");
-    itemWindow.addEventListener("command", this._onPositionConsoleCommand, false);
-
-    this.positionMenuitems = {
-      last: null,
-      above: itemAbove,
-      below: itemBelow,
-      window: itemWindow,
-    };
-  },
-
-  /**
    * Creates one of the filter buttons on the toolbar.
    *
    * @private
    * @param nsIDOMNode aParent
    *        The node to which the filter button should be appended.
    * @param object aDescriptor
    *        A descriptor that contains info about the button. Contains "name",
    *        "category", and "prefKey" properties, and optionally a "severities"
@@ -611,65 +575,41 @@ WebConsoleFrame.prototype = {
    */
   _onInitComplete: function WC__onInitComplete()
   {
     let id = WebConsoleUtils.supportsString(this.hudId);
     Services.obs.notifyObservers(id, "web-console-created", null);
   },
 
   /**
-   * Handle the "command" event for the buttons that allow the user to
-   * reposition the Web Console UI.
-   *
-   * @private
-   * @param nsIDOMEvent aEvent
-   */
-  _onPositionConsoleCommand: function WCF__onPositionConsoleCommand(aEvent)
-  {
-    let position = aEvent.target.getAttribute("consolePosition");
-    this.owner.positionConsole(position);
-  },
-
-  /**
    * Position the console in a different location.
    *
    * Note: you do not usually call this method. This is called by the WebConsole
    * instance that owns this iframe. You need to call this if you write
    * a different owner or you manually reposition the iframe.
    *
-   * @param string aPosition
-   *        The new Web Console iframe location: "above" (the page), "below" or
-   *        "window".
    * @param object aNewWindow
    *        Repositioning causes the iframe to reload - bug 254144. You need to
    *        provide the new window object so we can reinitialize the UI as
    *        needed.
    */
-  positionConsole: function WCF_positionConsole(aPosition, aNewWindow)
+  positionConsole: function WCF_positionConsole(aNewWindow)
   {
     this.window = aNewWindow;
     this.document = this.window.document;
     this.rootElement = this.document.documentElement;
 
     // register the controller to handle "select all" properly
     this.window.controllers.insertControllerAt(0, this._commandController);
 
     let oldOutputNode = this.outputNode;
 
     this._initUI();
     this.jsterm && this.jsterm._initUI();
 
-    this.closeButton.hidden = aPosition == "window";
-
-    this.positionMenuitems[aPosition].setAttribute("checked", true);
-    if (this.positionMenuitems.last) {
-      this.positionMenuitems.last.setAttribute("checked", false);
-    }
-    this.positionMenuitems.last = this.positionMenuitems[aPosition];
-
     if (oldOutputNode && oldOutputNode.childNodes.length) {
       let parentNode = this.outputNode.parentNode;
       parentNode.replaceChild(oldOutputNode, this.outputNode);
       this.outputNode = oldOutputNode;
     }
 
     this.jsterm && this.jsterm.inputNode.focus();
   },
@@ -1786,17 +1726,19 @@ WebConsoleFrame.prototype = {
    * @param string aURI
    *        New page location.
    * @param string aTitle
    *        New page title.
    */
   onLocationChange: function WCF_onLocationChange(aURI, aTitle)
   {
     this.contentLocation = aURI;
-    this.owner.onLocationChange(aURI, aTitle);
+    if (this.owner.onLocationChange) {
+      this.owner.onLocationChange(aURI, aTitle);
+    }
   },
 
   /**
    * Output a message node. This filters a node appropriately, then sends it to
    * the output, regrouping and pruning output as necessary.
    *
    * Note: this call is async - the given message node may not be displayed when
    * you call this method.
@@ -4023,24 +3965,23 @@ CommandController.prototype = {
 
 /**
  * The WebConsoleConnectionProxy handles the connection between the Web Console
  * and the application we connect to through the remote debug protocol.
  *
  * @constructor
  * @param object aWebConsole
  *        The Web Console instance that owns this connection proxy.
- * @param object aOptions
- *        Connection options: host and port.
+ * @param RemoteTarget aTarget
+ *        The target that the console will connect to.
  */
-function WebConsoleConnectionProxy(aWebConsole, aOptions = {})
+function WebConsoleConnectionProxy(aWebConsole, aTarget)
 {
   this.owner = aWebConsole;
-  this.remoteHost = aOptions.host;
-  this.remotePort = aOptions.port;
+  this.target = aTarget;
 
   this._onPageError = this._onPageError.bind(this);
   this._onConsoleAPICall = this._onConsoleAPICall.bind(this);
   this._onNetworkEvent = this._onNetworkEvent.bind(this);
   this._onNetworkEventUpdate = this._onNetworkEventUpdate.bind(this);
   this._onFileActivity = this._onFileActivity.bind(this);
   this._onLocationChange = this._onLocationChange.bind(this);
 }
@@ -4106,76 +4047,64 @@ WebConsoleConnectionProxy.prototype = {
   /**
    * Initialize a debugger client and connect it to the debugger server.
    *
    * @param function [aCallback]
    *        Optional function to invoke when connection is established.
    */
   connect: function WCCP_connect(aCallback)
   {
-    let transport;
-    if (this.remoteHost) {
-      transport = debuggerSocketConnect(this.remoteHost, this.remotePort);
+    // TODO: convert the non-remote path to use the target API as well.
+    let transport, client;
+    if (this.target.isRemote) {
+      client = this.client = this.target.client;
     }
     else {
       this.initServer();
       transport = DebuggerServer.connectPipe();
+
+      client = this.client = new DebuggerClient(transport);
     }
 
-    let client = this.client = new DebuggerClient(transport);
-
     client.addListener("pageError", this._onPageError);
     client.addListener("consoleAPICall", this._onConsoleAPICall);
     client.addListener("networkEvent", this._onNetworkEvent);
     client.addListener("networkEventUpdate", this._onNetworkEventUpdate);
     client.addListener("fileActivity", this._onFileActivity);
     client.addListener("locationChange", this._onLocationChange);
 
+    if (this.target.isRemote) {
+      this._consoleActor = this.target.form.consoleActor;
+      if (!this.target.chrome) {
+        this.owner.onLocationChange(this.target.url, this.target.name);
+      }
+
+      let listeners = ["PageError", "ConsoleAPI", "NetworkActivity",
+                       "FileActivity", "LocationChange"];
+      this.client.attachConsole(this._consoleActor, listeners,
+                                this._onAttachConsole.bind(this, aCallback));
+      return;
+    }
     client.connect(function(aType, aTraits) {
       client.listTabs(this._onListTabs.bind(this, aCallback));
     }.bind(this));
   },
 
   /**
    * The "listTabs" response handler.
    *
    * @private
    * @param function [aCallback]
    *        Optional function to invoke once the connection is established.
    * @param object aResponse
    *        The JSON response object received from the server.
    */
   _onListTabs: function WCCP__onListTabs(aCallback, aResponse)
   {
-    let selectedTab;
-
-    if (this.remoteHost) {
-      this.owner._connectTimer.cancel();
-
-      let tabs = [];
-      for (let tab of aResponse.tabs) {
-        tabs.push(tab.title);
-      }
-
-      tabs.push(l10n.getStr("listTabs.globalConsoleActor"));
-
-      let selected = {};
-      let result = Services.prompt.select(null,
-        l10n.getStr("remoteWebConsoleSelectTabTitle"),
-        l10n.getStr("remoteWebConsoleSelectTabMessage"),
-        tabs.length, tabs, selected);
-
-      if (result && selected.value < aResponse.tabs.length) {
-        selectedTab = aResponse.tabs[selected.value];
-      }
-    }
-    else {
-      selectedTab = aResponse.tabs[aResponse.selected];
-    }
-
+    let selectedTab = aResponse.tabs[aResponse.selected];
     if (selectedTab) {
       this._consoleActor = selectedTab.consoleActor;
       this.owner.onLocationChange(selectedTab.url, selectedTab.title);
     }
     else {
       this._consoleActor = aResponse.consoleActor;
     }
 
@@ -4398,17 +4327,19 @@ WebConsoleConnectionProxy.prototype = {
     this.client.removeListener("pageError", this._onPageError);
     this.client.removeListener("consoleAPICall", this._onConsoleAPICall);
     this.client.removeListener("networkEvent", this._onNetworkEvent);
     this.client.removeListener("networkEventUpdate", this._onNetworkEventUpdate);
     this.client.removeListener("fileActivity", this._onFileActivity);
     this.client.removeListener("locationChange", this._onLocationChange);
 
     try {
-      this.client.close(onDisconnect);
+      if (!this.target.isRemote) {
+        this.client.close(onDisconnect);
+      }
     }
     catch (ex) {
       Cu.reportError("Web Console disconnect exception: " + ex);
       Cu.reportError(ex.stack);
       onDisconnect();
     }
 
     this.client = null;
diff --git a/browser/devtools/webconsole/webconsole.xul b/browser/devtools/webconsole/webconsole.xul
--- a/browser/devtools/webconsole/webconsole.xul
+++ b/browser/devtools/webconsole/webconsole.xul
@@ -58,22 +58,16 @@
       <menuitem id="menu_copy"/>
       <menuitem id="menu_selectAll"/>
     </menupopup>
   </popupset>
 
   <vbox class="hud-outer-wrapper" flex="1">
     <vbox class="hud-console-wrapper" flex="1">
       <toolbar class="hud-console-filter-toolbar devtools-toolbar" mode="full">
-#ifdef XP_MACOSX
-        <toolbarbutton id="webconsole-close-button"
-                       class="devtools-closebutton"
-                       tooltiptext="&btnClose.tooltip;"/>
-#endif
-
         <toolbarbutton label="&btnPageNet.label;" type="menu-button"
                        category="net" class="devtools-toolbarbutton webconsole-filter-button"
                        tooltiptext="&btnPageNet.tooltip;">
           <menupopup>
             <menuitem label="&btnConsoleErrors;" type="checkbox" autocheck="false"
                       prefKey="network"/>
             <menuitem label="&btnConsoleLog;" type="checkbox" autocheck="false"
                       prefKey="networkinfo"/>
@@ -114,39 +108,20 @@
                       prefKey="info"/>
             <menuitem label="&btnConsoleLog;" type="checkbox" autocheck="false"
                       prefKey="log"/>
           </menupopup>
         </toolbarbutton>
 
         <spacer flex="1"/>
 
-        <toolbarbutton label="&btnPosition.label;" type="menu"
-                       class="devtools-toolbarbutton"
-                       tooltiptext="&btnPosition.tooltip;">
-          <menupopup>
-            <menuitem label="&positionMenu.above;" type="checkbox"
-                      autocheck="false" consolePosition="above"/>
-            <menuitem label="&positionMenu.below;" type="checkbox"
-                      autocheck="false" consolePosition="below"/>
-            <menuitem label="&positionMenu.window;" type="checkbox"
-                      autocheck="false" consolePosition="window"/>
-          </menupopup>
-        </toolbarbutton>
-
         <textbox class="compact hud-filter-box devtools-searchinput" type="search"
                  placeholder="&filterBox.placeholder;"/>
         <toolbarbutton class="webconsole-clear-console-button devtools-toolbarbutton"
                        label="&btnClear.label;" tooltiptext="&btnClear.tooltip;"/>
-
-#ifndef XP_MACOSX
-        <toolbarbutton id="webconsole-close-button"
-                       class="devtools-closebutton"
-                       tooltiptext="&btnClose.tooltip;"/>
-#endif
       </toolbar>
       <richlistbox class="hud-output-node" orient="vertical" flex="1"
                    seltype="multiple" context="output-contextmenu"
                    style="direction:ltr;"/>
       <hbox class="jsterm-input-container" style="direction:ltr">
         <stack class="jsterm-stack-node" flex="1">
           <textbox class="jsterm-complete-node" multiline="true" rows="1"
                    tabindex="-1"/>
diff --git a/browser/locales/en-US/chrome/browser/browser.dtd b/browser/locales/en-US/chrome/browser/browser.dtd
--- a/browser/locales/en-US/chrome/browser/browser.dtd
+++ b/browser/locales/en-US/chrome/browser/browser.dtd
@@ -193,29 +193,25 @@ These should match what Safari and other
 <!ENTITY downloadsUnix.commandkey     "y">
 <!ENTITY addons.label                 "Add-ons">
 <!ENTITY addons.accesskey             "A">
 <!ENTITY addons.commandkey            "A">
 
 <!ENTITY webDeveloperMenu.label       "Web Developer">
 <!ENTITY webDeveloperMenu.accesskey   "W">
 
+<!ENTITY devtoolsConnect.label        "Connect…">
+<!ENTITY devtoolsConnect.accesskey    "e">
+
 <!ENTITY errorConsoleCmd.label        "Error Console">
 <!ENTITY errorConsoleCmd.accesskey    "C">
 <!ENTITY errorConsoleCmd.commandkey   "j">
 
-<!ENTITY webConsoleCmd.label          "Web Console">
-<!ENTITY webConsoleCmd.accesskey      "W">
-<!ENTITY webConsoleCmd.commandkey     "k">
 <!ENTITY remoteWebConsoleCmd.label    "Remote Web Console">
 
-<!ENTITY inspectMenu.label            "Inspect">
-<!ENTITY inspectMenu.accesskey        "I">
-<!ENTITY inspectMenu.commandkey       "I">
-
 <!ENTITY inspectContextMenu.label     "Inspect Element">
 <!ENTITY inspectContextMenu.accesskey "Q">
 
 <!ENTITY responsiveDesignTool.label   "Responsive Design View">
 <!ENTITY responsiveDesignTool.accesskey "R">
 <!ENTITY responsiveDesignTool.commandkey "M">
 
 <!-- LOCALIZATION NOTE (scratchpad.label): This menu item label appears
@@ -228,50 +224,25 @@ These should match what Safari and other
   -  "Scratchpad" in your locale. You should feel free to find a close
   -  approximation to it or choose a word (or words) that means
   -  "simple discardable text editor". -->
 <!ENTITY scratchpad.label             "Scratchpad">
 <!ENTITY scratchpad.accesskey         "s">
 <!ENTITY scratchpad.keycode           "VK_F4">
 <!ENTITY scratchpad.keytext           "F4">
 
-<!ENTITY inspectCloseButton.tooltiptext "Close Inspector">
-<!ENTITY inspectSidebarCloseButton.tooltiptext "Close sidebar">
-
 <!ENTITY devToolbarCloseButton.tooltiptext "Close Developer Toolbar">
 <!ENTITY devToolbarMenu.label              "Developer Toolbar">
 <!ENTITY devToolbarMenu.accesskey          "v">
 <!ENTITY devToolbar.keycode                "VK_F2">
 <!ENTITY devToolbar.keytext                "F2">
+<!ENTITY devToolbarToolsButton.label       "Toggle Toolbox">
 <!ENTITY devToolbarOtherToolsButton.label  "More Tools">
 
-<!ENTITY inspectorHTMLCopyInner.label       "Copy Inner HTML">
-<!ENTITY inspectorHTMLCopyInner.accesskey   "I">
-
-<!ENTITY inspectorHTMLCopyOuter.label       "Copy Outer HTML">
-<!ENTITY inspectorHTMLCopyOuter.accesskey   "O">
-
-<!ENTITY inspectorHTMLDelete.label          "Delete Node">
-<!ENTITY inspectorHTMLDelete.accesskey      "D">
-
-<!-- LOCALIZATION NOTE (inspect3DViewButton.label): This button shows an
-  -  alternate view for the Inspector, creating a 3D visualization of the
-  -  webpage. -->
-<!ENTITY inspect3DViewButton.label     "3D View">
-<!ENTITY inspect3DViewButton.accesskey "W">
-
-<!ENTITY inspectStyleButton.label     "Style">
-<!ENTITY inspectStyleButton.accesskey "S">
-
-<!-- LOCALIZATION NOTE (styleeditor.label): This menu item label appears
-  -  in the Tools menu. -->
-<!ENTITY styleeditor.label            "Style Editor">
-<!ENTITY styleeditor.accesskey        "y">
-<!ENTITY styleeditor.keycode          "VK_F7">
-<!ENTITY styleeditor.keytext          "F7">
+<!ENTITY devToolbox.accesskey              "B">
 
 <!ENTITY getMoreDevtoolsCmd.label        "Get More Tools">
 <!ENTITY getMoreDevtoolsCmd.accesskey    "M">
 
 <!ENTITY fileMenu.label         "File"> 
 <!ENTITY fileMenu.accesskey       "F">
 <!ENTITY newNavigatorCmd.label        "New Window">
 <!ENTITY newNavigatorCmd.key        "N">
@@ -629,25 +600,16 @@ just addresses the organization to follo
 <!ENTITY syncSetup.accesskey          "Y">
 <!ENTITY syncSyncNowItem.label        "Sync Now">
 <!ENTITY syncSyncNowItem.accesskey    "S">
 <!ENTITY syncToolbarButton.label      "Sync">
 
 <!ENTITY addonBarCloseButton.tooltip  "Close Add-on Bar">
 <!ENTITY toggleAddonBarCmd.key        "/">
 
-<!-- LOCALIZATION NOTE (markupButton.arialabel): The markup button is the button
-located in front of the breadcrumbs display in the inspector toolbar. The button
-doesn't display any label, but exposes a label to screen-readers with "aria-label".
--->
-<!ENTITY markupButton.arialabel          "Markup">
-<!-- LOCALIZATION NOTE (markupButton.accesskey): The key bound to the Markup panel's
-toolbar button -->
-<!ENTITY markupButton.accesskey          "M">
-
 <!ENTITY socialToolbar.title        "Social Toolbar Button">
 <!ENTITY social.notLoggedIn.label   "Not logged in">
 
 <!ENTITY social.ok.label       "OK">
 <!ENTITY social.ok.accesskey   "O">
 
 <!ENTITY social.toggleSidebar.label "Show sidebar">
 <!ENTITY social.toggleSidebar.accesskey "s">
diff --git a/browser/locales/en-US/chrome/browser/devtools/connection-screen.dtd b/browser/locales/en-US/chrome/browser/devtools/connection-screen.dtd
new file mode 100644
--- /dev/null
+++ b/browser/locales/en-US/chrome/browser/devtools/connection-screen.dtd
@@ -0,0 +1,15 @@
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+
+<!-- LOCALIZATION NOTE : FILE This file contains the Remove Connection strings.
+  - The Remote Connection window can be start by running the command:
+  - `devtools connect`
+  - -->
+
+<!ENTITY title      "Connect">
+<!ENTITY host       "Host:">
+<!ENTITY port       "Port:">
+<!ENTITY connect    "Connect">
+<!ENTITY connecting "Connecting…">
+<!ENTITY availability "Available remote objects:">
diff --git a/browser/locales/en-US/chrome/browser/devtools/debugger.properties b/browser/locales/en-US/chrome/browser/devtools/debugger.properties
--- a/browser/locales/en-US/chrome/browser/devtools/debugger.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/debugger.properties
@@ -14,16 +14,24 @@
 # title and buttons on the notification shown when a user attempts to open a
 # debugger in a new tab while a different tab is already being debugged.
 confirmTabSwitch.message=Debugger is already open in another tab. Continuing will close the other instance.
 confirmTabSwitch.buttonSwitch=Switch to debugged tab
 confirmTabSwitch.buttonSwitch.accessKey=S
 confirmTabSwitch.buttonOpen=Open anyway
 confirmTabSwitch.buttonOpen.accessKey=O
 
+# LOCALIZATION NOTE (open.commandkey): The key used to open the debugger in
+# combination to e.g. ctrl + shift
+open.commandkey=S
+
+# LOCALIZATION NOTE (debuggerMenu.accesskey): The access key used to open the
+# debugger.
+debuggerMenu.accesskey=D
+
 # LOCALIZATION NOTE (chromeDebuggerWindowTitle): The title displayed for the
 # chrome (browser) debugger window.
 chromeDebuggerWindowTitle=Browser Debugger
 
 # LOCALIZATION NOTE (remoteDebuggerWindowTitle): The title displayed for the
 # remote debugger window.
 remoteDebuggerWindowTitle=Remote Debugger
 
@@ -168,15 +176,20 @@ scopeLabel=%S scope
 # the watch expressions scope.
 watchExpressionsScopeLabel=Watch expressions
 
 # LOCALIZATION NOTE (globalScopeLabel): The name of the global scope. This text
 # is added to scopeLabel and displayed in the variables pane as a header for
 # the global scope.
 globalScopeLabel=Global
 
+# LOCALIZATION NOTE (ToolboxDebugger.label):
+# This string is displayed in the title of the tab when the debugger is
+# displayed inside the developer tools window and in the Developer Tools Menu.
+ToolboxDebugger.label=Debugger
+
 # LOCALIZATION NOTE (variablesSeparatorLabel): The text that is displayed
 # in the variables list as a separator between the name and value.
 variablesSeparatorLabel=:
 
 # LOCALIZATION NOTE (watchExpressionsSeparatorLabel): The text that is displayed
 # in the watch expressions list as a separator between the code and evaluation.
 watchExpressionsSeparatorLabel=\ →
diff --git a/browser/locales/en-US/chrome/browser/devtools/inspector.dtd b/browser/locales/en-US/chrome/browser/devtools/inspector.dtd
new file mode 100644
--- /dev/null
+++ b/browser/locales/en-US/chrome/browser/devtools/inspector.dtd
@@ -0,0 +1,10 @@
+<!ENTITY inspectorHTMLCopyInner.label       "Copy Inner HTML">
+<!ENTITY inspectorHTMLCopyInner.accesskey   "I">
+
+<!ENTITY inspectorHTMLCopyOuter.label       "Copy Outer HTML">
+<!ENTITY inspectorHTMLCopyOuter.accesskey   "O">
+
+<!ENTITY inspectorHTMLDelete.label          "Delete Node">
+<!ENTITY inspectorHTMLDelete.accesskey      "D">
+
+<!ENTITY inspector.selectButton.tooltip     "Select element with mouse">
diff --git a/browser/locales/en-US/chrome/browser/devtools/inspector.properties b/browser/locales/en-US/chrome/browser/devtools/inspector.properties
--- a/browser/locales/en-US/chrome/browser/devtools/inspector.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/inspector.properties
@@ -9,43 +9,27 @@
 # English, or another language commonly spoken among web developers.
 # You want to make that choice consistent across the developer tools.
 # A good criteria is the language in which you'd find the best
 # documentation on web development on the web.
 
 # LOCALIZATION NOTE (confirmNavigationAway): Used in the Inspector tool, when
 # the user tries to navigate away from a web page, to confirm the change of
 # page.
-confirmNavigationAway.message=Leaving this page will close the Inspector and the changes you have made will be lost.
+confirmNavigationAway.message2=If you leave this page, the changes you have made will be lost.
 confirmNavigationAway.buttonLeave=Leave Page
 confirmNavigationAway.buttonLeaveAccesskey=L
 confirmNavigationAway.buttonStay=Stay on Page
 confirmNavigationAway.buttonStayAccesskey=S
 
 breadcrumbs.siblings=Siblings
-# LOCALIZATION NOTE (htmlPanel): Used in the Inspector tool's openInspectorUI
-# method when registering the HTML panel.
-
-# LOCALIZATION NOTE (inspectButtonWithShortcutKey.tooltip):
-# This button appears in the Inspector Toolbar. inspectButton is stateful,
-# if it's pressed users can select an element with the mouse.
-# %S is the keyboard shortcut.
-inspectButtonWithShortcutKey.tooltip=Select element with mouse (%S)
-
-# LOCALIZATION NOTE (inspectButton.tooltip):
-# Same as inspectButtonWithShortcutKey.tooltip but used when an add-on
-# overrides the shortcut key.
-inspectButton.tooltip=Select element with mouse
-
-# LOCALIZATION NOTE (markupButton.*):
-# This button is the button located at the beginning of the breadcrumbs
-# in the inspector toolbar. Its tooltip is built dynamically.
-# markupButton.tooltip is used on Mac.
-# On Windows and Linux, we use markupButton.tooltipWithAccesskey, where we append
-# the keyboard shortcut.
-markupButton.tooltip=Markup Panel
-markupButton.tooltipWithAccesskey=Markup Panel (%S)
-
 
 # LOCALIZATION NOTE (nodeMenu.tooltiptext)
 # This menu appears in the Infobar (on top of the highlighted node) once
 # the node is selected.
 nodeMenu.tooltiptext=Node operations
+
+
+# LOCALIZATION NOTE (inspector.*)
+# Used for the menuitem in the tool menu
+inspector.label=Inspector
+inspector.commandkey=I
+inspector.accesskey=I
diff --git a/browser/locales/en-US/chrome/browser/devtools/layoutview.dtd b/browser/locales/en-US/chrome/browser/devtools/layoutview.dtd
--- a/browser/locales/en-US/chrome/browser/devtools/layoutview.dtd
+++ b/browser/locales/en-US/chrome/browser/devtools/layoutview.dtd
@@ -11,12 +11,13 @@
   - You want to make that choice consistent across the developer tools.
   - A good criteria is the language in which you'd find the best
   - documentation on web development on the web. -->
 
 <!-- LOCALIZATION NOTE (*.tooltip): These tooltips are not regular tooltips.
   -  The text appears on the bottom right corner of the layout view when
   -  the corresponding box is hovered. -->
 
+<!ENTITY title                  "Box Model">
 <!ENTITY margins.tooltip        "margins">
 <!ENTITY borders.tooltip        "borders">
 <!ENTITY padding.tooltip        "padding">
 <!ENTITY content.tooltip        "content">
diff --git a/browser/locales/en-US/chrome/browser/devtools/scratchpad.dtd b/browser/locales/en-US/chrome/browser/devtools/scratchpad.dtd
--- a/browser/locales/en-US/chrome/browser/devtools/scratchpad.dtd
+++ b/browser/locales/en-US/chrome/browser/devtools/scratchpad.dtd
@@ -112,14 +112,8 @@
 <!ENTITY executeMenu.label            "Execute">
 <!ENTITY executeMenu.accesskey        "X">
 
 <!-- LOCALIZATION NOTE (errorConsoleCmd.commandkey): This command key launches
   -  the browser Error Console, the key should be identical to the property of
   -  the same name in browser.dtd.
   -->
 <!ENTITY errorConsoleCmd.commandkey   "j">
-
-<!-- LOCALIZATION NOTE (webConsoleCmd.commandkey): This command key launches
-  -  the browser WebConsole, the key should be identical to the property of
-  -  the same name in browser.dtd.
-  -->
-<!ENTITY webConsoleCmd.commandkey     "k">
diff --git a/browser/locales/en-US/chrome/browser/devtools/styleeditor.properties b/browser/locales/en-US/chrome/browser/devtools/styleeditor.properties
--- a/browser/locales/en-US/chrome/browser/devtools/styleeditor.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/styleeditor.properties
@@ -47,22 +47,34 @@ importStyleSheet.filter=CSS files
 
 # LOCALIZATION NOTE  (saveStyleSheet.title): This is the file picker title,
 # when you save a style sheet from the Style Editor.
 saveStyleSheet.title=Save style sheet
 
 # LOCALIZATION NOTE  (saveStyleSheet.title): This is the *.css filter title
 saveStyleSheet.filter=CSS files
 
+# LOCALIZATION NOTE  (open.commandkey): This the key to use in
+# conjunction with shift to open the style editor
+open.commandkey=VK_F7
+
+# LOCALIZATION NOTE (open.accesskey): The access key used to open the style
+# editor.
+open.accesskey=y
+
 # LOCALIZATION NOTE  (saveStyleSheet.commandkey): This the key to use in
 # conjunction with accel (Command on Mac or Ctrl on other platforms) to Save
 saveStyleSheet.commandkey=S
 
 # LOCALIZATION NOTE  (undo.commandkey): This the key to use in
 # conjunction with accel (Command on Mac or Ctrl on other platforms) to Undo a
 # change in the editor.
 undo.commandkey=Z
 
 # LOCALIZATION NOTE  (redo.commandkey): This the key to use in
 # conjunction with accel+shift (accel is Command on Mac or Ctrl on other
 # platforms) to Redo a change in the editor.
 redo.commandkey=Z
 
+# LOCALIZATION NOTE (ToolboxStyleEditor.label):
+# This string is displayed in the title of the tab when the debugger is
+# displayed inside the developer tools window and in the Developer Tools Menu.
+ToolboxStyleEditor.label=Style Editor
diff --git a/browser/locales/en-US/chrome/browser/devtools/styleinspector.dtd b/browser/locales/en-US/chrome/browser/devtools/styleinspector.dtd
--- a/browser/locales/en-US/chrome/browser/devtools/styleinspector.dtd
+++ b/browser/locales/en-US/chrome/browser/devtools/styleinspector.dtd
@@ -36,8 +36,12 @@
   -  style property the panel shows the rules which hold that specific property.
   -  For every rule, the rule status is also displayed: a rule can be the best
   -  match, a match, a parent match, or a rule did not match the element the
   -  user has highlighted. -->
 <!ENTITY bestMatch             "Best Match">
 <!ENTITY matched               "Matched">
 <!ENTITY parentMatch           "Parent Match">
 <!ENTITY unmatched             "Unmatched">
+
+<!-- FIXME: notes -->
+<!ENTITY computedViewTitle     "Computed">
+<!ENTITY ruleViewTitle         "Rules">
diff --git a/browser/locales/en-US/chrome/browser/devtools/styleinspector.properties b/browser/locales/en-US/chrome/browser/devtools/styleinspector.properties
--- a/browser/locales/en-US/chrome/browser/devtools/styleinspector.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/styleinspector.properties
@@ -31,23 +31,16 @@ rule.sourceInline=inline
 rule.sourceElement=element
 
 # LOCALIZATION NOTE (rule.inheritedFrom): Shown for CSS rules
 # that were inherited from a parent node. Will be passed a node
 # identifier of the parent node.
 # e.g "Inherited from body#bodyID"
 rule.inheritedFrom=Inherited from %S
 
-# LOCALIZATION NOTE (style.highlighter.button): These strings are used inside
-# sidebar of the Highlighter for the style inspector button.
-# "Computed" refers to the Computed Style of the element.
-style.highlighter.button.label2=Computed
-style.highlighter.accesskey2=C
-style.highlighter.button.tooltip2=Inspect element computed styles
-
 # LOCALIZATION NOTE (helpLinkTitle): For each style property
 # the user can hover it and get a help link button which allows one to
 # quickly jump to the documentation from the Mozilla Developer Network site.
 # This is the link title shown in the hover tooltip.
 helpLinkTitle=Read the documentation for this property
 
 # LOCALIZATION NOTE (rule.warning.title): When an invalid property value is
 # entered into the rule view a warning icon is displayed. This text is used for
@@ -121,17 +114,11 @@ rule.contextmenu.copyproperty.accesskey=
 # LOCALIZATION NOTE (rule.contextmenu.copypropertyvalue): The rule view's
 # context menu copy property entry allows a CSS property value to be copied.
 rule.contextmenu.copypropertyvalue=Copy property value
 
 # LOCALIZATION NOTE (rule.contextmenu.copypropertyvalue.accesskey): The rule
 # view's context menu copy property value access key.
 rule.contextmenu.copypropertyvalue.accesskey=U
 
-# LOCALIZATION NOTE (ruleView.*): Button label, accesskey and tooltip text
-# associated with the Highlighter's CSS Rule View in the Style Sidebar.
-ruleView.label=Rules
-ruleView.accesskey=R
-ruleView.tooltiptext=View and Edit CSS
-
 # LOCALIZATION NOTE (ruleView.empty): Text displayed when the highlighter is
 # first opened and there's no node selected in the rule view.
 rule.empty=No element selected.
diff --git a/browser/locales/en-US/chrome/browser/devtools/toolbox.dtd b/browser/locales/en-US/chrome/browser/devtools/toolbox.dtd
new file mode 100644
--- /dev/null
+++ b/browser/locales/en-US/chrome/browser/devtools/toolbox.dtd
@@ -0,0 +1,7 @@
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+
+<!ENTITY window.title  "Developer Tools">
+
+<!ENTITY closeCmd.key  "W">
diff --git a/browser/locales/en-US/chrome/browser/devtools/webConsole.dtd b/browser/locales/en-US/chrome/browser/devtools/webConsole.dtd
--- a/browser/locales/en-US/chrome/browser/devtools/webConsole.dtd
+++ b/browser/locales/en-US/chrome/browser/devtools/webConsole.dtd
@@ -55,40 +55,19 @@
   -  console.error(). -->
 <!ENTITY btnPageLogging.label   "Logging">
 <!ENTITY btnPageLogging.tooltip "Log messages sent to the window.console object">
 <!ENTITY btnConsoleErrors       "Errors">
 <!ENTITY btnConsoleInfo         "Info">
 <!ENTITY btnConsoleWarnings     "Warnings">
 <!ENTITY btnConsoleLog          "Log">
 
-<!-- LOCALIZATION NOTE (btnPosition.label): The label shown for the menu which
-  -  allows the user to toggle between the Web Console positioning types. -->
-<!ENTITY btnPosition.label     "Position">
-
-<!-- LOCALIZATION NOTE (btnPosition.tooltip): The tooltip shown when the user
-  -  hovers the Position button in the Web Console toolbar. -->
-<!ENTITY btnPosition.tooltip   "Position the Web Console above or below the document">
-
-<!-- LOCALIZATION NOTE (positionMenu.above): When this option is selected the
-  -  Web Console interface is displayed above the web page. -->
-<!ENTITY positionMenu.above    "Above">
-
-<!-- LOCALIZATION NOTE (positionMenu.below): When this option is selected the
-  -  Web Console interface is displayed below the web page. -->
-<!ENTITY positionMenu.below    "Below">
-
-<!-- LOCALIZATION NOTE (positionMenu.window): When this option is selected the
-  -  Web Console interface is displayed in a floating panel. -->
-<!ENTITY positionMenu.window   "Window">
-
 <!ENTITY filterBox.placeholder "Filter">
 <!ENTITY btnClear.label        "Clear">
 <!ENTITY btnClear.tooltip      "Clear the Web Console output">
-<!ENTITY btnClose.tooltip      "Close the Web Console">
 
 <!ENTITY fullZoomEnlargeCmd.commandkey  "+">
 <!ENTITY fullZoomEnlargeCmd.commandkey2 "="> <!-- + is above this key on many keyboards -->
 <!ENTITY fullZoomEnlargeCmd.commandkey3 "">
 
 <!ENTITY fullZoomReduceCmd.commandkey   "-">
 <!ENTITY fullZoomReduceCmd.commandkey2  "">
 
diff --git a/browser/locales/en-US/chrome/browser/devtools/webconsole.properties b/browser/locales/en-US/chrome/browser/devtools/webconsole.properties
--- a/browser/locales/en-US/chrome/browser/devtools/webconsole.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/webconsole.properties
@@ -27,16 +27,18 @@ btnGlobal=Global Messages
 tipGlobal=Toggle Global Message logging
 localConsole=Local Console
 clearConsoleCmd.label=Clear Console
 clearConsoleCmd.accesskey=e
 close.button=Close
 close.accesskey=C
 update.button=Update
 update.accesskey=U
+cmd.commandkey=k
+webConsoleCmd.accesskey=W
 # LOCALIZATION NOTE FOR `jsPropertyTitle` AND `jsPropertyInspectTitle`:
 #
 # The "PropertyPanel" is used to display a JS object to the user.
 # If it is clear which object is being inspected (e.g., window, document object)
 # the title of the panel is based on the `jsPropertyInspectTitle` string.
 # If it isn't clear which object is being inspected, the `jsPropertyTitle` string
 # gets used. This can be the case when the user logs an object to the WebConsole
 # output using the console.log(aObjectToInspect) method.
@@ -161,16 +163,22 @@ remoteWebConsoleSelectTabTitle=Tab list 
 # LOCALIZATION NOTE (remoteWebConsoleSelectTabMessage): The message displayed on the
 # Web Console prompt asking the user to pick a tab to attach to.
 remoteWebConsoleSelectTabMessage=Select one of the tabs you want to attach to, or select the global console.
 
 # LOCALIZATION NOTE (listTabs.globalConsoleActor): The string displayed for the
 # global console in the tabs selection.
 listTabs.globalConsoleActor=*Global Console*
 
+# LOCALIZATION NOTE (ToolboxWebconsole.label):
+# This string is displayed in the title of the tab when the web console is
+# displayed inside the developer tools window it is probably the same string
+# as webConsoleWindowTitleAndURL before the '-'
+ToolboxWebconsole.label=Web Console
+
 # LOCALIZATION NOTE (longStringEllipsis): The string displayed after a long
 # string. This string is clickable such that the rest of the string is retrieved
 # from the server.
 longStringEllipsis=[…]
 
 # LOCALIZATION NOTE (executeEmptyInput): This is displayed when the user tries
 # to execute code, but the input is empty.
 executeEmptyInput=No value to execute.
diff --git a/browser/locales/jar.mn b/browser/locales/jar.mn
--- a/browser/locales/jar.mn
+++ b/browser/locales/jar.mn
@@ -32,16 +32,19 @@
     locale/browser/devtools/styleeditor.dtd           (%chrome/browser/devtools/styleeditor.dtd)
     locale/browser/devtools/styleinspector.properties (%chrome/browser/devtools/styleinspector.properties)
     locale/browser/devtools/styleinspector.dtd        (%chrome/browser/devtools/styleinspector.dtd)
     locale/browser/devtools/webConsole.dtd            (%chrome/browser/devtools/webConsole.dtd)
     locale/browser/devtools/sourceeditor.properties   (%chrome/browser/devtools/sourceeditor.properties)
     locale/browser/devtools/sourceeditor.dtd          (%chrome/browser/devtools/sourceeditor.dtd)
     locale/browser/devtools/layoutview.dtd            (%chrome/browser/devtools/layoutview.dtd)
     locale/browser/devtools/responsiveUI.properties   (%chrome/browser/devtools/responsiveUI.properties)
+    locale/browser/devtools/toolbox.dtd            (%chrome/browser/devtools/toolbox.dtd)
+    locale/browser/devtools/inspector.dtd          (%chrome/browser/devtools/inspector.dtd)
+    locale/browser/devtools/connection-screen.dtd  (%chrome/browser/devtools/connection-screen.dtd)
     locale/browser/newTab.dtd                      (%chrome/browser/newTab.dtd)
     locale/browser/newTab.properties               (%chrome/browser/newTab.properties)
     locale/browser/openLocation.dtd                (%chrome/browser/openLocation.dtd)
     locale/browser/openLocation.properties         (%chrome/browser/openLocation.properties)
     locale/browser/pageInfo.dtd                    (%chrome/browser/pageInfo.dtd)
     locale/browser/pageInfo.properties             (%chrome/browser/pageInfo.properties)
     locale/browser/quitDialog.properties           (%chrome/browser/quitDialog.properties)
     locale/browser/safeMode.dtd                    (%chrome/browser/safeMode.dtd)
diff --git a/browser/makefiles.sh b/browser/makefiles.sh
--- a/browser/makefiles.sh
+++ b/browser/makefiles.sh
@@ -34,17 +34,17 @@ browser/components/sessionstore/src/Make
 browser/components/sidebar/Makefile
 browser/components/shell/Makefile
 browser/components/shell/public/Makefile
 browser/components/shell/src/Makefile
 browser/components/tabview/Makefile
 browser/components/thumbnails/Makefile
 browser/devtools/Makefile
 browser/devtools/debugger/Makefile
-browser/devtools/highlighter/Makefile
+browser/devtools/inspector/Makefile
 browser/devtools/scratchpad/Makefile
 browser/devtools/shared/Makefile
 browser/devtools/sourceeditor/Makefile
 browser/devtools/styleeditor/Makefile
 browser/devtools/styleinspector/Makefile
 browser/devtools/tilt/Makefile
 browser/devtools/webconsole/Makefile
 browser/extensions/Makefile
@@ -114,17 +114,17 @@ if [ "$ENABLE_TESTS" ]; then
     browser/components/places/tests/chrome/Makefile
     browser/components/places/tests/browser/Makefile
     browser/components/privatebrowsing/test/Makefile
     browser/components/privatebrowsing/test/browser/Makefile
     browser/components/tabview/test/Makefile
     browser/components/test/Makefile
     browser/components/thumbnails/test/Makefile
     browser/devtools/debugger/test/Makefile
-    browser/devtools/highlighter/test/Makefile
+    browser/devtools/inspector/test/Makefile
     browser/devtools/scratchpad/test/Makefile
     browser/devtools/shared/test/Makefile
     browser/devtools/sourceeditor/test/Makefile
     browser/devtools/styleeditor/test/Makefile
     browser/devtools/styleinspector/test/Makefile
     browser/devtools/tilt/test/Makefile
     browser/devtools/webconsole/test/Makefile
     browser/fuel/test/Makefile
diff --git a/browser/themes/gnomestripe/browser.css b/browser/themes/gnomestripe/browser.css
--- a/browser/themes/gnomestripe/browser.css
+++ b/browser/themes/gnomestripe/browser.css
@@ -1965,125 +1965,100 @@ toolbar[mode="text"] toolbarbutton.chevr
 .statuspanel-label:-moz-locale-dir(ltr)[mirror] {
   border-left-style: solid;
   border-top-left-radius: .3em;
   margin-left: 1em;
 }
 
 /* Highlighter */
 
-#highlighter-outline {
+.highlighter-outline {
   box-shadow: 0 0 0 1px black;
   outline: 1px dashed white;
   outline-offset: -1px;
 }
 
-#highlighter-outline[locked]  {
+.highlighter-outline[locked]  {
   box-shadow: 0 0 0 1px rgba(0,0,0,0.3);
   outline-color: rgba(255,255,255,0.7);
 }
 
-/* Highlighter toolbar */
-
-#inspector-inspect-toolbutton {
-  list-style-image: url("chrome://browser/skin/devtools/inspect-button.png");
-  -moz-image-region: rect(0px 16px 16px 0px);
-}
-
-#inspector-inspect-toolbutton[checked=true] {
-  -moz-image-region: rect(0px 32px 16px 16px);
-}
-
-#inspector-toolbar,
+/* Developer toolbar */
+
 #developer-toolbar {
   border-top: 1px solid hsla(210, 8%, 5%, .65);
 }
 
-#devtools-side-splitter {
-  -moz-appearance: none;
-  border: 0;
-  -moz-border-start: 1px solid #242b33;
-  min-width: 0;
-  width: 3px;
-  background-color: transparent;
-  -moz-margin-end: -3px;
-  position: relative;
-}
-
-#devtools-sidebar-box {
-  background-color: -moz-Field;
-}
-
 /* Highlighter - Node Infobar */
 
-#highlighter-nodeinfobar {
+.highlighter-nodeinfobar {
   color: hsl(200, 100%, 65%);
   border: 1px solid hsla(210, 19%, 63%, .5);
   border-radius: 3px;
   background: -moz-linear-gradient(hsl(209, 18%, 30%), hsl(210, 24%, 16%)) no-repeat padding-box;
 }
 
 /* Highlighter - Node Infobar - text */
 
-#highlighter-nodeinfobar-text {
+.highlighter-nodeinfobar-text {
   /* 100% - size of the buttons and margins */
   max-width: calc(100% - 2 * (26px + 6px));
   padding-bottom: 1px;
 }
 
-html|*#highlighter-nodeinfobar-tagname {
+html|*.highlighter-nodeinfobar-tagname {
   color: white;
 }
 
-html|*#highlighter-nodeinfobar-id {
+html|*.highlighter-nodeinfobar-id {
   color: hsl(90, 79%, 52%);
 }
 
-html|*#highlighter-nodeinfobar-pseudo-classes {
+html|*.highlighter-nodeinfobar-pseudo-classes {
   color: hsl(20, 100%, 70%);
 }
 
 /* Highlighter - Node Infobar - buttons */
 
 .highlighter-nodeinfobar-button {
   -moz-appearance: none;
   border: 0 solid hsla(210,8%,5%,.45);
   padding: 0;
   width: 26px;
   min-height: 26px;
 }
 
-#highlighter-nodeinfobar-inspectbutton {
+.highlighter-nodeinfobar-inspectbutton {
   -moz-border-end-width: 1px;
   box-shadow: 1px 0 0 hsla(210,16%,76%,.15), -1px 0 0 hsla(210,16%,76%,.15) inset;
   -moz-margin-end: 6px;
   list-style-image: url("chrome://browser/skin/devtools/inspect-button.png");
   -moz-image-region: rect(0px 16px 16px 0px);
 }
 
-#highlighter-nodeinfobar-inspectbutton:-moz-locale-dir(rtl) {
+.highlighter-nodeinfobar-inspectbutton:-moz-locale-dir(rtl) {
   box-shadow: -1px 0 0 hsla(210,16%,76%,.15), 1px 0 0 hsla(210,16%,76%,.15) inset;
 }
 
-#highlighter-nodeinfobar-inspectbutton:active:hover,
-#highlighter-nodeinfobar-container:not([locked]) >  #highlighter-nodeinfobar >  #highlighter-nodeinfobar-inspectbutton {
+.highlighter-nodeinfobar-inspectbutton:active:hover,
+.highlighter-nodeinfobar-container:not([locked]) >  .highlighter-nodeinfobar >  .highlighter-nodeinfobar-inspectbutton {
   -moz-image-region: rect(0px 32px 16px 16px);
 }
 
-#highlighter-nodeinfobar-menu {
+.highlighter-nodeinfobar-menu {
   -moz-border-start-width: 1px;
   box-shadow: -1px 0 0 hsla(210,16%,76%,.15), 1px 0 0 hsla(210,16%,76%,.15) inset;
   -moz-margin-start: 6px;
 }
 
-#highlighter-nodeinfobar-menu:-moz-locale-dir(rtl) {
+.highlighter-nodeinfobar-menu:-moz-locale-dir(rtl) {
   box-shadow: 1px 0 0 hsla(210,16%,76%,.15), -1px 0 0 hsla(210,16%,76%,.15) inset;
 }
 
-#highlighter-nodeinfobar-menu > .toolbarbutton-menu-dropmarker {
+.highlighter-nodeinfobar-menu > .toolbarbutton-menu-dropmarker {
   -moz-appearance: none !important;
   list-style-image: url("chrome://browser/skin/devtools/dropmarker.png");
   -moz-box-align: center;
   -moz-margin-start: -1px;
 }
 
 /* Highlighter - Node Infobar - box & arrow */
 
@@ -2092,38 +2067,38 @@ html|*#highlighter-nodeinfobar-pseudo-cl
   height: 14px;
   -moz-margin-start: calc(50% - 7px);
   transform: rotate(-45deg);
   border: 1px solid transparent;
   background-clip: padding-box;
   background-repeat: no-repeat;
 }
 
-#highlighter-nodeinfobar-arrow-top {
+.highlighter-nodeinfobar-arrow-top {
   margin-bottom: -8px;
   margin-top: 8px;
   border-right-color: hsla(210, 19%, 63%, .5);
   border-top-color: hsla(210, 19%, 63%, .5);
   background-image: -moz-linear-gradient(bottom left, transparent 50%, hsl(209, 18%, 30%) 50%);
 }
 
-#highlighter-nodeinfobar-arrow-bottom {
+.highlighter-nodeinfobar-arrow-bottom {
   margin-top: -8px;
   margin-bottom: 8px;
   border-left-color: hsla(210, 19%, 63%, .5);
   border-bottom-color: hsla(210, 19%, 63%, .5);
   background-image: -moz-linear-gradient(top right, transparent 50%, hsl(210, 24%, 16%) 50%);
 }
 
-#highlighter-nodeinfobar-container[position="top"] > #highlighter-nodeinfobar,
-#highlighter-nodeinfobar-container[position="overlap"] > #highlighter-nodeinfobar {
+.highlighter-nodeinfobar-container[position="top"] > .highlighter-nodeinfobar,
+.highlighter-nodeinfobar-container[position="overlap"] > .highlighter-nodeinfobar {
   box-shadow: 0 1px 0 hsla(0, 0%, 100%, .1) inset;
 }
 
-#highlighter-nodeinfobar-container[hide-arrow] > #highlighter-nodeinfobar {
+.highlighter-nodeinfobar-container[hide-arrow] > .highlighter-nodeinfobar {
   margin: 7px 0;
 }
 
 #full-screen-warning-message {
   background-color: hsl(0,0%,15%);
   color: white;
   border-radius: 8px;
   margin-top: 30px;
@@ -2143,269 +2118,16 @@ html|*#highlighter-nodeinfobar-pseudo-cl
   font-size: 300%;
 }
 
 .full-screen-approval-button,
 #full-screen-remember-decision {
   font-size: 120%;
 }
 
-/* Highlighter toolbar - breadcrumbs */
-
-#inspector-breadcrumbs {
-  -moz-margin-end: 3px;
-  /* A fake 1px-shadow is included in the border-images of the
-     inspector-breadcrumbs-buttons, to match toolbar-buttons style.
-     This negative margin compensate the extra row of pixels created
-     by the shadow.*/
-  margin-bottom: -1px;
-}
-
-#inspector-breadcrumbs > .scrollbutton-up,
-#inspector-breadcrumbs > .scrollbutton-down {
-  -moz-appearance: none;
-  border: 1px solid hsla(210,8%,5%,.45);
-  background: -moz-linear-gradient(hsla(212,7%,57%,.35), hsla(212,7%,57%,.1)) padding-box;
-  box-shadow: 0 1px 0 hsla(210,16%,76%,.15) inset, 0 0 0 1px hsla(210,16%,76%,.15) inset, 0 1px 0 hsla(210,16%,76%,.15);
-  margin: 0 0 1px;
-}
-
-#inspector-breadcrumbs > .scrollbutton-up {
-  -moz-border-start-width: 0;
-}
-
-#inspector-breadcrumbs > .scrollbutton-up:not([disabled]):active:hover,
-#inspector-breadcrumbs > .scrollbutton-down:not([disabled]):active:hover {
-  border-color: hsla(210,8%,5%,.6);
-  background: -moz-linear-gradient(hsla(220,6%,10%,.3), hsla(212,7%,57%,.15) 65%, hsla(212,7%,57%,.3));
-  box-shadow: 0 0 3px hsla(210,8%,5%,.25) inset, 0 1px 3px hsla(210,8%,5%,.25) inset, 0 1px 0 hsla(210,16%,76%,.15);
-}
-
-#inspector-breadcrumbs > .scrollbutton-up:not([disabled]):active:hover > .toolbarbutton-icon,
-#inspector-breadcrumbs > .scrollbutton-down:not([disabled]):active:hover > .toolbarbutton-icon {
-  -moz-image-region: rect(0px 14px 16px 7px);
-}
-
-#inspector-breadcrumbs > .scrollbutton-up > .toolbarbutton-icon,
-#inspector-breadcrumbs > .scrollbutton-down > .toolbarbutton-icon {
-  -moz-appearance: none;
-  list-style-image: url("chrome://browser/skin/devtools/breadcrumbs-scrollbutton.png");
-  -moz-image-region: rect(0px 7px 16px 0px);
-  margin: 0 5px;
-}
-
-#inspector-breadcrumbs > .scrollbutton-up[disabled] > .toolbarbutton-icon,
-#inspector-breadcrumbs > .scrollbutton-down[disabled] > .toolbarbutton-icon {
-  opacity: 0.5;
-}
-
-#inspector-breadcrumbs > .scrollbutton-up > .toolbarbutton-icon:-moz-locale-dir(rtl),
-#inspector-breadcrumbs > .scrollbutton-down > .toolbarbutton-icon:-moz-locale-dir(ltr) {
-  transform: scaleX(-1);
-}
-
-.inspector-breadcrumbs-button {
-  -moz-appearance: none;
-  background-color: transparent;
-  border-style: solid;
-  border-width: 1px 13px 2px 13px;
-  color: hsl(210,30%,85%);
-  width: 85px; /* Can't use max-width. See bug 723132 */
-  /* The content of the button can be larger than the button */
-  overflow: hidden;
-  min-height: 25px;
-
-  margin: 0 -11px 0 0;
-  padding: 0 9px;
-}
-
-.inspector-breadcrumbs-button:-moz-focusring > label {
-  border-bottom: 1px dotted hsla(210,30%,85%,0.4);
-}
-
-.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-tag {
-  color: hsl(208,100%,60%);
-}
-
-.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-id {
-  color: hsl(205,100%,70%);
-}
-
-.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-pseudo-classes {
-  color: hsl(20, 100%, 70%);
-}
-
-.inspector-breadcrumbs-id,
-.inspector-breadcrumbs-classes {
-  color: #8d99a6;
-}
-
-.inspector-breadcrumbs-pseudo-classes {
-  color: hsl(20, 100%, 85%);
-}
-
-/* Highlighter toolbar - breadcrumbs - LTR */
-
-.inspector-breadcrumbs-button:-moz-locale-dir(ltr):first-of-type {
-  margin-left: 0;
-  border-left-width: 0;
-}
-
-.inspector-breadcrumbs-button {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:not([checked]),
-.inspector-breadcrumbs-button:not([checked]):hover:active {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[checked] {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-selected.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[checked][siblings-menu-open],
-.inspector-breadcrumbs-button[checked]:hover:active {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-selected-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:first-of-type:not([checked]),
-.inspector-breadcrumbs-button:first-of-type:not([checked]):hover:active {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type[checked] {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-selected.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:first-of-type[checked],
-.inspector-breadcrumbs-button:first-of-type[checked]:hover:active {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-selected-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end.png") 1 13 2 13 fill stretch;
-}
-
-#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:-moz-locale-dir(ltr):last-of-type {
-  border-right-width: 0;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:last-of-type:not([checked]),
-.inspector-breadcrumbs-button:last-of-type:not([checked]):hover:active {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type[checked] {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-selected.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:last-of-type[checked],
-.inspector-breadcrumbs-button:last-of-type[checked]:hover:active {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-selected-pressed.png") 1 13 2 13 fill stretch;
-}
-
-/* Highlighter toolbar - breadcrumbs - RTL */
-
-.inspector-breadcrumbs-button:-moz-locale-dir(rtl):first-of-type {
-  margin-right: 0;
-  border-right-width: 0;
-}
-
-.inspector-breadcrumbs-button:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:not([checked]):-moz-locale-dir(rtl),
-.inspector-breadcrumbs-button:not([checked]):hover:active:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[checked]:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-selected.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[checked][siblings-menu-open]:-moz-locale-dir(rtl),
-.inspector-breadcrumbs-button[checked]:hover:active:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-selected-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:first-of-type:not([checked]):-moz-locale-dir(rtl),
-.inspector-breadcrumbs-button:first-of-type:not([checked]):hover:active:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type[checked]:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-selected.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:first-of-type[checked]:-moz-locale-dir(rtl),
-.inspector-breadcrumbs-button:first-of-type[checked]:hover:active:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-selected-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end.png") 1 13 2 13 fill stretch;
-}
-
-#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:last-of-type:-moz-locale-dir(rtl) {
-  border-left-width: 0;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:last-of-type:not([checked]):-moz-locale-dir(rtl),
-.inspector-breadcrumbs-button:last-of-type:not([checked]):hover:active:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type[checked]:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-selected.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:last-of-type[checked]:-moz-locale-dir(rtl),
-.inspector-breadcrumbs-button:last-of-type[checked]:hover:active:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-selected-pressed.png") 1 13 2 13 fill stretch;
-}
-
-/* Highlighter toolbar - HTML Tree */
-
-#inspector-treepanel-toolbutton {
-  list-style-image: url("chrome://browser/skin/devtools/treepanel-button.png");
-  -moz-margin-end: 0;
-  -moz-image-region: rect(0px 18px 16px 0px);
-}
-
-#inspector-treepanel-toolbutton[checked] {
-  -moz-image-region: rect(0px 36px 16px 18px);
-}
-
-#inspector-breadcrumbs > .scrollbutton-down:-moz-locale-dir(rtl),
-#inspector-treepanel-toolbutton:-moz-locale-dir(ltr) {
-  border-radius: 3px 0 0 3px;
-}
-
-#inspector-breadcrumbs > .scrollbutton-down:-moz-locale-dir(ltr),
-#inspector-treepanel-toolbutton:-moz-locale-dir(rtl) {
-  border-radius: 0 3px 3px 0;
-}
-
-/* Highlight toolbar - Option menu */
-
-#inspector-option-toolbarbutton:-moz-focusring {
-  outline: 1px dotted hsla(210,30%,85%,0.4);
-  outline-offset: -2px;
-}
-
 html|*#gcli-tooltip-frame,
 html|*#gcli-output-frame {
   padding: 0;
   border-width: 0;
   background-color: transparent;
 }
 
 #gcli-output,
@@ -2579,43 +2301,23 @@ html|*#gcli-output-frame {
   color: hsl(208,100%,60%) !important;
   text-shadow: 0 0 6px hsl(208,100%,60%);
 }
 
 .developer-toolbar-button[checked=true] {
   background: rgba(0,0,0,.4);
 }
 
-#developer-toolbar-webconsole {
-  -moz-image-region: rect(0, 16px, 16px, 0);
-}
-
-#developer-toolbar-inspector {
-  -moz-image-region: rect(16px, 16px, 32px, 0);
-}
-
-#developer-toolbar-styleeditor {
-  -moz-image-region: rect(32px, 16px, 48px, 0);
-}
-
-#developer-toolbar-debugger {
-  -moz-image-region: rect(48px, 16px, 64px, 0);
-}
-
-#developer-toolbar-other-tools {
-  -moz-image-region: rect(64px, 16px, 80px, 0);
-}
-
-#developer-toolbar-other-tools > .toolbarbutton-menu-dropmarker {
-  display: none;
+#developer-toolbar-toolbox-button {
+  -moz-image-region: rect(64px, 22px, 80px, 0);
 }
 
 /* Error counter */
 
-#developer-toolbar-webconsole[error-count]:before {
+#developer-toolbar-toolbox-button[error-count]:before {
   color: #FDF3DE;
   min-width: 16px;
   text-shadow: none;
   background-image: -moz-linear-gradient(top, #B4211B, #8A1915);
   border-radius: 1px;
   -moz-margin-end: 2px;
 }
 
diff --git a/browser/themes/gnomestripe/devtools/command-responsivemode.png b/browser/themes/gnomestripe/devtools/command-responsivemode.png
new file mode 100644
index 0000000000000000000000000000000000000000..cbfa599048c1065c7250a5cd74b9684724f3ded3
GIT binary patch
literal 1083
zc$@({1jPG^P)<h;3K|Lk000e1NJLTq002M$000mO1^@s6rssJn000C6Nkl<Zc-qyL
zZAevj9LN9X$h<4O&Glf*%BNah3|g&BTO-FTGBsO4PaCvw=xodCrlOb;F*k=pDYFnW
zn>{UzO0owih;|zVdoglM>cwC%#$YhU7`2<(IQxCw_q6}zaJu(MZ+h|J_xtPTd++so
zJ)EP$j~+kQsO_iXh4I1^PauOVU#LN7^a3-A^a_`}z>Ffl2!DBj8D(s0Nm}ydo%?w`
z1C|$%K~_Ed?*r@^4a|ZIqePKEM~O04@0yv_{;d@_;0<JuwF}q{-Y+ei5I@%Me;ROX
zpIOics%z_$qUGVhC5rq3n!adBj+Tc5mnfsSDl@SEwgr48)#YaH`eHL@T_o9S3e49_
zmYVZdE%OxzKd^md?E)Hryn!LJc4+vYbeVOWwQy|U*gmu1JmBv-nCs;15a=;aA7}DA
z;O|1r-Q)~8^7QQjGF!f}fRSIGx2XN=yMdY`>)&V(-Q&D#&MBA{H!e9*c-hF?ynud0
z0rdcTU;pKdDbv%?b`mDedI7r69h@D(B~J%9eDWKJJx`wn%xb=20i!Uu@Rh0)MK3Jg
zkQtZtRyrom^7F(u58YBg_5l5e0_p(w9cURlCe9HBIDK#iaBpMI&bMJF4xjuAxL?)t
zI6L$7S-`8GUbBEvv@?5ATWC<e<%#lb$7AA*0v7KNDWLm$0W|=7@7eRI@~>xN$HduD
z0DbP@G<lK_YkBO%;gg?%hdg~2u=k1uP{5?JgGDdC_xWVG#f`<pd8B~W>k8<;UO*MV
z{`b&ug}m`JIagxh>?nXfcW?@DZ)U!gvss|$^vO?vdmnTCoPEwbeHJit_XP`}fQ6s*
z|Bw~zD#>lUIEaa}@lO2&J}<=SzFt5OV8^v5`1Q#@JXdh|GQo)vT=H~Q3l5+B2%_Xa
zcK9q{M%_6J7%R5Vjhp>;8m|8*%qyH>Z2T;BUc;Gvs`S81x~~_o4PbX62Oj{t?sEq{
zM7gj^=oZ}kd&DhYAq+Tt7LZZhYXPI6G7Hzfj@$;vy|(jM`|RLx-1jHzzFxpq;8uWq
z3-N*<yY6!bM~QNv<-_j&Ac#Frp9Q4vIB5Z6WlbP=&pD+d1^DFIAjQmCJ4>De65-H~
zDBvR?yAS6m_-vn9aD<HE*%dgNugLc#A$lGTeHM_mwZ{Spn_HL5b)FpY%wN$p)p)ll
z%~-cLLoR_7IP@b5*aBqV77Mn|Ea)OfV?py3xkCnGggy({(rtn4+OMpfy3<bu4*mZN
zxE~%Wl^6Ta3&_|7Jb3u1O=hPTm_Z(Qo|`hi^8zzUp8nEP$~qsUmLImffDE$sHJ%{&
zJ(9ozMx75ogS<Is#dvdW(R_K<&li@)NIo*i{tKm$=he1VCV&6{002ovPDHLkV1ncB
B5lR36

diff --git a/browser/themes/gnomestripe/devtools/command-scratchpad.png b/browser/themes/gnomestripe/devtools/command-scratchpad.png
new file mode 100644
index 0000000000000000000000000000000000000000..5131ca5cbc6176c96a66f4a56d81fed95c4c9327
GIT binary patch
literal 584
zc$@)90=NB%P)<h;3K|Lk000e1NJLTq001xm000mO1^@s6P_F#30006HNkl<Zc-qC5
zPfHt76vbV+5d8}7Tofs2(W;=((r?mDX;F!&U_`-w1(zjaD@B7+1ec|v7^+rcocx)n
z7%gc*P=uDEO^iak2VUTLnAf><<KoAhcjuhp+<`Eut5&OZ^$kt`%Y*0dJ)l&%9noq7
z=ijTeJD=BS_X1NY?JlsQ((e3kwdMuNmD}i_t5U@1w+bD#3gE%<%hL5st)xQ7DPO!Q
zS8_)GQs|<+00t9@&FvN`)~wZ3V0ka&x6AdBR#X1suyFEBu3cKq3ycesK&z?1CzJwO
zP5Cq79B4H!FqTSZyEndWKdFH;<}RqfQpVr!v-3D(?t=2C{=v};JC8HwE_i`aAzHS;
z8FLr>8xR($B+hXcl>Z_8WH5KZ3k-u@FY|OgvDx-7;DMJ4%mXj$_lD)+ftT{%L2m!>
zc~~AEczJ;#!)Q4Kc;KZ1AAwn9A%uB&DPJ%gD=F{-gWy{-)$wJ0<8cj~F%N<Yd;q&%
zw#UxnjCl~0KLF`mzR%9%jCl~eKtGT-91(^rBA5q31!fI%4CX;l-Z$hK%!A+s-fZn8
z+dr?awFZHE@Yqm+ndDx&)0M|Pcx))2@pAcIS04A^vEc<?%iA6h1|1B*V?zaE!fXgJ
z8_Ih^It0(=-U9N8e<{OPTHv<}$R~bU=I^w?Z|DDB-y~$7(gHvKnQIi9v>5+`=kEaG
WYW7HKLO22d0000<MNUMnLSTZG<`g>s

diff --git a/browser/themes/gnomestripe/devtools/command-tilt.png b/browser/themes/gnomestripe/devtools/command-tilt.png
new file mode 100644
index 0000000000000000000000000000000000000000..f816bba59cedb2fb2069b4d0a4ff09225e99cdb7
GIT binary patch
literal 1668
zc$@)*27CF5P)<h;3K|Lk000e1NJLTq002M$000mO1^@s6rssJn000I{Nkl<Zc-qC6
zc~F#f9L9NfQBX_+9WPKhL>7@lZbk!4AxRxGAezZD@!&{M4i(X$6bSLi4nr{%1$IzT
z(FkL7Fbiey)=J}aIhSL(1+|&&`_R75uN{6fP5sdypXuB8d7k&(-^0$kuR8rN{?Hjd
z^0j{hvj2PD>%{%P?Q|k?B!nI@h8PDhV+W1(BCGuY@c+7mC9#;;3^el$Xq*GEyWxZr
zv5`0mG_y0be~{NF77%H~J)oI=plNw=V1dvj3<#sqF>(vrgV%!H(#zy;WZta<m}$2T
z8a(hKGngHqix5VH8?l1e)i>~BOJ`4CU`2JUH^7V?G<e|EWW+;E(v*}yoF(s(uHOFe
zs@l4R05f*b;DJ|@5%cE6dLoZ#diMNfc~4(|^3(c;r2sQ_(BOd=nZW{r5099hROC7P
z(Df9L^s>^q$L<Wcep9Zn-CuIfI_Xjhz>FO<c;H0_Ssl$G66pg*ws&^>|MsN9>+XX`
z&QB_;>{?ZwGJqL7Xz;*`3{yY>?b18Cd&4TKYTn}Ip}_+$GE4y~I$&8>@3Z8pTE$Xc
z9vVFGB7>~3Jay8XBe&E}UzFC(Oewx(^>O}Q*^b<3t2lXxMVx#Mz>FO<c;H0_S+Rh4
zRaZ|$eUs9^sih5HRg0m31`oW*Fa@0J?(09SY;6y1Zf&2-%R_?)USya8+GuyPRn@hJ
z4m_WihXxP4$RH~$-DYXE?<ckFv#SkO2^R{@Vsny=BeOP4jmceZw*5>1z>FO<c;H0_
zS+Rh)o@WE`E$tl%b&butpVl`<H8d&Tp})30z>FQVhUS*g#}(Dy$S?(*?d^Y_PsN<4
zLl!hDThr;k8z}1rFk=Ue?s15&^&T=z0ZRH-C_B3QTG~3gTFG;xMb()|-xe=`89Qin
zk85<TEyy4%ERM38ky@g*-dmz}NV}?b+kZvvl3Jv&NxX2@EJnVAh@<&5cF=5-i)yFD
zX6GV<tXRM{7Ahl-Zn#U)(DVtQ8%EYB>V2}Z<<sclV?Ydtk160Z3zcz(K4?B2_yVA7
z9ieNi`mX2)8Iy-s%r~-78I4p%6CJo2(6!3(d4Bx)rX!PY6brE2Q><o@B^9gflP{}X
zQ~$ztPodIudtRR5s?;?Sw?JoM-dZ2{*aBjB6kaa2)ZA2$c=a;^jVVCRqqMAi_T;H%
zqlU;s7xM}p_a6T0$;m5T6_EJ7nuk&F=R2hC?|VpWeXS*?&c@Pl7Gs3@>+PVi1w`?n
zn@Ksp!BI>BIXrlIXiNb$Ja~C%Vgb{47N~g$UaQ@ulV%!9M^Dx#bO}Msumx=90evW-
zF$J9B0i6S@RdV6yE5!mVw&kmN2!0XPIJ8Gnp^k`{VGG#AgI54FrhpS%_y=IM$2@p>
zXkr28(Rpef&^<o6s6&Wvi6ex71Se>00pUELGYEtQ5d@7XAd?4l27z!Sc4}$A@X*Rj
zh<U^*Q4@SaEzBab)jWhHF)})|lrYc@&oY*6&HczZ{`4bg$POMXzu=M?{l>qod1Vb{
zflf$?S;R`(h0zn)4;it5lIx|j=xH5Bb2@QM3-R^Zi%21k(o;PY8ED|v-TQ8;?%sVg
z-zFYtA--Pw6Bmg)^k$ky8Fy$BSO4*bfeGQp>%P8W8h-qxY4`~>ix8OLY!IGlZWEi6
z=n|KwaEO(^G!4zTW)$@4Mq~#I&^&1LqqoM5uU6F0p`WqUbny^Cx(g9Z^M~}4I0qhh
zkr4|J^JxbU8Pm@lUYqyRK10J|;vjKA*`^ABN6hzY<ui_FnNqnC^rm-(`F8;BeFad-
zo8V#dQWHBpiIu0Z#LmxYq)*5P6IUKMKW#%sr)kKyYG4zYnd!1Mx7~L0NtH?PSJ?)O
zwk(s(UScnic~3?b1pu)KfzXr9vLAix-UD0us{~LP0k`izw8IV>JZz?4gvr0@>-YMT
z%4#oqZH=cg;%WBAPRzf`aPmu*`5V?K8s4QhzHG{$!i?Qec|70<UFrB4qa;%uCrWG<
z*bH+I@*Nwr`%9Cxhbv`a8NW|hu`hX;=W0)h-9njUn&Sj`kwKO%K)Z}##7Kad`!M97
zo#*)ebKW)jBoK>`68cgT`*HLaw#2tW;;_g;Vl&@dI>liuG<e_@bAJM9K6DX`52()o
O0000<MNUMnLSTYCryzI$

diff --git a/browser/themes/gnomestripe/devtools/common.css b/browser/themes/gnomestripe/devtools/common.css
--- a/browser/themes/gnomestripe/devtools/common.css
+++ b/browser/themes/gnomestripe/devtools/common.css
@@ -183,16 +183,75 @@
   -moz-border-start: 1px solid black;
   min-width: 0;
   width: 3px;
   background-color: transparent;
   -moz-margin-end: -3px;
   position: relative;
 }
 
+/* In-tools sidebar */
+
+.devtools-sidebar-tabs {
+  -moz-appearance: none;
+  margin: 0;
+}
+
+.devtools-sidebar-tabs > tabpanels {
+  -moz-appearance: none;
+  padding: 0;
+  border: 0;
+}
+
+.devtools-sidebar-tabs > tabs {
+  -moz-appearance: none;
+  position: static;
+  box-shadow: 0 1px 0 0 hsla(210, 16%, 76%, .2) inset;
+  background-image: linear-gradient(to bottom, hsl(210,11%,36%), hsl(210,11%,18%));
+  color: hsl(210,30%,85%);
+  margin-bottom: 0;
+  padding: 0;
+}
+
+.devtools-sidebar-tabs > tabs > .tabs-right,
+.devtools-sidebar-tabs > tabs > .tabs-left {
+  display: none;
+}
+
+.devtools-sidebar-tabs > tabs > tab {
+  -moz-appearance: none;
+  padding: 0;
+  margin: 0;
+  min-width: 78px;
+  min-height: 22px;
+  text-shadow: 0 -1px 0 hsla(210,8%,5%,.45);
+  text-align: center;
+  color: inherit;
+  -moz-box-flex: 1;
+  border-width: 0;
+  -moz-border-end-width: 1px;
+  border-color: hsla(210,8%,5%,.6);
+  border-style: solid;
+  background: transparent;
+  border-radius: 0;
+}
+
+.devtools-sidebar-tabs > tabs > tab:-moz-focusring {
+  position: static;
+}
+
+.devtools-sidebar-tabs > tabs > tab:last-of-type {
+  -moz-border-end-width: 0;
+}
+
+.devtools-sidebar-tabs > tabs > tab[selected=true] {
+  background-image: linear-gradient(to bottom, hsl(201,45%,34%), hsl(205,44%,22%));
+  color: white !important;
+}
+
 /* Theme */
 
 .devtools-theme-background {
   background-color: white;
 }
 
 .devtools-theme-comment {
   color: hsl(90,2%,46%); /* grey */
diff --git a/browser/themes/gnomestripe/devtools/dock-bottom.png b/browser/themes/gnomestripe/devtools/dock-bottom.png
new file mode 100644
index 0000000000000000000000000000000000000000..83842f236ef5ede55a268e67077532fc1764746f
GIT binary patch
literal 487
zc$@*}0T}*?P)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00004b3#c}2nYxW
zd<bNS00009a7bBm000XT000XT0n*)m`~Uy|6?8>dbVG7wVRUJ4ZXi@?ZDjyCFETeT
zF*2O>TrB_q0338hSaefwW^{L9a%BKPWN%_+AVz6&Wp{6KYjYq&Q#R<lvWx%#0YFJa
zK~y-6#gn~C13?spzuCWlN(=#wCY?p<l>U^m#7D5O5DN<nAI8GMLM$wN1jRC8vyGMA
z7J@}2RftI-u(La3lMTzdNrV(0xNz@f&Y64eFhXn1Dlk@J0~UZ&syRSu8qN|<2n>Kh
zIOvAfv{}Bpy}3APx_hQ+E}SZkWA*&<`f+)6eGl{!f$e6~t!l(Liq(<<1g?8r1-8-x
zYak{7r)TG5uj2=R%rNc4gZ=u`<HLqwm=ai@?Enx!1mJc2H?8rLIt9z?_#@yb#hD3^
z+$f+Z1iL`?eFad=PWDUS>oaHojd>f8ks77z^u{G13$|4$*j7bGs-Kr9=kg|q0LGK>
zJ!#C#^DL;Ww?9D5ENB?E+8#=&7+4reskqhl&@coLT5IghS{Xqd*vZ(+Lj?5D1oFGv
d7ytene*n2yf``D{mBs)7002ovPDHLkV1mh##`^#O

diff --git a/browser/themes/gnomestripe/devtools/dock-side.png b/browser/themes/gnomestripe/devtools/dock-side.png
new file mode 100644
index 0000000000000000000000000000000000000000..9a940bc1e4e50a63d1522fc5604cb2cf44b05e82
GIT binary patch
literal 536
zc$@(k0_XjSP)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00004b3#c}2nYxW
zd<bNS00009a7bBm000XT000XT0n*)m`~Uy|6?8>dbVG7wVRUJ4ZXi@?ZDjyCFETeT
zF*2O>TrB_q0338hSaefwW^{L9a%BKPWN%_+AVz6&Wp{6KYjYq&Q#R<lvWx%#0dYx0
zK~y-6#gn^A13?&tzkg#^qGBXPiUd)DAZTgt4PpYmfM6lMl7fg>Soj`_MNAq&5H*Pw
z3NaSm5~HhonXzzJ)=Nxb;lR(pFz4{i;f!dl`O7l?qz1YG%z?BC4ESSq&?uk@+}IDb
zmoEP>v9Y$YoX=&4Baui)s&b{;oSmCr0WJcAWG<IYYNY9Usv~wLlQDoq*q{gG1z=%u
z$tn~}RlorTFV9bty)knn5I<S=nTP;%gP#E)zJNlpbf7gwz!hNvn0m78lOI4NY(QWD
z+-t3G)ni>p<EdxB>5G}8!KIdEm%}dK3<Q*VtcT0tv@H9mT^?Zr*Wb-(JY_hIs~}Cc
zFJ_K~2#$Xxn3<j&-`U-3MdPVgV8|yp{FOk1tCaE#!(e-BvtLB=AFi&~_$pFL!F!=T
zs(iP)wytd3_FPXrIIedajQ_MxQ`j$}-`j|2t%=6d{XhmG4aC~v2AKfYXev&lb|?S-
a8{Yua!lFpTFEAhg0000<MNUMnLSTZp`P~Wt

diff --git a/browser/themes/gnomestripe/devtools/dock-window.png b/browser/themes/gnomestripe/devtools/dock-window.png
new file mode 100644
index 0000000000000000000000000000000000000000..29d3b319a99a3c8b2ded8fbd8ae8d70970c792a2
GIT binary patch
literal 806
zc$@(y1KIqEP)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00004b3#c}2nYxW
zd<bNS00009a7bBm000XT000XT0n*)m`~Uy|6?8>dbVG7wVRUJ4ZXi@?ZDjyCFETeT
zF*2O>TrB_q0338hSaefwW^{L9a%BKPWN%_+AVz6&Wp{6KYjYq&Q#R<lvWx%#0)I(F
zK~y-6rBlyKR8bf`_rCk)jc*)B#2=&c!!Zn76qwRNa|(i>c7@u?RTxEB5kmh%P)N(7
zT`i)>qChBuC?O1glu}BRT7)w?m6JZ7^WK|x@7KZt6L)^g?{Ln6^PP_o5q2_c>!Lii
zyS#bd-dMmeN|lt`l7tX4lU@8dJw1~ZTfxg0`;K&Xo;;DNPjID(6VZPrn#PsmdUAYh
zB6F$#%FV3;C3UsYhK6LEy?HzKJCj{p*M;VT{nd~Po|5K)))u{`Wq*Zfnzf=b(G)p<
z_DnjRZjb#~%9_zwGAcA?Umv(JH}vrCYXIw;3_Ji$PoKX!To;X+j^hMGJRVPVcXu66
z)hEnSgTp0QR>3a@gTYw<;{dj%Y#BzN*_Sd1fVh-0l1e4*sSnc&Ev;>zZ{5DLTo%++
zC=~LyAp?LCLKKO}Q$*lWN=PY-wr%I%O^gg{oM$x7lx0~40DT()({(-KoVy?*A(bL2
zRnas}8$hn6y1E{K-O=9G7&1$aMj{cL^NkQS>B_}rt1(<!8q{^Ypok!_(In3=7JUFt
zHkT``ILhnq>kR<t0KfqtZ+k2p3P1pofc4SI8S=bhK`5n|5W-ot)=B`>T<Gmt8XSBa
zud1pPuICkq2<eW4bnbLdaq!7AV`TWHUlC0>qhsUw?BddbV4M?U%x!GkWjq>saY$!;
z?aSA1`kHMU05Kv$G9L3nC5AsaHMKHu?dk-88~_UlSYl;mHGl8^13J~!S!k$_>rx?j
zOoz(>2iWMk0_4cV$KdSTd=9{S0P<fgm=>-rFDnc035UZ`-}m+HPRBWCQb}w1SN@Zm
k|31GNV>|suz9Tk(KRCWA;;1x%9RL6T07*qoM6N<$g8X4xGynhq

diff --git a/browser/themes/gnomestripe/devtools/inspector.css b/browser/themes/gnomestripe/devtools/inspector.css
new file mode 100644
--- /dev/null
+++ b/browser/themes/gnomestripe/devtools/inspector.css
@@ -0,0 +1,214 @@
+#inspector-inspect-toolbutton {
+  list-style-image: url("chrome://browser/skin/devtools/inspect-button.png");
+  -moz-image-region: rect(0px 16px 16px 0px);
+}
+
+#inspector-inspect-toolbutton[checked=true] {
+  -moz-image-region: rect(0px 32px 16px 16px);
+}
+
+/* Highlighter toolbar - breadcrumbs */
+
+#inspector-breadcrumbs {
+  -moz-margin-end: 3px;
+  /* A fake 1px-shadow is included in the border-images of the
+     inspector-breadcrumbs-buttons, to match toolbar-buttons style.
+     This negative margin compensate the extra row of pixels created
+     by the shadow.*/
+  margin-bottom: -1px;
+}
+
+#inspector-breadcrumbs > .scrollbutton-up,
+#inspector-breadcrumbs > .scrollbutton-down {
+  -moz-appearance: none;
+  border: 1px solid hsla(210,8%,5%,.45);
+  background: -moz-linear-gradient(hsla(212,7%,57%,.35), hsla(212,7%,57%,.1)) padding-box;
+  box-shadow: 0 1px 0 hsla(210,16%,76%,.15) inset, 0 0 0 1px hsla(210,16%,76%,.15) inset, 0 1px 0 hsla(210,16%,76%,.15);
+  margin: 0 0 1px;
+}
+
+#inspector-breadcrumbs > .scrollbutton-up:not([disabled]):active:hover,
+#inspector-breadcrumbs > .scrollbutton-down:not([disabled]):active:hover {
+  border-color: hsla(210,8%,5%,.6);
+  background: -moz-linear-gradient(hsla(220,6%,10%,.3), hsla(212,7%,57%,.15) 65%, hsla(212,7%,57%,.3));
+  box-shadow: 0 0 3px hsla(210,8%,5%,.25) inset, 0 1px 3px hsla(210,8%,5%,.25) inset, 0 1px 0 hsla(210,16%,76%,.15);
+}
+
+#inspector-breadcrumbs > .scrollbutton-up:not([disabled]):active:hover > .toolbarbutton-icon,
+#inspector-breadcrumbs > .scrollbutton-down:not([disabled]):active:hover > .toolbarbutton-icon {
+  -moz-image-region: rect(0px 14px 16px 7px);
+}
+
+#inspector-breadcrumbs > .scrollbutton-up > .toolbarbutton-icon,
+#inspector-breadcrumbs > .scrollbutton-down > .toolbarbutton-icon {
+  -moz-appearance: none;
+  list-style-image: url("chrome://browser/skin/devtools/breadcrumbs-scrollbutton.png");
+  -moz-image-region: rect(0px 7px 16px 0px);
+  margin: 0 5px;
+}
+
+#inspector-breadcrumbs > .scrollbutton-up[disabled] > .toolbarbutton-icon,
+#inspector-breadcrumbs > .scrollbutton-down[disabled] > .toolbarbutton-icon {
+  opacity: 0.5;
+}
+
+#inspector-breadcrumbs > .scrollbutton-up > .toolbarbutton-icon:-moz-locale-dir(rtl),
+#inspector-breadcrumbs > .scrollbutton-down > .toolbarbutton-icon:-moz-locale-dir(ltr) {
+  transform: scaleX(-1);
+}
+
+.inspector-breadcrumbs-button {
+  -moz-appearance: none;
+  background-color: transparent;
+  border-style: solid;
+  border-width: 1px 13px 2px 13px;
+  color: hsl(210,30%,85%);
+  width: 85px; /* Can't use max-width. See bug 723132 */
+  /* The content of the button can be larger than the button */
+  overflow: hidden;
+  min-height: 25px;
+
+  margin: 0 -11px 0 0;
+  padding: 0 9px;
+}
+
+.inspector-breadcrumbs-button:-moz-focusring > label {
+  border-bottom: 1px dotted hsla(210,30%,85%,0.4);
+}
+
+.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-tag {
+  color: hsl(208,100%,60%);
+}
+
+.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-id {
+  color: hsl(205,100%,70%);
+}
+
+.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-pseudo-classes {
+  color: hsl(20, 100%, 70%);
+}
+
+.inspector-breadcrumbs-id,
+.inspector-breadcrumbs-classes {
+  color: #8d99a6;
+}
+
+.inspector-breadcrumbs-pseudo-classes {
+  color: hsl(20, 100%, 85%);
+}
+
+/* Highlighter toolbar - breadcrumbs - LTR */
+
+.inspector-breadcrumbs-button {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:not([checked]):hover:active {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button[checked] {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-selected.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button[checked]:hover:active {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-selected-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:first-of-type {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:first-of-type:not([checked]):hover:active {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:first-of-type[checked] {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-selected.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:first-of-type[checked]:hover:active {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-selected-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:last-of-type {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end.png") 1 13 2 13 fill stretch;
+}
+
+#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:-moz-locale-dir(ltr):first-of-type {
+  border-left-width: 0;
+}
+
+#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:-moz-locale-dir(ltr):last-of-type {
+  border-right-width: 0;
+}
+
+.inspector-breadcrumbs-button:last-of-type:not([checked]):hover:active {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:last-of-type[checked] {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-selected.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:last-of-type[checked]:hover:active {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-selected-pressed.png") 1 13 2 13 fill stretch;
+}
+
+/* Highlighter toolbar - breadcrumbs - RTL */
+
+.inspector-breadcrumbs-button:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:not([checked]):hover:active:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button[checked]:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-selected.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button[checked]:hover:active:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-selected-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:first-of-type:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:first-of-type:not([checked]):hover:active:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:first-of-type[checked]:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-selected.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:first-of-type[checked]:hover:active:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-selected-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:last-of-type:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end.png") 1 13 2 13 fill stretch;
+}
+
+#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:-moz-locale-dir(rtl):first-of-type {
+  border-right-width: 0;
+}
+
+#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:last-of-type:-moz-locale-dir(rtl) {
+  border-left-width: 0;
+}
+
+.inspector-breadcrumbs-button:last-of-type:not([checked]):hover:active:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:last-of-type[checked]:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-selected.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:last-of-type[checked]:hover:active:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-selected-pressed.png") 1 13 2 13 fill stretch;
+}
diff --git a/browser/themes/gnomestripe/devtools/layout-background.png b/browser/themes/gnomestripe/devtools/layout-background.png
deleted file mode 100644
Binary file browser/themes/gnomestripe/devtools/layout-background.png has changed
diff --git a/browser/themes/gnomestripe/devtools/layout-buttons.png b/browser/themes/gnomestripe/devtools/layout-buttons.png
deleted file mode 100644
Binary file browser/themes/gnomestripe/devtools/layout-buttons.png has changed
diff --git a/browser/themes/gnomestripe/devtools/layoutview.css b/browser/themes/gnomestripe/devtools/layoutview.css
--- a/browser/themes/gnomestripe/devtools/layoutview.css
+++ b/browser/themes/gnomestripe/devtools/layoutview.css
@@ -1,14 +1,14 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 body {
-  background: url(layout-background.png), -moz-radial-gradient(50% 70%, circle cover, hsl(210,53%,45%) 0%, hsl(210,54%,33%) 100%);
+  background: url(layout-background-grid.png), -moz-radial-gradient(50% 70%, circle cover, hsl(210,53%,45%) 0%, hsl(210,54%,33%) 100%);
   color: hsl(210,100%,85%);
   border-top: 1px solid black;
   -moz-box-sizing: border-box;
 }
 
 #element-size {
   color: hsl(210,100%,95%);
 }
@@ -37,22 +37,8 @@ body {
   border-color: hsla(210,100%,85%,0.2);
   border-style: solid;
 }
 
 #borders {
   border-style: solid;
   border-color: hsl(210,100%,85%);
 }
-
-#togglebutton {
-  background-image: url(layout-buttons.png);
-  width: 16px;
-  height: 16px;
-}
-
-body.open {
-  background: url(layout-background-grid.png), -moz-radial-gradient(50% 70%, circle cover, hsl(210,53%,45%) 0%, hsl(210,54%,33%) 100%);
-}
-
-body.open > #header > #togglebutton {
-  background-position: -16px 0;
-}
diff --git a/browser/themes/gnomestripe/devtools/toolbox.css b/browser/themes/gnomestripe/devtools/toolbox.css
new file mode 100644
--- /dev/null
+++ b/browser/themes/gnomestripe/devtools/toolbox.css
@@ -0,0 +1,99 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#toolbox-tabs {
+  margin: 0;
+}
+
+#toolbox-dock-bottom {
+  list-style-image: url("chrome://browser/skin/devtools/dock-bottom.png");
+}
+
+#toolbox-dock-side {
+  list-style-image: url("chrome://browser/skin/devtools/dock-side.png");
+}
+
+#toolbox-dock-window {
+  list-style-image: url("chrome://browser/skin/devtools/dock-window.png");
+}
+
+.command-button {
+  margin: 0 10px;
+  width: 16px;
+  height: 32px;
+  background-repeat: no-repeat;
+  background-position: center center;
+}
+
+#command-button-responsive {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-responsivemode.png), 0, 16, 16, 0);
+}
+#command-button-responsive:hover {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-responsivemode.png), 0, 32, 16, 16);
+}
+#command-button-responsive:hover:active {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-responsivemode.png), 0, 48, 16, 32);
+}
+#command-button-responsive.toggled {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-responsivemode.png), 0, 64, 16, 48);
+}
+
+#command-button-tilt {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-tilt.png), 0, 16, 16, 0);
+}
+#command-button-tilt:hover {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-tilt.png), 0, 32, 16, 16);
+}
+
+#command-button-tilt:hover:active {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-tilt.png), 0, 48, 16, 32);
+}
+
+#command-button-tilt.toggled {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-tilt.png), 0, 64, 16, 48);
+}
+
+#command-button-scratchpad {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-scratchpad.png), 0, 16, 16, 0);
+}
+
+#command-button-scratchpad:hover {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-scratchpad.png), 0, 32, 16, 16);
+}
+
+#command-button-scratchpad:hover:active {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-scratchpad.png), 0, 48, 16, 32);
+}
+
+
+/* Tabs */
+
+.devtools-tabbar {
+  -moz-appearance: none;
+  background-image: linear-gradient(to bottom, hsl(210,11%,36%), hsl(210,11%,18%));
+  color: hsl(210,30%,85%);
+  padding: 4px 3px 3px;
+  box-shadow: 0 -3px 0 0 rgb(20,20,20) inset, 0 -4px 0 0 rgba(0,0,0,0.8) inset;
+}
+
+.devtools-tab {
+  -moz-appearance: none;
+  min-width: 78px;
+  min-height: 22px;
+  text-shadow: 0 -1px 0 hsla(210,8%,5%,.45);
+  border-radius: 3px 3px 0 0;
+  color: inherit;
+  border-style: solid;
+  border-color: transparent;
+  border-width: 1px 1px 0;
+  margin: 0 5px;
+  padding: 0 10px 1px;
+}
+
+.devtools-tab[selected=true] {
+  border-color: hsla(210,8%,5%,.6);
+  background-color: rgb(20,20,20);
+  text-shadow: none;
+  color: white;
+}
diff --git a/browser/themes/gnomestripe/devtools/treepanel-button.png b/browser/themes/gnomestripe/devtools/treepanel-button.png
deleted file mode 100644
Binary file browser/themes/gnomestripe/devtools/treepanel-button.png has changed
diff --git a/browser/themes/gnomestripe/jar.mn b/browser/themes/gnomestripe/jar.mn
--- a/browser/themes/gnomestripe/jar.mn
+++ b/browser/themes/gnomestripe/jar.mn
@@ -100,16 +100,19 @@ browser.jar:
   skin/classic/browser/tabview/edit-light.png         (tabview/edit-light.png)
   skin/classic/browser/tabview/search.png             (tabview/search.png)
   skin/classic/browser/tabview/stack-expander.png     (tabview/stack-expander.png)
   skin/classic/browser/tabview/tabview.png            (tabview/tabview.png)
   skin/classic/browser/tabview/tabview.css            (tabview/tabview.css)
   skin/classic/browser/devtools/common.css            (devtools/common.css)
   skin/classic/browser/devtools/arrows.png            (devtools/arrows.png)
   skin/classic/browser/devtools/commandline.png       (devtools/commandline.png)
+  skin/classic/browser/devtools/command-responsivemode.png (devtools/command-responsivemode.png)
+  skin/classic/browser/devtools/command-scratchpad.png (devtools/command-scratchpad.png)
+  skin/classic/browser/devtools/command-tilt.png      (devtools/command-tilt.png)
   skin/classic/browser/devtools/alerticon-warning.png (devtools/alerticon-warning.png)
   skin/classic/browser/devtools/goto-mdn.png          (devtools/goto-mdn.png)
   skin/classic/browser/devtools/csshtmltree.css       (devtools/csshtmltree.css)
   skin/classic/browser/devtools/webconsole.css                  (devtools/webconsole.css)
   skin/classic/browser/devtools/webconsole_networkpanel.css     (devtools/webconsole_networkpanel.css)
   skin/classic/browser/devtools/webconsole.png                  (devtools/webconsole.png)
   skin/classic/browser/devtools/commandline.css              (devtools/commandline.css)
   skin/classic/browser/devtools/markup-view.css      (devtools/markup-view.css)
@@ -148,33 +151,35 @@ browser.jar:
   skin/classic/browser/devtools/debugger.css          (devtools/debugger.css)
   skin/classic/browser/devtools/magnifying-glass.png  (devtools/magnifying-glass.png)
   skin/classic/browser/devtools/option-icon.png       (devtools/option-icon.png)
   skin/classic/browser/devtools/itemToggle.png        (devtools/itemToggle.png)
   skin/classic/browser/devtools/itemArrow-rtl.png     (devtools/itemArrow-rtl.png)
   skin/classic/browser/devtools/itemArrow-ltr.png     (devtools/itemArrow-ltr.png)
   skin/classic/browser/devtools/inspect-button.png    (devtools/inspect-button.png)
   skin/classic/browser/devtools/dropmarker.png        (devtools/dropmarker.png)
-  skin/classic/browser/devtools/treepanel-button.png  (devtools/treepanel-button.png)
-  skin/classic/browser/devtools/layout-background.png (devtools/layout-background.png)
   skin/classic/browser/devtools/layout-background-grid.png (devtools/layout-background-grid.png)
   skin/classic/browser/devtools/layoutview.css        (devtools/layoutview.css)
-  skin/classic/browser/devtools/layout-buttons.png    (devtools/layout-buttons.png)
   skin/classic/browser/devtools/debugger-collapse.png  (devtools/debugger-collapse.png)
   skin/classic/browser/devtools/debugger-expand.png    (devtools/debugger-expand.png)
   skin/classic/browser/devtools/debugger-pause.png     (devtools/debugger-pause.png)
   skin/classic/browser/devtools/debugger-play.png      (devtools/debugger-play.png)
   skin/classic/browser/devtools/debugger-step-in.png   (devtools/debugger-step-in.png)
   skin/classic/browser/devtools/debugger-step-out.png  (devtools/debugger-step-out.png)
   skin/classic/browser/devtools/debugger-step-over.png (devtools/debugger-step-over.png)
   skin/classic/browser/devtools/responsive-se-resizer.png (devtools/responsive-se-resizer.png)
   skin/classic/browser/devtools/responsive-vertical-resizer.png (devtools/responsive-vertical-resizer.png)
   skin/classic/browser/devtools/responsive-background.png (devtools/responsive-background.png)
   skin/classic/browser/devtools/tools-icons-small.png     (devtools/tools-icons-small.png)
+  skin/classic/browser/devtools/dock-bottom.png           (devtools/dock-bottom.png)
+  skin/classic/browser/devtools/dock-side.png             (devtools/dock-side.png)
+  skin/classic/browser/devtools/dock-window.png           (devtools/dock-window.png)
   skin/classic/browser/devtools/floating-scrollbars.css   (devtools/floating-scrollbars.css)
+  skin/classic/browser/devtools/inspector.css             (devtools/inspector.css)
+  skin/classic/browser/devtools/toolbox.css               (devtools/toolbox.css)
 #ifdef MOZ_SERVICES_SYNC
   skin/classic/browser/sync-16-throbber.png
   skin/classic/browser/sync-16.png
   skin/classic/browser/sync-24-throbber.png
   skin/classic/browser/sync-32.png
   skin/classic/browser/sync-bg.png
   skin/classic/browser/sync-128.png
   skin/classic/browser/sync-desktopIcon.png
diff --git a/browser/themes/pinstripe/browser.css b/browser/themes/pinstripe/browser.css
--- a/browser/themes/pinstripe/browser.css
+++ b/browser/themes/pinstripe/browser.css
@@ -3363,154 +3363,127 @@ toolbarbutton.chevron > .toolbarbutton-m
   border-left-style: solid;
   border-top-left-radius: .3em;
   margin-left: 1em;
 }
 
 
 /* Highlighter */
 
-#highlighter-outline {
+.highlighter-outline {
   box-shadow: 0 0 0 1px black;
   outline: 1px dashed white;
   outline-offset: -1px;
 }
 
-#highlighter-outline[locked]  {
+.highlighter-outline[locked]  {
   box-shadow: 0 0 0 1px rgba(0,0,0,0.3);
   outline-color: rgba(255,255,255,0.7);
 }
 
-/* Highlighter toolbar */
-
-#inspector-inspect-toolbutton {
-  list-style-image: url("chrome://browser/skin/devtools/inspect-button.png");
-  -moz-image-region: rect(0px 16px 16px 0px);
-}
-
-#inspector-inspect-toolbutton[checked=true] {
-  -moz-image-region: rect(0px 32px 16px 16px);
-}
-
-#inspector-toolbar,
+/* Developer toolbar */
+
 #developer-toolbar {
   border-top: 1px solid hsla(210, 8%, 5%, .65);
   padding-top: 4px;
   padding-bottom: 4px;
 }
 
-#inspector-toolbar:-moz-locale-dir(ltr),
 #developer-toolbar:-moz-locale-dir(ltr) {
   padding-left: 2px;
   padding-right: 16px; /* use -moz-padding-end when/if bug 631729 gets fixed */
 }
 
-#inspector-toolbar:-moz-locale-dir(rtl),
 #developer-toolbar:-moz-locale-dir(rtl) {
   padding-left: 4px;
   padding-right: 18px; /* use -moz-padding-end when/if bug 631729 gets fixed */
 }
 
-#devtools-side-splitter {
-  background-image: none !important;
-  border: 0;
-  -moz-border-start: 1px solid #242b33;
-  min-width: 0;
-  width: 3px;
-  background-color: transparent;
-  -moz-margin-end: -3px;
-  position: relative;
-}
-
 /* Lion Fullscreen window styling */
 @media (-moz-mac-lion-theme) {
   #navigator-toolbox[inFullscreen][tabsontop="true"]:not(:-moz-lwtheme)::before {
     height: 36px;
   }
   #main-window[inFullscreen]:-moz-lwtheme {
     /* This additional padding matches the change in height in the pseudo-element
      * above. The rules combined force the top 22px of the background image to
      * be hidden, so there image doesn't jump around with the loss of the titlebar */
     padding-top: 11px;
     background-position: right -11px;
   }
 }
 
-#devtools-sidebar-box {
-  background-color: -moz-Field;
-}
-
 /* Highlighter - Node Infobar */
 
-#highlighter-nodeinfobar {
+.highlighter-nodeinfobar {
   color: hsl(200, 100%, 65%);
   border: 1px solid hsla(210, 19%, 63%, .5);
   border-radius: 3px;
   background: -moz-linear-gradient(hsl(209, 18%, 30%), hsl(210, 24%, 16%)) no-repeat padding-box;
 }
 
 /* Highlighter - Node Infobar - text */
 
-#highlighter-nodeinfobar-text {
+.highlighter-nodeinfobar-text {
   /* 100% - size of the buttons + margins */
   max-width: calc(100% - 2 * (26px + 6px));
   padding-bottom: 1px;
 }
 
-html|*#highlighter-nodeinfobar-tagname {
+html|*.highlighter-nodeinfobar-tagname {
   color: white;
 }
 
-html|*#highlighter-nodeinfobar-id {
+html|*.highlighter-nodeinfobar-id {
   color: hsl(90, 79%, 52%);
 }
 
-html|*#highlighter-nodeinfobar-pseudo-classes {
+html|*.highlighter-nodeinfobar-pseudo-classes {
   color: hsl(20, 100%, 70%);
 }
 
 /* Highlighter - Node Infobar - buttons */
 
 .highlighter-nodeinfobar-button {
   -moz-appearance: none;
   border: 0 solid hsla(210,8%,5%,.45);
   padding: 0;
   width: 26px;
   min-height: 26px;
   background-color: transparent;
 }
 
-#highlighter-nodeinfobar-inspectbutton {
+.highlighter-nodeinfobar-inspectbutton {
   -moz-border-end-width: 1px;
   box-shadow: 1px 0 0 hsla(210,16%,76%,.15), -1px 0 0 hsla(210,16%,76%,.15) inset;
   -moz-margin-end: 6px;
   list-style-image: url("chrome://browser/skin/devtools/inspect-button.png");
   -moz-image-region: rect(0px 16px 16px 0px);
 }
 
-#highlighter-nodeinfobar-inspectbutton:-moz-locale-dir(rtl) {
+.highlighter-nodeinfobar-inspectbutton:-moz-locale-dir(rtl) {
   box-shadow: -1px 0 0 hsla(210,16%,76%,.15), 1px 0 0 hsla(210,16%,76%,.15) inset;
 }
 
-#highlighter-nodeinfobar-inspectbutton:active:hover,
-#highlighter-nodeinfobar-container:not([locked]) >  #highlighter-nodeinfobar >  #highlighter-nodeinfobar-inspectbutton {
+.highlighter-nodeinfobar-inspectbutton:active:hover,
+.highlighter-nodeinfobar-container:not([locked]) >  .highlighter-nodeinfobar >  .highlighter-nodeinfobar-inspectbutton {
   -moz-image-region: rect(0px 32px 16px 16px);
 }
 
-#highlighter-nodeinfobar-menu {
+.highlighter-nodeinfobar-menu {
   -moz-border-start-width: 1px;
   box-shadow: -1px 0 0 hsla(210,16%,76%,.15), 1px 0 0 hsla(210,16%,76%,.15) inset;
   -moz-margin-start: 6px;
 }
 
-#highlighter-nodeinfobar-menu:-moz-locale-dir(rtl) {
+.highlighter-nodeinfobar-menu:-moz-locale-dir(rtl) {
   box-shadow: 1px 0 0 hsla(210,16%,76%,.15), -1px 0 0 hsla(210,16%,76%,.15) inset;
 }
 
-#highlighter-nodeinfobar-menu > .toolbarbutton-menu-dropmarker {
+.highlighter-nodeinfobar-menu > .toolbarbutton-menu-dropmarker {
   -moz-appearance: none !important;
   list-style-image: url("chrome://browser/skin/devtools/dropmarker.png");
   -moz-box-align: center;
   -moz-margin-start: -1px;
 }
 
 /* Highlighter - Node Infobar - box & arrow */
 
@@ -3519,38 +3492,38 @@ html|*#highlighter-nodeinfobar-pseudo-cl
   height: 14px;
   -moz-margin-start: calc(50% - 7px);
   transform: rotate(-45deg);
   border: 1px solid transparent;
   background-clip: padding-box;
   background-repeat: no-repeat;
 }
 
-#highlighter-nodeinfobar-arrow-top {
+.highlighter-nodeinfobar-arrow-top {
   margin-bottom: -8px;
   margin-top: 8px;
   border-right-color: hsla(210, 19%, 63%, .5);
   border-top-color: hsla(210, 19%, 63%, .5);
   background-image: -moz-linear-gradient(bottom left, transparent 50%, hsl(209, 18%, 30%) 50%);
 }
 
-#highlighter-nodeinfobar-arrow-bottom {
+.highlighter-nodeinfobar-arrow-bottom {
   margin-top: -8px;
   margin-bottom: 8px;
   border-left-color: hsla(210, 19%, 63%, .5);
   border-bottom-color: hsla(210, 19%, 63%, .5);
   background-image: -moz-linear-gradient(top right, transparent 50%, hsl(210, 24%, 16%) 50%);
 }
 
-#highlighter-nodeinfobar-container[position="top"] > #highlighter-nodeinfobar,
-#highlighter-nodeinfobar-container[position="overlap"] > #highlighter-nodeinfobar {
+.highlighter-nodeinfobar-container[position="top"] > .highlighter-nodeinfobar,
+.highlighter-nodeinfobar-container[position="overlap"] > .highlighter-nodeinfobar {
   box-shadow: 0 1px 0 hsla(0, 0%, 100%, .1) inset;
 }
 
-#highlighter-nodeinfobar-container[hide-arrow] > #highlighter-nodeinfobar {
+.highlighter-nodeinfobar-container[hide-arrow] > .highlighter-nodeinfobar {
   margin: 7px 0;
 }
 
 #full-screen-warning-message {
   background-color: hsl(0,0%,15%);
   color: white;
   border-radius: 8px;
   margin-top: 30px;
@@ -3570,266 +3543,16 @@ html|*#highlighter-nodeinfobar-pseudo-cl
   font-size: 300%;
 }
 
 .full-screen-approval-button,
 #full-screen-remember-decision {
   font-size: 120%;
 }
 
-/* Highlighter toolbar - breadcrumbs */
-
-#inspector-breadcrumbs {
-  -moz-margin-end: 3px;
-  /* A fake 1px-shadow is included in the border-images of the
-     inspector-breadcrumbs-buttons, to match toolbar-buttons style.
-     This negative margin compensate the extra row of pixels created
-     by the shadow.*/
-  margin-bottom: -1px;
-}
-
-#inspector-breadcrumbs > .scrollbutton-up,
-#inspector-breadcrumbs > .scrollbutton-down {
-  -moz-appearance: none;
-  border: 1px solid hsla(210,8%,5%,.45);
-  background: -moz-linear-gradient(hsla(212,7%,57%,.35), hsla(212,7%,57%,.1)) padding-box;
-  box-shadow: 0 1px 0 hsla(210,16%,76%,.15) inset, 0 0 0 1px hsla(210,16%,76%,.15) inset, 0 1px 0 hsla(210,16%,76%,.15);
-  margin: 0 0 1px;
-}
-
-#inspector-breadcrumbs > .scrollbutton-up {
-  -moz-border-start-width: 0;
-}
-
-#inspector-breadcrumbs > .scrollbutton-up:not([disabled]):active:hover,
-#inspector-breadcrumbs > .scrollbutton-down:not([disabled]):active:hover {
-  border-color: hsla(210,8%,5%,.6);
-  background: -moz-linear-gradient(hsla(220,6%,10%,.3), hsla(212,7%,57%,.15) 65%, hsla(212,7%,57%,.3));
-  box-shadow: 0 0 3px hsla(210,8%,5%,.25) inset, 0 1px 3px hsla(210,8%,5%,.25) inset, 0 1px 0 hsla(210,16%,76%,.15);
-}
-
-#inspector-breadcrumbs > .scrollbutton-up > .toolbarbutton-icon,
-#inspector-breadcrumbs > .scrollbutton-down > .toolbarbutton-icon {
-  -moz-appearance: none;
-  list-style-image: url("chrome://browser/skin/devtools/breadcrumbs-scrollbutton.png");
-  -moz-image-region: rect(0px 7px 16px 0px);
-  margin: 0 5px;
-}
-
-#inspector-breadcrumbs > .scrollbutton-up[disabled] > .toolbarbutton-icon,
-#inspector-breadcrumbs > .scrollbutton-down[disabled] > .toolbarbutton-icon {
-  opacity: 0.5;
-}
-
-#inspector-breadcrumbs > .scrollbutton-up:not([disabled]):active:hover > .toolbarbutton-icon,
-#inspector-breadcrumbs > .scrollbutton-down:not([disabled]):active:hover > .toolbarbutton-icon {
-  -moz-image-region: rect(0px 14px 16px 7px);
-}
-
-#inspector-breadcrumbs > .scrollbutton-up > .toolbarbutton-icon:-moz-locale-dir(rtl),
-#inspector-breadcrumbs > .scrollbutton-down > .toolbarbutton-icon:-moz-locale-dir(ltr) {
-  transform: scaleX(-1);
-}
-
-.inspector-breadcrumbs-button {
-  -moz-appearance: none;
-  border-style: solid;
-  border-width: 1px 13px 2px 13px;
-  color: hsl(210,30%,85%);
-  width: 85px; /* Can't use max-width. See bug 723132 */
-  /* The content of the button can be larger than the button */
-  overflow: hidden;
-  min-height: 25px;
-
-  margin: 0 -11px 0 0;
-  padding: 0 9px;
-}
-
-.inspector-breadcrumbs-button:-moz-focusring > label {
-  border-bottom: 1px dotted hsla(210,30%,85%,0.4);
-}
-
-.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-tag {
-  color: hsl(208,100%,60%);
-}
-
-.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-id {
-  color: hsl(205,100%,70%);
-}
-
-.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-pseudo-classes {
-  color: hsl(20, 100%, 70%);
-}
-
-.inspector-breadcrumbs-id,
-.inspector-breadcrumbs-classes {
-  color: #8d99a6;
-}
-
-.inspector-breadcrumbs-pseudo-classes {
-  color: hsl(20, 100%, 85%);
-}
-
-/* Highlighter toolbar - breadcrumbs - LTR */
-
-.inspector-breadcrumbs-button:-moz-locale-dir(ltr):first-of-type {
-  border-left-width: 0;
-}
-
-.inspector-breadcrumbs-button {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:not([checked]),
-.inspector-breadcrumbs-button:not([checked]):hover:active {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[checked] {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-selected.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[checked][siblings-menu-open],
-.inspector-breadcrumbs-button[checked]:hover:active {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-selected-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:first-of-type:not([checked]),
-.inspector-breadcrumbs-button:first-of-type:not([checked]):hover:active {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type[checked] {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-selected.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:first-of-type[checked],
-.inspector-breadcrumbs-button:first-of-type[checked]:hover:active {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-selected-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end.png") 1 13 2 13 fill stretch;
-}
-
-#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:-moz-locale-dir(ltr):last-of-type {
-  border-right-width: 0;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:last-of-type:not([checked]),
-.inspector-breadcrumbs-button:last-of-type:not([checked]):hover:active {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type[checked] {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-selected.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:last-of-type[checked],
-.inspector-breadcrumbs-button:last-of-type[checked]:hover:active {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-selected-pressed.png") 1 13 2 13 fill stretch;
-}
-
-/* Highlighter toolbar - breadcrumbs - RTL */
-
-.inspector-breadcrumbs-button:-moz-locale-dir(rtl):first-of-type {
-  border-right-width: 0;
-}
-
-.inspector-breadcrumbs-button:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:not([checked]):-moz-locale-dir(rtl),
-.inspector-breadcrumbs-button:not([checked]):hover:active:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[checked]:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-selected.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[checked][siblings-menu-open]:-moz-locale-dir(rtl),
-.inspector-breadcrumbs-button[checked]:hover:active:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-selected-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:first-of-type:not([checked]):-moz-locale-dir(rtl),
-.inspector-breadcrumbs-button:first-of-type:not([checked]):hover:active:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type[checked]:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-selected.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:first-of-type[checked]:-moz-locale-dir(rtl),
-.inspector-breadcrumbs-button:first-of-type[checked]:hover:active:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-selected-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end.png") 1 13 2 13 fill stretch;
-}
-
-#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:last-of-type:-moz-locale-dir(rtl) {
-  border-left-width: 0;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:last-of-type:not([checked]):-moz-locale-dir(rtl),
-.inspector-breadcrumbs-button:last-of-type:not([checked]):hover:active:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-pressed.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type[checked]:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-selected.png") 1 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:last-of-type[checked]:-moz-locale-dir(rtl),
-.inspector-breadcrumbs-button:last-of-type[checked]:hover:active:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-selected-pressed.png") 1 13 2 13 fill stretch;
-}
-
-/* Highlighter toolbar - HTML Tree */
-
-#inspector-treepanel-toolbutton {
-  list-style-image: url("chrome://browser/skin/devtools/treepanel-button.png");
-  -moz-margin-end: 0;
-  -moz-image-region: rect(0px 18px 16px 0px);
-}
-
-#inspector-treepanel-toolbutton[checked] {
-  -moz-image-region: rect(0px 36px 16px 18px);
-}
-
-#inspector-breadcrumbs > .scrollbutton-down:-moz-locale-dir(rtl),
-#inspector-treepanel-toolbutton:-moz-locale-dir(ltr) {
-  border-radius: @toolbarbuttonCornerRadius@ 0 0 @toolbarbuttonCornerRadius@;
-}
-
-#inspector-breadcrumbs > .scrollbutton-down:-moz-locale-dir(ltr),
-#inspector-treepanel-toolbutton:-moz-locale-dir(rtl) {
-  border-radius: 0 @toolbarbuttonCornerRadius@ @toolbarbuttonCornerRadius@ 0;
-}
-
-/* Highlight toolbar - Option menu */
-
-#inspector-option-toolbarbutton:-moz-focusring {
-  outline: 1px dotted hsla(210,30%,85%,0.4);
-  outline-offset: -2px;
-}
-
 html|*#gcli-tooltip-frame,
 html|*#gcli-output-frame {
   padding: 0;
   border-width: 0;
   background-color: transparent;
 }
 
 #gcli-output,
@@ -3998,43 +3721,23 @@ html|*#gcli-output-frame {
 }
 
 .developer-toolbar-button[checked=true] {
   color: hsl(208,100%,60%) !important;
   background: rgba(0,0,0,.4);
   text-shadow: 0 0 6px hsl(208,100%,60%);
 }
 
-#developer-toolbar-webconsole {
-  -moz-image-region: rect(0, 16px, 16px, 0);
-}
-
-#developer-toolbar-inspector {
-  -moz-image-region: rect(16px, 16px, 32px, 0);
-}
-
-#developer-toolbar-styleeditor {
-  -moz-image-region: rect(32px, 16px, 48px, 0);
-}
-
-#developer-toolbar-debugger {
-  -moz-image-region: rect(48px, 16px, 64px, 0);
-}
-
-#developer-toolbar-other-tools {
+#developer-toolbar-toolbox-button {
   -moz-image-region: rect(64px, 16px, 80px, 0);
 }
 
-#developer-toolbar-other-tools > .toolbarbutton-menu-dropmarker {
-  display: none;
-}
-
 /* Error counter */
 
-#developer-toolbar-webconsole[error-count]:before {
+#developer-toolbar-toolbox-button[error-count]:before {
   color: #FDF3DE;
   min-width: 16px;
   text-shadow: none;
   background-image: -moz-linear-gradient(top, #B4211B, #8A1915);
   border-radius: 1px;
 }
 
 /* === social toolbar button === */
diff --git a/browser/themes/pinstripe/devtools/command-responsivemode.png b/browser/themes/pinstripe/devtools/command-responsivemode.png
new file mode 100644
index 0000000000000000000000000000000000000000..cbfa599048c1065c7250a5cd74b9684724f3ded3
GIT binary patch
literal 1083
zc$@({1jPG^P)<h;3K|Lk000e1NJLTq002M$000mO1^@s6rssJn000C6Nkl<Zc-qyL
zZAevj9LN9X$h<4O&Glf*%BNah3|g&BTO-FTGBsO4PaCvw=xodCrlOb;F*k=pDYFnW
zn>{UzO0owih;|zVdoglM>cwC%#$YhU7`2<(IQxCw_q6}zaJu(MZ+h|J_xtPTd++so
zJ)EP$j~+kQsO_iXh4I1^PauOVU#LN7^a3-A^a_`}z>Ffl2!DBj8D(s0Nm}ydo%?w`
z1C|$%K~_Ed?*r@^4a|ZIqePKEM~O04@0yv_{;d@_;0<JuwF}q{-Y+ei5I@%Me;ROX
zpIOics%z_$qUGVhC5rq3n!adBj+Tc5mnfsSDl@SEwgr48)#YaH`eHL@T_o9S3e49_
zmYVZdE%OxzKd^md?E)Hryn!LJc4+vYbeVOWwQy|U*gmu1JmBv-nCs;15a=;aA7}DA
z;O|1r-Q)~8^7QQjGF!f}fRSIGx2XN=yMdY`>)&V(-Q&D#&MBA{H!e9*c-hF?ynud0
z0rdcTU;pKdDbv%?b`mDedI7r69h@D(B~J%9eDWKJJx`wn%xb=20i!Uu@Rh0)MK3Jg
zkQtZtRyrom^7F(u58YBg_5l5e0_p(w9cURlCe9HBIDK#iaBpMI&bMJF4xjuAxL?)t
zI6L$7S-`8GUbBEvv@?5ATWC<e<%#lb$7AA*0v7KNDWLm$0W|=7@7eRI@~>xN$HduD
z0DbP@G<lK_YkBO%;gg?%hdg~2u=k1uP{5?JgGDdC_xWVG#f`<pd8B~W>k8<;UO*MV
z{`b&ug}m`JIagxh>?nXfcW?@DZ)U!gvss|$^vO?vdmnTCoPEwbeHJit_XP`}fQ6s*
z|Bw~zD#>lUIEaa}@lO2&J}<=SzFt5OV8^v5`1Q#@JXdh|GQo)vT=H~Q3l5+B2%_Xa
zcK9q{M%_6J7%R5Vjhp>;8m|8*%qyH>Z2T;BUc;Gvs`S81x~~_o4PbX62Oj{t?sEq{
zM7gj^=oZ}kd&DhYAq+Tt7LZZhYXPI6G7Hzfj@$;vy|(jM`|RLx-1jHzzFxpq;8uWq
z3-N*<yY6!bM~QNv<-_j&Ac#Frp9Q4vIB5Z6WlbP=&pD+d1^DFIAjQmCJ4>De65-H~
zDBvR?yAS6m_-vn9aD<HE*%dgNugLc#A$lGTeHM_mwZ{Spn_HL5b)FpY%wN$p)p)ll
z%~-cLLoR_7IP@b5*aBqV77Mn|Ea)OfV?py3xkCnGggy({(rtn4+OMpfy3<bu4*mZN
zxE~%Wl^6Ta3&_|7Jb3u1O=hPTm_Z(Qo|`hi^8zzUp8nEP$~qsUmLImffDE$sHJ%{&
zJ(9ozMx75ogS<Is#dvdW(R_K<&li@)NIo*i{tKm$=he1VCV&6{002ovPDHLkV1ncB
B5lR36

diff --git a/browser/themes/pinstripe/devtools/command-scratchpad.png b/browser/themes/pinstripe/devtools/command-scratchpad.png
new file mode 100644
index 0000000000000000000000000000000000000000..5131ca5cbc6176c96a66f4a56d81fed95c4c9327
GIT binary patch
literal 584
zc$@)90=NB%P)<h;3K|Lk000e1NJLTq001xm000mO1^@s6P_F#30006HNkl<Zc-qC5
zPfHt76vbV+5d8}7Tofs2(W;=((r?mDX;F!&U_`-w1(zjaD@B7+1ec|v7^+rcocx)n
z7%gc*P=uDEO^iak2VUTLnAf><<KoAhcjuhp+<`Eut5&OZ^$kt`%Y*0dJ)l&%9noq7
z=ijTeJD=BS_X1NY?JlsQ((e3kwdMuNmD}i_t5U@1w+bD#3gE%<%hL5st)xQ7DPO!Q
zS8_)GQs|<+00t9@&FvN`)~wZ3V0ka&x6AdBR#X1suyFEBu3cKq3ycesK&z?1CzJwO
zP5Cq79B4H!FqTSZyEndWKdFH;<}RqfQpVr!v-3D(?t=2C{=v};JC8HwE_i`aAzHS;
z8FLr>8xR($B+hXcl>Z_8WH5KZ3k-u@FY|OgvDx-7;DMJ4%mXj$_lD)+ftT{%L2m!>
zc~~AEczJ;#!)Q4Kc;KZ1AAwn9A%uB&DPJ%gD=F{-gWy{-)$wJ0<8cj~F%N<Yd;q&%
zw#UxnjCl~0KLF`mzR%9%jCl~eKtGT-91(^rBA5q31!fI%4CX;l-Z$hK%!A+s-fZn8
z+dr?awFZHE@Yqm+ndDx&)0M|Pcx))2@pAcIS04A^vEc<?%iA6h1|1B*V?zaE!fXgJ
z8_Ih^It0(=-U9N8e<{OPTHv<}$R~bU=I^w?Z|DDB-y~$7(gHvKnQIi9v>5+`=kEaG
WYW7HKLO22d0000<MNUMnLSTZG<`g>s

diff --git a/browser/themes/pinstripe/devtools/command-tilt.png b/browser/themes/pinstripe/devtools/command-tilt.png
new file mode 100644
index 0000000000000000000000000000000000000000..f816bba59cedb2fb2069b4d0a4ff09225e99cdb7
GIT binary patch
literal 1668
zc$@)*27CF5P)<h;3K|Lk000e1NJLTq002M$000mO1^@s6rssJn000I{Nkl<Zc-qC6
zc~F#f9L9NfQBX_+9WPKhL>7@lZbk!4AxRxGAezZD@!&{M4i(X$6bSLi4nr{%1$IzT
z(FkL7Fbiey)=J}aIhSL(1+|&&`_R75uN{6fP5sdypXuB8d7k&(-^0$kuR8rN{?Hjd
z^0j{hvj2PD>%{%P?Q|k?B!nI@h8PDhV+W1(BCGuY@c+7mC9#;;3^el$Xq*GEyWxZr
zv5`0mG_y0be~{NF77%H~J)oI=plNw=V1dvj3<#sqF>(vrgV%!H(#zy;WZta<m}$2T
z8a(hKGngHqix5VH8?l1e)i>~BOJ`4CU`2JUH^7V?G<e|EWW+;E(v*}yoF(s(uHOFe
zs@l4R05f*b;DJ|@5%cE6dLoZ#diMNfc~4(|^3(c;r2sQ_(BOd=nZW{r5099hROC7P
z(Df9L^s>^q$L<Wcep9Zn-CuIfI_Xjhz>FO<c;H0_Ssl$G66pg*ws&^>|MsN9>+XX`
z&QB_;>{?ZwGJqL7Xz;*`3{yY>?b18Cd&4TKYTn}Ip}_+$GE4y~I$&8>@3Z8pTE$Xc
z9vVFGB7>~3Jay8XBe&E}UzFC(Oewx(^>O}Q*^b<3t2lXxMVx#Mz>FO<c;H0_S+Rh4
zRaZ|$eUs9^sih5HRg0m31`oW*Fa@0J?(09SY;6y1Zf&2-%R_?)USya8+GuyPRn@hJ
z4m_WihXxP4$RH~$-DYXE?<ckFv#SkO2^R{@Vsny=BeOP4jmceZw*5>1z>FO<c;H0_
zS+Rh)o@WE`E$tl%b&butpVl`<H8d&Tp})30z>FQVhUS*g#}(Dy$S?(*?d^Y_PsN<4
zLl!hDThr;k8z}1rFk=Ue?s15&^&T=z0ZRH-C_B3QTG~3gTFG;xMb()|-xe=`89Qin
zk85<TEyy4%ERM38ky@g*-dmz}NV}?b+kZvvl3Jv&NxX2@EJnVAh@<&5cF=5-i)yFD
zX6GV<tXRM{7Ahl-Zn#U)(DVtQ8%EYB>V2}Z<<sclV?Ydtk160Z3zcz(K4?B2_yVA7
z9ieNi`mX2)8Iy-s%r~-78I4p%6CJo2(6!3(d4Bx)rX!PY6brE2Q><o@B^9gflP{}X
zQ~$ztPodIudtRR5s?;?Sw?JoM-dZ2{*aBjB6kaa2)ZA2$c=a;^jVVCRqqMAi_T;H%
zqlU;s7xM}p_a6T0$;m5T6_EJ7nuk&F=R2hC?|VpWeXS*?&c@Pl7Gs3@>+PVi1w`?n
zn@Ksp!BI>BIXrlIXiNb$Ja~C%Vgb{47N~g$UaQ@ulV%!9M^Dx#bO}Msumx=90evW-
zF$J9B0i6S@RdV6yE5!mVw&kmN2!0XPIJ8Gnp^k`{VGG#AgI54FrhpS%_y=IM$2@p>
zXkr28(Rpef&^<o6s6&Wvi6ex71Se>00pUELGYEtQ5d@7XAd?4l27z!Sc4}$A@X*Rj
zh<U^*Q4@SaEzBab)jWhHF)})|lrYc@&oY*6&HczZ{`4bg$POMXzu=M?{l>qod1Vb{
zflf$?S;R`(h0zn)4;it5lIx|j=xH5Bb2@QM3-R^Zi%21k(o;PY8ED|v-TQ8;?%sVg
z-zFYtA--Pw6Bmg)^k$ky8Fy$BSO4*bfeGQp>%P8W8h-qxY4`~>ix8OLY!IGlZWEi6
z=n|KwaEO(^G!4zTW)$@4Mq~#I&^&1LqqoM5uU6F0p`WqUbny^Cx(g9Z^M~}4I0qhh
zkr4|J^JxbU8Pm@lUYqyRK10J|;vjKA*`^ABN6hzY<ui_FnNqnC^rm-(`F8;BeFad-
zo8V#dQWHBpiIu0Z#LmxYq)*5P6IUKMKW#%sr)kKyYG4zYnd!1Mx7~L0NtH?PSJ?)O
zwk(s(UScnic~3?b1pu)KfzXr9vLAix-UD0us{~LP0k`izw8IV>JZz?4gvr0@>-YMT
z%4#oqZH=cg;%WBAPRzf`aPmu*`5V?K8s4QhzHG{$!i?Qec|70<UFrB4qa;%uCrWG<
z*bH+I@*Nwr`%9Cxhbv`a8NW|hu`hX;=W0)h-9njUn&Sj`kwKO%K)Z}##7Kad`!M97
zo#*)ebKW)jBoK>`68cgT`*HLaw#2tW;;_g;Vl&@dI>liuG<e_@bAJM9K6DX`52()o
O0000<MNUMnLSTYCryzI$

diff --git a/browser/themes/pinstripe/devtools/common.css b/browser/themes/pinstripe/devtools/common.css
--- a/browser/themes/pinstripe/devtools/common.css
+++ b/browser/themes/pinstripe/devtools/common.css
@@ -198,16 +198,70 @@
   border: 0;
   -moz-border-start: 1px solid black;
   min-width: 0;
   width: 3px;
   -moz-margin-end: -3px;
   position: relative;
 }
 
+/* In-tools sidebar */
+
+.devtools-sidebar-tabs {
+  -moz-appearance: none;
+  margin: 0;
+}
+
+.devtools-sidebar-tabs > tabpanels {
+  padding: 0;
+}
+
+.devtools-sidebar-tabs > tabs {
+  -moz-appearance: none;
+  position: static;
+  box-shadow: 0 1px 0 0 hsla(210, 16%, 76%, .2) inset;
+  background-image: url(background-noise-toolbar.png), linear-gradient(to bottom, hsl(210,11%,36%), hsl(210,11%,18%));
+  color: hsl(210,30%,85%);
+  margin-bottom: 0;
+  padding: 0;
+}
+
+.devtools-sidebar-tabs > tabs > .tabs-right,
+.devtools-sidebar-tabs > tabs > .tabs-left {
+  display: none;
+}
+
+.devtools-sidebar-tabs > tabs > tab {
+  -moz-appearance: none;
+  padding: 0;
+  min-width: 78px;
+  min-height: 22px;
+  text-shadow: 0 -1px 0 hsla(210,8%,5%,.45);
+  text-align: center;
+  color: inherit;
+  -moz-box-flex: 1;
+  border-width: 0;
+  -moz-border-end-width: 1px;
+  border-color: hsla(210,8%,5%,.6);
+  border-style: solid;
+}
+
+.devtools-sidebar-tabs > tabs > tab:-moz-focusring {
+  position: static;
+}
+
+.devtools-sidebar-tabs > tabs > tab:last-of-type {
+  -moz-border-end-width: 0;
+}
+
+.devtools-sidebar-tabs > tabs > tab[selected=true] {
+  background-image: url(background-noise-toolbar.png), linear-gradient(to bottom, hsl(201,45%,34%), hsl(205,44%,22%));
+  color: white !important;
+}
+
 /* Theme */
 
 .devtools-theme-background {
   background-color: white;
 }
 
 .devtools-theme-comment {
   color: hsl(90,2%,46%); /* grey */
diff --git a/browser/themes/pinstripe/devtools/dock-bottom.png b/browser/themes/pinstripe/devtools/dock-bottom.png
new file mode 100644
index 0000000000000000000000000000000000000000..83842f236ef5ede55a268e67077532fc1764746f
GIT binary patch
literal 487
zc$@*}0T}*?P)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00004b3#c}2nYxW
zd<bNS00009a7bBm000XT000XT0n*)m`~Uy|6?8>dbVG7wVRUJ4ZXi@?ZDjyCFETeT
zF*2O>TrB_q0338hSaefwW^{L9a%BKPWN%_+AVz6&Wp{6KYjYq&Q#R<lvWx%#0YFJa
zK~y-6#gn~C13?spzuCWlN(=#wCY?p<l>U^m#7D5O5DN<nAI8GMLM$wN1jRC8vyGMA
z7J@}2RftI-u(La3lMTzdNrV(0xNz@f&Y64eFhXn1Dlk@J0~UZ&syRSu8qN|<2n>Kh
zIOvAfv{}Bpy}3APx_hQ+E}SZkWA*&<`f+)6eGl{!f$e6~t!l(Liq(<<1g?8r1-8-x
zYak{7r)TG5uj2=R%rNc4gZ=u`<HLqwm=ai@?Enx!1mJc2H?8rLIt9z?_#@yb#hD3^
z+$f+Z1iL`?eFad=PWDUS>oaHojd>f8ks77z^u{G13$|4$*j7bGs-Kr9=kg|q0LGK>
zJ!#C#^DL;Ww?9D5ENB?E+8#=&7+4reskqhl&@coLT5IghS{Xqd*vZ(+Lj?5D1oFGv
d7ytene*n2yf``D{mBs)7002ovPDHLkV1mh##`^#O

diff --git a/browser/themes/pinstripe/devtools/dock-side.png b/browser/themes/pinstripe/devtools/dock-side.png
new file mode 100644
index 0000000000000000000000000000000000000000..9a940bc1e4e50a63d1522fc5604cb2cf44b05e82
GIT binary patch
literal 536
zc$@(k0_XjSP)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00004b3#c}2nYxW
zd<bNS00009a7bBm000XT000XT0n*)m`~Uy|6?8>dbVG7wVRUJ4ZXi@?ZDjyCFETeT
zF*2O>TrB_q0338hSaefwW^{L9a%BKPWN%_+AVz6&Wp{6KYjYq&Q#R<lvWx%#0dYx0
zK~y-6#gn^A13?&tzkg#^qGBXPiUd)DAZTgt4PpYmfM6lMl7fg>Soj`_MNAq&5H*Pw
z3NaSm5~HhonXzzJ)=Nxb;lR(pFz4{i;f!dl`O7l?qz1YG%z?BC4ESSq&?uk@+}IDb
zmoEP>v9Y$YoX=&4Baui)s&b{;oSmCr0WJcAWG<IYYNY9Usv~wLlQDoq*q{gG1z=%u
z$tn~}RlorTFV9bty)knn5I<S=nTP;%gP#E)zJNlpbf7gwz!hNvn0m78lOI4NY(QWD
z+-t3G)ni>p<EdxB>5G}8!KIdEm%}dK3<Q*VtcT0tv@H9mT^?Zr*Wb-(JY_hIs~}Cc
zFJ_K~2#$Xxn3<j&-`U-3MdPVgV8|yp{FOk1tCaE#!(e-BvtLB=AFi&~_$pFL!F!=T
zs(iP)wytd3_FPXrIIedajQ_MxQ`j$}-`j|2t%=6d{XhmG4aC~v2AKfYXev&lb|?S-
a8{Yua!lFpTFEAhg0000<MNUMnLSTZp`P~Wt

diff --git a/browser/themes/pinstripe/devtools/dock-window.png b/browser/themes/pinstripe/devtools/dock-window.png
new file mode 100644
index 0000000000000000000000000000000000000000..29d3b319a99a3c8b2ded8fbd8ae8d70970c792a2
GIT binary patch
literal 806
zc$@(y1KIqEP)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00004b3#c}2nYxW
zd<bNS00009a7bBm000XT000XT0n*)m`~Uy|6?8>dbVG7wVRUJ4ZXi@?ZDjyCFETeT
zF*2O>TrB_q0338hSaefwW^{L9a%BKPWN%_+AVz6&Wp{6KYjYq&Q#R<lvWx%#0)I(F
zK~y-6rBlyKR8bf`_rCk)jc*)B#2=&c!!Zn76qwRNa|(i>c7@u?RTxEB5kmh%P)N(7
zT`i)>qChBuC?O1glu}BRT7)w?m6JZ7^WK|x@7KZt6L)^g?{Ln6^PP_o5q2_c>!Lii
zyS#bd-dMmeN|lt`l7tX4lU@8dJw1~ZTfxg0`;K&Xo;;DNPjID(6VZPrn#PsmdUAYh
zB6F$#%FV3;C3UsYhK6LEy?HzKJCj{p*M;VT{nd~Po|5K)))u{`Wq*Zfnzf=b(G)p<
z_DnjRZjb#~%9_zwGAcA?Umv(JH}vrCYXIw;3_Ji$PoKX!To;X+j^hMGJRVPVcXu66
z)hEnSgTp0QR>3a@gTYw<;{dj%Y#BzN*_Sd1fVh-0l1e4*sSnc&Ev;>zZ{5DLTo%++
zC=~LyAp?LCLKKO}Q$*lWN=PY-wr%I%O^gg{oM$x7lx0~40DT()({(-KoVy?*A(bL2
zRnas}8$hn6y1E{K-O=9G7&1$aMj{cL^NkQS>B_}rt1(<!8q{^Ypok!_(In3=7JUFt
zHkT``ILhnq>kR<t0KfqtZ+k2p3P1pofc4SI8S=bhK`5n|5W-ot)=B`>T<Gmt8XSBa
zud1pPuICkq2<eW4bnbLdaq!7AV`TWHUlC0>qhsUw?BddbV4M?U%x!GkWjq>saY$!;
z?aSA1`kHMU05Kv$G9L3nC5AsaHMKHu?dk-88~_UlSYl;mHGl8^13J~!S!k$_>rx?j
zOoz(>2iWMk0_4cV$KdSTd=9{S0P<fgm=>-rFDnc035UZ`-}m+HPRBWCQb}w1SN@Zm
k|31GNV>|suz9Tk(KRCWA;;1x%9RL6T07*qoM6N<$g8X4xGynhq

diff --git a/browser/themes/pinstripe/devtools/inspector.css b/browser/themes/pinstripe/devtools/inspector.css
new file mode 100644
--- /dev/null
+++ b/browser/themes/pinstripe/devtools/inspector.css
@@ -0,0 +1,229 @@
+%include ../shared.inc
+%filter substitution
+
+#inspector-inspect-toolbutton {
+  list-style-image: url("chrome://browser/skin/devtools/inspect-button.png");
+  -moz-image-region: rect(0px 16px 16px 0px);
+}
+
+#inspector-inspect-toolbutton[checked=true] {
+  -moz-image-region: rect(0px 32px 16px 16px);
+}
+
+#inspector-toolbar {
+  padding-top: 4px;
+  padding-bottom: 4px;
+}
+
+#inspector-toolbar:-moz-locale-dir(ltr) {
+  padding-left: 2px;
+  padding-right: 16px; /* use -moz-padding-end when/if bug 631729 gets fixed */
+}
+
+#inspector-toolbar:-moz-locale-dir(rtl) {
+  padding-left: 4px;
+  padding-right: 18px; /* use -moz-padding-end when/if bug 631729 gets fixed */
+}
+
+#inspector-breadcrumbs {
+  -moz-margin-end: 3px;
+  /* A fake 1px-shadow is included in the border-images of the
+     inspector-breadcrumbs-buttons, to match toolbar-buttons style.
+     This negative margin compensate the extra row of pixels created
+     by the shadow.*/
+  margin-bottom: -1px;
+}
+
+#inspector-breadcrumbs > .scrollbutton-up,
+#inspector-breadcrumbs > .scrollbutton-down {
+  -moz-appearance: none;
+  border: 1px solid hsla(210,8%,5%,.45);
+  background: -moz-linear-gradient(hsla(212,7%,57%,.35), hsla(212,7%,57%,.1)) padding-box;
+  box-shadow: 0 1px 0 hsla(210,16%,76%,.15) inset, 0 0 0 1px hsla(210,16%,76%,.15) inset, 0 1px 0 hsla(210,16%,76%,.15);
+  margin: 0 0 1px;
+}
+
+#inspector-breadcrumbs > .scrollbutton-up:not([disabled]):active:hover,
+#inspector-breadcrumbs > .scrollbutton-down:not([disabled]):active:hover {
+  border-color: hsla(210,8%,5%,.6);
+  background: -moz-linear-gradient(hsla(220,6%,10%,.3), hsla(212,7%,57%,.15) 65%, hsla(212,7%,57%,.3));
+  box-shadow: 0 0 3px hsla(210,8%,5%,.25) inset, 0 1px 3px hsla(210,8%,5%,.25) inset, 0 1px 0 hsla(210,16%,76%,.15);
+}
+
+#inspector-breadcrumbs > .scrollbutton-up > .toolbarbutton-icon,
+#inspector-breadcrumbs > .scrollbutton-down > .toolbarbutton-icon {
+  -moz-appearance: none;
+  list-style-image: url("chrome://browser/skin/devtools/breadcrumbs-scrollbutton.png");
+  -moz-image-region: rect(0px 7px 16px 0px);
+  margin: 0 5px;
+}
+
+#inspector-breadcrumbs > .scrollbutton-up[disabled] > .toolbarbutton-icon,
+#inspector-breadcrumbs > .scrollbutton-down[disabled] > .toolbarbutton-icon {
+  opacity: 0.5;
+}
+
+#inspector-breadcrumbs > .scrollbutton-up:not([disabled]):active:hover > .toolbarbutton-icon,
+#inspector-breadcrumbs > .scrollbutton-down:not([disabled]):active:hover > .toolbarbutton-icon {
+  -moz-image-region: rect(0px 14px 16px 7px);
+}
+
+#inspector-breadcrumbs > .scrollbutton-up > .toolbarbutton-icon:-moz-locale-dir(rtl),
+#inspector-breadcrumbs > .scrollbutton-down > .toolbarbutton-icon:-moz-locale-dir(ltr) {
+  transform: scaleX(-1);
+}
+
+.inspector-breadcrumbs-button {
+  -moz-appearance: none;
+  border-style: solid;
+  border-width: 1px 13px 2px 13px;
+  color: hsl(210,30%,85%);
+  width: 85px; /* Can't use max-width. See bug 723132 */
+  /* The content of the button can be larger than the button */
+  overflow: hidden;
+  min-height: 25px;
+
+  margin: 0 -11px 0 0;
+  padding: 0 9px;
+}
+
+.inspector-breadcrumbs-button:-moz-focusring > label {
+  border-bottom: 1px dotted hsla(210,30%,85%,0.4);
+}
+
+.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-tag {
+  color: hsl(208,100%,60%);
+}
+
+.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-id {
+  color: hsl(205,100%,70%);
+}
+
+.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-pseudo-classes {
+  color: hsl(20, 100%, 70%);
+}
+
+.inspector-breadcrumbs-id,
+.inspector-breadcrumbs-classes {
+  color: #8d99a6;
+}
+
+.inspector-breadcrumbs-pseudo-classes {
+  color: hsl(20, 100%, 85%);
+}
+
+/* Highlighter toolbar - breadcrumbs - LTR */
+
+.inspector-breadcrumbs-button {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:not([checked]):hover:active {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button[checked] {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-selected.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button[checked]:hover:active {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-selected-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:first-of-type {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:first-of-type:not([checked]):hover:active {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:first-of-type[checked] {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-selected.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:first-of-type[checked]:hover:active {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-selected-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:last-of-type {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end.png") 1 13 2 13 fill stretch;
+}
+
+#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:-moz-locale-dir(ltr):first-of-type {
+  border-left-width: 0;
+}
+
+#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:-moz-locale-dir(ltr):last-of-type {
+  border-right-width: 0;
+}
+
+.inspector-breadcrumbs-button:last-of-type:not([checked]):hover:active {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:last-of-type[checked] {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-selected.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:last-of-type[checked]:hover:active {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-selected-pressed.png") 1 13 2 13 fill stretch;
+}
+
+/* Highlighter toolbar - breadcrumbs - RTL */
+
+.inspector-breadcrumbs-button:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:not([checked]):hover:active:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button[checked]:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-selected.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button[checked]:hover:active:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-selected-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:first-of-type:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:first-of-type:not([checked]):hover:active:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:first-of-type[checked]:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-selected.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:first-of-type[checked]:hover:active:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-selected-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:last-of-type:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end.png") 1 13 2 13 fill stretch;
+}
+
+#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:-moz-locale-dir(rtl):first-of-type {
+  border-right-width: 0;
+}
+
+#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:last-of-type:-moz-locale-dir(rtl) {
+  border-left-width: 0;
+}
+
+.inspector-breadcrumbs-button:last-of-type:not([checked]):hover:active:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-pressed.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:last-of-type[checked]:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-selected.png") 1 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:last-of-type[checked]:hover:active:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-selected-pressed.png") 1 13 2 13 fill stretch;
+}
diff --git a/browser/themes/pinstripe/devtools/layout-background.png b/browser/themes/pinstripe/devtools/layout-background.png
deleted file mode 100644
Binary file browser/themes/pinstripe/devtools/layout-background.png has changed
diff --git a/browser/themes/pinstripe/devtools/layout-buttons.png b/browser/themes/pinstripe/devtools/layout-buttons.png
deleted file mode 100644
Binary file browser/themes/pinstripe/devtools/layout-buttons.png has changed
diff --git a/browser/themes/pinstripe/devtools/layoutview.css b/browser/themes/pinstripe/devtools/layoutview.css
--- a/browser/themes/pinstripe/devtools/layoutview.css
+++ b/browser/themes/pinstripe/devtools/layoutview.css
@@ -1,14 +1,14 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 body {
-  background: url(layout-background.png), -moz-radial-gradient(50% 70%, circle cover, hsl(210,53%,45%) 0%, hsl(210,54%,33%) 100%);
+  background: url(layout-background-grid.png), -moz-radial-gradient(50% 70%, circle cover, hsl(210,53%,45%) 0%, hsl(210,54%,33%) 100%);
   color: hsl(210,100%,85%);
   border-top: 1px solid black;
   -moz-box-sizing: border-box;
 }
 
 #element-size {
   color: hsl(210,100%,95%);
 }
@@ -37,22 +37,8 @@ body {
   border-color: hsla(210,100%,85%,0.2);
   border-style: solid;
 }
 
 #borders {
   border-style: solid;
   border-color: hsl(210,100%,85%);
 }
-
-#togglebutton {
-  background-image: url(layout-buttons.png);
-  width: 16px;
-  height: 16px;
-}
-
-body.open {
-  background: url(layout-background-grid.png), -moz-radial-gradient(50% 70%, circle cover, hsl(210,53%,45%) 0%, hsl(210,54%,33%) 100%);
-}
-
-body.open > #header > #togglebutton {
-  background-position: -16px 0;
-}
diff --git a/browser/themes/pinstripe/devtools/toolbox.css b/browser/themes/pinstripe/devtools/toolbox.css
new file mode 100644
--- /dev/null
+++ b/browser/themes/pinstripe/devtools/toolbox.css
@@ -0,0 +1,99 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#toolbox-tabs {
+  margin: 0;
+}
+
+#toolbox-dock-bottom {
+  list-style-image: url("chrome://browser/skin/devtools/dock-bottom.png");
+}
+
+#toolbox-dock-side {
+  list-style-image: url("chrome://browser/skin/devtools/dock-side.png");
+}
+
+#toolbox-dock-window {
+  list-style-image: url("chrome://browser/skin/devtools/dock-window.png");
+}
+
+.command-button {
+  margin: 0 10px;
+  width: 16px;
+  height: 32px;
+  background-repeat: no-repeat;
+  background-position: center center;
+}
+
+#command-button-responsive {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-responsivemode.png), 0, 16, 16, 0);
+}
+#command-button-responsive:hover {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-responsivemode.png), 0, 32, 16, 16);
+}
+#command-button-responsive:hover:active {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-responsivemode.png), 0, 48, 16, 32);
+}
+#command-button-responsive.toggled {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-responsivemode.png), 0, 64, 16, 48);
+}
+
+#command-button-tilt {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-tilt.png), 0, 16, 16, 0);
+}
+#command-button-tilt:hover {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-tilt.png), 0, 32, 16, 16);
+}
+
+#command-button-tilt:hover:active {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-tilt.png), 0, 48, 16, 32);
+}
+
+#command-button-tilt.toggled {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-tilt.png), 0, 64, 16, 48);
+}
+
+#command-button-scratchpad {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-scratchpad.png), 0, 16, 16, 0);
+}
+
+#command-button-scratchpad:hover {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-scratchpad.png), 0, 32, 16, 16);
+}
+
+#command-button-scratchpad:hover:active {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-scratchpad.png), 0, 48, 16, 32);
+}
+
+
+/* Tabs */
+
+.devtools-tabbar {
+  -moz-appearance: none;
+  background-image: url(background-noise-toolbar.png), linear-gradient(to bottom, hsl(210,11%,36%), hsl(210,11%,18%));
+  color: hsl(210,30%,85%);
+  padding: 4px 3px 3px;
+  box-shadow: 0 -3px 0 0 rgb(20,20,20) inset, 0 -4px 0 0 rgba(0,0,0,0.8) inset;
+}
+
+.devtools-tab {
+  -moz-appearance: none;
+  min-width: 78px;
+  min-height: 22px;
+  text-shadow: 0 -1px 0 hsla(210,8%,5%,.45);
+  border-radius: @toolbarbuttonCornerRadius@ @toolbarbuttonCornerRadius@ 0 0;
+  color: inherit;
+  border-style: solid;
+  border-color: transparent;
+  border-width: 1px 1px 0;
+  margin: 0 5px;
+  padding: 0 10px 1px;
+}
+
+.devtools-tab[selected=true] {
+  border-color: hsla(210,8%,5%,.6);
+  background-color: rgb(20,20,20);
+  text-shadow: none;
+  color: white;
+}
diff --git a/browser/themes/pinstripe/devtools/treepanel-button.png b/browser/themes/pinstripe/devtools/treepanel-button.png
deleted file mode 100644
Binary file browser/themes/pinstripe/devtools/treepanel-button.png has changed
diff --git a/browser/themes/pinstripe/jar.mn b/browser/themes/pinstripe/jar.mn
--- a/browser/themes/pinstripe/jar.mn
+++ b/browser/themes/pinstripe/jar.mn
@@ -168,16 +168,19 @@ browser.jar:
   skin/classic/browser/tabview/edit-light.png               (tabview/edit-light.png)
   skin/classic/browser/tabview/search.png                   (tabview/search.png)
   skin/classic/browser/tabview/stack-expander.png           (tabview/stack-expander.png)
   skin/classic/browser/tabview/tabview.png                  (tabview/tabview.png)
   skin/classic/browser/tabview/tabview.css                  (tabview/tabview.css)
 * skin/classic/browser/devtools/common.css                  (devtools/common.css)
   skin/classic/browser/devtools/arrows.png                  (devtools/arrows.png)
   skin/classic/browser/devtools/commandline.png             (devtools/commandline.png)
+  skin/classic/browser/devtools/command-responsivemode.png  (devtools/command-responsivemode.png)
+  skin/classic/browser/devtools/command-scratchpad.png      (devtools/command-scratchpad.png)
+  skin/classic/browser/devtools/command-tilt.png            (devtools/command-tilt.png)
   skin/classic/browser/devtools/alerticon-warning.png       (devtools/alerticon-warning.png)
   skin/classic/browser/devtools/goto-mdn.png                (devtools/goto-mdn.png)
   skin/classic/browser/devtools/csshtmltree.css             (devtools/csshtmltree.css)
   skin/classic/browser/devtools/commandline.css                    (devtools/commandline.css)
   skin/classic/browser/devtools/markup-view.css             (devtools/markup-view.css)
   skin/classic/browser/devtools/orion.css                   (devtools/orion.css)
   skin/classic/browser/devtools/orion-container.css         (devtools/orion-container.css)
   skin/classic/browser/devtools/orion-task.png              (devtools/orion-task.png)
@@ -218,33 +221,35 @@ browser.jar:
   skin/classic/browser/devtools/magnifying-glass.png        (devtools/magnifying-glass.png)
   skin/classic/browser/devtools/option-icon.png             (devtools/option-icon.png)
   skin/classic/browser/devtools/itemToggle.png              (devtools/itemToggle.png)
   skin/classic/browser/devtools/itemArrow-rtl.png           (devtools/itemArrow-rtl.png)
   skin/classic/browser/devtools/itemArrow-ltr.png           (devtools/itemArrow-ltr.png)
   skin/classic/browser/devtools/background-noise-toolbar.png (devtools/background-noise-toolbar.png)
   skin/classic/browser/devtools/inspect-button.png          (devtools/inspect-button.png)
   skin/classic/browser/devtools/dropmarker.png              (devtools/dropmarker.png)
-  skin/classic/browser/devtools/treepanel-button.png        (devtools/treepanel-button.png)
-  skin/classic/browser/devtools/layout-background.png       (devtools/layout-background.png)
   skin/classic/browser/devtools/layout-background-grid.png  (devtools/layout-background-grid.png)
   skin/classic/browser/devtools/layoutview.css              (devtools/layoutview.css)
-  skin/classic/browser/devtools/layout-buttons.png          (devtools/layout-buttons.png)
   skin/classic/browser/devtools/debugger-collapse.png       (devtools/debugger-collapse.png)
   skin/classic/browser/devtools/debugger-expand.png         (devtools/debugger-expand.png)
   skin/classic/browser/devtools/debugger-pause.png          (devtools/debugger-pause.png)
   skin/classic/browser/devtools/debugger-play.png           (devtools/debugger-play.png)
   skin/classic/browser/devtools/debugger-step-in.png        (devtools/debugger-step-in.png)
   skin/classic/browser/devtools/debugger-step-out.png       (devtools/debugger-step-out.png)
   skin/classic/browser/devtools/debugger-step-over.png      (devtools/debugger-step-over.png)
   skin/classic/browser/devtools/responsive-se-resizer.png   (devtools/responsive-se-resizer.png)
   skin/classic/browser/devtools/responsive-vertical-resizer.png (devtools/responsive-vertical-resizer.png)
   skin/classic/browser/devtools/responsive-background.png   (devtools/responsive-background.png)
   skin/classic/browser/devtools/tools-icons-small.png       (devtools/tools-icons-small.png)
+  skin/classic/browser/devtools/dock-bottom.png             (devtools/dock-bottom.png)
+  skin/classic/browser/devtools/dock-side.png               (devtools/dock-side.png)
+  skin/classic/browser/devtools/dock-window.png             (devtools/dock-window.png)
   skin/classic/browser/devtools/floating-scrollbars.css     (devtools/floating-scrollbars.css)
+* skin/classic/browser/devtools/inspector.css               (devtools/inspector.css)
+* skin/classic/browser/devtools/toolbox.css                 (devtools/toolbox.css)
 #ifdef MOZ_SERVICES_SYNC
   skin/classic/browser/sync-throbber.png
   skin/classic/browser/sync-16.png
   skin/classic/browser/sync-32.png
   skin/classic/browser/sync-bg.png
   skin/classic/browser/sync-128.png
   skin/classic/browser/sync-desktopIcon.png
   skin/classic/browser/sync-mobileIcon.png
diff --git a/browser/themes/winstripe/browser.css b/browser/themes/winstripe/browser.css
--- a/browser/themes/winstripe/browser.css
+++ b/browser/themes/winstripe/browser.css
@@ -2647,125 +2647,101 @@ toolbarbutton.bookmark-item[dragover="tr
   /* disabled for triggering grayscale AA (bug 659213)
   border-top-left-radius: .3em;
   */
   margin-left: 1em;
 }
 
 /* Highlighter */
 
-#highlighter-outline {
+.highlighter-outline {
   box-shadow: 0 0 0 1px black;
   outline: 1px dashed white;
   outline-offset: -1px;
 }
 
-#highlighter-outline[locked]  {
+.highlighter-outline[locked]  {
   box-shadow: 0 0 0 1px rgba(0,0,0,0.3);
   outline-color: rgba(255,255,255,0.7);
 }
 
-/* Highlighter toolbar */
-
-#inspector-inspect-toolbutton {
-  list-style-image: url("chrome://browser/skin/devtools/inspect-button.png");
-  -moz-image-region: rect(0px 16px 16px 0px);
-}
-
-#inspector-inspect-toolbutton[checked=true] {
-  -moz-image-region: rect(0px 32px 16px 16px);
-}
-
-#inspector-toolbar,
+/* Developer toolbar */
+
 #developer-toolbar {
   border-top: 1px solid hsla(211,68%,6%,.65) !important;
 }
 
-#devtools-side-splitter {
-  border: 0;
-  -moz-border-start: 1px solid #242b33;
-  min-width: 0;
-  width: 3px;
-  background-color: transparent;
-  -moz-margin-end: -3px;
-  position: relative;
-}
-
-#devtools-sidebar-box {
-  background-color: -moz-Field;
-}
-
 /* Highlighter - Node Infobar */
 
-#highlighter-nodeinfobar {
+.highlighter-nodeinfobar {
   color: hsl(200, 100%, 65%);
   border: 1px solid hsla(210, 19%, 63%, .5);
   border-radius: 3px;
   background: -moz-linear-gradient(hsl(209, 18%, 30%), hsl(210, 24%, 16%)) no-repeat padding-box;
 }
 
 /* Highlighter - Node Infobar - text */
 
-#highlighter-nodeinfobar-text {
+.highlighter-nodeinfobar-text {
   /* 100% - size of the buttons and margins */
   max-width: calc(100% - 2 * (26px + 6px));
   padding-bottom: 1px;
 }
 
-html|*#highlighter-nodeinfobar-tagname {
+html|*.highlighter-nodeinfobar-tagname {
   color: white;
 }
 
-html|*#highlighter-nodeinfobar-id {
+html|*.highlighter-nodeinfobar-id {
   color: hsl(90, 79%, 52%);
 }
 
-html|*#highlighter-nodeinfobar-pseudo-classes {
+html|*.highlighter-nodeinfobar-pseudo-classes {
   color: hsl(20, 100%, 70%);
 }
 
 /* Highlighter - Node Infobar - buttons */
 
 .highlighter-nodeinfobar-button {
   -moz-appearance: none;
   border: 0 solid hsla(210,8%,5%,.45);
   padding: 0;
   width: 26px;
   min-height: 26px;
   background-color: transparent;
 }
 
-#highlighter-nodeinfobar-inspectbutton {
+.highlighter-nodeinfobar-inspectbutton {
   -moz-border-end-width: 1px;
   box-shadow: 1px 0 0 hsla(210,16%,76%,.15), -1px 0 0 hsla(210,16%,76%,.15) inset;
   -moz-margin-end: 6px;
   list-style-image: url("chrome://browser/skin/devtools/inspect-button.png");
   -moz-image-region: rect(0px 16px 16px 0px);
 }
 
-#highlighter-nodeinfobar-inspectbutton:-moz-locale-dir(rtl) {
+.highlighter-nodeinfobar-inspectbutton:-moz-locale-dir(rtl) {
   box-shadow: -1px 0 0 hsla(210,16%,76%,.15), 1px 0 0 hsla(210,16%,76%,.15) inset;
 }
 
-#highlighter-nodeinfobar-inspectbutton:active:hover,
-#highlighter-nodeinfobar-container:not([locked]) >  #highlighter-nodeinfobar >  #highlighter-nodeinfobar-inspectbutton {
+.highlighter-nodeinfobar-inspectbutton:active:hover,
+.highlighter-nodeinfobar-container:not([locked]) >  .highlighter-nodeinfobar >  .highlighter-nodeinfobar-inspectbutton {
   -moz-image-region: rect(0px 32px 16px 16px);
 }
 
-#highlighter-nodeinfobar-menu {
+.highlighter-nodeinfobar-menu {
   -moz-border-start-width: 1px;
   box-shadow: -1px 0 0 hsla(210,16%,76%,.15), 1px 0 0 hsla(210,16%,76%,.15) inset;
   -moz-margin-start: 6px;
 }
 
-#highlighter-nodeinfobar-menu:-moz-locale-dir(rtl) {
+.highlighter-nodeinfobar-menu:-moz-locale-dir(rtl) {
   box-shadow: 1px 0 0 hsla(210,16%,76%,.15), -1px 0 0 hsla(210,16%,76%,.15) inset;
 }
 
-#highlighter-nodeinfobar-menu > .toolbarbutton-menu-dropmarker {
+.highlighter-nodeinfobar-menu > .toolbarbutton-menu-dropmarker {
   -moz-appearance: none !important;
   list-style-image: url("chrome://browser/skin/devtools/dropmarker.png");
   -moz-box-align: center;
   -moz-margin-start: -1px;
 }
 
 /* Highlighter - Node Infobar - box & arrow */
 
@@ -2774,38 +2750,38 @@ html|*#highlighter-nodeinfobar-pseudo-cl
   height: 14px;
   -moz-margin-start: calc(50% - 7px);
   transform: rotate(-45deg);
   border: 1px solid transparent;
   background-clip: padding-box;
   background-repeat: no-repeat;
 }
 
-#highlighter-nodeinfobar-arrow-top {
+.highlighter-nodeinfobar-arrow-top {
   margin-bottom: -8px;
   margin-top: 8px;
   border-right-color: hsla(210, 19%, 63%, .5);
   border-top-color: hsla(210, 19%, 63%, .5);
   background-image: -moz-linear-gradient(bottom left, transparent 50%, hsl(209, 18%, 30%) 50%);
 }
 
-#highlighter-nodeinfobar-arrow-bottom {
+.highlighter-nodeinfobar-arrow-bottom {
   margin-top: -8px;
   margin-bottom: 8px;
   border-left-color: hsla(210, 19%, 63%, .5);
   border-bottom-color: hsla(210, 19%, 63%, .5);
   background-image: -moz-linear-gradient(top right, transparent 50%, hsl(210, 24%, 16%) 50%);
 }
 
-#highlighter-nodeinfobar-container[position="top"] > #highlighter-nodeinfobar,
-#highlighter-nodeinfobar-container[position="overlap"] > #highlighter-nodeinfobar {
+.highlighter-nodeinfobar-container[position="top"] > .highlighter-nodeinfobar,
+.highlighter-nodeinfobar-container[position="overlap"] > .highlighter-nodeinfobar {
   box-shadow: 0 1px 0 hsla(0, 0%, 100%, .1) inset;
 }
 
-#highlighter-nodeinfobar-container[hide-arrow] > #highlighter-nodeinfobar {
+.highlighter-nodeinfobar-container[hide-arrow] > .highlighter-nodeinfobar {
   margin: 7px 0;
 }
 
 #full-screen-warning-message {
   background-color: hsl(0,0%,15%);
   color: white;
   border-radius: 8px;
   margin-top: 30px;
@@ -2825,271 +2801,16 @@ html|*#highlighter-nodeinfobar-pseudo-cl
   font-size: 300%;
 }
 
 .full-screen-approval-button,
 #full-screen-remember-decision {
   font-size: 120%;
 }
 
-/* Highlighter toolbar - breadcrumbs */
-
-#inspector-breadcrumbs {
-  -moz-margin-end: 3px;
-  /* A fake 1px-shadow is included in the border-images of the
-     inspector-breadcrumbs-buttons, to match toolbar-buttons style.
-     This negative margin compensate the extra row of pixels created
-     by the shadow.*/
-  margin: -1px 0;
-}
-
-#inspector-breadcrumbs > .scrollbutton-up,
-#inspector-breadcrumbs > .scrollbutton-down {
-  -moz-appearance: none;
-  border: 1px solid hsla(210,8%,5%,.45);
-  background: -moz-linear-gradient(hsla(212,7%,57%,.35), hsla(212,7%,57%,.1)) padding-box;
-  box-shadow: 0 1px 0 hsla(210,16%,76%,.15) inset, 0 0 0 1px hsla(210,16%,76%,.15) inset, 0 1px 0 hsla(210,16%,76%,.15);
-  margin: 1px 0 1px;
-}
-
-#inspector-breadcrumbs > .scrollbutton-up {
-  -moz-border-start-width: 0;
-}
-
-#inspector-breadcrumbs > .scrollbutton-up:not([disabled]):active:hover,
-#inspector-breadcrumbs > .scrollbutton-down:not([disabled]):active:hover {
-  border-color: hsla(210,8%,5%,.6);
-  background: -moz-linear-gradient(hsla(220,6%,10%,.3), hsla(212,7%,57%,.15) 65%, hsla(212,7%,57%,.3));
-  box-shadow: 0 0 3px hsla(210,8%,5%,.25) inset, 0 1px 3px hsla(210,8%,5%,.25) inset, 0 1px 0 hsla(210,16%,76%,.15);
-}
-
-#inspector-breadcrumbs > .scrollbutton-up > .toolbarbutton-icon,
-#inspector-breadcrumbs > .scrollbutton-down > .toolbarbutton-icon {
-  -moz-appearance: none;
-  list-style-image: url("chrome://browser/skin/devtools/breadcrumbs-scrollbutton.png");
-  -moz-image-region: rect(0px 7px 16px 0px);
-  margin: 0 5px;
-}
-
-#inspector-breadcrumbs > .scrollbutton-up[disabled] > .toolbarbutton-icon,
-#inspector-breadcrumbs > .scrollbutton-down[disabled] > .toolbarbutton-icon {
-  opacity: 0.5;
-}
-
-#inspector-breadcrumbs > .scrollbutton-up:not([disabled]):active:hover > .toolbarbutton-icon,
-#inspector-breadcrumbs > .scrollbutton-down:not([disabled]):active:hover > .toolbarbutton-icon {
-  -moz-image-region: rect(0px 14px 16px 7px);
-}
-
-#inspector-breadcrumbs > .scrollbutton-up > .toolbarbutton-icon:-moz-locale-dir(rtl),
-#inspector-breadcrumbs > .scrollbutton-down > .toolbarbutton-icon:-moz-locale-dir(ltr) {
-  transform: scaleX(-1);
-}
-
-.inspector-breadcrumbs-button {
-  -moz-appearance: none;
-  background-color: transparent;
-  border-style: solid;
-  border-width: 2px 13px;
-  outline: none;
-  color: hsl(210,30%,85%);
-  width: 85px; /* Can't use max-width. See bug 723132 */
-  /* The content of the button can be larger than the button */
-  overflow: hidden;
-  min-height: 25px;
-  margin: 0 -11px 0 0;
-  padding: 0 9px;
-}
-
-.inspector-breadcrumbs-button:-moz-focusring > .button-box {
-  border-width: 0;
-}
-
-.inspector-breadcrumbs-button:-moz-focusring > label {
-  border-bottom: 1px dotted hsla(210,30%,85%,0.4);
-}
-
-.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-tag {
-  color: hsl(200,100%,60%);
-}
-
-.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-id {
-  color: hsl(200,100%,70%);
-}
-
-.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-pseudo-classes {
-  color: hsl(20, 100%, 70%);
-}
-
-.inspector-breadcrumbs-id,
-.inspector-breadcrumbs-classes {
-  color: #8d99a6;
-}
-
-.inspector-breadcrumbs-pseudo-classes {
-  color: hsl(20, 100%, 85%);
-}
-
-/* Highlighter toolbar - breadcrumbs - LTR */
-
-.inspector-breadcrumbs-button:-moz-locale-dir(ltr):first-of-type {
-  border-left-width: 0;
-}
-
-.inspector-breadcrumbs-button {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:not([checked]),
-.inspector-breadcrumbs-button:not([checked]):hover:active {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-pressed.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[checked] {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-selected.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[checked][siblings-menu-open],
-.inspector-breadcrumbs-button[checked]:hover:active {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-selected-pressed.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:first-of-type:not([checked]),
-.inspector-breadcrumbs-button:first-of-type:not([checked]):hover:active {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-pressed.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type[checked] {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-selected.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:first-of-type[checked],
-.inspector-breadcrumbs-button:first-of-type[checked]:hover:active {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-selected-pressed.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end.png") 2 13 2 13 fill stretch;
-}
-
-#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:-moz-locale-dir(ltr):last-of-type {
-  border-right-width: 0;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:last-of-type:not([checked]),
-.inspector-breadcrumbs-button:last-of-type:not([checked]):hover:active {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-pressed.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type[checked] {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-selected.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:last-of-type[checked],
-.inspector-breadcrumbs-button:last-of-type[checked]:hover:active {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-selected-pressed.png") 2 13 2 13 fill stretch;
-}
-
-/* Highlighter toolbar - breadcrumbs - RTL */
-
-.inspector-breadcrumbs-button:-moz-locale-dir(rtl):first-of-type {
-  border-right-width: 0;
-}
-
-.inspector-breadcrumbs-button:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:not([checked]):-moz-locale-dir(rtl),
-.inspector-breadcrumbs-button:not([checked]):hover:active:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-pressed.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[checked]:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-selected.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[checked][siblings-menu-open]:-moz-locale-dir(rtl),
-.inspector-breadcrumbs-button[checked]:hover:active:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-selected-pressed.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:first-of-type:not([checked]):-moz-locale-dir(rtl),
-.inspector-breadcrumbs-button:first-of-type:not([checked]):hover:active:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-pressed.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:first-of-type[checked]:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-selected.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:first-of-type[checked]:-moz-locale-dir(rtl),
-.inspector-breadcrumbs-button:first-of-type[checked]:hover:active:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-selected-pressed.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end.png") 2 13 2 13 fill stretch;
-}
-
-#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:last-of-type:-moz-locale-dir(rtl) {
-  border-left-width: 0;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:last-of-type:not([checked]):-moz-locale-dir(rtl),
-.inspector-breadcrumbs-button:last-of-type:not([checked]):hover:active:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-pressed.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button:last-of-type[checked]:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-selected.png") 2 13 2 13 fill stretch;
-}
-
-.inspector-breadcrumbs-button[siblings-menu-open]:last-of-type[checked]:-moz-locale-dir(rtl),
-.inspector-breadcrumbs-button:last-of-type[checked]:hover:active:-moz-locale-dir(rtl) {
-  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-selected-pressed.png") 2 13 2 13 fill stretch;
-}
-
-/* Highlighter toolbar - HTML Tree */
-
-#inspector-treepanel-toolbutton {
-  list-style-image: url("chrome://browser/skin/devtools/treepanel-button.png");
-  -moz-margin-end: 0;
-  -moz-image-region: rect(0px 18px 16px 0px);
-}
-
-#inspector-treepanel-toolbutton[checked] {
-  -moz-image-region: rect(0px 36px 16px 18px);
-}
-
-#inspector-breadcrumbs > .scrollbutton-down:-moz-locale-dir(rtl),
-#inspector-treepanel-toolbutton:-moz-locale-dir(ltr) {
-  border-radius: 3px 0 0 3px;
-}
-
-#inspector-breadcrumbs > .scrollbutton-down:-moz-locale-dir(ltr),
-#inspector-treepanel-toolbutton:-moz-locale-dir(rtl) {
-  border-radius: 0 3px 3px 0;
-}
-
-/* Highlight toolbar - Option menu */
-
-#inspector-option-toolbarbutton:-moz-focusring {
-  outline: 1px dotted hsla(210,30%,85%,0.4);
-  outline-offset: -2px;
-}
-
 html|*#gcli-tooltip-frame,
 html|*#gcli-output-frame {
   padding: 0;
   border-width: 0;
   background-color: transparent;
 }
 
 #gcli-output,
@@ -3263,43 +2984,23 @@ html|*#gcli-output-frame {
   color: hsl(208,100%,60%) !important;
   text-shadow: 0 0 6px hsl(208,100%,60%);
 }
 
 .developer-toolbar-button[checked=true] {
   background: rgba(0,0,0,.4);
 }
 
-#developer-toolbar-webconsole {
-  -moz-image-region: rect(0, 16px, 16px, 0);
-}
-
-#developer-toolbar-inspector {
-  -moz-image-region: rect(16px, 16px, 32px, 0);
-}
-
-#developer-toolbar-styleeditor {
-  -moz-image-region: rect(32px, 16px, 48px, 0);
-}
-
-#developer-toolbar-debugger {
-  -moz-image-region: rect(48px, 16px, 64px, 0);
-}
-
-#developer-toolbar-other-tools {
+#developer-toolbar-toolbox-button {
   -moz-image-region: rect(64px, 16px, 80px, 0);
 }
 
-#developer-toolbar-other-tools > .toolbarbutton-menu-dropmarker {
-  display: none;
-}
-
 /* Error counter */
 
-#developer-toolbar-webconsole[error-count]:before {
+#developer-toolbar-toolbox-button[error-count]:before {
   color: #FDF3DE;
   min-width: 16px;
   text-shadow: none;
   background-image: -moz-linear-gradient(top, #B4211B, #8A1915);
   border-radius: 1px;
   -moz-margin-end: 5px;
 }
 
diff --git a/browser/themes/winstripe/devtools/command-responsivemode.png b/browser/themes/winstripe/devtools/command-responsivemode.png
new file mode 100644
index 0000000000000000000000000000000000000000..cbfa599048c1065c7250a5cd74b9684724f3ded3
GIT binary patch
literal 1083
zc$@({1jPG^P)<h;3K|Lk000e1NJLTq002M$000mO1^@s6rssJn000C6Nkl<Zc-qyL
zZAevj9LN9X$h<4O&Glf*%BNah3|g&BTO-FTGBsO4PaCvw=xodCrlOb;F*k=pDYFnW
zn>{UzO0owih;|zVdoglM>cwC%#$YhU7`2<(IQxCw_q6}zaJu(MZ+h|J_xtPTd++so
zJ)EP$j~+kQsO_iXh4I1^PauOVU#LN7^a3-A^a_`}z>Ffl2!DBj8D(s0Nm}ydo%?w`
z1C|$%K~_Ed?*r@^4a|ZIqePKEM~O04@0yv_{;d@_;0<JuwF}q{-Y+ei5I@%Me;ROX
zpIOics%z_$qUGVhC5rq3n!adBj+Tc5mnfsSDl@SEwgr48)#YaH`eHL@T_o9S3e49_
zmYVZdE%OxzKd^md?E)Hryn!LJc4+vYbeVOWwQy|U*gmu1JmBv-nCs;15a=;aA7}DA
z;O|1r-Q)~8^7QQjGF!f}fRSIGx2XN=yMdY`>)&V(-Q&D#&MBA{H!e9*c-hF?ynud0
z0rdcTU;pKdDbv%?b`mDedI7r69h@D(B~J%9eDWKJJx`wn%xb=20i!Uu@Rh0)MK3Jg
zkQtZtRyrom^7F(u58YBg_5l5e0_p(w9cURlCe9HBIDK#iaBpMI&bMJF4xjuAxL?)t
zI6L$7S-`8GUbBEvv@?5ATWC<e<%#lb$7AA*0v7KNDWLm$0W|=7@7eRI@~>xN$HduD
z0DbP@G<lK_YkBO%;gg?%hdg~2u=k1uP{5?JgGDdC_xWVG#f`<pd8B~W>k8<;UO*MV
z{`b&ug}m`JIagxh>?nXfcW?@DZ)U!gvss|$^vO?vdmnTCoPEwbeHJit_XP`}fQ6s*
z|Bw~zD#>lUIEaa}@lO2&J}<=SzFt5OV8^v5`1Q#@JXdh|GQo)vT=H~Q3l5+B2%_Xa
zcK9q{M%_6J7%R5Vjhp>;8m|8*%qyH>Z2T;BUc;Gvs`S81x~~_o4PbX62Oj{t?sEq{
zM7gj^=oZ}kd&DhYAq+Tt7LZZhYXPI6G7Hzfj@$;vy|(jM`|RLx-1jHzzFxpq;8uWq
z3-N*<yY6!bM~QNv<-_j&Ac#Frp9Q4vIB5Z6WlbP=&pD+d1^DFIAjQmCJ4>De65-H~
zDBvR?yAS6m_-vn9aD<HE*%dgNugLc#A$lGTeHM_mwZ{Spn_HL5b)FpY%wN$p)p)ll
z%~-cLLoR_7IP@b5*aBqV77Mn|Ea)OfV?py3xkCnGggy({(rtn4+OMpfy3<bu4*mZN
zxE~%Wl^6Ta3&_|7Jb3u1O=hPTm_Z(Qo|`hi^8zzUp8nEP$~qsUmLImffDE$sHJ%{&
zJ(9ozMx75ogS<Is#dvdW(R_K<&li@)NIo*i{tKm$=he1VCV&6{002ovPDHLkV1ncB
B5lR36

diff --git a/browser/themes/winstripe/devtools/command-scratchpad.png b/browser/themes/winstripe/devtools/command-scratchpad.png
new file mode 100644
index 0000000000000000000000000000000000000000..5131ca5cbc6176c96a66f4a56d81fed95c4c9327
GIT binary patch
literal 584
zc$@)90=NB%P)<h;3K|Lk000e1NJLTq001xm000mO1^@s6P_F#30006HNkl<Zc-qC5
zPfHt76vbV+5d8}7Tofs2(W;=((r?mDX;F!&U_`-w1(zjaD@B7+1ec|v7^+rcocx)n
z7%gc*P=uDEO^iak2VUTLnAf><<KoAhcjuhp+<`Eut5&OZ^$kt`%Y*0dJ)l&%9noq7
z=ijTeJD=BS_X1NY?JlsQ((e3kwdMuNmD}i_t5U@1w+bD#3gE%<%hL5st)xQ7DPO!Q
zS8_)GQs|<+00t9@&FvN`)~wZ3V0ka&x6AdBR#X1suyFEBu3cKq3ycesK&z?1CzJwO
zP5Cq79B4H!FqTSZyEndWKdFH;<}RqfQpVr!v-3D(?t=2C{=v};JC8HwE_i`aAzHS;
z8FLr>8xR($B+hXcl>Z_8WH5KZ3k-u@FY|OgvDx-7;DMJ4%mXj$_lD)+ftT{%L2m!>
zc~~AEczJ;#!)Q4Kc;KZ1AAwn9A%uB&DPJ%gD=F{-gWy{-)$wJ0<8cj~F%N<Yd;q&%
zw#UxnjCl~0KLF`mzR%9%jCl~eKtGT-91(^rBA5q31!fI%4CX;l-Z$hK%!A+s-fZn8
z+dr?awFZHE@Yqm+ndDx&)0M|Pcx))2@pAcIS04A^vEc<?%iA6h1|1B*V?zaE!fXgJ
z8_Ih^It0(=-U9N8e<{OPTHv<}$R~bU=I^w?Z|DDB-y~$7(gHvKnQIi9v>5+`=kEaG
WYW7HKLO22d0000<MNUMnLSTZG<`g>s

diff --git a/browser/themes/winstripe/devtools/command-tilt.png b/browser/themes/winstripe/devtools/command-tilt.png
new file mode 100644
index 0000000000000000000000000000000000000000..f816bba59cedb2fb2069b4d0a4ff09225e99cdb7
GIT binary patch
literal 1668
zc$@)*27CF5P)<h;3K|Lk000e1NJLTq002M$000mO1^@s6rssJn000I{Nkl<Zc-qC6
zc~F#f9L9NfQBX_+9WPKhL>7@lZbk!4AxRxGAezZD@!&{M4i(X$6bSLi4nr{%1$IzT
z(FkL7Fbiey)=J}aIhSL(1+|&&`_R75uN{6fP5sdypXuB8d7k&(-^0$kuR8rN{?Hjd
z^0j{hvj2PD>%{%P?Q|k?B!nI@h8PDhV+W1(BCGuY@c+7mC9#;;3^el$Xq*GEyWxZr
zv5`0mG_y0be~{NF77%H~J)oI=plNw=V1dvj3<#sqF>(vrgV%!H(#zy;WZta<m}$2T
z8a(hKGngHqix5VH8?l1e)i>~BOJ`4CU`2JUH^7V?G<e|EWW+;E(v*}yoF(s(uHOFe
zs@l4R05f*b;DJ|@5%cE6dLoZ#diMNfc~4(|^3(c;r2sQ_(BOd=nZW{r5099hROC7P
z(Df9L^s>^q$L<Wcep9Zn-CuIfI_Xjhz>FO<c;H0_Ssl$G66pg*ws&^>|MsN9>+XX`
z&QB_;>{?ZwGJqL7Xz;*`3{yY>?b18Cd&4TKYTn}Ip}_+$GE4y~I$&8>@3Z8pTE$Xc
z9vVFGB7>~3Jay8XBe&E}UzFC(Oewx(^>O}Q*^b<3t2lXxMVx#Mz>FO<c;H0_S+Rh4
zRaZ|$eUs9^sih5HRg0m31`oW*Fa@0J?(09SY;6y1Zf&2-%R_?)USya8+GuyPRn@hJ
z4m_WihXxP4$RH~$-DYXE?<ckFv#SkO2^R{@Vsny=BeOP4jmceZw*5>1z>FO<c;H0_
zS+Rh)o@WE`E$tl%b&butpVl`<H8d&Tp})30z>FQVhUS*g#}(Dy$S?(*?d^Y_PsN<4
zLl!hDThr;k8z}1rFk=Ue?s15&^&T=z0ZRH-C_B3QTG~3gTFG;xMb()|-xe=`89Qin
zk85<TEyy4%ERM38ky@g*-dmz}NV}?b+kZvvl3Jv&NxX2@EJnVAh@<&5cF=5-i)yFD
zX6GV<tXRM{7Ahl-Zn#U)(DVtQ8%EYB>V2}Z<<sclV?Ydtk160Z3zcz(K4?B2_yVA7
z9ieNi`mX2)8Iy-s%r~-78I4p%6CJo2(6!3(d4Bx)rX!PY6brE2Q><o@B^9gflP{}X
zQ~$ztPodIudtRR5s?;?Sw?JoM-dZ2{*aBjB6kaa2)ZA2$c=a;^jVVCRqqMAi_T;H%
zqlU;s7xM}p_a6T0$;m5T6_EJ7nuk&F=R2hC?|VpWeXS*?&c@Pl7Gs3@>+PVi1w`?n
zn@Ksp!BI>BIXrlIXiNb$Ja~C%Vgb{47N~g$UaQ@ulV%!9M^Dx#bO}Msumx=90evW-
zF$J9B0i6S@RdV6yE5!mVw&kmN2!0XPIJ8Gnp^k`{VGG#AgI54FrhpS%_y=IM$2@p>
zXkr28(Rpef&^<o6s6&Wvi6ex71Se>00pUELGYEtQ5d@7XAd?4l27z!Sc4}$A@X*Rj
zh<U^*Q4@SaEzBab)jWhHF)})|lrYc@&oY*6&HczZ{`4bg$POMXzu=M?{l>qod1Vb{
zflf$?S;R`(h0zn)4;it5lIx|j=xH5Bb2@QM3-R^Zi%21k(o;PY8ED|v-TQ8;?%sVg
z-zFYtA--Pw6Bmg)^k$ky8Fy$BSO4*bfeGQp>%P8W8h-qxY4`~>ix8OLY!IGlZWEi6
z=n|KwaEO(^G!4zTW)$@4Mq~#I&^&1LqqoM5uU6F0p`WqUbny^Cx(g9Z^M~}4I0qhh
zkr4|J^JxbU8Pm@lUYqyRK10J|;vjKA*`^ABN6hzY<ui_FnNqnC^rm-(`F8;BeFad-
zo8V#dQWHBpiIu0Z#LmxYq)*5P6IUKMKW#%sr)kKyYG4zYnd!1Mx7~L0NtH?PSJ?)O
zwk(s(UScnic~3?b1pu)KfzXr9vLAix-UD0us{~LP0k`izw8IV>JZz?4gvr0@>-YMT
z%4#oqZH=cg;%WBAPRzf`aPmu*`5V?K8s4QhzHG{$!i?Qec|70<UFrB4qa;%uCrWG<
z*bH+I@*Nwr`%9Cxhbv`a8NW|hu`hX;=W0)h-9njUn&Sj`kwKO%K)Z}##7Kad`!M97
zo#*)ebKW)jBoK>`68cgT`*HLaw#2tW;;_g;Vl&@dI>liuG<e_@bAJM9K6DX`52()o
O0000<MNUMnLSTYCryzI$

diff --git a/browser/themes/winstripe/devtools/common.css b/browser/themes/winstripe/devtools/common.css
--- a/browser/themes/winstripe/devtools/common.css
+++ b/browser/themes/winstripe/devtools/common.css
@@ -204,16 +204,75 @@
   -moz-border-start: 1px solid #242b33;
   min-width: 0;
   width: 3px;
   background-color: transparent;
   -moz-margin-end: -3px;
   position: relative;
 }
 
+/* In-tools sidebar */
+
+.devtools-sidebar-tabs {
+  -moz-appearance: none;
+  margin: 0;
+}
+
+.devtools-sidebar-tabs > tabpanels {
+  -moz-appearance: none;
+  padding: 0;
+  border: 0;
+}
+
+.devtools-sidebar-tabs > tabs {
+  -moz-appearance: none;
+  position: static;
+  box-shadow: 0 1px 0 0 hsla(210, 16%, 76%, .2) inset;
+  background-image: linear-gradient(to bottom, hsl(210,11%,36%), hsl(210,11%,18%));
+  color: hsl(210,30%,85%);
+  margin-bottom: 0;
+  padding: 0;
+}
+
+.devtools-sidebar-tabs > tabs > .tabs-right,
+.devtools-sidebar-tabs > tabs > .tabs-left {
+  display: none;
+}
+
+.devtools-sidebar-tabs > tabs > tab {
+  -moz-appearance: none;
+  padding: 0;
+  margin: 0;
+  min-width: 78px;
+  min-height: 22px;
+  text-shadow: 0 -1px 0 hsla(210,8%,5%,.45);
+  text-align: center;
+  color: inherit;
+  -moz-box-flex: 1;
+  border-width: 0;
+  -moz-border-end-width: 1px;
+  border-color: hsla(210,8%,5%,.6);
+  border-style: solid;
+  background: transparent;
+  border-radius: 0;
+}
+
+.devtools-sidebar-tabs > tabs > tab:-moz-focusring {
+  position: static;
+}
+
+.devtools-sidebar-tabs > tabs > tab:last-of-type {
+  -moz-border-end-width: 0;
+}
+
+.devtools-sidebar-tabs > tabs > tab[selected=true] {
+  background-image: linear-gradient(to bottom, hsl(201,45%,34%), hsl(205,44%,22%));
+  color: white !important;
+}
+
 /* Theme */
 
 .devtools-theme-background {
   background-color: white;
 }
 
 .devtools-theme-comment {
   color: hsl(90,2%,46%); /* grey */
diff --git a/browser/themes/winstripe/devtools/dock-bottom.png b/browser/themes/winstripe/devtools/dock-bottom.png
new file mode 100644
index 0000000000000000000000000000000000000000..83842f236ef5ede55a268e67077532fc1764746f
GIT binary patch
literal 487
zc$@*}0T}*?P)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00004b3#c}2nYxW
zd<bNS00009a7bBm000XT000XT0n*)m`~Uy|6?8>dbVG7wVRUJ4ZXi@?ZDjyCFETeT
zF*2O>TrB_q0338hSaefwW^{L9a%BKPWN%_+AVz6&Wp{6KYjYq&Q#R<lvWx%#0YFJa
zK~y-6#gn~C13?spzuCWlN(=#wCY?p<l>U^m#7D5O5DN<nAI8GMLM$wN1jRC8vyGMA
z7J@}2RftI-u(La3lMTzdNrV(0xNz@f&Y64eFhXn1Dlk@J0~UZ&syRSu8qN|<2n>Kh
zIOvAfv{}Bpy}3APx_hQ+E}SZkWA*&<`f+)6eGl{!f$e6~t!l(Liq(<<1g?8r1-8-x
zYak{7r)TG5uj2=R%rNc4gZ=u`<HLqwm=ai@?Enx!1mJc2H?8rLIt9z?_#@yb#hD3^
z+$f+Z1iL`?eFad=PWDUS>oaHojd>f8ks77z^u{G13$|4$*j7bGs-Kr9=kg|q0LGK>
zJ!#C#^DL;Ww?9D5ENB?E+8#=&7+4reskqhl&@coLT5IghS{Xqd*vZ(+Lj?5D1oFGv
d7ytene*n2yf``D{mBs)7002ovPDHLkV1mh##`^#O

diff --git a/browser/themes/winstripe/devtools/dock-side.png b/browser/themes/winstripe/devtools/dock-side.png
new file mode 100644
index 0000000000000000000000000000000000000000..9a940bc1e4e50a63d1522fc5604cb2cf44b05e82
GIT binary patch
literal 536
zc$@(k0_XjSP)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00004b3#c}2nYxW
zd<bNS00009a7bBm000XT000XT0n*)m`~Uy|6?8>dbVG7wVRUJ4ZXi@?ZDjyCFETeT
zF*2O>TrB_q0338hSaefwW^{L9a%BKPWN%_+AVz6&Wp{6KYjYq&Q#R<lvWx%#0dYx0
zK~y-6#gn^A13?&tzkg#^qGBXPiUd)DAZTgt4PpYmfM6lMl7fg>Soj`_MNAq&5H*Pw
z3NaSm5~HhonXzzJ)=Nxb;lR(pFz4{i;f!dl`O7l?qz1YG%z?BC4ESSq&?uk@+}IDb
zmoEP>v9Y$YoX=&4Baui)s&b{;oSmCr0WJcAWG<IYYNY9Usv~wLlQDoq*q{gG1z=%u
z$tn~}RlorTFV9bty)knn5I<S=nTP;%gP#E)zJNlpbf7gwz!hNvn0m78lOI4NY(QWD
z+-t3G)ni>p<EdxB>5G}8!KIdEm%}dK3<Q*VtcT0tv@H9mT^?Zr*Wb-(JY_hIs~}Cc
zFJ_K~2#$Xxn3<j&-`U-3MdPVgV8|yp{FOk1tCaE#!(e-BvtLB=AFi&~_$pFL!F!=T
zs(iP)wytd3_FPXrIIedajQ_MxQ`j$}-`j|2t%=6d{XhmG4aC~v2AKfYXev&lb|?S-
a8{Yua!lFpTFEAhg0000<MNUMnLSTZp`P~Wt

diff --git a/browser/themes/winstripe/devtools/dock-window.png b/browser/themes/winstripe/devtools/dock-window.png
new file mode 100644
index 0000000000000000000000000000000000000000..29d3b319a99a3c8b2ded8fbd8ae8d70970c792a2
GIT binary patch
literal 806
zc$@(y1KIqEP)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00004b3#c}2nYxW
zd<bNS00009a7bBm000XT000XT0n*)m`~Uy|6?8>dbVG7wVRUJ4ZXi@?ZDjyCFETeT
zF*2O>TrB_q0338hSaefwW^{L9a%BKPWN%_+AVz6&Wp{6KYjYq&Q#R<lvWx%#0)I(F
zK~y-6rBlyKR8bf`_rCk)jc*)B#2=&c!!Zn76qwRNa|(i>c7@u?RTxEB5kmh%P)N(7
zT`i)>qChBuC?O1glu}BRT7)w?m6JZ7^WK|x@7KZt6L)^g?{Ln6^PP_o5q2_c>!Lii
zyS#bd-dMmeN|lt`l7tX4lU@8dJw1~ZTfxg0`;K&Xo;;DNPjID(6VZPrn#PsmdUAYh
zB6F$#%FV3;C3UsYhK6LEy?HzKJCj{p*M;VT{nd~Po|5K)))u{`Wq*Zfnzf=b(G)p<
z_DnjRZjb#~%9_zwGAcA?Umv(JH}vrCYXIw;3_Ji$PoKX!To;X+j^hMGJRVPVcXu66
z)hEnSgTp0QR>3a@gTYw<;{dj%Y#BzN*_Sd1fVh-0l1e4*sSnc&Ev;>zZ{5DLTo%++
zC=~LyAp?LCLKKO}Q$*lWN=PY-wr%I%O^gg{oM$x7lx0~40DT()({(-KoVy?*A(bL2
zRnas}8$hn6y1E{K-O=9G7&1$aMj{cL^NkQS>B_}rt1(<!8q{^Ypok!_(In3=7JUFt
zHkT``ILhnq>kR<t0KfqtZ+k2p3P1pofc4SI8S=bhK`5n|5W-ot)=B`>T<Gmt8XSBa
zud1pPuICkq2<eW4bnbLdaq!7AV`TWHUlC0>qhsUw?BddbV4M?U%x!GkWjq>saY$!;
z?aSA1`kHMU05Kv$G9L3nC5AsaHMKHu?dk-88~_UlSYl;mHGl8^13J~!S!k$_>rx?j
zOoz(>2iWMk0_4cV$KdSTd=9{S0P<fgm=>-rFDnc035UZ`-}m+HPRBWCQb}w1SN@Zm
k|31GNV>|suz9Tk(KRCWA;;1x%9RL6T07*qoM6N<$g8X4xGynhq

diff --git a/browser/themes/winstripe/devtools/inspector.css b/browser/themes/winstripe/devtools/inspector.css
new file mode 100644
--- /dev/null
+++ b/browser/themes/winstripe/devtools/inspector.css
@@ -0,0 +1,218 @@
+#inspector-inspect-toolbutton {
+  list-style-image: url("chrome://browser/skin/devtools/inspect-button.png");
+  -moz-image-region: rect(0px 16px 16px 0px);
+}
+
+#inspector-inspect-toolbutton[checked=true] {
+  -moz-image-region: rect(0px 32px 16px 16px);
+}
+
+/* Highlighter toolbar - breadcrumbs */
+
+#inspector-breadcrumbs {
+  -moz-margin-end: 3px;
+  /* A fake 1px-shadow is included in the border-images of the
+     inspector-breadcrumbs-buttons, to match toolbar-buttons style.
+     This negative margin compensate the extra row of pixels created
+     by the shadow.*/
+  margin: -1px 0;
+}
+
+#inspector-breadcrumbs > .scrollbutton-up,
+#inspector-breadcrumbs > .scrollbutton-down {
+  -moz-appearance: none;
+  border: 1px solid hsla(210,8%,5%,.45);
+  background: -moz-linear-gradient(hsla(212,7%,57%,.35), hsla(212,7%,57%,.1)) padding-box;
+  box-shadow: 0 1px 0 hsla(210,16%,76%,.15) inset, 0 0 0 1px hsla(210,16%,76%,.15) inset, 0 1px 0 hsla(210,16%,76%,.15);
+  margin: 1px 0 1px;
+}
+
+#inspector-breadcrumbs > .scrollbutton-up:not([disabled]):active:hover,
+#inspector-breadcrumbs > .scrollbutton-down:not([disabled]):active:hover {
+  border-color: hsla(210,8%,5%,.6);
+  background: -moz-linear-gradient(hsla(220,6%,10%,.3), hsla(212,7%,57%,.15) 65%, hsla(212,7%,57%,.3));
+  box-shadow: 0 0 3px hsla(210,8%,5%,.25) inset, 0 1px 3px hsla(210,8%,5%,.25) inset, 0 1px 0 hsla(210,16%,76%,.15);
+}
+
+#inspector-breadcrumbs > .scrollbutton-up > .toolbarbutton-icon,
+#inspector-breadcrumbs > .scrollbutton-down > .toolbarbutton-icon {
+  -moz-appearance: none;
+  list-style-image: url("chrome://browser/skin/devtools/breadcrumbs-scrollbutton.png");
+  -moz-image-region: rect(0px 7px 16px 0px);
+  margin: 0 5px;
+}
+
+#inspector-breadcrumbs > .scrollbutton-up[disabled] > .toolbarbutton-icon,
+#inspector-breadcrumbs > .scrollbutton-down[disabled] > .toolbarbutton-icon {
+  opacity: 0.5;
+}
+
+#inspector-breadcrumbs > .scrollbutton-up:not([disabled]):active:hover > .toolbarbutton-icon,
+#inspector-breadcrumbs > .scrollbutton-down:not([disabled]):active:hover > .toolbarbutton-icon {
+  -moz-image-region: rect(0px 14px 16px 7px);
+}
+
+#inspector-breadcrumbs > .scrollbutton-up > .toolbarbutton-icon:-moz-locale-dir(rtl),
+#inspector-breadcrumbs > .scrollbutton-down > .toolbarbutton-icon:-moz-locale-dir(ltr) {
+  transform: scaleX(-1);
+}
+
+.inspector-breadcrumbs-button {
+  -moz-appearance: none;
+  background-color: transparent;
+  border-style: solid;
+  border-width: 2px 13px;
+  outline: none;
+  color: hsl(210,30%,85%);
+  width: 85px; /* Can't use max-width. See bug 723132 */
+  /* The content of the button can be larger than the button */
+  overflow: hidden;
+  min-height: 25px;
+  margin: 0 -11px 0 0;
+  padding: 0 9px;
+}
+
+.inspector-breadcrumbs-button:-moz-focusring > .button-box {
+  border-width: 0;
+}
+
+.inspector-breadcrumbs-button:-moz-focusring > label {
+  border-bottom: 1px dotted hsla(210,30%,85%,0.4);
+}
+
+.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-tag {
+  color: hsl(200,100%,60%);
+}
+
+.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-id {
+  color: hsl(200,100%,70%);
+}
+
+.inspector-breadcrumbs-button[checked] > .inspector-breadcrumbs-pseudo-classes {
+  color: hsl(20, 100%, 70%);
+}
+
+.inspector-breadcrumbs-id,
+.inspector-breadcrumbs-classes {
+  color: #8d99a6;
+}
+
+.inspector-breadcrumbs-pseudo-classes {
+  color: hsl(20, 100%, 85%);
+}
+
+/* Highlighter toolbar - breadcrumbs - LTR */
+
+.inspector-breadcrumbs-button {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle.png") 2 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:not([checked]):hover:active {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-pressed.png") 2 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button[checked] {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-selected.png") 2 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button[checked]:hover:active {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-middle-selected-pressed.png") 2 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:first-of-type {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start.png") 2 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:first-of-type:not([checked]):hover:active {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-pressed.png") 2 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:first-of-type[checked] {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-selected.png") 2 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:first-of-type[checked]:hover:active {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-start-selected-pressed.png") 2 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:last-of-type {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end.png") 2 13 2 13 fill stretch;
+}
+
+#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:-moz-locale-dir(ltr):first-of-type {
+  border-left-width: 0;
+}
+
+#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:-moz-locale-dir(ltr):last-of-type {
+  border-right-width: 0;
+}
+
+.inspector-breadcrumbs-button:last-of-type:not([checked]):hover:active {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-pressed.png") 2 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:last-of-type[checked] {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-selected.png") 2 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:last-of-type[checked]:hover:active {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/ltr-end-selected-pressed.png") 2 13 2 13 fill stretch;
+}
+
+/* Highlighter toolbar - breadcrumbs - RTL */
+
+.inspector-breadcrumbs-button:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle.png") 2 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:not([checked]):hover:active:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-pressed.png") 2 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button[checked]:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-selected.png") 2 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button[checked]:hover:active:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-middle-selected-pressed.png") 2 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:first-of-type:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start.png") 2 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:first-of-type:not([checked]):hover:active:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-pressed.png") 2 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:first-of-type[checked]:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-selected.png") 2 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:first-of-type[checked]:hover:active:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-start-selected-pressed.png") 2 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:last-of-type:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end.png") 2 13 2 13 fill stretch;
+}
+
+#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:-moz-locale-dir(rtl):first-of-type {
+  border-right-width: 0;
+}
+
+#inspector-breadcrumbs[overflows] > .inspector-breadcrumbs-button:last-of-type:-moz-locale-dir(rtl) {
+  border-left-width: 0;
+}
+
+.inspector-breadcrumbs-button:last-of-type:not([checked]):hover:active:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-pressed.png") 2 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:last-of-type[checked]:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-selected.png") 2 13 2 13 fill stretch;
+}
+
+.inspector-breadcrumbs-button:last-of-type[checked]:hover:active:-moz-locale-dir(rtl) {
+  -moz-border-image: url("chrome://browser/skin/devtools/breadcrumbs/rtl-end-selected-pressed.png") 2 13 2 13 fill stretch;
+}
diff --git a/browser/themes/winstripe/devtools/layout-background.png b/browser/themes/winstripe/devtools/layout-background.png
deleted file mode 100644
Binary file browser/themes/winstripe/devtools/layout-background.png has changed
diff --git a/browser/themes/winstripe/devtools/layout-buttons.png b/browser/themes/winstripe/devtools/layout-buttons.png
deleted file mode 100644
Binary file browser/themes/winstripe/devtools/layout-buttons.png has changed
diff --git a/browser/themes/winstripe/devtools/layoutview.css b/browser/themes/winstripe/devtools/layoutview.css
--- a/browser/themes/winstripe/devtools/layoutview.css
+++ b/browser/themes/winstripe/devtools/layoutview.css
@@ -1,14 +1,14 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 body {
-  background: url(layout-background.png), -moz-radial-gradient(50% 70%, circle cover, hsl(210,53%,45%) 0%, hsl(210,54%,33%) 100%);
+  background: url(layout-background-grid.png), -moz-radial-gradient(50% 70%, circle cover, hsl(210,53%,45%) 0%, hsl(210,54%,33%) 100%);
   color: hsl(210,100%,85%);
   border-top: 1px solid black;
   -moz-box-sizing: border-box;
 }
 
 #element-size {
   color: hsl(210,100%,95%);
 }
@@ -37,22 +37,8 @@ body {
   border-color: hsla(210,100%,85%,0.2);
   border-style: solid;
 }
 
 #borders {
   border-style: solid;
   border-color: hsl(210,100%,85%);
 }
-
-#togglebutton {
-  background-image: url(layout-buttons.png);
-  width: 16px;
-  height: 16px;
-}
-
-body.open {
-  background: url(layout-background-grid.png), -moz-radial-gradient(50% 70%, circle cover, hsl(210,53%,45%) 0%, hsl(210,54%,33%) 100%);
-}
-
-body.open > #header > #togglebutton {
-  background-position: -16px 0;
-}
diff --git a/browser/themes/winstripe/devtools/toolbox.css b/browser/themes/winstripe/devtools/toolbox.css
new file mode 100644
--- /dev/null
+++ b/browser/themes/winstripe/devtools/toolbox.css
@@ -0,0 +1,103 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#toolbox-tabs {
+  margin: 0;
+}
+
+#toolbox-dock-bottom {
+  list-style-image: url("chrome://browser/skin/devtools/dock-bottom.png");
+}
+
+#toolbox-dock-side {
+  list-style-image: url("chrome://browser/skin/devtools/dock-side.png");
+}
+
+#toolbox-dock-window {
+  list-style-image: url("chrome://browser/skin/devtools/dock-window.png");
+}
+
+.command-button {
+  margin: 0 10px;
+  width: 16px;
+  height: 32px;
+  background-repeat: no-repeat;
+  background-position: center center;
+}
+
+#command-button-responsive {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-responsivemode.png), 0, 16, 16, 0);
+}
+#command-button-responsive:hover {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-responsivemode.png), 0, 32, 16, 16);
+}
+#command-button-responsive:hover:active {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-responsivemode.png), 0, 48, 16, 32);
+}
+#command-button-responsive.toggled {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-responsivemode.png), 0, 64, 16, 48);
+}
+
+#command-button-tilt {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-tilt.png), 0, 16, 16, 0);
+}
+#command-button-tilt:hover {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-tilt.png), 0, 32, 16, 16);
+}
+
+#command-button-tilt:hover:active {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-tilt.png), 0, 48, 16, 32);
+}
+
+#command-button-tilt.toggled {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-tilt.png), 0, 64, 16, 48);
+}
+
+#command-button-scratchpad {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-scratchpad.png), 0, 16, 16, 0);
+}
+
+#command-button-scratchpad:hover {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-scratchpad.png), 0, 32, 16, 16);
+}
+
+#command-button-scratchpad:hover:active {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/command-scratchpad.png), 0, 48, 16, 32);
+}
+
+
+/* Tabs */
+
+.devtools-tabbar {
+  -moz-appearance: none;
+  background-image: linear-gradient(to bottom, hsl(209,18%,34%), hsl(210,24%,16%));
+  color: hsl(210,30%,85%);
+  padding: 4px 3px 3px;
+  box-shadow: 0 -3px 0 0 rgb(20,20,20) inset, 0 -4px 0 0 rgba(0,0,0,0.8) inset;
+}
+
+.devtools-tab {
+  -moz-appearance: none;
+  min-width: 78px;
+  min-height: 22px;
+  text-shadow: 0 -1px 0 hsla(210,8%,5%,.45);
+  border-radius: 3px 3px 0 0;
+  color: inherit;
+  border-style: solid;
+  border-color: transparent;
+  border-width: 1px 1px 0;
+  margin: 0 5px;
+  padding: 0 10px 1px;
+}
+
+.devtools-tab[selected=true] {
+  border-color: hsla(210,8%,5%,.6);
+  background-color: rgb(20,20,20);
+  text-shadow: none;
+  color: white;
+}
+
+.devtools-tab > .radio-label-box {
+  -moz-margin-start: 0px
+}
diff --git a/browser/themes/winstripe/devtools/treepanel-button.png b/browser/themes/winstripe/devtools/treepanel-button.png
deleted file mode 100644
Binary file browser/themes/winstripe/devtools/treepanel-button.png has changed
diff --git a/browser/themes/winstripe/jar.mn b/browser/themes/winstripe/jar.mn
--- a/browser/themes/winstripe/jar.mn
+++ b/browser/themes/winstripe/jar.mn
@@ -128,17 +128,20 @@ browser.jar:
         skin/classic/browser/tabview/tabview-inverted.png           (tabview/tabview-inverted.png)
         skin/classic/browser/tabview/tabview.css                    (tabview/tabview.css)
         skin/classic/browser/devtools/common.css                    (devtools/common.css)
         skin/classic/browser/devtools/arrows.png                    (devtools/arrows.png)
         skin/classic/browser/devtools/commandline.png               (devtools/commandline.png)
         skin/classic/browser/devtools/alerticon-warning.png         (devtools/alerticon-warning.png)
         skin/classic/browser/devtools/goto-mdn.png                  (devtools/goto-mdn.png)
         skin/classic/browser/devtools/csshtmltree.css               (devtools/csshtmltree.css)
-        skin/classic/browser/devtools/commandline.css                      (devtools/commandline.css)
+        skin/classic/browser/devtools/commandline.css               (devtools/commandline.css)
+        skin/classic/browser/devtools/command-responsivemode.png    (devtools/command-responsivemode.png)
+        skin/classic/browser/devtools/command-scratchpad.png        (devtools/command-scratchpad.png)
+        skin/classic/browser/devtools/command-tilt.png              (devtools/command-tilt.png)
         skin/classic/browser/devtools/markup-view.css               (devtools/markup-view.css)
         skin/classic/browser/devtools/orion.css                     (devtools/orion.css)
         skin/classic/browser/devtools/orion-container.css           (devtools/orion-container.css)
         skin/classic/browser/devtools/orion-task.png                (devtools/orion-task.png)
         skin/classic/browser/devtools/orion-breakpoint.png          (devtools/orion-breakpoint.png)
         skin/classic/browser/devtools/orion-debug-location.png      (devtools/orion-debug-location.png)
         skin/classic/browser/devtools/toolbarbutton-close.png       (devtools/toolbarbutton-close.png)
         skin/classic/browser/devtools/webconsole.css                  (devtools/webconsole.css)
@@ -174,33 +177,35 @@ browser.jar:
         skin/classic/browser/devtools/debugger.css                  (devtools/debugger.css)
         skin/classic/browser/devtools/magnifying-glass.png          (devtools/magnifying-glass.png)
         skin/classic/browser/devtools/option-icon.png               (devtools/option-icon.png)
         skin/classic/browser/devtools/itemToggle.png                (devtools/itemToggle.png)
         skin/classic/browser/devtools/itemArrow-rtl.png             (devtools/itemArrow-rtl.png)
         skin/classic/browser/devtools/itemArrow-ltr.png             (devtools/itemArrow-ltr.png)
         skin/classic/browser/devtools/inspect-button.png            (devtools/inspect-button.png)
         skin/classic/browser/devtools/dropmarker.png                (devtools/dropmarker.png)
-        skin/classic/browser/devtools/treepanel-button.png          (devtools/treepanel-button.png)
-        skin/classic/browser/devtools/layout-background.png         (devtools/layout-background.png)
         skin/classic/browser/devtools/layout-background-grid.png    (devtools/layout-background-grid.png)
         skin/classic/browser/devtools/layoutview.css                (devtools/layoutview.css)
-        skin/classic/browser/devtools/layout-buttons.png            (devtools/layout-buttons.png)
         skin/classic/browser/devtools/debugger-collapse.png         (devtools/debugger-collapse.png)
         skin/classic/browser/devtools/debugger-expand.png           (devtools/debugger-expand.png)
         skin/classic/browser/devtools/debugger-pause.png            (devtools/debugger-pause.png)
         skin/classic/browser/devtools/debugger-play.png             (devtools/debugger-play.png)
         skin/classic/browser/devtools/debugger-step-in.png          (devtools/debugger-step-in.png)
         skin/classic/browser/devtools/debugger-step-out.png         (devtools/debugger-step-out.png)
         skin/classic/browser/devtools/debugger-step-over.png        (devtools/debugger-step-over.png)
         skin/classic/browser/devtools/responsive-se-resizer.png     (devtools/responsive-se-resizer.png)
         skin/classic/browser/devtools/responsive-vertical-resizer.png (devtools/responsive-vertical-resizer.png)
         skin/classic/browser/devtools/responsive-background.png     (devtools/responsive-background.png)
         skin/classic/browser/devtools/tools-icons-small.png         (devtools/tools-icons-small.png)
+        skin/classic/browser/devtools/dock-bottom.png               (devtools/dock-bottom.png)
+        skin/classic/browser/devtools/dock-side.png                 (devtools/dock-side.png)
+        skin/classic/browser/devtools/dock-window.png               (devtools/dock-window.png)
         skin/classic/browser/devtools/floating-scrollbars.css       (devtools/floating-scrollbars.css)
+        skin/classic/browser/devtools/inspector.css                 (devtools/inspector.css)
+        skin/classic/browser/devtools/toolbox.css                   (devtools/toolbox.css)
 #ifdef MOZ_SERVICES_SYNC
         skin/classic/browser/sync-throbber.png
         skin/classic/browser/sync-16.png
         skin/classic/browser/sync-32.png
         skin/classic/browser/sync-128.png
         skin/classic/browser/sync-bg.png
         skin/classic/browser/sync-desktopIcon.png
         skin/classic/browser/sync-mobileIcon.png
@@ -332,20 +337,23 @@ browser.jar:
         skin/classic/aero/browser/tabview/search.png                 (tabview/search.png)
         skin/classic/aero/browser/tabview/stack-expander.png         (tabview/stack-expander.png)
         skin/classic/aero/browser/tabview/tabview.png                (tabview/tabview.png)
         skin/classic/aero/browser/tabview/tabview-inverted.png       (tabview/tabview-inverted.png)
         skin/classic/aero/browser/tabview/tabview.css                (tabview/tabview.css)
         skin/classic/aero/browser/devtools/common.css                (devtools/common.css)
         skin/classic/aero/browser/devtools/arrows.png                (devtools/arrows.png)
         skin/classic/aero/browser/devtools/commandline.png           (devtools/commandline.png)
+        skin/classic/aero/browser/devtools/command-responsivemode.png (devtools/command-responsivemode.png)
+        skin/classic/aero/browser/devtools/command-scratchpad.png    (devtools/command-scratchpad.png)
+        skin/classic/aero/browser/devtools/command-tilt.png          (devtools/command-tilt.png)
         skin/classic/aero/browser/devtools/alerticon-warning.png     (devtools/alerticon-warning.png)
         skin/classic/aero/browser/devtools/goto-mdn.png              (devtools/goto-mdn.png)
         skin/classic/aero/browser/devtools/csshtmltree.css           (devtools/csshtmltree.css)
-        skin/classic/aero/browser/devtools/commandline.css                  (devtools/commandline.css)
+        skin/classic/aero/browser/devtools/commandline.css           (devtools/commandline.css)
         skin/classic/aero/browser/devtools/markup-view.css           (devtools/markup-view.css)
         skin/classic/aero/browser/devtools/orion.css                 (devtools/orion.css)
         skin/classic/aero/browser/devtools/orion-container.css       (devtools/orion-container.css)
         skin/classic/aero/browser/devtools/orion-task.png            (devtools/orion-task.png)
         skin/classic/aero/browser/devtools/orion-breakpoint.png      (devtools/orion-breakpoint.png)
         skin/classic/aero/browser/devtools/orion-debug-location.png  (devtools/orion-debug-location.png)
         skin/classic/aero/browser/devtools/toolbarbutton-close.png   (devtools/toolbarbutton-close.png)
         skin/classic/aero/browser/devtools/webconsole.css                  (devtools/webconsole.css)
@@ -381,33 +389,35 @@ browser.jar:
         skin/classic/aero/browser/devtools/debugger.css              (devtools/debugger.css)
         skin/classic/aero/browser/devtools/magnifying-glass.png      (devtools/magnifying-glass.png)
         skin/classic/aero/browser/devtools/option-icon.png           (devtools/option-icon.png)
         skin/classic/aero/browser/devtools/itemToggle.png            (devtools/itemToggle.png)
         skin/classic/aero/browser/devtools/itemArrow-rtl.png         (devtools/itemArrow-rtl.png)
         skin/classic/aero/browser/devtools/itemArrow-ltr.png         (devtools/itemArrow-ltr.png)
         skin/classic/aero/browser/devtools/inspect-button.png        (devtools/inspect-button.png)
         skin/classic/aero/browser/devtools/dropmarker.png            (devtools/dropmarker.png)
-        skin/classic/aero/browser/devtools/treepanel-button.png      (devtools/treepanel-button.png)
-        skin/classic/aero/browser/devtools/layout-background.png     (devtools/layout-background.png)
         skin/classic/aero/browser/devtools/layout-background-grid.png (devtools/layout-background-grid.png)
         skin/classic/aero/browser/devtools/layoutview.css            (devtools/layoutview.css)
-        skin/classic/aero/browser/devtools/layout-buttons.png        (devtools/layout-buttons.png)
         skin/classic/aero/browser/devtools/debugger-collapse.png     (devtools/debugger-collapse.png)
         skin/classic/aero/browser/devtools/debugger-expand.png       (devtools/debugger-expand.png)
         skin/classic/aero/browser/devtools/debugger-pause.png        (devtools/debugger-pause.png)
         skin/classic/aero/browser/devtools/debugger-play.png         (devtools/debugger-play.png)
         skin/classic/aero/browser/devtools/debugger-step-in.png      (devtools/debugger-step-in.png)
         skin/classic/aero/browser/devtools/debugger-step-out.png     (devtools/debugger-step-out.png)
         skin/classic/aero/browser/devtools/debugger-step-over.png    (devtools/debugger-step-over.png)
         skin/classic/aero/browser/devtools/responsive-se-resizer.png (devtools/responsive-se-resizer.png)
         skin/classic/aero/browser/devtools/responsive-vertical-resizer.png (devtools/responsive-vertical-resizer.png)
         skin/classic/aero/browser/devtools/responsive-background.png (devtools/responsive-background.png)
         skin/classic/aero/browser/devtools/tools-icons-small.png     (devtools/tools-icons-small.png)
+        skin/classic/aero/browser/devtools/dock-bottom.png           (devtools/dock-bottom.png)
+        skin/classic/aero/browser/devtools/dock-side.png             (devtools/dock-side.png)
+        skin/classic/aero/browser/devtools/dock-window.png           (devtools/dock-window.png)
         skin/classic/aero/browser/devtools/floating-scrollbars.css   (devtools/floating-scrollbars.css)
+        skin/classic/aero/browser/devtools/inspector.css             (devtools/inspector.css)
+        skin/classic/aero/browser/devtools/toolbox.css               (devtools/toolbox.css)
 #ifdef MOZ_SERVICES_SYNC
         skin/classic/aero/browser/sync-throbber.png
         skin/classic/aero/browser/sync-16.png
         skin/classic/aero/browser/sync-32.png
         skin/classic/aero/browser/sync-128.png
         skin/classic/aero/browser/sync-bg.png
         skin/classic/aero/browser/sync-desktopIcon.png
         skin/classic/aero/browser/sync-mobileIcon.png
diff --git a/toolkit/devtools/webconsole/WebConsoleUtils.jsm b/toolkit/devtools/webconsole/WebConsoleUtils.jsm
--- a/toolkit/devtools/webconsole/WebConsoleUtils.jsm
+++ b/toolkit/devtools/webconsole/WebConsoleUtils.jsm
@@ -23,16 +23,22 @@ XPCOMUtils.defineLazyModuleGetter(this, 
 
 XPCOMUtils.defineLazyModuleGetter(this, "NetworkHelper",
                                   "resource://gre/modules/devtools/NetworkHelper.jsm");
 
 XPCOMUtils.defineLazyServiceGetter(this, "gActivityDistributor",
                                    "@mozilla.org/network/http-activity-distributor;1",
                                    "nsIHttpActivityDistributor");
 
+XPCOMUtils.defineLazyModuleGetter(this, "gDevTools",
+                                  "resource:///modules/devtools/gDevTools.jsm");
+
+XPCOMUtils.defineLazyModuleGetter(this, "TargetFactory",
+                                  "resource:///modules/devtools/Target.jsm");
+
 this.EXPORTED_SYMBOLS = ["WebConsoleUtils", "JSPropertyProvider", "JSTermHelpers",
                          "PageErrorListener", "ConsoleAPIListener",
                          "NetworkResponseListener", "NetworkMonitor",
                          "ConsoleProgressListener"];
 
 // Match the function name from the result of toString() or toSource().
 //
 // Examples:
@@ -1559,17 +1565,22 @@ this.JSTermHelpers = function JSTermHelp
    * See bug 787975.
    *
    * @return nsIDOMElement|null
    *         The DOM element currently selected in the highlighter.
    */
   Object.defineProperty(aOwner.sandbox, "$0", {
     get: function() {
       try {
-        return aOwner.chromeWindow().InspectorUI.selection;
+        let window = aOwner.chromeWindow();
+        let target = TargetFactory.forTab(window.gBrowser.selectedTab);
+        let panel = gDevTools.getPanelForTarget("inspector", target);
+        if (panel) {
+          return panel.selection.node;
+        }
       }
       catch (ex) {
         aOwner.window.console.error(ex.message);
       }
     },
     enumerable: true,
     configurable: false
   });
