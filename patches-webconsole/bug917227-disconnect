# HG changeset patch
# Parent 2e69bd1146f88cdad855f5c47a731e24cca53356
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1394485248 -7200
Bug 917227 - Ensure network monitor is correctly disconnected; r=ochameau; try: -b do -p all -u all -t none

diff --git a/toolkit/devtools/webconsole/network-monitor.js b/toolkit/devtools/webconsole/network-monitor.js
--- a/toolkit/devtools/webconsole/network-monitor.js
+++ b/toolkit/devtools/webconsole/network-monitor.js
@@ -973,16 +973,17 @@ NetworkMonitor.prototype = {
     }
 
     gActivityDistributor.removeObserver(this);
 
     this.openRequests = {};
     this.openResponses = {};
     this.owner = null;
     this.window = null;
+    this.topFrame = null;
   },
 }; // NetworkMonitor.prototype
 
 
 /**
  * The NetworkMonitorChild is used to proxy all of the network activity of the
  * child app process from the main process. The child WebConsoleActor creates an
  * instance of this object.
@@ -1063,17 +1064,17 @@ NetworkMonitorChild.prototype = {
       return;
     }
     actor[method].apply(actor, args);
   }),
 
   destroy: function() {
     this._messageManager.removeMessageListener("debug:netmonitor:newEvent", this._onNewEvent);
     this._messageManager.removeMessageListener("debug:netmonitor:updateEvent", this._onUpdateEvent);
-    this._messageManager.sendAsyncMessage("debug:netmonitor", { action: "stop" });
+    this._messageManager.sendAsyncMessage("debug:netmonitor", { action: "disconnect" });
     this._netEvents.clear();
     this._messageManager = null;
     this.owner = null;
   },
 }; // NetworkMonitorChild.prototype
 
 /**
  * The NetworkEventActorProxy is used to send network request information from
@@ -1172,44 +1173,46 @@ NetworkMonitorManager.prototype = {
    * @param object msg
    *        Message from the content.
    */
   onNetMonitorMessage: DevToolsUtils.makeInfallible(function _onNetMonitorMessage(msg) {
     let { action, appId } = msg.json;
 
     // Pipe network monitor data from parent to child via the message manager.
     switch (action) {
-      case "start": {
+      case "start":
         if (!this.netMonitor) {
           this.netMonitor = new NetworkMonitor({
             topFrame: this.frame,
             appId: appId,
           }, this);
           this.netMonitor.init();
         }
         break;
-      }
 
       case "setPreferences": {
         let {preferences} = msg.json;
         for (let key of Object.keys(preferences)) {
           if (key == "saveRequestAndResponseBodies" && this.netMonitor) {
             this.netMonitor.saveRequestAndResponseBodies = preferences[key];
           }
         }
         break;
       }
 
-      case "stop": {
+      case "stop":
         if (this.netMonitor) {
           this.netMonitor.destroy();
           this.netMonitor = null;
         }
         break;
-      }
+
+      case "disconnect":
+        this.destroy();
+        break;
     }
   }),
 
   /**
    * Handler for new network requests. This method is invoked by the current
    * NetworkMonitor instance.
    *
    * @param object event
