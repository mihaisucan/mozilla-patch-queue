# HG changeset patch
# Parent 6a3e2fb5b0f289495688d8dbd2d3fdb965046361
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1367265708 -10800

Bug 711846 - Fix for intermittent browser_webconsole_bug_595934_message_categories.js | Test timed out; r=me

diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_595934_message_categories.js b/browser/devtools/webconsole/test/browser_webconsole_bug_595934_message_categories.js
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_595934_message_categories.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_bug_595934_message_categories.js
@@ -100,132 +100,127 @@ const TESTS = [
 let pos = -1;
 
 let foundCategory = false;
 let foundText = false;
 let pageLoaded = false;
 let pageError = false;
 let output = null;
 let jsterm = null;
+let hud = null;
 let testEnded = false;
 
 let TestObserver = {
   QueryInterface: XPCOMUtils.generateQI([Ci.nsIObserver]),
 
   observe: function test_observe(aSubject)
   {
     if (testEnded || !(aSubject instanceof Ci.nsIScriptError)) {
       return;
     }
 
     var expectedCategory = TESTS[pos].category;
 
-    info("test #" + pos + " console observer got " + aSubject.category + ", is expecting " + expectedCategory);
+    info("test #" + pos + " console observer got " + aSubject.category +
+         ", is expecting " + expectedCategory);
 
     if (aSubject.category == expectedCategory) {
       foundCategory = true;
+      startNextTest();
     }
     else {
-      info("unexpected message was: " + aSubject.sourceName + ':' + aSubject.lineNumber + '; ' +
-                aSubject.errorMessage);
+      info("unexpected message was: " + aSubject.sourceName + ":" +
+           aSubject.lineNumber + "; " + aSubject.errorMessage);
     }
   }
 };
 
-function consoleOpened(hud) {
+function consoleOpened(aHud) {
+  hud = aHud;
   output = hud.outputNode;
-
-  nodeInsertedListener.observe(output, {childList: true});
   jsterm = hud.jsterm;
 
   Services.console.registerListener(TestObserver);
 
   registerCleanupFunction(testEnd);
 
-  executeSoon(testNext);
+  testNext();
 }
 
 function testNext() {
   jsterm.clearOutput();
   foundCategory = false;
   foundText = false;
   pageLoaded = false;
   pageError = false;
 
   pos++;
   info("testNext: #" + pos);
   if (pos < TESTS.length) {
-    waitForSuccess({
-      timeout: 10000,
-      name: "test #" + pos + " successful finish",
-      validatorFn: function()
-      {
-        return foundCategory && foundText && pageLoaded && pageError;
-      },
-      successFn: testNext,
-      failureFn: function() {
-        info("foundCategory " + foundCategory + " foundText " + foundText +
-             " pageLoaded " + pageLoaded + " pageError " + pageError);
-        finishTest();
-      },
+    let test = TESTS[pos];
+
+    waitForMessages({
+      webconsole: hud,
+      messages: [{
+        name: "message for test #" + pos + ": '" + test.matchString +"'",
+        text: test.matchString,
+      }],
+    }).then(() => {
+      foundText = true;
+      startNextTest();
     });
 
-    let test = TESTS[pos];
     let testLocation = TESTS_PATH + test.file;
-    browser.addEventListener("load", function onLoad(aEvent) {
+    gBrowser.selectedBrowser.addEventListener("load", function onLoad(aEvent) {
       if (content.location.href != testLocation) {
         return;
       }
-      browser.removeEventListener(aEvent.type, onLoad, true);
+      gBrowser.selectedBrowser.removeEventListener(aEvent.type, onLoad, true);
 
       pageLoaded = true;
       test.onload && test.onload(aEvent);
 
       if (test.expectError) {
         content.addEventListener("error", function _onError() {
           content.removeEventListener("error", _onError);
           pageError = true;
+          startNextTest();
         });
         expectUncaughtException();
       }
       else {
         pageError = true;
       }
+
+      startNextTest();
     }, true);
 
     content.location = testLocation;
   }
   else {
     testEnded = true;
-    executeSoon(finishTest);
+    finishTest();
   }
 }
 
 function testEnd() {
+  if (!testEnded) {
+    info("foundCategory " + foundCategory + " foundText " + foundText +
+         " pageLoaded " + pageLoaded + " pageError " + pageError);
+  }
+
   Services.console.unregisterListener(TestObserver);
-  nodeInsertedListener.disconnect();
-  TestObserver = output = jsterm = null;
+  hud = TestObserver = output = jsterm = null;
 }
 
-var nodeInsertedListener = new MutationObserver(function(mutations) {
-  if (testEnded) {
-    return;
+function startNextTest() {
+  if (!testEnded && foundCategory && foundText && pageLoaded && pageError) {
+    testNext();
   }
-
-  for (var mutation of mutations) {
-    if (mutation.addedNodes) {
-      let textContent = output.textContent;
-      foundText = textContent.indexOf(TESTS[pos].matchString) > -1;
-      if (foundText) {
-        ok(foundText, "test #" + pos + ": message found '" + TESTS[pos].matchString + "'");
-      }
-      return;
-    }
-  }
-});
+}
 
 function test() {
   requestLongerTimeout(2);
 
   addTab("data:text/html;charset=utf-8,Web Console test for bug 595934 - message categories coverage.");
   browser.addEventListener("load", function onLoad() {
     browser.removeEventListener("load", onLoad, true);
     openConsole(null, consoleOpened);
