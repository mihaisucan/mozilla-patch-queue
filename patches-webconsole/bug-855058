# HG changeset patch
# Parent 6a3e2fb5b0f289495688d8dbd2d3fdb965046361
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1367346907 -10800

Bug 855058 - Fix for intermittent browser/dom/tests/browser/browser_ConsoleAPITests.js | timer duration is positive; r=rcampbell; try: -b do -p all -u all -t none

diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -1057,17 +1057,18 @@ WebConsoleFrame.prototype = {
         break;
       }
 
       case "timeEnd": {
         let timer = aMessage.timer;
         if (!timer) {
           return;
         }
-        body = l10n.getFormatStr("timeEnd", [timer.name, timer.duration]);
+        let duration = Math.round(timer.duration * 100) / 100;
+        body = l10n.getFormatStr("timeEnd", [timer.name, duration]);
         clipboardText = body;
         break;
       }
 
       default:
         Cu.reportError("Unknown Console API log level: " + level);
         return;
     }
diff --git a/dom/base/ConsoleAPI.js b/dom/base/ConsoleAPI.js
--- a/dom/base/ConsoleAPI.js
+++ b/dom/base/ConsoleAPI.js
@@ -175,51 +175,56 @@ ConsoleAPI.prototype = {
     };
 
     Object.defineProperties(contentObj, properties);
     Cu.makeObjectPropsNormal(contentObj);
 
     this._queuedCalls = [];
     this._timer = Cc["@mozilla.org/timer;1"].createInstance(Ci.nsITimer);
     this._window = Cu.getWeakReference(aWindow);
-    this.timerRegistry = {};
+    this.timerRegistry = new Map();
 
     return contentObj;
   },
 
   observe: function CA_observe(aSubject, aTopic, aData)
   {
     if (aTopic == "inner-window-destroyed") {
       let innerWindowID = aSubject.QueryInterface(Ci.nsISupportsPRUint64).data;
       if (innerWindowID == this._innerID) {
         Services.obs.removeObserver(this, "inner-window-destroyed");
         this._windowDestroyed = true;
         if (!this._timerInitialized) {
-          this.timerRegistry = {};
+          this.timerRegistry.clear();
         }
       }
     }
   },
 
   /**
    * Queue a call to a console method. See the CALL_DELAY constant.
    *
    * @param string aMethod
    *        The console method the code has invoked.
    * @param object aArguments
    *        The arguments passed to the console method.
    */
   queueCall: function CA_queueCall(aMethod, aArguments)
   {
+    let window = this._window.get();
     let metaForCall = {
-      isPrivate: PrivateBrowsingUtils.isWindowPrivate(this._window.get()),
+      isPrivate: PrivateBrowsingUtils.isWindowPrivate(window),
       timeStamp: Date.now(),
       stack: this.getStackTrace(aMethod != "trace" ? 1 : null),
     };
 
+    if (aMethod == "time" || aMethod == "timeEnd") {
+      metaForCall.monotonicTimer = window.performance.now();
+    }
+
     this._queuedCalls.push([aMethod, aArguments, metaForCall]);
 
     if (!this._timerInitialized) {
       this._timer.initWithCallback(this._timerCallback.bind(this), CALL_DELAY,
                                    Ci.nsITimer.TYPE_REPEATING_SLACK);
       this._timerInitialized = true;
     }
   },
@@ -234,17 +239,17 @@ ConsoleAPI.prototype = {
       .forEach(this._processQueuedCall, this);
 
     if (!this._queuedCalls.length) {
       this._timerInitialized = false;
       this._timer.cancel();
 
       if (this._windowDestroyed) {
         ConsoleAPIStorage.clearEvents(this._innerID);
-        this.timerRegistry = {};
+        this.timerRegistry.clear();
       }
     }
   },
 
   /**
    * Process a queued call to a console method.
    *
    * @private
@@ -288,20 +293,20 @@ ConsoleAPI.prototype = {
           Cu.reportError(ex);
           Cu.reportError(ex.stack);
           return;
         }
         break;
       case "dir":
         break;
       case "time":
-        consoleEvent.timer = this.startTimer(args[0], meta.timeStamp);
+        consoleEvent.timer = this.startTimer(args[0], meta.monotonicTimer);
         break;
       case "timeEnd":
-        consoleEvent.timer = this.stopTimer(args[0], meta.timeStamp);
+        consoleEvent.timer = this.stopTimer(args[0], meta.monotonicTimer);
         break;
       default:
         // unknown console API method!
         return;
     }
 
     this.notifyObservers(method, consoleEvent, meta.isPrivate);
   },
@@ -412,68 +417,68 @@ ConsoleAPI.prototype = {
         }
       }
     }
 
     return stack;
   },
 
   /*
-   * A registry of started timers. Timer maps are key-value pairs of timer
-   * names to timer start times, for all timers defined in the page. Timer
-   * names are prepended with the inner window ID in order to avoid conflicts
-   * with Object.prototype functions.
+   * A registry of started timers.
+   * @type Map
    */
   timerRegistry: null,
 
   /**
    * Create a new timer by recording the current time under the specified name.
    *
    * @param string aName
    *        The name of the timer.
-   * @param number [aTimestamp=Date.now()]
-   *        Optional timestamp that tells when the timer was originally started.
+   * @param number aTimestamp
+   *        A monotonic strictly-increasing timing value that tells when the
+   *        timer was started.
    * @return object
    *        The name property holds the timer name and the started property
    *        holds the time the timer was started. In case of error, it returns
    *        an object with the single property "error" that contains the key
    *        for retrieving the localized error message.
    **/
   startTimer: function CA_startTimer(aName, aTimestamp) {
     if (!aName) {
-        return;
+      return;
     }
-    if (Object.keys(this.timerRegistry).length > MAX_PAGE_TIMERS - 1) {
-        return { error: "maxTimersExceeded" };
+    if (this.timerRegistry.size > MAX_PAGE_TIMERS - 1) {
+      return { error: "maxTimersExceeded" };
     }
-    let key = this._innerID + "-" + aName.toString();
-    if (!(key in this.timerRegistry)) {
-        this.timerRegistry[key] = aTimestamp || Date.now();
+    let key = aName.toString();
+    if (!this.timerRegistry.has(key)) {
+      this.timerRegistry.set(key, aTimestamp);
     }
-    return { name: aName, started: this.timerRegistry[key] };
+    return { name: aName, started: this.timerRegistry.get(key) };
   },
 
   /**
    * Stop the timer with the specified name and retrieve the elapsed time.
    *
    * @param string aName
    *        The name of the timer.
-   * @param number [aTimestamp=Date.now()]
-   *        Optional timestamp that tells when the timer was originally stopped.
+   * @param number aTimestamp
+   *        A monotonic strictly-increasing timing value that tells when the
+   *        timer was stopped.
    * @return object
    *        The name property holds the timer name and the duration property
    *        holds the number of milliseconds since the timer was started.
    **/
   stopTimer: function CA_stopTimer(aName, aTimestamp) {
     if (!aName) {
-        return;
+      return;
     }
-    let key = this._innerID + "-" + aName.toString();
-    if (!(key in this.timerRegistry)) {
-        return;
+    let key = aName.toString();
+    if (!this.timerRegistry.has(key)) {
+      return;
     }
-    let duration = (aTimestamp || Date.now()) - this.timerRegistry[key];
-    delete this.timerRegistry[key];
+    let duration = aTimestamp - this.timerRegistry.get(key);
+    this.timerRegistry.delete(key);
     return { name: aName, duration: duration };
   }
 };
 
 this.NSGetFactory = XPCOMUtils.generateNSGetFactory([ConsoleAPI]);
