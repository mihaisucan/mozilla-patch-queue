# HG changeset patch
# Parent 5bd5bb168eb1d25d43ad61dde8fed56d2a4346a9
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1351887575 -7200

Bug 787981 - Use LongStringActor in the Web Console actors; try: -b do -p linux,linux64,macosx64,win32,win64 -u xpcshell,mochitests -t none

diff --git a/browser/devtools/webconsole/NetworkPanel.jsm b/browser/devtools/webconsole/NetworkPanel.jsm
--- a/browser/devtools/webconsole/NetworkPanel.jsm
+++ b/browser/devtools/webconsole/NetworkPanel.jsm
@@ -212,38 +212,18 @@ NetworkPanel.prototype =
 
   /**
    *
    * @returns boolean
    *          True if the response body contains text, false otherwise.
    */
   get _isResponseBodyTextData()
   {
-    let contentType = this.contentType;
-
-    if (!contentType)
-      return false;
-
-    if (contentType.indexOf("text/") == 0) {
-      return true;
-    }
-
-    switch (NetworkHelper.mimeCategoryMap[contentType]) {
-      case "txt":
-      case "js":
-      case "json":
-      case "css":
-      case "html":
-      case "svg":
-      case "xml":
-        return true;
-
-      default:
-        return false;
-    }
+    return this.contentType ?
+           NetworkHelper.isTextMimeType(this.contentType) : false;
   },
 
   /**
    * Tells if the server response is cached.
    *
    * @returns boolean
    *          Returns true if the server responded that the request is already
    *          in the browser's cache, false otherwise.
diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_598357_jsterm_output.js b/browser/devtools/webconsole/test/browser_webconsole_bug_598357_jsterm_output.js
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_598357_jsterm_output.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_bug_598357_jsterm_output.js
@@ -10,16 +10,23 @@
 
 const TEST_URI = "http://example.com/browser/browser/devtools/webconsole/test/test-console.html";
 
 let testEnded = false;
 let pos = -1;
 
 let dateNow = Date.now();
 
+let tempScope = {};
+Cu.import("resource://gre/modules/devtools/dbg-server.jsm", tempScope);
+
+let longString = (new Array(tempScope.DebuggerServer.LONG_STRING_LENGTH + 4)).join("a");
+let initialString = longString.substring(0,
+  tempScope.DebuggerServer.LONG_STRING_INITIAL_LENGTH);
+
 let inputValues = [
   // [showsPropertyPanel?, input value, expected output format,
   //    print() output, console output, optional console API test]
 
   // 0
   [false, "'hello \\nfrom \\rthe \\\"string world!'",
     '"hello \\nfrom \\rthe \\"string world!"',
     "hello \nfrom \rthe \"string world!"],
@@ -82,18 +89,26 @@ let inputValues = [
   [true, "[1,2,3,'a','b','c','4','5']", '[1, 2, 3, "a", "b", "c", "4", "5"]',
     '1,2,3,a,b,c,4,5',
     '[1, 2, 3, "a", "b", "c", "4", "5"]'],
 
   // 17
   [true, "({a:'b', c:'d', e:1, f:'2'})", '({a:"b", c:"d", e:1, f:"2"})',
     "[object Object",
     '({a:"b", c:"d", e:1, f:"2"})'],
+
+  // 18
+  [false, "'" + longString + "'",
+    '"' + initialString + "\"\u2026", initialString],
 ];
 
+longString = null;
+initialString = null;
+tempScope = null;
+
 let eventHandlers = [];
 let popupShown = [];
 let HUD;
 let testDriver;
 
 function tabLoad(aEvent) {
   browser.removeEventListener(aEvent.type, tabLoad, true);
 
diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -1685,16 +1685,60 @@ WebConsoleFrame.prototype = {
       if (aResponse.error) {
         Cu.reportError("WCF_openNetworkPanel getEventTimings:" +
                        aResponse.error);
         return;
       }
 
       aHttpActivity.timings = aResponse.timings;
 
+      let postData = aHttpActivity.request.postData;
+      if (typeof postData.text == "object") {
+        let longString = this.webConsoleClient.longString(postData.text);
+        longString.substring(longString.initial.length, longString.length,
+                             onRequestPostDataFullString);
+      }
+      else {
+        onRequestPostDataFullString();
+      }
+    }.bind(this);
+
+    let onRequestPostDataFullString = function(aResponse) {
+      if (aResponse && aResponse.error) {
+        Cu.reportError("WCF_openNetworkPanel postData longString.substring:" +
+                       aResponse.error);
+        return;
+      }
+
+      if (aResponse) {
+        aHttpActivity.request.postData.text += aResponse.substring;
+      }
+
+      let content = aHttpActivity.response.content;
+      if (typeof content.text == "object") {
+        let longString = this.webConsoleClient.longString(content.text);
+        longString.substring(longString.initial.length, longString.length,
+                             onResponseContentFullString);
+      }
+      else {
+        onResponseContentFullString();
+      }
+    }.bind(this);
+
+    let onResponseContentFullString = function(aResponse) {
+      if (aResponse && aResponse.error) {
+        Cu.reportError("WCF_openNetworkPanel response content longString." +
+                       "substring:" + aResponse.error);
+        return;
+      }
+
+      if (aResponse) {
+        aHttpActivity.response.content.text += aResponse.substring;
+      }
+
       openPanel();
     }.bind(this);
 
     let openPanel = function() {
       aNode._netPanel = netPanel;
 
       let panel = netPanel.panel;
       panel.openPopup(aNode, "after_pointer", 0, 0, false, false);
@@ -3478,58 +3522,16 @@ JSTerm.prototype = {
   updateCompleteNode: function JSTF_updateCompleteNode(aSuffix)
   {
     // completion prefix = input, with non-control chars replaced by spaces
     let prefix = aSuffix ? this.inputNode.value.replace(/[\S]/g, " ") : "";
     this.completeNode.value = prefix + aSuffix;
   },
 
   /**
-   * Clear the object cache from the Web Console content instance.
-   *
-   * @param string aCacheId
-   *        The cache ID you want to clear. Multiple objects are cached into one
-   *        group which is given an ID.
-   */
-  clearObjectCache: function JST_clearObjectCache(aCacheId)
-  {
-    if (this.hud) {
-      this.hud.owner.sendMessageToContent("JSTerm:ClearObjectCache",
-                                          { cacheId: aCacheId });
-    }
-  },
-
-  /**
-   * The remote object provider allows you to retrieve a given object from
-   * a specific cache and have your callback invoked when the desired object is
-   * received from the Web Console content instance.
-   *
-   * @param string aCacheId
-   *        Retrieve the desired object from this cache ID.
-   * @param string aObjectId
-   *        The ID of the object you want.
-   * @param string aResultCacheId
-   *        The ID of the cache where you want any object references to be
-   *        stored into.
-   * @param function aCallback
-   *        The function you want invoked when the desired object is retrieved.
-   */
-  remoteObjectProvider:
-  function JST_remoteObjectProvider(aCacheId, aObjectId, aResultCacheId,
-                                    aCallback) {
-    let message = {
-      cacheId: aCacheId,
-      objectId: aObjectId,
-      resultCacheId: aResultCacheId,
-    };
-
-    this.hud.owner.sendMessageToContent("JSTerm:GetEvalObject", message, aCallback);
-  },
-
-  /**
    * The JSTerm InspectObject remote message handler. This allows the remote
    * process to open the Property Panel for a given object.
    *
    * @param object aRequest
    *        The request message from the content process. This message includes
    *        the user input string that was evaluated to inspect an object and
    *        the result object which is to be inspected.
    */
diff --git a/toolkit/devtools/debugger/dbg-client.jsm b/toolkit/devtools/debugger/dbg-client.jsm
--- a/toolkit/devtools/debugger/dbg-client.jsm
+++ b/toolkit/devtools/debugger/dbg-client.jsm
@@ -7,17 +7,18 @@
 "use strict";
 const Ci = Components.interfaces;
 const Cc = Components.classes;
 const Cu = Components.utils;
 const Cr = Components.results;
 
 var EXPORTED_SYMBOLS = ["DebuggerTransport",
                         "DebuggerClient",
-                        "debuggerSocketConnect"];
+                        "debuggerSocketConnect",
+                        "LongStringClient"];
 
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 Cu.import("resource://gre/modules/NetUtil.jsm");
 Cu.import("resource://gre/modules/Services.jsm");
 
 XPCOMUtils.defineLazyServiceGetter(this, "socketTransportService",
                                    "@mozilla.org/network/socket-transport-service;1",
                                    "nsISocketTransportService");
@@ -1163,16 +1164,17 @@ GripClient.prototype = {
 function LongStringClient(aClient, aGrip) {
   this._grip = aGrip;
   this._client = aClient;
 }
 
 LongStringClient.prototype = {
   get actor() { return this._grip.actor; },
   get length() { return this._grip.length; },
+  get initial() { return this._grip.initial; },
 
   valid: true,
 
   /**
    * Get the substring of this LongString from aStart to aEnd.
    *
    * @param aStart Number
    *        The starting index.
diff --git a/toolkit/devtools/debugger/server/dbg-script-actors.js b/toolkit/devtools/debugger/server/dbg-script-actors.js
--- a/toolkit/devtools/debugger/server/dbg-script-actors.js
+++ b/toolkit/devtools/debugger/server/dbg-script-actors.js
@@ -1639,22 +1639,36 @@ LongStringActor.prototype = {
    * @param aRequest object
    *        The protocol request object.
    */
   onSubstring: function LSA_onSubString(aRequest) {
     return {
       "from": this.actorID,
       "substring": this.string.substring(aRequest.start, aRequest.end)
     };
-  }
+  },
 
+  /**
+   * Handle a request to release this LongStringActor instance.
+   */
+  onRelease: function LSA_onRelease() {
+    // TODO: also check if registeredPool === threadActor.threadLifetimePool
+    // when the web console moves aray from manually releasing pause-scoped
+    // actors.
+    if (this.registeredPool.longStringActors) {
+      delete this.registeredPool.longStringActors[this.actorID];
+    }
+    this.registeredPool.removeActor(this);
+    return {};
+  },
 };
 
 LongStringActor.prototype.requestTypes = {
-  "substring": LongStringActor.prototype.onSubstring
+  "substring": LongStringActor.prototype.onSubstring,
+  "release": LongStringActor.prototype.onRelease
 };
 
 
 /**
  * Creates an actor for the specified stack frame.
  *
  * @param aFrame Debugger.Frame
  *        The debuggee frame.
diff --git a/toolkit/devtools/webconsole/NetworkHelper.jsm b/toolkit/devtools/webconsole/NetworkHelper.jsm
--- a/toolkit/devtools/webconsole/NetworkHelper.jsm
+++ b/toolkit/devtools/webconsole/NetworkHelper.jsm
@@ -414,10 +414,41 @@ var NetworkHelper =
     "audio/x-midi": "media",
     "music/crescendo": "media",
     "audio/wav": "media",
     "audio/x-wav": "media",
     "text/json": "json",
     "application/x-json": "json",
     "application/json-rpc": "json",
     "application/x-web-app-manifest+json": "json",
-  }
+  },
+
+  /**
+   * Check if the given MIME type is a text-only MIME type.
+   *
+   * @param string aMimeType
+   * @return boolean
+   */
+  isTextMimeType: function NH_isTextMimeType(aMimeType)
+  {
+    if (aMimeType.indexOf("text/") == 0) {
+      return true;
+    }
+
+    if (/^application\/[a-z-]+\+xml$/.test(aMimeType)) {
+      return true;
+    }
+
+    switch (NetworkHelper.mimeCategoryMap[aMimeType]) {
+      case "txt":
+      case "js":
+      case "json":
+      case "css":
+      case "html":
+      case "svg":
+      case "xml":
+        return true;
+
+      default:
+        return false;
+    }
+  },
 }
diff --git a/toolkit/devtools/webconsole/WebConsoleClient.jsm b/toolkit/devtools/webconsole/WebConsoleClient.jsm
--- a/toolkit/devtools/webconsole/WebConsoleClient.jsm
+++ b/toolkit/devtools/webconsole/WebConsoleClient.jsm
@@ -5,34 +5,42 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 "use strict";
 
 const Cc = Components.classes;
 const Ci = Components.interfaces;
 const Cu = Components.utils;
 
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+
+XPCOMUtils.defineLazyModuleGetter(this, "LongStringClient",
+                                  "resource://gre/modules/devtools/dbg-client.jsm");
+
 var EXPORTED_SYMBOLS = ["WebConsoleClient"];
 
 /**
  * A WebConsoleClient is used as a front end for the WebConsoleActor that is
  * created on the server, hiding implementation details.
  *
  * @param object aDebuggerClient
  *        The DebuggerClient instance we live for.
  * @param string aActor
  *        The WebConsoleActor ID.
  */
 function WebConsoleClient(aDebuggerClient, aActor)
 {
   this._actor = aActor;
   this._client = aDebuggerClient;
+  this._longStrings = {};
 }
 
 WebConsoleClient.prototype = {
+  _longStrings: null,
+
   /**
    * Retrieve the cached messages from the server.
    *
    * @see this.CACHED_MESSAGES
    * @param array aTypes
    *        The array of message types you want from the server. See
    *        this.CACHED_MESSAGES for known types.
    * @param function aOnResponse
@@ -290,20 +298,40 @@ WebConsoleClient.prototype = {
       to: this._actor,
       type: "stopListeners",
       listeners: aListeners,
     };
     this._client.request(packet, aOnResponse);
   },
 
   /**
+   * Return an instance of LongStringClient for the given long string grip.
+   *
+   * @param object aGrip
+   *        The long string grip returned by the protocol.
+   * @return object
+   *         The LongStringClient for the given long string grip.
+   */
+  longString: function WCC_longString(aGrip)
+  {
+    if (aGrip.actor in this._longStrings) {
+      return this._longStrings[aGrip.actor];
+    }
+
+    let client = new LongStringClient(this._client, aGrip);
+    this._longStrings[aGrip.actor] = client;
+    return client;
+  },
+
+  /**
    * Close the WebConsoleClient. This stops all the listeners on the server and
    * detaches from the console actor.
    *
    * @param function aOnResponse
    *        Function to invoke when the server response is received.
    */
   close: function WCC_close(aOnResponse)
   {
     this.stopListeners(null, aOnResponse);
+    this._longStrings = null;
     this._client = null;
   },
 };
diff --git a/toolkit/devtools/webconsole/WebConsoleUtils.jsm b/toolkit/devtools/webconsole/WebConsoleUtils.jsm
--- a/toolkit/devtools/webconsole/WebConsoleUtils.jsm
+++ b/toolkit/devtools/webconsole/WebConsoleUtils.jsm
@@ -584,19 +584,20 @@ var WebConsoleUtils = {
    * @return mixed
    *         The value grip.
    */
   createValueGrip: function WCU_createValueGrip(aValue, aObjectWrapper)
   {
     let type = typeof(aValue);
     switch (type) {
       case "boolean":
-      case "string":
       case "number":
         return aValue;
+      case "string":
+          return aObjectWrapper(aValue);
       case "object":
       case "function":
         if (aValue) {
           return aObjectWrapper(aValue);
         }
       default:
         if (aValue === null) {
           return { type: "null" };
@@ -681,23 +682,43 @@ var WebConsoleUtils = {
    *        not.
    * @return string
    *         The object grip converted to a string.
    */
   objectActorGripToString: function WCU_objectActorGripToString(aGrip, aFormatString)
   {
     // Primitives like strings and numbers are not sent as objects.
     // But null and undefined are sent as objects with the type property
-    // telling which type of value we have.
+    // telling which type of value we have. We also have long strings which are
+    // sent using the LongStringActor.
+
     let type = typeof(aGrip);
+    if (type == "string" ||
+        (aGrip && type == "object" && aGrip.type == "longString")) {
+      let str, suffix;
+      if (type == "string") {
+        str = aGrip;
+        suffix = "";
+      }
+      else {
+        str = aGrip.initial;
+        suffix = "\u2026";
+      }
+
+      if (aFormatString) {
+        return this.formatResultString(str) + suffix;
+      }
+      return str;
+    }
+
     if (aGrip && type == "object") {
       return aGrip.displayString || aGrip.className || aGrip.type || type;
     }
-    return type == "string" && aFormatString ?
-           this.formatResultString(aGrip) : aGrip + "";
+
+    return aGrip + "";
   },
 
   /**
    * Helper function to deduce the name of the provided function.
    *
    * @param funtion aFunction
    *        The function whose name will be returned.
    * @return string
@@ -808,16 +829,20 @@ var WebConsoleUtils = {
     if (typeof val == "string") {
       return this.formatResultString(val);
     }
 
     if (typeof val != "object" || !val) {
       return val;
     }
 
+    if (val.type == "longString") {
+      return this.formatResultString(val.initial) + "\u2026";
+    }
+
     if (val.type == "function" && val.functionName) {
       return "function " + val.functionName + "(" +
              val.functionArguments.join(", ") + ")";
     }
     if (val.type == "object" && val.className) {
       return val.className;
     }
 
@@ -1918,23 +1943,28 @@ NetworkResponseListener.prototype = {
    */
   _onComplete: function NRL__onComplete(aData)
   {
     let response = {
       mimeType: "",
       text: aData || "",
     };
 
-    // TODO: Bug 787981 - use LongStringActor for strings that are too long.
+    response.size = response.text.length;
 
     try {
       response.mimeType = this.request.contentType;
     }
     catch (ex) { }
 
+    if (!response.mimeType || !NetworkHelper.isTextMimeType(response.mimeType)) {
+      response.encoding = "base64";
+      response.text = btoa(response.text);
+    }
+
     if (response.mimeType && this.request.contentCharset) {
       response.mimeType += "; charset=" + this.request.contentCharset;
     }
 
     this.receivedData = "";
 
     this.httpActivity.owner.
       addResponseContent(response, this.httpActivity.discardResponseBody);
diff --git a/toolkit/devtools/webconsole/dbg-webconsole-actors.js b/toolkit/devtools/webconsole/dbg-webconsole-actors.js
--- a/toolkit/devtools/webconsole/dbg-webconsole-actors.js
+++ b/toolkit/devtools/webconsole/dbg-webconsole-actors.js
@@ -62,51 +62,38 @@ function WebConsoleActor(aConnection, aP
            aParentActor.browser instanceof Ci.nsIDOMElement) {
     this._window = aParentActor.browser.contentWindow;
   }
   else {
     this._window = Services.wm.getMostRecentWindow("navigator:browser");
     this._isGlobalActor = true;
   }
 
-  this._objectActorsPool = new ActorPool(this.conn);
-  this.conn.addActorPool(this._objectActorsPool);
-
-  this._networkEventActorsPool = new ActorPool(this.conn);
-  this.conn.addActorPool(this._networkEventActorsPool);
+  this._actorPool = new ActorPool(this.conn);
+  this.conn.addActorPool(this._actorPool);
 
   this._prefs = {};
 }
 
 WebConsoleActor.prototype =
 {
   /**
    * Tells if this Web Console actor is a global actor or not.
    * @private
    * @type boolean
    */
   _isGlobalActor: false,
 
   /**
-   * Actor pool for all of the object actors for objects we send to the client.
+   * Actor pool for all of the actors we send to the client.
    * @private
    * @type object
    * @see ActorPool
-   * @see WebConsoleObjectActor
-   * @see this.objectGrip()
    */
-  _objectActorsPool: null,
-
-  /**
-   * Actor pool for all of the network event actors.
-   * @private
-   * @type object
-   * @see NetworkEventActor
-   */
-  _networkEventActorsPool: null,
+  _actorPool: null,
 
   /**
    * Web Console-related preferences.
    * @private
    * @type object
    */
   _prefs: null,
 
@@ -207,20 +194,18 @@ WebConsoleActor.prototype =
     if (this.networkMonitor) {
       this.networkMonitor.destroy();
       this.networkMonitor = null;
     }
     if (this.consoleProgressListener) {
       this.consoleProgressListener.destroy();
       this.consoleProgressListener = null;
     }
-    this.conn.removeActorPool(this._objectActorsPool);
-    this.conn.removeActorPool(this._networkEventActorsPool);
-    this._objectActorsPool = null;
-    this._networkEventActorsPool = null;
+    this.conn.removeActorPool(this.actorPool);
+    this._actorPool = null;
     this._sandboxLocation = this.sandbox = null;
     this.conn = this._window = null;
   },
 
   /**
    * Create a grip for the given value. If the value is an object,
    * a WebConsoleObjectActor will be created.
    *
@@ -238,55 +223,68 @@ WebConsoleActor.prototype =
    *
    * @param object aObject
    *        The object you want.
    * @param object
    *        The object grip.
    */
   createObjectActor: function WCA_createObjectActor(aObject)
   {
+    if (typeof aObject == "string") {
+      return this.createStringGrip(aObject);
+    }
+
     // We need to unwrap the object, otherwise we cannot access the properties
     // and methods added by the content scripts.
     let obj = WebConsoleUtils.unwrap(aObject);
     let actor = new WebConsoleObjectActor(obj, this);
-    this._objectActorsPool.addActor(actor);
+    this._actorPool.addActor(actor);
     return actor.grip();
   },
 
   /**
+   * Create a grip for the given string. If the given string is a long string,
+   * then a LongStringActor grip will be used.
+   *
+   * @param string aString
+   *        The string you want to create the grip for.
+   * @return string|object
+   *         The same string, as is, or a LongStringActor object that wraps the
+   *         given string.
+   */
+  createStringGrip: function WCA_createStringGrip(aString)
+  {
+    if (aString.length >= DebuggerServer.LONG_STRING_LENGTH) {
+      let actor = new LongStringActor(aString, this);
+      this._actorPool.addActor(actor);
+      return actor.grip();
+    }
+    return aString;
+  },
+
+  /**
    * Get an object actor by its ID.
    *
    * @param string aActorID
    * @return object
    */
   getObjectActorByID: function WCA_getObjectActorByID(aActorID)
   {
-    return this._objectActorsPool.get(aActorID);
+    return this._actorPool.get(aActorID);
   },
 
   /**
-   * Release an object grip for the given object actor.
+   * Release an actor.
    *
    * @param object aActor
-   *        The WebConsoleObjectActor instance you want to release.
+   *        The actor instance you want to release.
    */
-  releaseObject: function WCA_releaseObject(aActor)
+  releaseActor: function WCA_releaseActor(aActor)
   {
-    this._objectActorsPool.removeActor(aActor.actorID);
-  },
-
-  /**
-   * Release a network event actor.
-   *
-   * @param object aActor
-   *        The NetworkEventActor instance you want to release.
-   */
-  releaseNetworkEvent: function WCA_releaseNetworkEvent(aActor)
-  {
-    this._networkEventActorsPool.removeActor(aActor.actorID);
+    this._actorPool.removeActor(aActor.actorID);
   },
 
   //////////////////
   // Request handlers for known packet types.
   //////////////////
 
   /**
    * Handler for the "startListeners" request.
@@ -702,17 +700,17 @@ WebConsoleActor.prototype =
    *        The initial network request event information.
    * @return object
    *         A new NetworkEventActor is returned. This is used for tracking the
    *         network request and response.
    */
   onNetworkEvent: function WCA_onNetworkEvent(aEvent)
   {
     let actor = new NetworkEventActor(aEvent, this);
-    this._networkEventActorsPool.addActor(actor);
+    this._actorPool.addActor(actor);
 
     let packet = {
       from: this.actorID,
       type: "networkEvent",
       eventActor: actor.grip(),
     };
 
     this.conn.send(packet);
@@ -872,30 +870,29 @@ WebConsoleObjectActor.prototype =
     return grip;
   },
 
   /**
    * Releases this actor from the pool.
    */
   release: function WCOA_release()
   {
-    this.parent.releaseObject(this);
+    this.parent.releaseActor(this);
     this.parent = this.obj = null;
   },
 
   /**
    * Handle a protocol request to inspect the properties of the object.
    *
    * @return object
    *         Message to send to the client. This holds the 'properties' property
    *         - an array with a descriptor for each property in the object.
    */
   onInspectProperties: function WCOA_onInspectProperties()
   {
-    // TODO: Bug 787981 - use LongStringActor for strings that are too long.
     let createObjectActor = this.parent.createObjectActor.bind(this.parent);
     let props = WebConsoleUtils.inspectObject(this.obj, createObjectActor);
     return {
       from: this.actorID,
       properties: props,
     };
   },
 
@@ -975,17 +972,17 @@ NetworkEventActor.prototype =
     };
   },
 
   /**
    * Releases this actor from the pool.
    */
   release: function NEA_release()
   {
-    this.parent.releaseNetworkEvent(this);
+    this.parent.releaseActor(this);
   },
 
   /**
    * Handle a protocol request to release a grip.
    */
   onRelease: function NEA_onRelease()
   {
     this.release();
@@ -1103,16 +1100,17 @@ NetworkEventActor.prototype =
    * Add network request headers.
    *
    * @param array aHeaders
    *        The request headers array.
    */
   addRequestHeaders: function NEA_addRequestHeaders(aHeaders)
   {
     this._request.headers = aHeaders;
+    this._prepareHeaders(aHeaders);
 
     let packet = {
       from: this.actorID,
       type: "networkEventUpdate",
       updateType: "requestHeaders",
       headers: aHeaders.length,
       headersSize: this._request.headersSize,
     };
@@ -1124,16 +1122,17 @@ NetworkEventActor.prototype =
    * Add network request cookies.
    *
    * @param array aCookies
    *        The request cookies array.
    */
   addRequestCookies: function NEA_addRequestCookies(aCookies)
   {
     this._request.cookies = aCookies;
+    this._prepareHeaders(aCookies);
 
     let packet = {
       from: this.actorID,
       type: "networkEventUpdate",
       updateType: "requestCookies",
       cookies: aCookies.length,
     };
 
@@ -1144,16 +1143,17 @@ NetworkEventActor.prototype =
    * Add network request POST data.
    *
    * @param object aPostData
    *        The request POST data.
    */
   addRequestPostData: function NEA_addRequestPostData(aPostData)
   {
     this._request.postData = aPostData;
+    aPostData.text = this.parent.createStringGrip(aPostData.text);
 
     let packet = {
       from: this.actorID,
       type: "networkEventUpdate",
       updateType: "requestPostData",
       dataSize: aPostData.text.length,
       discardRequestBody: this._discardRequestBody,
     };
@@ -1189,16 +1189,17 @@ NetworkEventActor.prototype =
    * Add network response headers.
    *
    * @param array aHeaders
    *        The response headers array.
    */
   addResponseHeaders: function NEA_addResponseHeaders(aHeaders)
   {
     this._response.headers = aHeaders;
+    this._prepareHeaders(aHeaders);
 
     let packet = {
       from: this.actorID,
       type: "networkEventUpdate",
       updateType: "responseHeaders",
       headers: aHeaders.length,
       headersSize: this._response.headersSize,
     };
@@ -1210,16 +1211,17 @@ NetworkEventActor.prototype =
    * Add network response cookies.
    *
    * @param array aCookies
    *        The response cookies array.
    */
   addResponseCookies: function NEA_addResponseCookies(aCookies)
   {
     this._response.cookies = aCookies;
+    this._prepareHeaders(aCookies);
 
     let packet = {
       from: this.actorID,
       type: "networkEventUpdate",
       updateType: "responseCookies",
       cookies: aCookies.length,
     };
 
@@ -1233,16 +1235,17 @@ NetworkEventActor.prototype =
    *        The response content.
    * @param boolean aDiscardedResponseBody
    *        Tells if the response content was recorded or not.
    */
   addResponseContent:
   function NEA_addResponseContent(aContent, aDiscardedResponseBody)
   {
     this._response.content = aContent;
+    aContent.text = this.parent.createStringGrip(aContent.text);
 
     let packet = {
       from: this.actorID,
       type: "networkEventUpdate",
       updateType: "responseContent",
       mimeType: aContent.mimeType,
       contentSize: aContent.text.length,
       discardResponseBody: aDiscardedResponseBody,
@@ -1268,16 +1271,29 @@ NetworkEventActor.prototype =
       from: this.actorID,
       type: "networkEventUpdate",
       updateType: "eventTimings",
       totalTime: aTotal,
     };
 
     this.conn.send(packet);
   },
+
+  /**
+   * Prepare the headers array to be sent to the client by using the
+   * LongStringActor for the header values, when needed.
+   *
+   * @param array aHeaders
+   */
+  _prepareHeaders: function NEA__prepareHeaders(aHeaders)
+  {
+    for (let header of aHeaders) {
+      header.value = this.parent.createStringGrip(header.value);
+    }
+  },
 };
 
 NetworkEventActor.prototype.requestTypes =
 {
   "release": NetworkEventActor.prototype.onRelease,
   "getRequestHeaders": NetworkEventActor.prototype.onGetRequestHeaders,
   "getRequestCookies": NetworkEventActor.prototype.onGetRequestCookies,
   "getRequestPostData": NetworkEventActor.prototype.onGetRequestPostData,
diff --git a/toolkit/devtools/webconsole/test/common.js b/toolkit/devtools/webconsole/test/common.js
--- a/toolkit/devtools/webconsole/test/common.js
+++ b/toolkit/devtools/webconsole/test/common.js
@@ -132,8 +132,33 @@ function checkHeadersOrCookies(aArray, a
     if (expected instanceof RegExp) {
       ok(expected.test(elem.value), elem.name + ": " + expected);
     }
     else {
       is(elem.value, expected, elem.name);
     }
   }
 }
+
+var gTestState = {};
+
+function runTests(aTests, aEndCallback)
+{
+  function driver()
+  {
+    let lastResult, sendToNext;
+    for (let i = 0; i < aTests.length; i++) {
+      gTestState.index = i;
+      let fn = aTests[i];
+      info("will run test #" + i + ": " + fn.name);
+      lastResult = fn(sendToNext, lastResult);
+      sendToNext = yield lastResult;
+    }
+    yield aEndCallback(sendToNext, lastResult);
+  }
+  gTestState.driver = driver();
+  return gTestState.driver.next();
+}
+
+function nextTest(aMessage)
+{
+  return gTestState.driver.send(aMessage);
+}
diff --git a/toolkit/devtools/webconsole/test/test_consoleapi.html b/toolkit/devtools/webconsole/test/test_consoleapi.html
--- a/toolkit/devtools/webconsole/test/test_consoleapi.html
+++ b/toolkit/devtools/webconsole/test/test_consoleapi.html
@@ -13,22 +13,25 @@
 
 <script class="testbody" type="text/javascript;version=1.8">
 SimpleTest.waitForExplicitFinish();
 
 let expectedConsoleCalls = [];
 
 function doConsoleCalls(aState)
 {
+  let longString = (new Array(DebuggerServer.LONG_STRING_LENGTH + 2)).join("a");
+
   console.log("foobarBaz-log", undefined);
   console.info("foobarBaz-info", null);
   console.warn("foobarBaz-warn", document.body);
   console.debug(null);
   console.trace();
   console.dir(document, window);
+  console.log("foo", longString);
 
   expectedConsoleCalls = [
     {
       level: "log",
       filename: /test_consoleapi/,
       functionName: "doConsoleCalls",
       timeStamp: /^\d+$/,
       arguments: ["foobarBaz-log", { type: "undefined" }],
@@ -93,16 +96,32 @@ function doConsoleCalls(aState)
           value: 2,
         },
         {
           name: "CDATA_SECTION_NODE",
           value: 4,
         }, // ...
       ],
     },
+    {
+      level: "log",
+      filename: /test_consoleapi/,
+      functionName: "doConsoleCalls",
+      timeStamp: /^\d+$/,
+      arguments: [
+        "foo",
+        {
+          type: "longString",
+          initial: longString.substring(0,
+            DebuggerServer.LONG_STRING_INITIAL_LENGTH),
+          length: longString.length,
+          actor: /[a-z]/,
+        },
+      ],
+    },
   ];
 }
 
 function startTest()
 {
   removeEventListener("load", startTest);
 
   attachConsole(["ConsoleAPI"], onAttach);
diff --git a/toolkit/devtools/webconsole/test/test_jsterm.html b/toolkit/devtools/webconsole/test/test_jsterm.html
--- a/toolkit/devtools/webconsole/test/test_jsterm.html
+++ b/toolkit/devtools/webconsole/test/test_jsterm.html
@@ -9,137 +9,211 @@
      - http://creativecommons.org/publicdomain/zero/1.0/ -->
 </head>
 <body>
 <p>Test for JavaScript terminal functionality</p>
 
 <script class="testbody" type="text/javascript;version=1.8">
 SimpleTest.waitForExplicitFinish();
 
+let gState;
+
 function startTest()
 {
   removeEventListener("load", startTest);
 
   attachConsole(["PageError"], onAttach, true);
 }
 
 function onAttach(aState, aResponse)
 {
   top.foobarObject = Object.create(null);
   top.foobarObject.foo = 1;
   top.foobarObject.foobar = 2;
   top.foobarObject.foobaz = 3;
   top.foobarObject.omg = 4;
   top.foobarObject.omgfoo = 5;
+  top.foobarObject.strfoo = "foobarz";
+  top.foobarObject.omgstr = "foobarz" +
+    (new Array(DebuggerServer.LONG_STRING_LENGTH * 2)).join("abb");
 
-  info("test autocomplete for 'window.foo'");
-  onAutocomplete1 = onAutocomplete1.bind(null, aState);
-  aState.client.autocomplete("window.foo", 0, onAutocomplete1);
+  gState = aState;
+
+  let tests = [doAutocomplete1, doAutocomplete2, doSimpleEval, doWindowEval,
+    doEvalWithException, doEvalWithHelper, doEvalString, doEvalLongString];
+  runTests(tests, testEnd);
 }
 
-function onAutocomplete1(aState, aResponse)
+function doAutocomplete1()
+{
+  info("test autocomplete for 'window.foo'");
+  gState.client.autocomplete("window.foo", 0, onAutocomplete1);
+}
+
+function onAutocomplete1(aResponse)
 {
   let matches = aResponse.matches;
 
   is(aResponse.matchProp, "foo", "matchProp");
   is(matches.length, 1, "matches.length");
   is(matches[0], "foobarObject", "matches[0]");
 
-  info("test autocomplete for 'window.foobarObject.'");
-
-  onAutocomplete2 = onAutocomplete2.bind(null, aState);
-  aState.client.autocomplete("window.foobarObject.", 0, onAutocomplete2);
+  nextTest();
 }
 
-function onAutocomplete2(aState, aResponse)
+function doAutocomplete2()
+{
+  info("test autocomplete for 'window.foobarObject.'");
+  gState.client.autocomplete("window.foobarObject.", 0, onAutocomplete2);
+}
+
+function onAutocomplete2(aResponse)
 {
   let matches = aResponse.matches;
 
   ok(!aResponse.matchProp, "matchProp");
-  is(matches.length, 5, "matches.length");
-  checkObject(matches, ["foo", "foobar", "foobaz", "omg", "omgfoo"]);
+  is(matches.length, 7, "matches.length");
+  checkObject(matches,
+    ["foo", "foobar", "foobaz", "omg", "omgfoo", "omgstr", "strfoo"]);
 
-  info("test eval '2+2'");
-
-  onEval1 = onEval1.bind(null, aState);
-  aState.client.evaluateJS("2+2", onEval1);
+  nextTest();
 }
 
-function onEval1(aState, aResponse)
+function doSimpleEval()
+{
+  info("test eval '2+2'");
+  gState.client.evaluateJS("2+2", onSimpleEval);
+}
+
+function onSimpleEval(aResponse)
 {
   checkObject(aResponse, {
-    from: aState.actor,
+    from: gState.actor,
     input: "2+2",
     result: 4,
   });
 
   ok(!aResponse.error, "no js error");
   ok(!aResponse.helperResult, "no helper result");
 
-  info("test eval 'window'");
-  onEval2 = onEval2.bind(null, aState);
-  aState.client.evaluateJS("window", onEval2);
+  nextTest();
 }
 
-function onEval2(aState, aResponse)
+function doWindowEval()
+{
+  info("test eval 'window'");
+  gState.client.evaluateJS("window", onWindowEval);
+}
+
+function onWindowEval(aResponse)
 {
   checkObject(aResponse, {
-    from: aState.actor,
+    from: gState.actor,
     input: "window",
     result: {
       type: "object",
       className: "Window",
       actor: /[a-z]/,
     },
   });
 
   ok(!aResponse.error, "no js error");
   ok(!aResponse.helperResult, "no helper result");
 
-  info("test eval with exception");
-
-  onEvalWithException = onEvalWithException.bind(null, aState);
-  aState.client.evaluateJS("window.doTheImpossible()",
-                           onEvalWithException);
+  nextTest();
 }
 
-function onEvalWithException(aState, aResponse)
+function doEvalWithException()
+{
+  info("test eval with exception");
+  gState.client.evaluateJS("window.doTheImpossible()", onEvalWithException);
+}
+
+function onEvalWithException(aResponse)
 {
   checkObject(aResponse, {
-    from: aState.actor,
+    from: gState.actor,
     input: "window.doTheImpossible()",
     result: {
       type: "undefined",
     },
     errorMessage: /doTheImpossible/,
   });
 
   ok(aResponse.error, "js error object");
   ok(!aResponse.helperResult, "no helper result");
 
-  info("test eval with helper");
-
-  onEvalWithHelper = onEvalWithHelper.bind(null, aState);
-  aState.client.evaluateJS("clear()", onEvalWithHelper);
+  nextTest();
 }
 
-function onEvalWithHelper(aState, aResponse)
+function doEvalWithHelper()
+{
+  info("test eval with helper");
+  gState.client.evaluateJS("clear()", onEvalWithHelper);
+}
+
+function onEvalWithHelper(aResponse)
 {
   checkObject(aResponse, {
-    from: aState.actor,
+    from: gState.actor,
     input: "clear()",
     result: {
       type: "undefined",
     },
     helperResult: { type: "clearOutput" },
   });
 
   ok(!aResponse.error, "no js error");
 
-  closeDebugger(aState, function() {
+  nextTest();
+}
+
+function doEvalString()
+{
+  gState.client.evaluateJS("window.foobarObject.strfoo", onEvalString);
+}
+
+function onEvalString(aResponse)
+{
+  checkObject(aResponse, {
+    from: gState.actor,
+    input: "window.foobarObject.strfoo",
+    result: "foobarz",
+  });
+
+  nextTest();
+}
+
+function doEvalLongString()
+{
+  gState.client.evaluateJS("window.foobarObject.omgstr", onEvalLongString);
+}
+
+function onEvalLongString(aResponse)
+{
+  let str = top.foobarObject.omgstr;
+  let initial = str.substring(0, DebuggerServer.LONG_STRING_INITIAL_LENGTH);
+
+  checkObject(aResponse, {
+    from: gState.actor,
+    input: "window.foobarObject.omgstr",
+    result: {
+      type: "longString",
+      initial: initial,
+      length: str.length,
+    },
+  });
+
+  nextTest();
+}
+
+function testEnd()
+{
+  closeDebugger(gState, function() {
+    gState = null;
     SimpleTest.finish();
   });
 }
 
 addEventListener("load", startTest);
 </script>
 </body>
 </html>
diff --git a/toolkit/devtools/webconsole/test/test_object_actor.html b/toolkit/devtools/webconsole/test/test_object_actor.html
--- a/toolkit/devtools/webconsole/test/test_object_actor.html
+++ b/toolkit/devtools/webconsole/test/test_object_actor.html
@@ -23,17 +23,20 @@ function startTest()
   attachConsole(["ConsoleAPI"], onAttach, true);
 }
 
 function onAttach(aState, aResponse)
 {
   onConsoleCall = onConsoleCall.bind(null, aState);
   aState.dbgClient.addListener("consoleAPICall", onConsoleCall);
 
+  let longString = (new Array(DebuggerServer.LONG_STRING_LENGTH + 3)).join("\u0629");
+
   window.foobarObject = Object.create(null);
+  foobarObject.tamarbuta = longString;
   foobarObject.foo = 1;
   foobarObject.foobar = "hello";
   foobarObject.foobaz = document;
   foobarObject.omg = null;
   foobarObject.testfoo = false;
   foobarObject.notInspectable = {};
   foobarObject.omgfn = function _omgfn() {
     return "myResult";
@@ -115,16 +118,25 @@ function onAttach(aState, aResponse)
         type: "function",
         className: "function",
         displayString: /function _omgfn/,
         actor: /[a-z]/,
         inspectable: false,
       },
     },
     {
+      name: "tamarbuta",
+      value: {
+        type: "longString",
+        initial: longString.substring(0,
+          DebuggerServer.LONG_STRING_INITIAL_LENGTH),
+        length: longString.length,
+      },
+    },
+    {
       name: "testfoo",
       value: false,
     },
   ];
 }
 
 function onConsoleCall(aState, aType, aPacket)
 {
