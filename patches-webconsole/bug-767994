# HG changeset patch
# Parent cb2904476d146bce98091f77d1246350d673afca
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1340639894 -10800

Bug 767994 - reset the toolbar error counter when the clear button is pressed

diff --git a/browser/devtools/shared/DeveloperToolbar.jsm b/browser/devtools/shared/DeveloperToolbar.jsm
--- a/browser/devtools/shared/DeveloperToolbar.jsm
+++ b/browser/devtools/shared/DeveloperToolbar.jsm
@@ -494,16 +494,32 @@ function DT__updateErrorsCount(aChangedT
       this._webConsoleButtonLabel + " (" + errors + ")";
   }
   else {
     this._webConsoleButton.label = this._webConsoleButtonLabel;
   }
 };
 
 /**
+ * Reset the errors counter for the given tab.
+ *
+ * @param nsIDOMElement aTab The xul:tab for which you want to reset the page
+ * errors counters.
+ */
+DeveloperToolbar.prototype.resetErrorsCount =
+function DT_resetErrorsCount(aTab)
+{
+  let tabId = aTab.linkedPanel;
+  if (tabId in this._errorsCount) {
+    this._errorsCount[tabId] = 0;
+    this._updateErrorsCount(tabId);
+  }
+};
+
+/**
  * Panel to handle command line output.
  * @param aChromeDoc document from which we can pull the parts we need.
  * @param aInput the input element that should get focus.
  * @param aLoadCallback called when the panel is loaded properly.
  */
 function OutputPanel(aChromeDoc, aInput, aLoadCallback)
 {
   this._input = aInput;
diff --git a/browser/devtools/shared/test/browser_toolbar_webconsole_errors_count.js b/browser/devtools/shared/test/browser_toolbar_webconsole_errors_count.js
--- a/browser/devtools/shared/test/browser_toolbar_webconsole_errors_count.js
+++ b/browser/devtools/shared/test/browser_toolbar_webconsole_errors_count.js
@@ -25,17 +25,17 @@ function test() {
     toolbar.doCommand();
   }
 
   ignoreAllUncaughtExceptions();
   addTab(TEST_URI, openToolbar);
 
   function getErrorsCount() {
     let match = webconsole.label.match(/\((\d+)\)$/);
-    return (match || [])[1];
+    return match ? match[1] : 0;
   }
 
   function onOpenToolbar() {
     ok(DeveloperToolbar.visible, "DeveloperToolbar is visible");
 
     waitForValue({
       name: "web console button shows page errors",
       validator: getErrorsCount,
@@ -144,21 +144,33 @@ function test() {
       failure: finish,
     });
 
     let waitForNewError = {
       name: "the Web Console displays the new error",
       validator: function() {
         return hud.outputNode.textContent.indexOf("foobarBug762996click") > -1;
       },
-      success: doPageReload.bind(null, hud),
+      success: doClearConsoleButton.bind(null, hud),
       failure: finish,
     };
   }
 
+  function doClearConsoleButton(hud) {
+    let clearButton = hud.HUDBox
+                      .querySelector(".webconsole-clear-console-button");
+    EventUtils.synthesizeMouse(clearButton, 2, 2, {}, window);
+
+    is(hud.outputNode.textContent.indexOf("foobarBug762996click"), -1,
+       "clear console button worked");
+    is(getErrorsCount(), 0, "page errors counter has been reset");
+
+    doPageReload(hud);
+  }
+
   function doPageReload(hud) {
     tab1.linkedBrowser.addEventListener("load", function _onReload() {
       tab1.linkedBrowser.removeEventListener("load", _onReload, true);
       ignoreAllUncaughtExceptions(false);
       expectUncaughtException();
     }, true);
 
     ignoreAllUncaughtExceptions();
@@ -174,17 +186,17 @@ function test() {
       failure: finish,
     });
 
     let waitForConsoleOutputAfterReload = {
       name: "the Web Console displays the correct number of errors after reload",
       validator: function() {
         return hud.outputNode.querySelectorAll(".hud-exception").length;
       },
-      value: 4,
+      value: 3,
       success: function() {
         isnot(hud.outputNode.textContent.indexOf("foobarBug762996load"), -1,
               "foobarBug762996load found in console output after page reload");
         testEnd();
       },
       failure: testEnd,
     };
   }
diff --git a/browser/devtools/webconsole/HUDService.jsm b/browser/devtools/webconsole/HUDService.jsm
--- a/browser/devtools/webconsole/HUDService.jsm
+++ b/browser/devtools/webconsole/HUDService.jsm
@@ -1836,16 +1836,17 @@ HeadsUpDisplay.prototype = {
    * @return void
    */
   makeClearConsoleButton: function HUD_makeClearConsoleButton(aToolbar)
   {
     let hudId = this.hudId;
     function HUD_clearButton_onCommand() {
       let hud = HUDService.getHudReferenceById(hudId);
       hud.jsterm.clearOutput(true);
+      hud.chromeWindow.DeveloperToolbar.resetErrorsCount(hud.tab);
     }
 
     let clearButton = this.makeXULNode("toolbarbutton");
     clearButton.setAttribute("label", l10n.getStr("btnClear"));
     clearButton.classList.add("webconsole-clear-console-button");
     clearButton.addEventListener("command", HUD_clearButton_onCommand, false);
 
     aToolbar.appendChild(clearButton);
