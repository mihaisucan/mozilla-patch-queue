# HG changeset patch
# Parent d5a0afa466c2eba626e48f5d87cfcd1744bf338d
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1373566526 -10800

diff --git a/addon-sdk/source/lib/sdk/core/promise.js b/addon-sdk/source/lib/sdk/core/promise.js
--- a/addon-sdk/source/lib/sdk/core/promise.js
+++ b/addon-sdk/source/lib/sdk/core/promise.js
@@ -117,31 +117,31 @@ function defer(prototype) {
         // result of invoking it with a resolution value. If handler is not
         // provided propagate value through.
         try {
           deferred.resolve(onFulfill ? onFulfill(value) : value);
         }
         // `onFulfill` may throw exception in which case resulting promise
         // is rejected with thrown exception.
         catch(error) {
-          if (exports._reportErrors && typeof(console) === 'object')
+          if (exports._options.reportErrors && typeof(console) === 'object')
             console.error(error);
           // Note: Following is equivalent of `deferred.reject(error)`,
           // we use this shortcut to reduce a stack.
           deferred.resolve(rejected(error));
         }
       }
 
       function reject(reason) {
         try {
           if (onError) deferred.resolve(onError(reason));
           else deferred.resolve(rejected(reason));
         }
         catch(error) {
-          if (exports._reportErrors && typeof(console) === 'object')
+          if (exports._options.reportErrors && typeof(console) === 'object')
             console.error(error);
           deferred.resolve(rejected(error));
         }
       }
 
       // If enclosed promise (`this.promise`) observers queue is still alive
       // enqueue a new observer pair into it. Note that this does not
       // necessary means that promise is pending, it may already be resolved,
@@ -283,10 +283,11 @@ var promised = (function() {
         then(execute);
     };
   }
 })();
 exports.promised = promised;
 
 var all = promised(Array);
 exports.all = all;
+exports._options = { reportErrors: false };
 
 });
