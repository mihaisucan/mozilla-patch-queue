# HG changeset patch
# Parent d5e1244962950d294817fcb1b975b0a90c52b50c
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1357851280 -7200

Bug 808370 - Use the VariablesView in webconsole

diff --git a/browser/devtools/jar.mn b/browser/devtools/jar.mn
--- a/browser/devtools/jar.mn
+++ b/browser/devtools/jar.mn
@@ -3,16 +3,17 @@
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 browser.jar:
     content/browser/devtools/markup-view.xhtml    (markupview/markup-view.xhtml)
     content/browser/devtools/markup-view.css      (markupview/markup-view.css)
     content/browser/NetworkPanel.xhtml            (webconsole/NetworkPanel.xhtml)
     content/browser/devtools/webconsole.js        (webconsole/webconsole.js)
     content/browser/devtools/webconsole.xul       (webconsole/webconsole.xul)
+    content/browser/devtools/VariablesView.xul    (webconsole/VariablesView.xul)
 *   content/browser/scratchpad.xul                (scratchpad/scratchpad.xul)
     content/browser/scratchpad.js                 (scratchpad/scratchpad.js)
     content/browser/splitview.css                 (shared/splitview.css)
     content/browser/styleeditor.xul               (styleeditor/styleeditor.xul)
     content/browser/styleeditor.css               (styleeditor/styleeditor.css)
     content/browser/devtools/csshtmltree.xul      (styleinspector/csshtmltree.xul)
     content/browser/devtools/cssruleview.xul      (styleinspector/cssruleview.xul)
     content/browser/devtools/styleinspector.css   (styleinspector/styleinspector.css)
diff --git a/browser/devtools/webconsole/VariablesView.xul b/browser/devtools/webconsole/VariablesView.xul
new file mode 100644
--- /dev/null
+++ b/browser/devtools/webconsole/VariablesView.xul
@@ -0,0 +1,15 @@
+<?xml version="1.0"?>
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+<?xml-stylesheet href="chrome://global/skin/global.css"?>
+<?xml-stylesheet href="chrome://browser/content/debugger.css" type="text/css"?>
+<?xml-stylesheet href="chrome://browser/skin/devtools/common.css" type="text/css"?>
+<?xml-stylesheet href="chrome://browser/skin/devtools/debugger.css" type="text/css"?>
+<!DOCTYPE window [
+  <!ENTITY % viewDTD SYSTEM "chrome://browser/locale/devtools/VariablesView.dtd">
+  %viewDTD;
+]>
+<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" title="&PropertiesViewWindowTitle;">
+  <vbox id="variables" flex="1"/>
+</window>
diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -19,16 +19,19 @@ XPCOMUtils.defineLazyModuleGetter(this, 
                                   "resource://gre/modules/devtools/dbg-server.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "DebuggerClient",
                                   "resource://gre/modules/devtools/dbg-client.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "debuggerSocketConnect",
                                   "resource://gre/modules/devtools/dbg-client.jsm");
 
+XPCOMUtils.defineLazyModuleGetter(this, "GripClient",
+                                  "resource://gre/modules/devtools/dbg-client.jsm");
+
 XPCOMUtils.defineLazyServiceGetter(this, "clipboardHelper",
                                    "@mozilla.org/widget/clipboardhelper;1",
                                    "nsIClipboardHelper");
 
 XPCOMUtils.defineLazyModuleGetter(this, "PropertyPanel",
                                   "resource:///modules/PropertyPanel.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "PropertyTreeView",
@@ -41,27 +44,35 @@ XPCOMUtils.defineLazyModuleGetter(this, 
                                   "resource:///modules/AutocompletePopup.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "WebConsoleUtils",
                                   "resource://gre/modules/devtools/WebConsoleUtils.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "Promise",
                                   "resource://gre/modules/commonjs/promise/core.js");
 
+XPCOMUtils.defineLazyModuleGetter(this, "VariablesView",
+                                  "resource:///modules/devtools/VariablesView.jsm");
+
+XPCOMUtils.defineLazyModuleGetter(this, "ToolSidebar",
+                                  "resource:///modules/devtools/Sidebar.jsm");
+
 const STRINGS_URI = "chrome://browser/locale/devtools/webconsole.properties";
 let l10n = new WebConsoleUtils.l10n(STRINGS_URI);
 
 
 // The XUL namespace.
 const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
 
 const MIXED_CONTENT_LEARN_MORE = "https://developer.mozilla.org/en/Security/MixedContent";
 
 const HELP_URL = "https://developer.mozilla.org/docs/Tools/Web_Console/Helpers";
 
+const VARIABLES_VIEW_URL = "chrome://browser/content/devtools/VariablesView.xul";
+
 // The amount of time in milliseconds that must pass between messages to
 // trigger the display of a new group.
 const NEW_GROUP_DELAY = 5000;
 
 // The amount of time in milliseconds that we wait before performing a live
 // search.
 const SEARCH_DELAY = 200;
 
@@ -1005,69 +1016,57 @@ WebConsoleFrame.prototype = {
       case "warn":
       case "error":
       case "debug":
       case "dir":
       case "groupEnd": {
         body = { arguments: args };
         let clipboardArray = [];
         args.forEach(function(aValue) {
-          clipboardArray.push(WebConsoleUtils.objectActorGripToString(aValue));
+          clipboardArray.push(VariablesView.getString(aValue));
           if (aValue && typeof aValue == "object" && aValue.actor) {
             objectActors.push(aValue.actor);
+            return; // FIXME: fix long strings support
             let displayStringIsLong = typeof aValue.displayString == "object" &&
                                       aValue.displayString.type == "longString";
             if (aValue.type == "longString" || displayStringIsLong) {
               clipboardArray.push(l10n.getStr("longStringEllipsis"));
             }
             if (displayStringIsLong) {
               objectActors.push(aValue.displayString.actor);
             }
           }
         }, this);
         clipboardText = clipboardArray.join(" ");
         sourceURL = aMessage.filename;
         sourceLine = aMessage.lineNumber;
 
-        if (level == "dir") {
-          body.objectProperties = aMessage.objectProperties;
-        }
-        else if (level == "groupEnd") {
+        if (level == "groupEnd") {
           objectActors.forEach(this._releaseObject, this);
 
           if (this.groupDepth > 0) {
             this.groupDepth--;
           }
           return; // no need to continue
         }
 
         break;
       }
 
       case "trace": {
-        let filename = WebConsoleUtils.abbreviateSourceURL(args[0].filename);
-        let functionName = args[0].functionName ||
+        sourceURL = aMessage.filename;
+        sourceLine = aMessage.lineNumber;
+
+        let filename = WebConsoleUtils.abbreviateSourceURL(aMessage.filename);
+        let functionName = aMessage.functionName ||
                            l10n.getStr("stacktrace.anonymousFunction");
-        let lineNumber = args[0].lineNumber;
-
-        body = l10n.getFormatStr("stacktrace.outputMessage",
-                                 [filename, functionName, lineNumber]);
-
-        sourceURL = args[0].filename;
-        sourceLine = args[0].lineNumber;
-
-        clipboardText = "";
-
-        args.forEach(function(aFrame) {
-          clipboardText += aFrame.filename + " :: " +
-                           aFrame.functionName + " :: " +
-                           aFrame.lineNumber + "\n";
-        });
-
-        clipboardText = clipboardText.trimRight();
+        let lineNumber = aMessage.lineNumber;
+        clipboardText = body =
+          l10n.getFormatStr("stacktrace.outputMessage",
+                            [filename, functionName, lineNumber]);
         break;
       }
 
       case "group":
       case "groupCollapsed":
         clipboardText = body = args;
         sourceURL = aMessage.filename;
         sourceLine = aMessage.lineNumber;
@@ -1117,33 +1116,32 @@ WebConsoleFrame.prototype = {
       node._stacktrace = args;
 
       this.makeOutputMessageLink(node, function _traceNodeClickCallback() {
         if (node._panelOpen) {
           return;
         }
 
         let options = {
-          anchor: node,
-          data: { object: node._stacktrace },
+          rawObject: node._stacktrace,
         };
 
-        let propPanel = this.jsterm.openPropertyPanel(options);
-        propPanel.panel.setAttribute("hudId", this.hudId);
+        // FIXME: check this
+        this.jsterm.openVariablesView(options);
       }.bind(this));
     }
 
-    if (level == "dir") {
+    /* FIXME if (level == "dir") {
       // Initialize the inspector message node, by setting the PropertyTreeView
       // object on the tree view. This has to be done *after* the node is
       // shown, because the tree binding must be attached first.
       node._onOutput = function _onMessageOutput() {
         node.querySelector("tree").view = node.propertyTreeView;
       };
-    }
+    }*/
 
     return node;
   },
 
   /**
    * Handle ConsoleAPICall objects received from the server. This method outputs
    * the window.console API call.
    *
@@ -1170,44 +1168,33 @@ WebConsoleFrame.prototype = {
    */
   _consoleLogClick:
   function WCF__consoleLogClick(aMessage, aAnchor, aObjectActor)
   {
     if (aAnchor._panelOpen) {
       return;
     }
 
-    let options = {
-      title: aAnchor.textContent,
-      anchor: aAnchor,
-
-      // Data to inspect.
-      data: {
-        objectPropertiesProvider: this.objectPropertiesProvider.bind(this),
-        releaseObject: this._releaseObject.bind(this),
-      },
-    };
-
-    let propPanel;
+    /*
     let onPopupHide = function _onPopupHide() {
       propPanel.panel.removeEventListener("popuphiding", onPopupHide, false);
 
       if (!aMessage.parentNode && aMessage._objectActors) {
         aMessage._objectActors.forEach(this._releaseObject, this);
         aMessage._objectActors = null;
       }
     }.bind(this);
-
-    this.objectPropertiesProvider(aObjectActor.actor,
-      function _onObjectProperties(aProperties) {
-        options.data.objectProperties = aProperties;
-        propPanel = this.jsterm.openPropertyPanel(options);
-        propPanel.panel.setAttribute("hudId", this.hudId);
-        propPanel.panel.addEventListener("popuphiding", onPopupHide, false);
-      }.bind(this));
+    */
+
+    // TODO: release object actor.
+
+    let options2 = {
+      object: aObjectActor,
+    };
+    this.jsterm.openVariablesView(options2);
   },
 
   /**
    * Reports an error in the page source, either JavaScript or CSS.
    *
    * @param nsIScriptError aScriptError
    *        The error message to report.
    * @return nsIDOMElement|undefined
@@ -2173,17 +2160,17 @@ WebConsoleFrame.prototype = {
     let node = this.document.createElementNS(XUL_NS, "richlistitem");
 
     if (aBody instanceof Ci.nsIDOMNode) {
       bodyNode.appendChild(aBody);
     }
     else {
       let str = undefined;
       if (aLevel == "dir") {
-        str = WebConsoleUtils.objectActorGripToString(aBody.arguments[0]);
+        str = VariablesView.getString(aBody.arguments[0]);
       }
       else if (["log", "info", "warn", "error", "debug"].indexOf(aLevel) > -1 &&
                typeof aBody == "object") {
         this._makeConsoleLogMessageBody(node, bodyNode, aBody);
       }
       else {
         str = aBody;
       }
@@ -2219,17 +2206,17 @@ WebConsoleFrame.prototype = {
     node.classList.add("hud-msg-node");
 
     node.timestamp = timestamp;
     this.setMessageType(node, aCategory, aSeverity);
 
     node.appendChild(timestampNode);
     node.appendChild(iconContainer);
     // Display the object tree after the message node.
-    if (aLevel == "dir") {
+    if (aLevel == "dir2") { // FIXME: use VariablesView
       // Make the body container, which is a vertical box, for grouping the text
       // and tree widgets.
       let bodyContainer = this.document.createElement("vbox");
       bodyContainer.flex = 1;
       bodyContainer.appendChild(bodyNode);
       // Create the tree.
       let tree = this.document.createElement("tree");
       tree.setAttribute("hidecolumnpicker", "true");
@@ -2301,26 +2288,27 @@ WebConsoleFrame.prototype = {
       configurable: false
     });
 
     aBody.arguments.forEach(function(aItem) {
       if (aContainer.firstChild) {
         aContainer.appendChild(this.document.createTextNode(" "));
       }
 
-      let text = WebConsoleUtils.objectActorGripToString(aItem);
-
-      if (aItem && typeof aItem != "object" || !aItem.inspectable) {
+      let text = VariablesView.getString(aItem);
+      let inspectable = !VariablesView.isPrimitive({ value: aItem });
+
+      if (aItem && typeof aItem != "object" || !inspectable) {
         aContainer.appendChild(this.document.createTextNode(text));
 
         let longString = null;
         if (aItem.type == "longString") {
           longString = aItem;
         }
-        else if (!aItem.inspectable &&
+        else if (!inspectable &&
                  typeof aItem.displayString == "object" &&
                  aItem.displayString.type == "longString") {
           longString = aItem.displayString;
         }
 
         if (longString) {
           let ellipsis = this.document.createElement("description");
           ellipsis.classList.add("hud-clickable");
@@ -2718,16 +2706,17 @@ function JSTerm(aWebConsoleFrame)
   this.hudId = this.hud.hudId;
 
   this.lastCompletion = { value: null };
   this.history = [];
   this.historyIndex = 0;
   this.historyPlaceHolder = 0;  // this.history.length;
   this._keyPress = this.keyPress.bind(this);
   this._inputEventHandler = this.inputEventHandler.bind(this);
+  this._fetchVarProperties = this._fetchVarProperties.bind(this);
 }
 
 JSTerm.prototype = {
   /**
    * Stores the data for the last completion.
    * @type object
    */
   lastCompletion: null,
@@ -2801,22 +2790,25 @@ JSTerm.prototype = {
   function JST__executeResultCallback(aAfterNode, aCallback, aResponse)
   {
     if (!this.hud) {
       return;
     }
 
     let errorMessage = aResponse.errorMessage;
     let result = aResponse.result;
-    let inspectable = result && typeof result == "object" && result.inspectable;
+    let inspectable = false;
+    if (result && !VariablesView.isPrimitive({ value: result })) {
+      inspectable = true;
+    }
     let helperResult = aResponse.helperResult;
     let helperHasRawOutput = !!(helperResult || {}).rawOutput;
-    let resultString =
-      WebConsoleUtils.objectActorGripToString(result,
-                                              !helperHasRawOutput);
+    let resultString = VariablesView.getString(result);
+
+    // TODO: fix inspectObject
 
     if (helperResult && helperResult.type) {
       switch (helperResult.type) {
         case "clearOutput":
           this.clearOutput();
           break;
         case "inspectObject":
           this.handleInspectObject(helperResult.input, helperResult.object);
@@ -2863,16 +2855,17 @@ JSTerm.prototype = {
                                 this._evalOutputClick.bind(this, aResponse),
                                 aAfterNode, aResponse.timestamp);
     }
     else {
       node = this.writeOutput(resultString, CATEGORY_OUTPUT, SEVERITY_LOG,
                               aAfterNode, aResponse.timestamp);
     }
 
+    // TODO: check long string magic
     if (result && typeof result == "object" && result.actor) {
       node._objectActors = [result.actor];
       if (typeof result.displayString == "object" &&
           result.displayString.type == "longString") {
         node._objectActors.push(result.displayString.actor);
       }
 
       // Add an ellipsis to expand the short string if the object is not
@@ -2925,17 +2918,17 @@ JSTerm.prototype = {
       this.writeOutput(l10n.getStr("executeEmptyInput"), CATEGORY_OUTPUT,
                        SEVERITY_LOG);
       return;
     }
 
     let node = this.writeOutput(aExecuteString, CATEGORY_INPUT, SEVERITY_LOG);
     let onResult = this._executeResultCallback.bind(this, node, aCallback);
 
-    this.webConsoleClient.evaluateJS(aExecuteString, onResult);
+    this.webConsoleClient.evaluateJS(aExecuteString, null, onResult);
 
     this.history.push(aExecuteString);
     this.historyIndex++;
     this.historyPlaceHolder = this.history.length;
     this.setInputValue("");
     this.clearCompletion();
   },
 
@@ -2993,16 +2986,159 @@ JSTerm.prototype = {
       }, false);
       aOptions.anchor._panelOpen = true;
     }
 
     return propPanel;
   },
 
   /**
+   * Opens a new variables view that allows the inspection of the given object.
+   *
+   * @param object aOptions
+   *        Property panel options:
+   *        - title:
+   *        Panel title.
+   *        - anchor:
+   *        The DOM element you want the panel to be anchored to.
+   *        - updateButtonCallback:
+   *        An optional function you want invoked when the user clicks the
+   *        Update button. If this function is not provided the Update button is
+   *        not shown.
+   *        - data:
+   *        An object that represents the object you want to inspect. Please see
+   *        the PropertyPanel documentation - this object is passed to the
+   *        PropertyPanel constructor
+   * @return object
+   *         The new instance of PropertyPanel.
+   */
+  openVariablesView: function JST_openVariablesView(aOptions)
+  {
+    let doc = this.hud.document;
+
+    if (!this.sidebar) {
+      let tabbox = doc.querySelector("#webconsole-sidebar");
+      this.sidebar = new ToolSidebar(tabbox, this);
+    }
+
+    let tab = this.sidebar.getTab("variablesview");
+    if (tab) {
+      this.sidebar.select("variablesview");
+      this._onVariablesViewTabReady(aOptions);
+    }
+    else {
+      let onTabReady = this._onVariablesViewTabReady.bind(this, aOptions);
+      this.sidebar.on("variablesview-ready", onTabReady);
+      this.sidebar.addTab("variablesview", VARIABLES_VIEW_URL);
+    }
+
+    this.sidebar.show();
+  },
+
+  _onVariablesViewTabReady: function JST__onVariablesViewTabReady(aOptions)
+  {
+    let view = this.variablesView;
+    if (!view) {
+      view = this.variablesView = this._createVariablesView();
+    }
+    view.empty();
+
+    // Make sure eval works in the correct context.
+    view.eval = this._variablesViewEvaluate.bind(this, aOptions.object);
+
+    let container = view.addScope().addVar();
+    container.allowDeletion = true;
+    this._fetchVarProperties(container, aOptions.object);
+  },
+
+  _createVariablesView: function JST__createVariablesView()
+  {
+    let tabDoc = this.sidebar.getWindowForTab("variablesview").document;
+    let container = tabDoc.querySelector("#variables");
+    let view = new VariablesView(container);
+    view.searchPlaceholder = l10n.getStr("propertiesFilterPlaceholder");
+    view.emptyText = l10n.getStr("emptyPropertiesList");
+    view.searchEnabled = true;
+    return view;
+  },
+
+  _variablesViewEvaluate: function JST__variablesViewEvaluate(aGrip, aString)
+  {
+    this.webConsoleClient.evaluateJS("_self" + aString, aGrip.actor);
+  },
+
+  /**
+   * Adds properties to a variable in the view. Triggered when a variable is
+   * expanded or certain variables are hovered. It does not expand the variable.
+   *
+   * @param object aVar
+   *        The VariableView Variable instance where the properties get added.
+   * @param object [aGrip=null]
+   *        Optional, the object actor grip of the variable. If the grip is not
+   *        provided, then the aVar.descriptor is used as the object actor grip.
+   */
+  _fetchVarProperties: function JST__fetchVarProperties(aVar, aGrip = null)
+  {
+    // Retrieve the properties only once.
+    if (aVar.fetched) {
+      return;
+    }
+    aVar.fetched = true;
+
+    let grip = aGrip || aVar.value;
+    if (!grip) {
+      throw new Error("No object actor grip was given for the variable.");
+    }
+    let client = new GripClient(this.hud.proxy.client, grip);
+    client.getPrototypeAndProperties(function(aResponse) {
+      let { ownProperties, prototype } = aResponse;
+
+      // Add all the variable properties.
+      if (ownProperties) {
+        aVar.addProperties(ownProperties);
+        // Expansion handlers must be set after the properties are added.
+        for (let name in ownProperties) {
+          this._addVarExpander(aVar.get(name), ownProperties[name].value);
+        }
+      }
+
+      // Add the variable's __proto__.
+      if (prototype && prototype.type != "null") {
+        aVar.addProperty("__proto__", { value: prototype });
+        // Expansion handlers must be set after the properties are added.
+        this._addVarExpander(aVar.get("__proto__"), prototype);
+      }
+
+      aVar._retrieved = true;
+
+      this.variablesView.commitHierarchy();
+    }.bind(this));
+  },
+
+  /**
+   * Adds an 'onexpand' callback for a variable, lazily handling the addition of
+   * new properties.
+   *
+   * @param Variable aVar
+   *        The variable where the properties will be placed into.
+   * @param any aGrip
+   *        The grip of the variable.
+   */
+  _addVarExpander: function JST__addVarExpander(aVar, aGrip)
+  {
+    aVar.allowDeletion = true;
+
+    // No need for expansion for primitive values.
+    if (VariablesView.isPrimitive({ value: aGrip })) {
+      return;
+    }
+    aVar.onexpand = this._fetchVarProperties;
+  },
+
+  /**
    * Writes a JS object to the JSTerm outputNode.
    *
    * @param string aOutputMessage
    *        The message to display.
    * @param function [aCallback]
    *        Optional function to invoke when users click the message.
    * @param nsIDOMNode [aNodeAfter]
    *        Optional DOM node after which you want to insert the new message.
@@ -3665,52 +3801,40 @@ JSTerm.prototype = {
    *        The message node for which we are handling events.
    */
   _evalOutputClick: function JST__evalOutputClick(aResponse, aLinkNode)
   {
     if (aLinkNode._panelOpen) {
       return;
     }
 
-    let options = {
-      title: aResponse.input,
-      anchor: aLinkNode,
-
-      // Data to inspect.
-      data: {
-        objectPropertiesProvider: this.hud.objectPropertiesProvider.bind(this.hud),
-        releaseObject: this.hud._releaseObject.bind(this.hud),
-      },
-    };
-
-    let propPanel;
-
+    /*
     options.updateButtonCallback = function JST__evalUpdateButton() {
       let onResult =
         this._evalOutputUpdatePanelCallback.bind(this, options, propPanel,
                                                  aResponse);
       this.webConsoleClient.evaluateJS(aResponse.input, onResult);
     }.bind(this);
 
     let onPopupHide = function JST__evalInspectPopupHide() {
       propPanel.panel.removeEventListener("popuphiding", onPopupHide, false);
 
       if (!aLinkNode.parentNode && aLinkNode._objectActors) {
         aLinkNode._objectActors.forEach(this.hud._releaseObject, this.hud);
         aLinkNode._objectActors = null;
       }
     }.bind(this);
-
-    this.hud.objectPropertiesProvider(aResponse.result.actor,
-      function _onObjectProperties(aProperties) {
-        options.data.objectProperties = aProperties;
-        propPanel = this.openPropertyPanel(options);
-        propPanel.panel.setAttribute("hudId", this.hudId);
-        propPanel.panel.addEventListener("popuphiding", onPopupHide, false);
-      }.bind(this));
+    */
+
+    // TODO: add a way to update the panel.
+    // TODO: release object actor.
+    let options2 = {
+      object: aResponse.result,
+    };
+    this.openVariablesView(options2);
   },
 
   /**
    * The callback used for updating the Property Panel when the user clicks the
    * Update button.
    *
    * @private
    * @param object aOptions
diff --git a/browser/devtools/webconsole/webconsole.xul b/browser/devtools/webconsole/webconsole.xul
--- a/browser/devtools/webconsole/webconsole.xul
+++ b/browser/devtools/webconsole/webconsole.xul
@@ -113,19 +113,26 @@
 
         <spacer flex="1"/>
 
         <textbox class="compact hud-filter-box devtools-searchinput" type="search"
                  placeholder="&filterBox.placeholder;"/>
         <toolbarbutton class="webconsole-clear-console-button devtools-toolbarbutton"
                        label="&btnClear.label;" tooltiptext="&btnClear.tooltip;"/>
       </toolbar>
-      <richlistbox class="hud-output-node" orient="vertical" flex="1"
-                   seltype="multiple" context="output-contextmenu"
-                   style="direction:ltr;"/>
+      <hbox flex="1">
+        <richlistbox class="hud-output-node" orient="vertical" flex="1"
+                     seltype="multiple" context="output-contextmenu"
+                     style="direction:ltr;"/>
+        <splitter class="devtools-side-splitter"/>
+        <tabbox id="webconsole-sidebar" class="devtools-sidebar-tabs" hidden="true">
+          <tabs/>
+          <tabpanels flex="1"/>
+        </tabbox>
+      </hbox>
       <hbox class="jsterm-input-container" style="direction:ltr">
         <stack class="jsterm-stack-node" flex="1">
           <textbox class="jsterm-complete-node" multiline="true" rows="1"
                    tabindex="-1"/>
           <textbox class="jsterm-input-node" multiline="true" rows="1"/>
         </stack>
       </hbox>
     </vbox>
diff --git a/browser/locales/en-US/chrome/browser/devtools/VariablesView.dtd b/browser/locales/en-US/chrome/browser/devtools/VariablesView.dtd
new file mode 100644
--- /dev/null
+++ b/browser/locales/en-US/chrome/browser/devtools/VariablesView.dtd
@@ -0,0 +1,12 @@
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+
+<!-- LOCALIZATION NOTE : FILE The correct localization of this file might be to
+  - keep it in English, or another language commonly spoken among web developers.
+  - You want to make that choice consistent across the developer tools.
+  - A good criteria is the language in which you'd find the best
+  - documentation on web development on the web. -->
+
+<!ENTITY PropertiesViewWindowTitle "Properties">
+
diff --git a/browser/locales/en-US/chrome/browser/devtools/webconsole.properties b/browser/locales/en-US/chrome/browser/devtools/webconsole.properties
--- a/browser/locales/en-US/chrome/browser/devtools/webconsole.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/webconsole.properties
@@ -196,8 +196,17 @@ NetworkPanel.fetchRemainingResponseConte
 # LOCALIZATION NOTE (NetworkPanel.fetchRemainingRequestContentLink): This is
 # displayed in the network panel when the request body is only partially
 # available.
 NetworkPanel.fetchRemainingRequestContentLink=Fetch the request body (%1$S bytes)
 
 # LOCALIZATION NOTE (connectionTimeout): Message displayed when the Remote Web
 # Console fails to connect to the server due to a timeout.
 connectionTimeout=Connection timeout. Check the Error Console on both ends for potential error messages. Reopen the Web Console to try again.
+
+# LOCALIZATION NOTE (propertiesFilterPlaceholder): This is the text that
+# appears in the filter text box for the properties view container.
+propertiesFilterPlaceholder=Filter
+
+# LOCALIZATION NOTE (emptyPropertiesList): The text that is displayed in the
+# properties pane when there are no properties to display.
+emptyPropertiesList=No properties to display
+
diff --git a/browser/locales/jar.mn b/browser/locales/jar.mn
--- a/browser/locales/jar.mn
+++ b/browser/locales/jar.mn
@@ -31,16 +31,17 @@
     locale/browser/devtools/tilt.properties           (%chrome/browser/devtools/tilt.properties)
     locale/browser/devtools/scratchpad.properties     (%chrome/browser/devtools/scratchpad.properties)
     locale/browser/devtools/scratchpad.dtd            (%chrome/browser/devtools/scratchpad.dtd)
     locale/browser/devtools/styleeditor.properties    (%chrome/browser/devtools/styleeditor.properties)
     locale/browser/devtools/styleeditor.dtd           (%chrome/browser/devtools/styleeditor.dtd)
     locale/browser/devtools/styleinspector.properties (%chrome/browser/devtools/styleinspector.properties)
     locale/browser/devtools/styleinspector.dtd        (%chrome/browser/devtools/styleinspector.dtd)
     locale/browser/devtools/webConsole.dtd            (%chrome/browser/devtools/webConsole.dtd)
+    locale/browser/devtools/VariablesView.dtd         (%chrome/browser/devtools/VariablesView.dtd)
     locale/browser/devtools/sourceeditor.properties   (%chrome/browser/devtools/sourceeditor.properties)
     locale/browser/devtools/sourceeditor.dtd          (%chrome/browser/devtools/sourceeditor.dtd)
     locale/browser/devtools/profiler.properties       (%chrome/browser/devtools/profiler.properties)
     locale/browser/devtools/layoutview.dtd            (%chrome/browser/devtools/layoutview.dtd)
     locale/browser/devtools/responsiveUI.properties   (%chrome/browser/devtools/responsiveUI.properties)
     locale/browser/devtools/toolbox.dtd            (%chrome/browser/devtools/toolbox.dtd)
     locale/browser/devtools/toolbox.properties     (%chrome/browser/devtools/toolbox.properties)
     locale/browser/devtools/inspector.dtd          (%chrome/browser/devtools/inspector.dtd)
diff --git a/toolkit/devtools/webconsole/dbg-webconsole-actors.js b/toolkit/devtools/webconsole/dbg-webconsole-actors.js
--- a/toolkit/devtools/webconsole/dbg-webconsole-actors.js
+++ b/toolkit/devtools/webconsole/dbg-webconsole-actors.js
@@ -829,17 +829,16 @@ WebConsoleActor.prototype =
       level: aMessage.level,
       filename: aMessage.filename,
       lineNumber: aMessage.lineNumber,
       functionName: aMessage.functionName,
       timeStamp: aMessage.timeStamp,
     };
 
     switch (result.level) {
-      case "trace":
       case "group":
       case "groupCollapsed":
       case "time":
       case "timeEnd":
         result.arguments = aMessage.arguments;
         break;
       default:
         result.arguments = Array.map(aMessage.arguments || [],
