# HG changeset patch
# User Thomas Andersen <thomas@mr-andersen.no>
# Date 1395703717 -3600
#      Tue Mar 25 00:28:37 2014 +0100
# Node ID cd345b3d4c2a21b95c3b74dc7f845270d749c0c5
# Parent 5308c7eee7a025a79ae1e4d23063a98d87be024e
Bug 971798 - Do not enable CSS reflow logging when clicking the CSS category; r=msucan; try: -b do -p linux,linux64,macosx64,win32,win64 -u mochitest-bc -t none

diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_601667_filter_buttons.js b/browser/devtools/webconsole/test/browser_webconsole_bug_601667_filter_buttons.js
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_601667_filter_buttons.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_bug_601667_filter_buttons.js
@@ -101,28 +101,40 @@ function testMenuFilterButton(aCategory)
 
   ok(isChecked(button), "the button for category " + aCategory + " is " +
      "checked after clicking its main part");
 
   menuItem = firstMenuItem;
   while (menuItem) {
     if (menuItem.hasAttribute("prefKey")) {
       let prefKey = menuItem.getAttribute("prefKey");
-      ok(isChecked(menuItem), "menu item " + prefKey + " for category " +
-         aCategory + " is checked after clicking the button");
-      ok(hud.ui.filterPrefs[prefKey], prefKey + " messages are " +
-         "on after clicking the button");
+      // The CSS/Log menu item should not be checked. See bug 971798.
+      if (aCategory == "css" && prefKey == "csslog") {
+        ok(!isChecked(menuItem), "menu item " + prefKey + " for category " +
+           aCategory + " should not be checked after clicking the button");
+        ok(!hud.ui.filterPrefs[prefKey], prefKey + " messages are " +
+           "off after clicking the button");
+      } else {
+        ok(isChecked(menuItem), "menu item " + prefKey + " for category " +
+           aCategory + " is checked after clicking the button");
+        ok(hud.ui.filterPrefs[prefKey], prefKey + " messages are " +
+           "on after clicking the button");
+      }
     }
     menuItem = menuItem.nextSibling;
   }
 
   // Uncheck the main button by unchecking all the filters
   menuItem = firstMenuItem;
   while (menuItem) {
-    chooseMenuItem(menuItem);
+    // The csslog menu item is already unchecked at this point.
+    // Make sure it is not selected. See bug 971798.
+    if (menuItem.getAttribute("prefKey") != "csslog") {
+      chooseMenuItem(menuItem);
+    }
     menuItem = menuItem.nextSibling;
   }
 
   ok(!isChecked(button), "the button for category " + aCategory + " is " +
      "unchecked after unchecking all its filters");
 
   // Turn all the filters on again by clicking the button.
   clickButton(subbutton);
@@ -141,20 +153,28 @@ function testIsolateFilterButton(aCatego
   altClickButton(subbutton);
   ok(isChecked(targetButton), "the button for category " + aCategory +
      " is checked after isolating for filter");
 
   // Check if all the filters for the target button are on.
   let menuItems = targetButton.querySelectorAll("menuitem");
   Array.forEach(menuItems, (item) => {
     let prefKey = item.getAttribute("prefKey");
-    ok(isChecked(item), "menu item " + prefKey + " for category " +
-      aCategory + " is checked after isolating for " + aCategory);
-    ok(hud.ui.filterPrefs[prefKey], prefKey + " messages are " +
-      "turned on after isolating for " + aCategory);
+    // The CSS/Log filter should not be checked. See bug 971798.
+    if (aCategory == "css" && prefKey == "csslog") {
+      ok(!isChecked(item), "menu item " + prefKey + " for category " +
+        aCategory + " should not be checked after isolating for " + aCategory);
+      ok(!hud.ui.filterPrefs[prefKey], prefKey + " messages should be " +
+        "turned off after isolating for " + aCategory);
+    } else {
+      ok(isChecked(item), "menu item " + prefKey + " for category " +
+        aCategory + " is checked after isolating for " + aCategory);
+      ok(hud.ui.filterPrefs[prefKey], prefKey + " messages are " +
+        "turned on after isolating for " + aCategory);
+    }
   });
 
   // Ensure all other filter buttons are toggled off and their
   // associated filters are turned off
   let buttons = hudBox.querySelectorAll(".webconsole-filter-button[category]");
   Array.forEach(buttons, (filterButton) => {
     if (filterButton !== targetButton) {
       let category = filterButton.getAttribute("category");
diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -838,16 +838,26 @@ WebConsoleFrame.prototype = {
           state = true;
         }
         target.setAttribute("checked", state);
 
         // This is a filter button with a drop-down, and the user clicked the
         // main part of the button. Go through all the severities and toggle
         // their associated filters.
         this._setMenuState(target, state);
+
+        // CSS reflow logging can decrease web page performance.
+        // Make sure the option is always unchecked when the CSS filter button is selected.
+        // See bug 971798.
+        if (target.getAttribute("category") == "css" && state) {
+          let csslogMenuItem = target.querySelector("menuitem[prefKey=csslog]");
+          csslogMenuItem.setAttribute("checked", false);
+          this.setFilterState("csslog", false);
+        }
+
         break;
       }
 
       case "menuitem": {
         let state = target.getAttribute("checked") !== "true";
         target.setAttribute("checked", state);
 
         let prefKey = target.getAttribute("prefKey");
diff --git a/browser/devtools/webconsole/webconsole.xul b/browser/devtools/webconsole/webconsole.xul
--- a/browser/devtools/webconsole/webconsole.xul
+++ b/browser/devtools/webconsole/webconsole.xul
@@ -107,17 +107,17 @@ function goUpdateConsoleCommands() {
                        tooltiptext="&btnPageCSS.tooltip;"
                        accesskey="&btnPageCSS.accesskey;"
                        tabindex="4">
           <menupopup>
             <menuitem label="&btnConsoleErrors;" type="checkbox" autocheck="false"
                       prefKey="csserror"/>
             <menuitem label="&btnConsoleWarnings;" type="checkbox"
                       autocheck="false" prefKey="cssparser"/>
-            <menuitem label="&btnConsoleLog;" type="checkbox"
+            <menuitem label="&btnConsoleReflows;" type="checkbox"
                       autocheck="false" prefKey="csslog"/>
           </menupopup>
         </toolbarbutton>
         <toolbarbutton label="&btnPageJS.label;" type="menu-button"
                        category="js" class="devtools-toolbarbutton webconsole-filter-button"
                        tooltiptext="&btnPageJS.tooltip;"
                        accesskey="&btnPageJS.accesskey;"
                        tabindex="5">
diff --git a/browser/locales/en-US/chrome/browser/devtools/webConsole.dtd b/browser/locales/en-US/chrome/browser/devtools/webConsole.dtd
--- a/browser/locales/en-US/chrome/browser/devtools/webConsole.dtd
+++ b/browser/locales/en-US/chrome/browser/devtools/webConsole.dtd
@@ -68,16 +68,17 @@
   -  console.error(). -->
 <!ENTITY btnPageLogging.label   "Logging">
 <!ENTITY btnPageLogging.tooltip "Log messages sent to the window.console object">
 <!ENTITY btnPageLogging.accesskey3 "L">
 <!ENTITY btnConsoleErrors       "Errors">
 <!ENTITY btnConsoleInfo         "Info">
 <!ENTITY btnConsoleWarnings     "Warnings">
 <!ENTITY btnConsoleLog          "Log">
+<!ENTITY btnConsoleReflows      "Reflows">
 
 <!ENTITY filterOutput.placeholder "Filter output">
 <!ENTITY btnClear.label        "Clear">
 <!ENTITY btnClear.tooltip      "Clear the Web Console output">
 <!ENTITY btnClear.accesskey    "r">
 
 <!ENTITY fullZoomEnlargeCmd.commandkey  "+">
 <!ENTITY fullZoomEnlargeCmd.commandkey2 "="> <!-- + is above this key on many keyboards -->
