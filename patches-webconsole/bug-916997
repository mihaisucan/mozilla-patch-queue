# HG changeset patch
# Parent 344353b9772b8802b8385ebbd81655b87b72c6ae
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1379613790 -10800

Bug 916997 - All lines are combined to one line. when copying multiple log (Select All > Copy); r=past; try: -b do -p linux,linux64,macosx64,win32,win64 -u mochitest-bc -t none

diff --git a/browser/devtools/webconsole/console-output.js b/browser/devtools/webconsole/console-output.js
--- a/browser/devtools/webconsole/console-output.js
+++ b/browser/devtools/webconsole/console-output.js
@@ -408,16 +408,17 @@ Messages.NavigationMarker.prototype = He
     this.output.owner._addMessageLinkCallback(urlnode, () => {
       this.output.owner.owner.openLink(this._url);
     });
 
     let render = Messages.BaseMessage.prototype.render.bind(this);
     render().element.appendChild(urlnode);
     this.element.classList.add("navigation-marker");
     this.element.url = this._url;
+    this.element.appendChild(doc.createTextNode("\n"));
 
     return this;
   },
 }); // Messages.NavigationMarker.prototype
 
 
 function gSequenceId()
 {
diff --git a/browser/devtools/webconsole/test/Makefile.in b/browser/devtools/webconsole/test/Makefile.in
--- a/browser/devtools/webconsole/test/Makefile.in
+++ b/browser/devtools/webconsole/test/Makefile.in
@@ -131,16 +131,17 @@ MOCHITEST_BROWSER_FILES = \
 	browser_console_variables_view_while_debugging_and_inspecting.js \
 	browser_webconsole_bug_686937_autocomplete_JSTerm_helpers.js \
 	browser_webconsole_cached_autocomplete.js \
 	browser_console_navigation_marker.js \
 	browser_webconsole_bug_762593_insecure_passwords_web_console_warning.js \
 	browser_webconsole_bug_762593_insecure_passwords_about_blank_web_console_warning.js \
 	browser_webconsole_allow_mixedcontent_securityerrors.js \
 	browser_webconsole_block_mixedcontent_securityerrors.js \
+	browser_webconsole_output_copy_newlines.js \
 	head.js \
 	$(NULL)
 
 ifeq ($(OS_ARCH), Darwin)
 MOCHITEST_BROWSER_FILES += \
 	browser_webconsole_bug_804845_ctrl_key_nav.js \
         $(NULL)
 endif
diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_587617_output_copy.js b/browser/devtools/webconsole/test/browser_webconsole_bug_587617_output_copy.js
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_587617_output_copy.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_bug_587617_output_copy.js
@@ -50,18 +50,19 @@ function consoleOpened(aHud) {
     goUpdateCommand("cmd_copy");
     controller = top.document.commandDispatcher.getControllerForCommand("cmd_copy");
     is(controller.isCommandEnabled("cmd_copy"), true, "cmd_copy is enabled");
 
     let selection = HUD.iframeWindow.getSelection() + "";
     isnot(selection.indexOf("bug587617"), -1,
           "selection text includes 'bug587617'");
 
-    waitForClipboard(selection, () => goDoCommand("cmd_copy"),
-                     testContextMenuCopy, testContextMenuCopy);
+    waitForClipboard((str) => { return selection.trim() == str.trim(); },
+      () => { goDoCommand("cmd_copy") },
+      testContextMenuCopy, testContextMenuCopy);
   });
 }
 
 // Test that the context menu "Copy" (which has a different code path) works
 // properly as well.
 function testContextMenuCopy() {
   let contextMenuId = outputNode.parentNode.getAttribute("context");
   let contextMenu = HUD.ui.document.getElementById(contextMenuId);
@@ -69,13 +70,14 @@ function testContextMenuCopy() {
 
   let copyItem = contextMenu.querySelector("*[command='cmd_copy']");
   ok(copyItem, "the context menu on the output node has a \"Copy\" item");
 
   let selection = HUD.iframeWindow.getSelection() + "";
 
   copyItem.doCommand();
 
-  waitForClipboard(selection, () => goDoCommand("cmd_copy"),
-                   finishTest, finishTest);
+  waitForClipboard((str) => { return selection.trim() == str.trim(); },
+    () => { goDoCommand("cmd_copy") },
+    finishTest, finishTest);
   HUD = outputNode = null;
 }
 
diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_613280_jsterm_copy.js b/browser/devtools/webconsole/test/browser_webconsole_bug_613280_jsterm_copy.js
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_613280_jsterm_copy.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_bug_613280_jsterm_copy.js
@@ -70,11 +70,11 @@ function performTest(HUD, [result]) {
   controller = top.document.commandDispatcher.
                getControllerForCommand("cmd_copy");
   is(controller.isCommandEnabled("cmd_copy"), true, "cmd_copy is enabled");
 
   let selectionText = HUD.iframeWindow.getSelection() + "";
   isnot(selectionText.indexOf("foobarBazBug613280"), -1,
         "selection text includes 'foobarBazBug613280'");
 
-  waitForClipboard(selectionText, clipboard_setup, clipboard_copy_done,
-                   clipboard_copy_done);
+  waitForClipboard((str) => { return str.trim() == selectionText.trim(); },
+                   clipboard_setup, clipboard_copy_done, clipboard_copy_done);
 }
diff --git a/browser/devtools/webconsole/test/browser_webconsole_output_copy_newlines.js b/browser/devtools/webconsole/test/browser_webconsole_output_copy_newlines.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/webconsole/test/browser_webconsole_output_copy_newlines.js
@@ -0,0 +1,77 @@
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/ */
+
+// Test that multiple messages are copied into the clipboard and that they are
+// separated by new lines. See bug 916997.
+
+function test()
+{
+  const TEST_URI = "data:text/html;charset=utf8,<p>hello world, bug 916997";
+  let clipboardValue = "";
+
+  addTab(TEST_URI);
+  browser.addEventListener("load", function onLoad() {
+    browser.removeEventListener("load", onLoad, true);
+    openConsole(null, consoleOpened);
+  }, true);
+
+  function consoleOpened(hud)
+  {
+    hud.jsterm.clearOutput();
+
+    let controller = top.document.commandDispatcher.
+                     getControllerForCommand("cmd_copy");
+    is(controller.isCommandEnabled("cmd_copy"), false, "cmd_copy is disabled");
+
+    content.console.log("Hello world! bug916997a");
+    content.console.log("Hello world 2! bug916997b");
+
+    waitForMessages({
+      webconsole: hud,
+      messages: [{
+        text: "Hello world! bug916997a",
+        category: CATEGORY_WEBDEV,
+        severity: SEVERITY_LOG,
+      }, {
+        text: "Hello world 2! bug916997b",
+        category: CATEGORY_WEBDEV,
+        severity: SEVERITY_LOG,
+      }],
+    }).then(() => {
+      hud.ui.output.selectAllMessages();
+      hud.outputNode.focus();
+
+      goUpdateCommand("cmd_copy");
+      controller = top.document.commandDispatcher.getControllerForCommand("cmd_copy");
+      is(controller.isCommandEnabled("cmd_copy"), true, "cmd_copy is enabled");
+
+      let selection = hud.iframeWindow.getSelection() + "";
+      info("selection '" + selection + "'");
+      waitForClipboard((str) => {
+          clipboardValue = str;
+          return str.indexOf("bug916997a") > -1 && str.indexOf("bug916997b") > -1;
+        },
+        () => { goDoCommand("cmd_copy"); },
+        checkClipboard.bind(null, hud),
+        () => {
+          info("last clipboard value: '" + clipboardValue + "'");
+          finishTest();
+        });
+    });
+  }
+
+  function checkClipboard(hud)
+  {
+    info("clipboard value '" + clipboardValue + "'");
+    let lines = clipboardValue.trim().split("\n");
+    is(hud.outputNode.children.length, 2, "number of messages");
+    is(lines.length, hud.outputNode.children.length, "number of lines");
+    isnot(lines[0].indexOf("bug916997a"), -1,
+          "first message text includes 'bug916997a'");
+    isnot(lines[1].indexOf("bug916997b"), -1,
+          "second message text includes 'bug916997b'");
+    is(lines[0].indexOf("bug916997b"), -1,
+       "first message text does not include 'bug916997b'");
+    finishTest();
+  }
+}
diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -2412,16 +2412,17 @@ WebConsoleFrame.prototype = {
 
     node.appendChild(bodyNode);
     if (repeatNode) {
       node.appendChild(repeatNode);
     }
     if (locationNode) {
       node.appendChild(locationNode);
     }
+    node.appendChild(this.document.createTextNode("\n"));
 
     return node;
   },
 
   /**
    * Make the message body for console.log() calls.
    *
    * @private
