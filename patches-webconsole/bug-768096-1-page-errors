# HG changeset patch
# Parent 185cb4260f01302256439d271443f2547cf3f131
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1346356169 -10800

Bug 768096 - Web Console remote debugging protocol support - Part 1: page errors

diff --git a/browser/devtools/webconsole/HUDService-content.js b/browser/devtools/webconsole/HUDService-content.js
--- a/browser/devtools/webconsole/HUDService-content.js
+++ b/browser/devtools/webconsole/HUDService-content.js
@@ -180,16 +180,18 @@ let Manager = {
       aMessage.features.forEach(function(aFeature) {
         this.enableFeature(aFeature, aMessage[aFeature]);
       }, this);
     }
 
     if (aMessage.cachedMessages) {
       this._sendCachedMessages(aMessage.cachedMessages);
     }
+
+    this.sendMessage("WebConsole:Initialized", {});
   },
 
   /**
    * Add a remote message handler. This is used by other components of the Web
    * Console content script.
    *
    * @param string aName
    *        Message name to listen for.
diff --git a/browser/devtools/webconsole/HUDService.jsm b/browser/devtools/webconsole/HUDService.jsm
--- a/browser/devtools/webconsole/HUDService.jsm
+++ b/browser/devtools/webconsole/HUDService.jsm
@@ -534,17 +534,17 @@ WebConsole.prototype = {
   /**
    * Message names that the HUD listens for. These messages come from the remote
    * Web Console content script.
    *
    * @private
    * @type array
    */
   _messageListeners: ["JSTerm:EvalObject", "WebConsole:ConsoleAPI",
-    "WebConsole:CachedMessages", "WebConsole:PageError", "JSTerm:EvalResult",
+    "WebConsole:CachedMessages", "WebConsole:Initialized", "JSTerm:EvalResult",
     "JSTerm:AutocompleteProperties", "JSTerm:ClearOutput",
     "JSTerm:InspectObject", "WebConsole:NetworkActivity",
     "WebConsole:FileActivity", "WebConsole:LocationChange",
     "JSTerm:NonNativeConsoleAPI"],
 
   /**
    * The xul:panel that holds the Web Console when it is positioned as a window.
    * @type nsIDOMElement
@@ -921,44 +921,30 @@ WebConsole.prototype = {
   {
     this.messageManager.loadFrameScript(CONTENT_SCRIPT_URL, true);
 
     this._messageListeners.forEach(function(aName) {
       this.messageManager.addMessageListener(aName, this.ui);
     }, this);
 
     let message = {
-      features: ["ConsoleAPI", "JSTerm", "PageError", "NetworkMonitor",
-                 "LocationChange"],
+      features: ["ConsoleAPI", "JSTerm", "NetworkMonitor", "LocationChange"],
       cachedMessages: ["ConsoleAPI", "PageError"],
       NetworkMonitor: { monitorFileActivity: true },
       JSTerm: { notifyNonNativeConsoleAPI: true },
       preferences: {
         "NetworkMonitor.saveRequestAndResponseBodies":
           this.ui.saveRequestAndResponseBodies,
       },
     };
 
     this.sendMessageToContent("WebConsole:Init", message);
   },
 
   /**
-   * Callback method for when the Web Console initialization is complete. For
-   * now this method sends the web-console-created notification using the
-   * nsIObserverService.
-   *
-   * @private
-   */
-  _onInitComplete: function WC__onInitComplete()
-  {
-    let id = WebConsoleUtils.supportsString(this.hudId);
-    Services.obs.notifyObservers(id, "web-console-created", null);
-  },
-
-  /**
    * Handler for messages that have an associated callback function. The
    * this.sendMessageToContent() allows one to provide a function to be invoked
    * when the content script replies to the message previously sent. This is the
    * method that invokes the callback.
    *
    * @see this.sendMessageToContent
    * @private
    * @param object aResponse
diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_597103_deactivateHUDForContext_unfocused_window.js b/browser/devtools/webconsole/test/browser_webconsole_bug_597103_deactivateHUDForContext_unfocused_window.js
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_597103_deactivateHUDForContext_unfocused_window.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_bug_597103_deactivateHUDForContext_unfocused_window.js
@@ -9,80 +9,110 @@
  * ***** END LICENSE BLOCK ***** */
 
 const TEST_URI = "http://example.com/browser/browser/devtools/webconsole/test/test-console.html";
 
 let tab1, tab2, win1, win2;
 let noErrors = true;
 
 function tab1Loaded(aEvent) {
-  browser.removeEventListener(aEvent.type, arguments.callee, true);
+  browser.removeEventListener(aEvent.type, tab1Loaded, true);
 
   win2 = OpenBrowserWindow();
   win2.addEventListener("load", win2Loaded, true);
 }
 
 function win2Loaded(aEvent) {
-  win2.removeEventListener(aEvent.type, arguments.callee, true);
+  win2.removeEventListener(aEvent.type, win2Loaded, true);
 
-  tab2 = win2.gBrowser.addTab();
+  tab2 = win2.gBrowser.addTab(TEST_URI);
   win2.gBrowser.selectedTab = tab2;
   tab2.linkedBrowser.addEventListener("load", tab2Loaded, true);
-  tab2.linkedBrowser.contentWindow.location = TEST_URI;
 }
 
 function tab2Loaded(aEvent) {
-  tab2.linkedBrowser.removeEventListener(aEvent.type, arguments.callee, true);
+  tab2.linkedBrowser.removeEventListener(aEvent.type, tab2Loaded, true);
 
-  waitForFocus(function() {
+  let consolesOpened = 0;
+  function onWebConsoleOpen() {
+    consolesOpened++;
+    if (consolesOpened == 2) {
+      Services.obs.removeObserver(onWebConsoleOpen, "web-console-created");
+      executeSoon(closeConsoles);
+    }
+  }
+
+  Services.obs.addObserver(onWebConsoleOpen, "web-console-created", false);
+
+  function openConsoles() {
     try {
       HUDService.activateHUDForContext(tab1);
     }
     catch (ex) {
       ok(false, "HUDService.activateHUDForContext(tab1) exception: " + ex);
       noErrors = false;
     }
 
     try {
       HUDService.activateHUDForContext(tab2);
     }
     catch (ex) {
       ok(false, "HUDService.activateHUDForContext(tab2) exception: " + ex);
       noErrors = false;
     }
+  }
+
+  let consolesClosed = 0;
+  function onWebConsoleClose()
+  {
+    consolesClosed++;
+    if (consolesClosed == 2) {
+      Services.obs.removeObserver(onWebConsoleClose, "web-console-destroyed");
+      executeSoon(testEnd);
+    }
+  }
+
+  function closeConsoles() {
+    Services.obs.addObserver(onWebConsoleClose, "web-console-destroyed", false);
 
     try {
       HUDService.deactivateHUDForContext(tab1);
     }
     catch (ex) {
       ok(false, "HUDService.deactivateHUDForContext(tab1) exception: " + ex);
       noErrors = false;
     }
 
     try {
       HUDService.deactivateHUDForContext(tab2);
     }
     catch (ex) {
       ok(false, "HUDService.deactivateHUDForContext(tab2) exception: " + ex);
       noErrors = false;
     }
+  }
 
-    if (noErrors) {
-      ok(true, "there were no errors");
-    }
+  function testEnd() {
+    ok(noErrors, "there were no errors");
 
-    win2.gBrowser.removeTab(tab2);
+    Array.forEach(win1.gBrowser.tabs, function(aTab) {
+      win1.gBrowser.removeTab(aTab);
+    });
+    Array.forEach(win2.gBrowser.tabs, function(aTab) {
+      win2.gBrowser.removeTab(aTab);
+    });
 
     executeSoon(function() {
       win2.close();
       tab1 = tab2 = win1 = win2 = null;
       finishTest();
     });
+  }
 
-  }, tab2.linkedBrowser.contentWindow);
+  waitForFocus(openConsoles, tab2.linkedBrowser.contentWindow);
 }
 
 function test() {
   addTab(TEST_URI);
   browser.addEventListener("load", tab1Loaded, true);
   tab1 = gBrowser.selectedTab;
   win1 = window;
 }
diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_601909_remember_height.js b/browser/devtools/webconsole/test/browser_webconsole_bug_601909_remember_height.js
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_601909_remember_height.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_bug_601909_remember_height.js
@@ -11,83 +11,97 @@
 // Minimum console height, in pixels.
 const MINIMUM_CONSOLE_HEIGHT = 150;
 
 // Minimum page height, in pixels. This prevents the Web Console from
 // remembering a height that covers the whole page.
 const MINIMUM_PAGE_HEIGHT = 50;
 const HEIGHT_PREF = "devtools.hud.height";
 
-let hud, newHeight, height, innerHeight;
+let hud, newHeight, height, innerHeight, testDriver;
 
-function performTests(aWebConsole)
+function testGen()
 {
-  hud = aWebConsole.iframe;
   height = parseInt(hud.style.height);
 
   toggleConsole();
+  yield;
 
   is(newHeight, height, "same height after reopening the console");
   is(Services.prefs.getIntPref(HEIGHT_PREF), HUDService.lastConsoleHeight,
     "pref is correct");
 
   setHeight(Math.ceil(innerHeight * 0.5));
   toggleConsole();
+  yield;
 
   is(newHeight, height, "same height after reopening the console");
   is(Services.prefs.getIntPref(HEIGHT_PREF), HUDService.lastConsoleHeight,
     "pref is correct");
 
   setHeight(MINIMUM_CONSOLE_HEIGHT - 1);
   toggleConsole();
+  yield;
 
   is(newHeight, MINIMUM_CONSOLE_HEIGHT, "minimum console height is respected");
   is(Services.prefs.getIntPref(HEIGHT_PREF), HUDService.lastConsoleHeight,
     "pref is correct");
 
   setHeight(innerHeight - MINIMUM_PAGE_HEIGHT + 1);
   toggleConsole();
+  yield;
 
   is(newHeight, innerHeight - MINIMUM_PAGE_HEIGHT,
     "minimum page height is respected");
   is(Services.prefs.getIntPref(HEIGHT_PREF), HUDService.lastConsoleHeight,
     "pref is correct");
 
   setHeight(Math.ceil(innerHeight * 0.6));
   Services.prefs.setIntPref(HEIGHT_PREF, -1);
   toggleConsole();
+  yield;
 
   is(newHeight, height, "same height after reopening the console");
   is(Services.prefs.getIntPref(HEIGHT_PREF), -1, "pref is not updated");
 
   closeConsole();
   HUDService.lastConsoleHeight = 0;
   Services.prefs.setIntPref(HEIGHT_PREF, 0);
 
+  hud = testDriver = null;
   executeSoon(finishTest);
+
+  yield;
 }
 
 function toggleConsole()
 {
-  closeConsole();
-  openConsole();
+  closeConsole(null, function() {
+    openConsole(null, function() {
+      let hudId = HUDService.getHudIdByWindow(content);
+      hud = HUDService.hudReferences[hudId].iframe;
+      newHeight = parseInt(hud.style.height);
 
-  let hudId = HUDService.getHudIdByWindow(content);
-  hud = HUDService.hudReferences[hudId].iframe;
-  newHeight = parseInt(hud.style.height);
+      testDriver.next();
+    });
+  });
 }
 
 function setHeight(aHeight)
 {
   height = aHeight;
   hud.style.height = height + "px";
 }
 
 function test()
 {
   addTab("data:text/html;charset=utf-8,Web Console test for bug 601909");
   browser.addEventListener("load", function onLoad() {
     browser.removeEventListener("load", onLoad, true);
     innerHeight = content.innerHeight;
-    openConsole(null, performTests);
+    openConsole(null, function(aHud) {
+      hud = aHud.iframe;
+      testDriver = testGen();
+      testDriver.next();
+    });
   }, true);
 }
 
diff --git a/browser/devtools/webconsole/test/browser_webconsole_chrome.js b/browser/devtools/webconsole/test/browser_webconsole_chrome.js
--- a/browser/devtools/webconsole/test/browser_webconsole_chrome.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_chrome.js
@@ -1,26 +1,26 @@
 /* vim:set ts=2 sw=2 sts=2 et: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 // Tests that code completion works properly.
 
 function test() {
-  addTab("about:addons");
+  addTab("about:credits");
   browser.addEventListener("load", function onLoad() {
     browser.removeEventListener("load", onLoad, true);
     openConsole(null, testChrome);
   }, true);
 }
 
 function testChrome(hud) {
   ok(hud, "we have a console");
-  
+
   ok(hud.iframe, "we have the console iframe");
 
   let jsterm = hud.jsterm;
   ok(jsterm, "we have a jsterm");
 
   let input = jsterm.inputNode;
   ok(hud.outputNode, "we have an output node");
 
diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -10,16 +10,25 @@ const Cc = Components.classes;
 const Ci = Components.interfaces;
 const Cu = Components.utils;
 
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "Services",
                                   "resource://gre/modules/Services.jsm");
 
+XPCOMUtils.defineLazyModuleGetter(this, "DebuggerServer",
+                                  "resource://gre/modules/devtools/dbg-server.jsm");
+
+XPCOMUtils.defineLazyModuleGetter(this, "DebuggerClient",
+                                  "resource://gre/modules/devtools/dbg-client.jsm");
+
+XPCOMUtils.defineLazyModuleGetter(this, "WebConsoleClient",
+                                  "resource://gre/modules/devtools/dbg-client.jsm");
+
 XPCOMUtils.defineLazyServiceGetter(this, "clipboardHelper",
                                    "@mozilla.org/widget/clipboardhelper;1",
                                    "nsIClipboardHelper");
 
 XPCOMUtils.defineLazyModuleGetter(this, "PropertyPanel",
                                   "resource:///modules/PropertyPanel.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "PropertyTreeView",
@@ -182,27 +191,46 @@ function WebConsoleFrame(aWebConsoleOwne
   this._onPositionConsoleCommand = this._onPositionConsoleCommand.bind(this);
 
   this._initDefaultFilterPrefs();
   this._commandController = new CommandController(this);
   this.positionConsole(aPosition, window);
 
   this.jsterm = new JSTerm(this);
   this.jsterm.inputNode.focus();
+
+  this._initConnection();
 }
 
 WebConsoleFrame.prototype = {
   /**
    * The WebConsole instance that owns this frame.
    * @see HUDService.jsm::WebConsole
    * @type object
    */
   owner: null,
 
   /**
+   * Proxy between the Web Console and the remote Web Console instance. This
+   * object holds methods used for connecting, listening and disconnecting from
+   * the remote server, using the remote debugging protocol.
+   *
+   * @see WebConsoleConnectionProxy
+   * @type object
+   */
+  proxy: null,
+
+  /**
+   * Tells if the Web Console initialization via message manager completed.
+   * @private
+   * @type boolean
+   */
+  _messageManagerInitComplete: false,
+
+  /**
    * Getter for the xul:popupset that holds any popups we open.
    * @type nsIDOMElement
    */
   get popupset() this.owner.mainPopupSet,
 
   /**
    * Holds the network requests currently displayed by the Web Console. Each key
    * represents the connection ID and the value is network request information.
@@ -307,16 +335,31 @@ WebConsoleFrame.prototype = {
           this._saveRequestAndResponseBodies,
       },
     };
 
     this.owner.sendMessageToContent("WebConsole:SetPreferences", message);
   },
 
   /**
+   * Connect to the server using the remote debugging protocol.
+   * @private
+   */
+  _initConnection: function WCF__initConnection()
+  {
+    this.proxy = new WebConsoleConnectionProxy(this);
+    this.proxy.initServer();
+    this.proxy.connect(function() {
+      if (this._messageManagerInitComplete) {
+        this._onInitComplete();
+      }
+    }.bind(this));
+  },
+
+  /**
    * Find the Web Console UI elements and setup event listeners as needed.
    * @private
    */
   _initUI: function WCF__initUI()
   {
     let doc = this.document;
 
     this.filterBox = doc.querySelector(".hud-filter-box");
@@ -463,16 +506,29 @@ WebConsoleFrame.prototype = {
         someChecked = someChecked || checked;
       }, this);
 
       aButton.setAttribute("checked", someChecked);
     }, this);
   },
 
   /**
+   * Callback method for when the Web Console initialization is complete. For
+   * now this method sends the web-console-created notification using the
+   * nsIObserverService.
+   *
+   * @private
+   */
+  _onInitComplete: function WC__onInitComplete()
+  {
+    let id = WebConsoleUtils.supportsString(this.hudId);
+    Services.obs.notifyObservers(id, "web-console-created", null);
+  },
+
+  /**
    * Handle the "command" event for the buttons that allow the user to
    * reposition the Web Console UI.
    *
    * @private
    * @param nsIDOMEvent aEvent
    */
   _onPositionConsoleCommand: function WCF__onPositionConsoleCommand(aEvent)
   {
@@ -596,26 +652,21 @@ WebConsoleFrame.prototype = {
         break;
       case "JSTerm:InspectObject":
         this.jsterm.handleInspectObject(aMessage.json);
         break;
       case "WebConsole:ConsoleAPI":
         this.outputMessage(CATEGORY_WEBDEV, this.logConsoleAPIMessage,
                            [aMessage.json]);
         break;
-      case "WebConsole:PageError": {
-        let pageError = aMessage.json.pageError;
-        let category = Utils.categoryForScriptError(pageError);
-        this.outputMessage(category, this.reportPageError,
-                           [category, pageError]);
+      case "WebConsole:Initialized":
+        this._onMessageManagerInitComplete();
         break;
-      }
       case "WebConsole:CachedMessages":
         this._displayCachedConsoleMessages(aMessage.json.messages);
-        this.owner._onInitComplete();
         break;
       case "WebConsole:NetworkActivity":
         this.handleNetworkActivity(aMessage.json);
         break;
       case "WebConsole:FileActivity":
         this.outputMessage(CATEGORY_NETWORK, this.logFileActivity,
                            [aMessage.json.uri]);
         break;
@@ -624,16 +675,30 @@ WebConsoleFrame.prototype = {
         break;
       case "JSTerm:NonNativeConsoleAPI":
         this.outputMessage(CATEGORY_JS, this.logWarningAboutReplacedAPI);
         break;
     }
   },
 
   /**
+   * Callback method used to track the Web Console initialization via message
+   * manager.
+   *
+   * @private
+   */
+  _onMessageManagerInitComplete: function WCF__onMessageManagerInitComplete()
+  {
+    this._messageManagerInitComplete = true;
+    if (this.proxy.connected) {
+      this._onInitComplete();
+    }
+  },
+
+  /**
    * The event handler that is called whenever a user switches a filter on or
    * off.
    *
    * @private
    * @param nsIDOMEvent aEvent
    *        The event that triggered the filter change.
    */
   _toggleFilter: function WCF__toggleFilter(aEvent)
@@ -1207,16 +1272,29 @@ WebConsoleFrame.prototype = {
                                       aScriptError.errorMessage,
                                       aScriptError.sourceName,
                                       aScriptError.lineNumber, null, null,
                                       aScriptError.timeStamp);
     return node;
   },
 
   /**
+   * Handle PageError objects received from the server. This method outputs the
+   * given error.
+   *
+   * @param nsIScriptError aPageError
+   *        The error received from the server.
+   */
+  handlePageError: function WCF_handlePageError(aPageError)
+  {
+    let category = Utils.categoryForScriptError(aPageError);
+    this.outputMessage(category, this.reportPageError, [category, aPageError]);
+  },
+
+  /**
    * Log network activity.
    *
    * @param object aHttpActivity
    *        The HTTP activity to log.
    * @return nsIDOMElement|undefined
    *         The message element to display in the Web Console output.
    */
   logNetActivity: function WCF_logNetActivity(aConnectionId)
@@ -2279,16 +2357,20 @@ WebConsoleFrame.prototype = {
   },
 
   /**
    * Destroy the HUD object. Call this method to avoid memory leaks when the Web
    * Console is closed.
    */
   destroy: function WCF_destroy()
   {
+    if (this.proxy) {
+      this.proxy.disconnect();
+    }
+
     if (this.jsterm) {
       this.jsterm.destroy();
     }
   },
 };
 
 /**
  * Create a JSTerminal (a JavaScript command line). This is attached to an
@@ -3449,14 +3531,138 @@ CommandController.prototype = {
         break;
       case "cmd_fontSizeReset":
         this.owner.changeFontSize("");
         break;
     }
   }
 };
 
+///////////////////////////////////////////////////////////////////////////////
+// Web Console connection proxy
+///////////////////////////////////////////////////////////////////////////////
+
+/**
+ * The WebConsoleConnectionProxy handles the connection between the Web Console
+ * and the application we connect to through the remote debug protocol.
+ *
+ * @constructor
+ * @param object aWebConsole
+ *        The Web Console instance that owns this connection proxy.
+ */
+function WebConsoleConnectionProxy(aWebConsole)
+{
+  this.owner = aWebConsole;
+
+  this._onPageError = this._onPageError.bind(this);
+}
+
+WebConsoleConnectionProxy.prototype = {
+  /**
+   * The owning Web Console instance.
+   *
+   * @see WebConsoleFrame
+   * @type object
+   */
+  owner: null,
+
+  /**
+   * Tells if the connection was established.
+   * @type boolean
+   */
+  connected: false,
+
+  /**
+   * Initialize the debugger server.
+   */
+  initServer: function WCCP_initServer()
+  {
+    if (!DebuggerServer.initialized) {
+      // Always allow connections from nsIPipe transports.
+      DebuggerServer.init(function () { return true; });
+      DebuggerServer.addBrowserActors();
+    }
+  },
+
+  /**
+   * Initialize a debugger client and connects it to the debugger server.
+   *
+   * @param function [aCallback]
+   *        Optional function to invoke when connection is established.
+   */
+  connect: function WCCP_connect(aCallback)
+  {
+    let transport = DebuggerServer.connectPipe();
+    let client = this.client = new DebuggerClient(transport);
+
+    client.addListener("pageError", this._onPageError);
+
+    let listeners = [WebConsoleClient.prototype.LISTENERS.PageError];
+
+    client.connect(function(aType, aTraits) {
+      client.listTabs(function(aResponse) {
+        let tab = aResponse.tabs[aResponse.selected];
+        client.attachConsole(tab.consoleActor, listeners,
+                             this._onAttachConsole.bind(this, aCallback));
+      }.bind(this));
+    }.bind(this));
+  },
+
+  /**
+   * The "attachConsole" response handler.
+   *
+   * @private
+   * @param function [aCallback]
+   *        Optional function to invoke once the connection is established.
+   * @param object aResponse
+   *        The JSON response object received from the server.
+   * @param object aWebConsoleClient
+   *        The WebConsoleClient instance for the attached console, for the
+   *        specific tab we work with.
+   */
+  _onAttachConsole:
+  function WCCP__onAttachConsole(aCallback, aResponse, aWebConsoleClient)
+  {
+    if (aResponse.error) {
+      Cu.reportError("attachConsole failed: " + aResponse.error + " " +
+                     aResponse.message);
+      return;
+    }
+
+    this.webConsoleClient = aWebConsoleClient;
+
+    this.connected = true;
+    aCallback && aCallback();
+  },
+
+  /**
+   * The "pageError" message type handler. We redirect any page errors to the UI
+   * for displaying.
+   */
+  _onPageError: function WCCP__onPageError(aType, aPacket)
+  {
+    this.owner.handlePageError(aPacket.pageError);
+  },
+
+  /**
+   * Disconnect the Web Console from the remote server.
+   */
+  disconnect: function WCCP_disconnect()
+  {
+    if (!this.client) {
+      return;
+    }
+
+    this.client.removeListener("pageError", this._onPageError);
+    this.client.close();
+
+    this.client = null;
+    this.webConsoleClient = null;
+    this.connected = false;
+  },
+};
+
 function gSequenceId()
 {
   return gSequenceId.n++;
 }
 gSequenceId.n = 0;
 
diff --git a/toolkit/devtools/debugger/dbg-client.jsm b/toolkit/devtools/debugger/dbg-client.jsm
--- a/toolkit/devtools/debugger/dbg-client.jsm
+++ b/toolkit/devtools/debugger/dbg-client.jsm
@@ -7,17 +7,18 @@
 "use strict";
 const Ci = Components.interfaces;
 const Cc = Components.classes;
 const Cu = Components.utils;
 const Cr = Components.results;
 
 var EXPORTED_SYMBOLS = ["DebuggerTransport",
                         "DebuggerClient",
-                        "debuggerSocketConnect"];
+                        "debuggerSocketConnect",
+                        "WebConsoleClient"];
 
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 Cu.import("resource://gre/modules/NetUtil.jsm");
 Cu.import("resource://gre/modules/Services.jsm");
 
 XPCOMUtils.defineLazyServiceGetter(this, "socketTransportService",
                                    "@mozilla.org/network/socket-transport-service;1",
                                    "nsISocketTransportService");
@@ -168,16 +169,17 @@ const ThreadStateTypes = {
 };
 
 /**
  * Set of protocol messages that are sent by the server without a prior request
  * by the client.
  */
 const UnsolicitedNotifications = {
   "newScript": "newScript",
+  "pageError": "pageError",
   "tabDetached": "tabDetached",
   "tabNavigated": "tabNavigated"
 };
 
 /**
  * Set of pause types that are sent by the server and not as an immediate
  * response to a client request.
  */
@@ -194,41 +196,45 @@ const UnsolicitedPauses = {
  */
 const DebugProtocolTypes = {
   "assign": "assign",
   "attach": "attach",
   "clientEvaluate": "clientEvaluate",
   "delete": "delete",
   "detach": "detach",
   "frames": "frames",
+  "getCachedMessages": "getCachedMessages",
   "interrupt": "interrupt",
   "listTabs": "listTabs",
   "nameAndParameters": "nameAndParameters",
   "ownPropertyNames": "ownPropertyNames",
   "property": "property",
   "prototype": "prototype",
   "prototypeAndProperties": "prototypeAndProperties",
   "resume": "resume",
   "scripts": "scripts",
-  "setBreakpoint": "setBreakpoint"
+  "setBreakpoint": "setBreakpoint",
+  "startListeners": "startListeners",
+  "stopListeners": "stopListeners",
 };
 
 const ROOT_ACTOR_NAME = "root";
 
 /**
  * Creates a client for the remote debugging protocol server. This client
  * provides the means to communicate with the server and exchange the messages
  * required by the protocol in a traditional JavaScript API.
  */
 function DebuggerClient(aTransport)
 {
   this._transport = aTransport;
   this._transport.hooks = this;
   this._threadClients = {};
   this._tabClients = {};
+  this._consoleClients = {};
 
   this._pendingRequests = [];
   this._activeRequests = {};
   this._eventsEnabled = true;
 }
 
 DebuggerClient.prototype = {
   /**
@@ -274,20 +280,42 @@ DebuggerClient.prototype = {
     let detachTab = function _detachTab() {
       if (this.activeTab) {
         this.activeTab.detach(closeTransport);
       } else {
         closeTransport();
       }
     }.bind(this);
 
-    if (this.activeThread) {
-      this.activeThread.detach(detachTab);
-    } else {
-      detachTab();
+    let detachThread = function _detachThread() {
+      if (this.activeThread) {
+        this.activeThread.detach(detachTab);
+      } else {
+        detachTab();
+      }
+    }.bind(this);
+
+    let consolesClosed = 0;
+    let consolesToClose = 0;
+
+    let onConsoleClose = function _onConsoleClose() {
+      consolesClosed++;
+      if (consolesClosed >= consolesToClose) {
+        this._consoleClients = {};
+        detachThread();
+      }
+    }.bind(this);
+
+    for each (let client in this._consoleClients) {
+      consolesToClose++;
+      client.close(onConsoleClose);
+    }
+
+    if (!consolesToClose) {
+      detachThread();
     }
   },
 
   /**
    * List the open tabs.
    *
    * @param function aOnResponse
    *        Called with the response packet.
@@ -307,26 +335,57 @@ DebuggerClient.prototype = {
    * @param function aOnResponse
    *        Called with the response packet and a TabClient
    *        (which will be undefined on error).
    */
   attachTab: function DC_attachTab(aTabActor, aOnResponse) {
     let self = this;
     let packet = { to: aTabActor, type: DebugProtocolTypes.attach };
     this.request(packet, function(aResponse) {
+      let tabClient;
       if (!aResponse.error) {
-        var tabClient = new TabClient(self, aTabActor);
+        tabClient = new TabClient(self, aTabActor);
         self._tabClients[aTabActor] = tabClient;
         self.activeTab = tabClient;
       }
       aOnResponse(aResponse, tabClient);
     });
   },
 
   /**
+   * Attach to a Web Console actor.
+   *
+   * @param string aConsoleActor
+   *        The actor ID for the console actor to attach to.
+   * @param array aListeners
+   *        The console listeners you want to start.
+   * @param function aOnResponse
+   *        Called with the response packet and a WebConsoleClient
+   *        instance (which will be undefined on error).
+   */
+  attachConsole:
+  function DC_attachConsole(aConsoleActor, aListeners, aOnResponse) {
+    let self = this;
+    let packet = {
+      to: aConsoleActor,
+      type: DebugProtocolTypes.startListeners,
+      listeners: aListeners,
+    };
+
+    this.request(packet, function(aResponse) {
+      let consoleClient;
+      if (!aResponse.error) {
+        consoleClient = new WebConsoleClient(self, aConsoleActor);
+        self._consoleClients[aConsoleActor] = consoleClient;
+      }
+      aOnResponse(aResponse, consoleClient);
+    });
+  },
+
+  /**
    * Attach to a thread actor.
    *
    * @param string aThreadActor
    *        The actor ID for the thread to attach.
    * @param function aOnResponse
    *        Called with the response packet and a ThreadClient
    *        (which will be undefined on error).
    */
@@ -495,16 +554,113 @@ TabClient.prototype = {
       }
     });
   }
 };
 
 eventSource(TabClient.prototype);
 
 /**
+ * A WebConsoleClient is used as a front end for the WebConsoleActor that is
+ * created on the server, hiding implementation details.
+ *
+ * @param object aDebuggerClient
+ *        The DebuggerClient instance we live for.
+ * @param string aActor
+ *        The WebConsoleActor ID.
+ */
+function WebConsoleClient(aDebuggerClient, aActor) {
+  this._actor = aActor;
+  this._client = aDebuggerClient;
+}
+
+WebConsoleClient.prototype = {
+  LISTENERS: {
+    PageError: "PageError",
+    ConsoleAPI: "ConsoleAPI",
+  },
+
+  CACHED_MESSAGES: {
+    PageError: "PageError",
+    ConsoleAPI: "ConsoleAPI",
+  },
+
+  /**
+   * Retrieve the cached messages from the server.
+   *
+   * @see this.CACHED_MESSAGES
+   * @param array aTypes
+   *        The array of message types you want from the server. See
+   *        this.CACHED_MESSAGES for known types.
+   * @param function aOnResponse
+   *        The function invoked when the response is received.
+   */
+  getCachedMessages:
+  function WCC_getCachedMessages(aTypes, aOnResponse) {
+    let packet = {
+      to: this._actor,
+      type: DebugProtocolTypes.getCachedMessages,
+      messageTypes: aTypes,
+    };
+    this._client.request(packet, aOnResponse);
+  },
+
+  /**
+   * Start the given Web Console listeners.
+   *
+   * @see this.LISTENERS
+   * @param array aListeners
+   *        Array of listeners you want to start. See this.LISTENERS for
+   *        known listeners.
+   * @param function aOnResponse
+   *        Function to invoke when the server response is received.
+   */
+  startListeners:
+  function WCC_startListeners(aListeners, aOnResponse) {
+    let packet = {
+      to: this._actor,
+      type: DebugProtocolTypes.startListeners,
+      listeners: aListeners,
+    };
+    this._client.request(packet, aOnResponse);
+  },
+
+  /**
+   * Stop the given Web Console listeners.
+   *
+   * @see this.LISTENERS
+   * @param array aListeners
+   *        Array of listeners you want to stop. See this.LISTENERS for
+   *        known listeners.
+   * @param function aOnResponse
+   *        Function to invoke when the server response is received.
+   */
+  stopListeners:
+  function WCC_stopListeners(aListeners, aOnResponse) {
+    let packet = {
+      to: this._actor,
+      type: DebugProtocolTypes.stopListeners,
+      listeners: aListeners,
+    };
+    this._client.request(packet, aOnResponse);
+  },
+
+  /**
+   * Close the WebConsoleClient. This stops all the listeners on the server and
+   * detaches from the console actor.
+   *
+   * @param function aOnResponse
+   *        Function to invoke when the server response is received.
+   */
+  close: function WCC_close(aOnResponse) {
+    this.stopListeners(null, aOnResponse);
+  },
+};
+
+/**
  * Creates a thread client for the remote debugging protocol server. This client
  * is a front to the thread actor created in the server side, hiding the
  * protocol details in a traditional JavaScript API.
  *
  * @param aClient DebuggerClient
  *        The debugger client parent.
  * @param aActor string
  *        The actor ID for this thread.
diff --git a/toolkit/devtools/debugger/server/dbg-browser-actors.js b/toolkit/devtools/debugger/server/dbg-browser-actors.js
--- a/toolkit/devtools/debugger/server/dbg-browser-actors.js
+++ b/toolkit/devtools/debugger/server/dbg-browser-actors.js
@@ -247,27 +247,36 @@ BrowserTabActor.prototype = {
 
   actorPrefix: "tab",
 
   grip: function BTA_grip() {
     dbg_assert(!this.exited,
                "grip() shouldn't be called on exited browser actor.");
     dbg_assert(this.actorID,
                "tab should have an actorID.");
+
+    this.consoleActor = new WebConsoleActor(this.conn, this.browser);
+    this._createTabActorPool();
+    this._tabPool.addActor(this.consoleActor);
+
     return { actor: this.actorID,
+             consoleActor: this.consoleActor.actorID,
              title: this.browser.contentTitle,
              url: this.browser.currentURI.spec }
   },
 
   /**
    * Called when the actor is removed from the connection.
    */
   disconnect: function BTA_disconnect() {
     this._detach();
 
+    // Shut down actors that belong to this tab's pool.
+    this._removeTabActorPool();
+
     if (this._progressListener) {
       this._progressListener.destroy();
     }
   },
 
   /**
    * Called by the root actor when the underlying tab is closed.
    */
@@ -277,37 +286,59 @@ BrowserTabActor.prototype = {
     }
 
     if (this.attached) {
       this._detach();
       this.conn.send({ from: this.actorID,
                        type: "tabDetached" });
     }
 
+    // Shut down actors that belong to this tab's pool.
+    this._removeTabActorPool();
+
     if (this._progressListener) {
       this._progressListener.destroy();
     }
     this._browser = null;
     this._tabbrowser = null;
   },
 
   /**
+   * Create a pool for tab-lifetime actors.
+   */
+  _createTabActorPool: function BTA_createTabActorPool() {
+    if (this._tabPool) {
+      return;
+    }
+
+    this._tabPool = new ActorPool(this.conn);
+    this.conn.addActorPool(this._tabPool);
+  },
+
+  /**
+   * Remove the pool of tab actors.
+   */
+  _removeTabActorPool: function BTA_removeTabActorPool() {
+    if (this._tabPool) {
+      this.conn.removeActorPool(this._tabPool);
+      this._tabPool = null;
+    }
+  },
+
+  /**
    * Does the actual work of attching to a tab.
    */
   _attach: function BTA_attach() {
     if (this._attached) {
       return;
     }
 
-    // Create a pool for tab-lifetime actors.
-    dbg_assert(!this._tabPool, "Shouldn't have a tab pool if we weren't attached.");
-    this._tabPool = new ActorPool(this.conn);
-    this.conn.addActorPool(this._tabPool);
+    this._createTabActorPool();
 
-    // ... and a pool for context-lifetime actors.
+    // Create a pool for context-lifetime actors.
     this._pushContext();
 
     // Watch for globals being created in this tab.
     this.browser.addEventListener("DOMWindowCreated", this._onWindowCreated, true);
     this.browser.addEventListener("pageshow", this._onWindowCreated, true);
     if (this._tabbrowser) {
       this._progressListener = new DebuggerProgressListener(this);
     }
@@ -362,20 +393,16 @@ BrowserTabActor.prototype = {
       return;
     }
 
     this.browser.removeEventListener("DOMWindowCreated", this._onWindowCreated, true);
     this.browser.removeEventListener("pageshow", this._onWindowCreated, true);
 
     this._popContext();
 
-    // Shut down actors that belong to this tab's pool.
-    this.conn.removeActorPool(this._tabPool);
-    this._tabPool = null;
-
     this._attached = false;
   },
 
   // Protocol Request Handlers
 
   onAttach: function BTA_onAttach(aRequest) {
     if (this.exited) {
       return { type: "exited" };
diff --git a/toolkit/devtools/debugger/server/dbg-server.js b/toolkit/devtools/debugger/server/dbg-server.js
--- a/toolkit/devtools/debugger/server/dbg-server.js
+++ b/toolkit/devtools/debugger/server/dbg-server.js
@@ -111,16 +111,17 @@ var DebuggerServer = {
     loadSubScript.call(this, aURL);
   },
 
   /**
    * Install Firefox-specific actors.
    */
   addBrowserActors: function DH_addBrowserActors() {
     this.addActors("chrome://global/content/devtools/dbg-browser-actors.js");
+    this.addActors("chrome://global/content/devtools/dbg-webconsole-actors.js");
   },
 
   /**
    * Listens on the given port for remote debugger connections.
    *
    * @param aPort int
    *        The port to listen on.
    */
diff --git a/toolkit/devtools/debugger/server/dbg-webconsole-actors.js b/toolkit/devtools/debugger/server/dbg-webconsole-actors.js
new file mode 100644
--- /dev/null
+++ b/toolkit/devtools/debugger/server/dbg-webconsole-actors.js
@@ -0,0 +1,357 @@
+/* -*- Mode: js2; js2-basic-offset: 2; indent-tabs-mode: nil; -*- */
+/* vim: set ts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+const Cc = Components.classes;
+const Ci = Components.interfaces;
+const Cu = Components.utils;
+
+Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+
+XPCOMUtils.defineLazyModuleGetter(this, "Services",
+                                  "resource://gre/modules/Services.jsm");
+
+XPCOMUtils.defineLazyModuleGetter(this, "WebConsoleUtils",
+                                  "resource:///modules/WebConsoleUtils.jsm");
+
+const LISTENERS = {
+  PageError: "PageError",
+  ConsoleAPI: "ConsoleAPI",
+};
+
+const CACHED_MESSAGES = {
+  PageError: "PageError",
+  ConsoleAPI: "ConsoleAPI",
+};
+
+/**
+ * The WebConsoleActor implements capabilities needed for the Web Console
+ * feature.
+ *
+ * @constructor
+ * @param object aConnection
+ *        The connection to the client, DebuggerServerConnection.
+ * @param nsIDOMElement aBrowser
+ *        The xul:browser we work with.
+ */
+function WebConsoleActor(aConnection, aBrowser)
+{
+  this.conn = aConnection;
+  this._browser = aBrowser;
+}
+
+WebConsoleActor.prototype =
+{
+  /**
+   * The xul:browser we work with.
+   * @private
+   * @type nsIDOMElement
+   */
+  _browser: null,
+
+  /**
+   * The debugger server connection instance.
+   * @type object
+   */
+  conn: null,
+
+  /**
+   * The content window we work with.
+   * @type nsIDOMWindow
+   */
+  get contentWindow() this._browser.contentWindow,
+
+  actorPrefix: "console",
+
+  grip: function WCA_grip()
+  {
+    return { actor: this.actorID };
+  },
+
+  /**
+   * Destroy the current WebConsoleActor instance.
+   */
+  disconnect: function WCA_disconnect()
+  {
+    if (this.pageErrorListener) {
+      this.pageErrorListener.destroy();
+      this.pageErrorListener = null;
+    }
+    this.conn = this._browser = null;
+  },
+
+  /**
+   * Handler for the "startListeners" request.
+   *
+   * @param object aRequest
+   *        The JSON request object received from the Web Console client.
+   */
+  onStartListeners: function WCA_onStartListeners(aRequest)
+  {
+    let startedListeners = [];
+
+    while (aRequest.listeners.length > 0) {
+      let listener = aRequest.listeners.shift();
+      switch (listener) {
+        case LISTENERS.PageError:
+          if (!this.pageErrorListener) {
+            this.pageErrorListener =
+              new PageErrorListener(this.contentWindow, this);
+            this.pageErrorListener.init();
+          }
+          startedListeners.push(listener);
+          break;
+      }
+    }
+    return { startedListeners: startedListeners };
+  },
+
+  /**
+   * Handler for the "stopListeners" request.
+   *
+   * @param object aRequest
+   *        The JSON request object received from the Web Console client.
+   */
+  onStopListeners: function WCA_onStopListeners(aRequest)
+  {
+    let stoppedListeners = [];
+    let toDetach = aRequest.listeners || [];
+    if (!toDetach.length) {
+      // If no specific listeners are requested to be detached, we stop all
+      // listeners.
+      for each (let listener in LISTENERS) {
+        toDetach.push(listener);
+      }
+    }
+
+    while (toDetach.length > 0) {
+      let listener = toDetach.shift();
+      switch (listener) {
+        case LISTENERS.PageError:
+          if (this.pageErrorListener) {
+            this.pageErrorListener.destroy();
+            this.pageErrorListener = null;
+          }
+          stoppedListeners.push(listener);
+          break;
+      }
+    }
+
+    return { stoppedListeners: stoppedListeners };
+  },
+
+  /**
+   * Handler for the "getCachedMessages" request. This method sends the cached
+   * error messages and the window.console API calls to the client.
+   *
+   * @param object aRequest
+   *        The JSON request object received from the Web Console client.
+   */
+  onGetCachedMessages: function WCA_onGetCachedMessages(aRequest)
+  {
+    let types = aRequest.messageTypes;
+    if (!types) {
+      return {
+        error: "missingParameter",
+        message: "The messageTypes parameter is missing.",
+      };
+    }
+
+    let messages = [];
+
+    while (types.length > 0) {
+      switch (types.shift()) {
+        case CACHED_MESSAGES.ConsoleAPI:
+          if (this.consoleAPIListener) {
+            messages.push.apply(messages,
+                                this.consoleAPIListener.getCachedMessages());
+          }
+          break;
+        case CACHED_MESSAGES.PageError:
+          if (this.pageErrorListener) {
+            messages.push.apply(messages,
+                                this.pageErrorListener.getCachedMessages());
+          }
+          break;
+      }
+    }
+
+    messages.sort(function(a, b) { return a.timeStamp - b.timeStamp; });
+
+    return {
+      from: this.actorID,
+      type: "cachedMessages",
+      messages: messages,
+    };
+  },
+
+  /**
+   * Handler for page errors received from the PageErrorListener. This method
+   * sends the nsIScriptError to the remote Web Console client.
+   *
+   * @param nsIScriptError aPageError
+   *        The page error we need to send to the remote.
+   */
+  onPageError: function WCA_onPageError(aPageError)
+  {
+    let packet = {
+      from: this.actorID,
+      type: "pageError",
+      pageError: aPageError,
+    };
+    this.conn.send(packet);
+  },
+};
+
+WebConsoleActor.prototype.requestTypes =
+{
+  getCachedMessages: WebConsoleActor.prototype.onGetCachedMessages,
+  startListeners: WebConsoleActor.prototype.onStartListeners,
+  stopListeners: WebConsoleActor.prototype.onStopListeners,
+};
+
+///////////////////////////////////////////////////////////////////////////////
+// The page errors listener
+///////////////////////////////////////////////////////////////////////////////
+
+/**
+ * The nsIConsoleService listener. This is used to send all the page errors
+ * (JavaScript, CSS and more) to the remote Web Console instance.
+ *
+ * @constructor
+ * @param nsIDOMWindow aWindow
+ *        The window object for which we are created.
+ * @param object aListener
+ *        The listener object must have a method: onPageError. This method is
+ *        invoked with one argument, the nsIScriptError, whenever a relevant
+ *        page error is received.
+ */
+function PageErrorListener(aWindow, aListener)
+{
+  this.window = aWindow;
+  this.listener = aListener;
+}
+
+PageErrorListener.prototype =
+{
+  QueryInterface: XPCOMUtils.generateQI([Ci.nsIConsoleListener]),
+
+  /**
+   * The content window for which we listen to page errors.
+   * @type nsIDOMWindow
+   */
+  window: null,
+
+  /**
+   * The listener object which is notified of page errors. It must have
+   * a onPageError method which is invoked with one argument: the nsIScriptError.
+   * @type object
+   */
+  listener: null,
+
+  /**
+   * Initialize the nsIConsoleService listener.
+   */
+  init: function PEL_init()
+  {
+    Services.console.registerListener(this);
+  },
+
+  /**
+   * The nsIConsoleService observer. This method takes all the script error
+   * messages belonging to the current window and sends them to the remote Web
+   * Console instance.
+   *
+   * @param nsIScriptError aScriptError
+   *        The script error object coming from the nsIConsoleService.
+   */
+  observe: function PEL_observe(aScriptError)
+  {
+    if (!this.window || !this.listener ||
+        !(aScriptError instanceof Ci.nsIScriptError) ||
+        !aScriptError.outerWindowID) {
+      return;
+    }
+
+    if (!this.isCategoryAllowed(aScriptError.category)) {
+      return;
+    }
+
+    let errorWindow =
+      WebConsoleUtils.getWindowByOuterId(aScriptError.outerWindowID, this.window);
+    if (!errorWindow || errorWindow.top != this.window) {
+      return;
+    }
+
+    this.listener.onPageError(aScriptError);
+  },
+
+  /**
+   * Check if the given script error category is allowed to be tracked or not.
+   * We ignore chrome-originating errors as we only care about content.
+   *
+   * @param string aCategory
+   *        The nsIScriptError category you want to check.
+   * @return boolean
+   *         True if the category is allowed to be logged, false otherwise.
+   */
+  isCategoryAllowed: function PEL_isCategoryAllowed(aCategory)
+  {
+    switch (aCategory) {
+      case "XPConnect JavaScript":
+      case "component javascript":
+      case "chrome javascript":
+      case "chrome registration":
+      case "XBL":
+      case "XBL Prototype Handler":
+      case "XBL Content Sink":
+      case "xbl javascript":
+        return false;
+    }
+
+    return true;
+  },
+
+  /**
+   * Get the cached page errors for the current inner window.
+   *
+   * @return array
+   *         The array of cached messages. Each element is an nsIScriptError
+   *         with an added _type property so the remote Web Console instance can
+   *         tell the difference between various types of cached messages.
+   */
+  getCachedMessages: function PEL_getCachedMessages()
+  {
+    let innerWindowId = WebConsoleUtils.getInnerWindowId(this.window);
+    let result = [];
+    let errors = {};
+    Services.console.getMessageArray(errors, {});
+
+    (errors.value || []).forEach(function(aError) {
+      if (!(aError instanceof Ci.nsIScriptError) ||
+          aError.innerWindowID != innerWindowId ||
+          !this.isCategoryAllowed(aError.category)) {
+        return;
+      }
+
+      let remoteMessage = WebConsoleUtils.cloneObject(aError);
+      remoteMessage._type = CACHED_MESSAGES.PageError;
+      result.push(remoteMessage);
+    }, this);
+
+    return result;
+  },
+
+  /**
+   * Remove the nsIConsoleService listener.
+   */
+  destroy: function PEL_destroy()
+  {
+    Services.console.unregisterListener(this);
+    this.listener = this.window = null;
+  },
+};
diff --git a/toolkit/devtools/jar.mn b/toolkit/devtools/jar.mn
--- a/toolkit/devtools/jar.mn
+++ b/toolkit/devtools/jar.mn
@@ -2,8 +2,9 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 toolkit.jar:
   content/global/devtools/dbg-transport.js        (debugger/dbg-transport.js)
   content/global/devtools/dbg-server.js        		(debugger/server/dbg-server.js)
   content/global/devtools/dbg-script-actors.js    (debugger/server/dbg-script-actors.js)
   content/global/devtools/dbg-browser-actors.js   (debugger/server/dbg-browser-actors.js)
+  content/global/devtools/dbg-webconsole-actors.js   (debugger/server/dbg-webconsole-actors.js)
