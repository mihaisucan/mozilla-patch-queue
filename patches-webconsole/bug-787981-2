# HG changeset patch
# Parent 2bf6b79e91d3d67f42a8121a87c346893ae9a54e
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1352913409 -7200

Bug 787981 - Use LongStringActor in the Web Console actors: console output changes

diff --git a/browser/devtools/webconsole/PropertyPanel.jsm b/browser/devtools/webconsole/PropertyPanel.jsm
--- a/browser/devtools/webconsole/PropertyPanel.jsm
+++ b/browser/devtools/webconsole/PropertyPanel.jsm
@@ -142,16 +142,20 @@ PropertyTreeView.prototype = {
       aItem._open = false;
       aItem._children = null;
 
       if (this._releaseObject) {
         ["value", "get", "set"].forEach(function(aProp) {
           let val = aItem[aProp];
           if (val && val.actor) {
             this._objectActors.push(val.actor);
+            if (typeof val.displayString == "object" &&
+                val.displayString.type == "longString") {
+              this._objectActors.push(val.displayString.actor);
+            }
           }
         }, this);
       }
     }, this);
   },
 
   /**
    * Inspect a local object.
diff --git a/browser/devtools/webconsole/test/Makefile.in b/browser/devtools/webconsole/test/Makefile.in
--- a/browser/devtools/webconsole/test/Makefile.in
+++ b/browser/devtools/webconsole/test/Makefile.in
@@ -113,16 +113,17 @@ MOCHITEST_BROWSER_FILES = \
 	browser_cached_messages.js \
 	browser_bug664688_sandbox_update_after_navigation.js \
 	browser_webconsole_menustatus.js \
 	browser_result_format_as_string.js \
 	browser_webconsole_bug_737873_mixedcontent.js \
 	browser_output_breaks_after_console_dir_uninspectable.js \
 	browser_console_log_inspectable_object.js \
 	browser_bug_638949_copy_link_location.js \
+	browser_output_longstring_expand.js \
 	head.js \
 	$(NULL)
 
 ifndef MOZ_PER_WINDOW_PRIVATE_BROWSING
 MOCHITEST_BROWSER_FILES += \
         browser_webconsole_bug_618311_private_browsing.js \
         $(NULL)
 endif
diff --git a/browser/devtools/webconsole/test/browser_output_longstring_expand.js b/browser/devtools/webconsole/test/browser_output_longstring_expand.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/webconsole/test/browser_output_longstring_expand.js
@@ -0,0 +1,153 @@
+/* vim:set ts=2 sw=2 sts=2 et: */
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/ */
+
+// Test that long strings can be expanded in the console output.
+
+function test()
+{
+  waitForExplicitFinish();
+
+  let tempScope = {};
+  Cu.import("resource://gre/modules/devtools/dbg-server.jsm", tempScope);
+  let DebuggerServer = tempScope.DebuggerServer;
+
+  let longString = (new Array(DebuggerServer.LONG_STRING_LENGTH + 4)).join("a") +
+                   "foobar";
+  let initialString =
+    longString.substring(0, DebuggerServer.LONG_STRING_INITIAL_LENGTH);
+
+  addTab("data:text/html;charset=utf8,test for bug 787981 - check that long strings can be expanded in the output.");
+
+  let hud = null;
+
+  gBrowser.selectedBrowser.addEventListener("load", function onLoad() {
+    gBrowser.selectedBrowser.removeEventListener("load", onLoad, true);
+    openConsole(null, performTest);
+  }, true);
+
+  function performTest(aHud)
+  {
+    hud = aHud;
+
+    hud.jsterm.clearOutput(true);
+    hud.jsterm.execute("console.log('bazbaz', '" + longString +"', 'boom')");
+
+    waitForSuccess(waitForConsoleLog);
+  }
+
+  let waitForConsoleLog = {
+    name: "console.log output shown",
+    validatorFn: function()
+    {
+      return hud.outputNode.querySelector(".webconsole-msg-console");
+    },
+    successFn: function()
+    {
+      let msg = hud.outputNode.querySelector(".webconsole-msg-console");
+      is(msg.textContent.indexOf("foobar"), -1,
+         "foobar is not shown");
+      isnot(msg.textContent.indexOf("bazbaz"), -1,
+            "bazbaz is shown");
+      isnot(msg.textContent.indexOf("boom"), -1,
+            "boom is shown");
+      isnot(msg.textContent.indexOf(initialString), -1,
+            "initial string is shown");
+
+      let clickable = msg.querySelector(".longStringEllipsis");
+      ok(clickable, "long string ellipsis is shown");
+
+      scrollToVisible(clickable);
+
+      executeSoon(function() {
+        EventUtils.synthesizeMouse(clickable, 2, 2, {}, hud.iframeWindow);
+        waitForSuccess(waitForFullString);
+      });
+    },
+    failureFn: finishTest,
+  };
+
+  let waitForFullString = {
+    name: "full string shown",
+    validatorFn: function()
+    {
+      let msg = hud.outputNode.querySelector(".webconsole-msg-log");
+      return msg.textContent.indexOf(longString) > -1;
+    },
+    successFn: function()
+    {
+      let msg = hud.outputNode.querySelector(".webconsole-msg-log");
+      isnot(msg.textContent.indexOf("bazbaz"), -1,
+            "bazbaz is shown");
+      isnot(msg.textContent.indexOf("boom"), -1,
+            "boom is shown");
+
+      let clickable = msg.querySelector(".longStringEllipsis");
+      ok(!clickable, "long string ellipsis is not shown");
+
+      executeSoon(function() {
+        hud.jsterm.clearOutput(true);
+        hud.jsterm.execute("'" + longString +"'");
+        waitForSuccess(waitForExecute);
+      });
+    },
+    failureFn: finishTest,
+  };
+
+  let waitForExecute = {
+    name: "execute() output shown",
+    validatorFn: function()
+    {
+      return hud.outputNode.querySelector(".webconsole-msg-output");
+    },
+    successFn: function()
+    {
+      let msg = hud.outputNode.querySelector(".webconsole-msg-output");
+      isnot(msg.textContent.indexOf(initialString), -1,
+           "initial string is shown");
+      is(msg.textContent.indexOf(longString), -1,
+         "full string is not shown");
+
+      let clickable = msg.querySelector(".longStringEllipsis");
+      ok(clickable, "long string ellipsis is shown");
+
+      scrollToVisible(clickable);
+
+      executeSoon(function() {
+        EventUtils.synthesizeMouse(clickable, 3, 4, {}, hud.iframeWindow);
+        waitForSuccess(waitForFullStringAfterExecute);
+      });
+    },
+    failureFn: finishTest,
+  };
+
+  let waitForFullStringAfterExecute = {
+    name: "full string shown again",
+    validatorFn: function()
+    {
+      let msg = hud.outputNode.querySelector(".webconsole-msg-output");
+      return msg.textContent.indexOf(longString) > -1;
+    },
+    successFn: function()
+    {
+      let msg = hud.outputNode.querySelector(".webconsole-msg-output");
+      let clickable = msg.querySelector(".longStringEllipsis");
+      ok(!clickable, "long string ellipsis is not shown");
+
+      executeSoon(finishTest);
+    },
+    failureFn: finishTest,
+  };
+
+  function scrollToVisible(aNode)
+  {
+    let richListBoxNode = aNode.parentNode;
+    while (richListBoxNode.tagName != "richlistbox") {
+      richListBoxNode = richListBoxNode.parentNode;
+    }
+
+    let boxObject = richListBoxNode.scrollBoxObject;
+    let nsIScrollBoxObject = boxObject.QueryInterface(Ci.nsIScrollBoxObject);
+    nsIScrollBoxObject.ensureElementIsVisible(aNode);
+  }
+}
diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_598357_jsterm_output.js b/browser/devtools/webconsole/test/browser_webconsole_bug_598357_jsterm_output.js
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_598357_jsterm_output.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_bug_598357_jsterm_output.js
@@ -92,17 +92,17 @@ let inputValues = [
 
   // 17
   [true, "({a:'b', c:'d', e:1, f:'2'})", '({a:"b", c:"d", e:1, f:"2"})',
     "[object Object",
     '({a:"b", c:"d", e:1, f:"2"})'],
 
   // 18
   [false, "'" + longString + "'",
-    '"' + initialString + "\"\u2026", initialString],
+    '"' + initialString + "\"[\u2026]", initialString],
 ];
 
 longString = null;
 initialString = null;
 tempScope = null;
 
 let eventHandlers = [];
 let popupShown = [];
diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -1068,16 +1068,24 @@ WebConsoleFrame.prototype = {
       case "dir":
       case "groupEnd": {
         body = { arguments: args };
         let clipboardArray = [];
         args.forEach(function(aValue) {
           clipboardArray.push(WebConsoleUtils.objectActorGripToString(aValue));
           if (aValue && typeof aValue == "object" && aValue.actor) {
             objectActors.push(aValue.actor);
+            let displayStringIsLong = typeof aValue.displayString == "object" &&
+                                      aValue.displayString.type == "longString";
+            if (aValue.type == "longString" || displayStringIsLong) {
+              clipboardArray.push(l10n.getStr("longStringEllipsis"));
+            }
+            if (displayStringIsLong) {
+              objectActors.push(aValue.displayString.actor);
+            }
           }
         }, this);
         clipboardText = clipboardArray.join(" ");
         sourceURL = aMessage.filename;
         sourceLine = aMessage.lineNumber;
 
         if (level == "dir") {
           body.objectProperties = aMessage.objectProperties;
@@ -2401,16 +2409,38 @@ WebConsoleFrame.prototype = {
       if (aContainer.firstChild) {
         aContainer.appendChild(this.document.createTextNode(" "));
       }
 
       let text = WebConsoleUtils.objectActorGripToString(aItem);
 
       if (aItem && typeof aItem != "object" || !aItem.inspectable) {
         aContainer.appendChild(this.document.createTextNode(text));
+
+        let longString = null;
+        if (aItem.type == "longString") {
+          longString = aItem;
+        }
+        else if (!aItem.inspectable &&
+                 typeof aItem.displayString == "object" &&
+                 aItem.displayString.type == "longString") {
+          longString = aItem.displayString;
+        }
+
+        if (longString) {
+          let ellipsis = this.document.createElement("description");
+          ellipsis.classList.add("hud-clickable");
+          ellipsis.classList.add("longStringEllipsis");
+          ellipsis.textContent = l10n.getStr("longStringEllipsis");
+
+          this._addMessageLinkCallback(ellipsis,
+            this._longStringClick.bind(this, aMessage, longString, null));
+
+          aContainer.appendChild(ellipsis);
+        }
         return;
       }
 
       // For inspectable objects.
       let elem = this.document.createElement("description");
       elem.classList.add("hud-clickable");
       elem.setAttribute("aria-haspopup", "true");
       elem.appendChild(this.document.createTextNode(text));
@@ -2418,16 +2448,63 @@ WebConsoleFrame.prototype = {
       this._addMessageLinkCallback(elem,
         this._consoleLogClick.bind(this, aMessage, elem, aItem));
 
       aContainer.appendChild(elem);
     }, this);
   },
 
   /**
+   * Click event handler for the ellipsis shown immediately after a long string.
+   * This method retrieves the full string and updates the console output to
+   * show it.
+   *
+   * @private
+   * @param nsIDOMElement aMessage
+   *        The message element.
+   * @param object aActor
+   *        The LongStringActor instance we work with.
+   * @param [function] aFormatter
+   *        Optional function you can use to format the string received from the
+   *        server, before being displayed in the console.
+   * @param nsIDOMElement aEllipsis
+   *        The DOM element the user can click on to expand the string.
+   * @param nsIDOMEvent aEvent
+   *        The DOM click event triggered by the user.
+   */
+  _longStringClick:
+  function WCF__longStringClick(aMessage, aActor, aFormatter, aEllipsis, aEvent)
+  {
+    aEvent.preventDefault();
+
+    if (!aFormatter) {
+      aFormatter = function(s) s;
+    }
+
+    let longString = this.webConsoleClient.longString(aActor);
+    longString.substring(longString.initial.length, longString.length,
+      function WCF__onSubstring(aResponse) {
+        if (aResponse.error) {
+          Cu.reportError("WCF__longStringClick substring failure: " +
+                         aResponse.error);
+          return;
+        }
+
+        let node = aEllipsis.previousSibling;
+        node.textContent = aFormatter(longString.initial + aResponse.substring);
+        aEllipsis.parentNode.removeChild(aEllipsis);
+
+        if (aMessage.category == CATEGORY_WEBDEV ||
+            aMessage.category == CATEGORY_OUTPUT) {
+          aMessage.clipboardText = aMessage.textContent;
+        }
+      });
+  },
+
+  /**
    * Creates the XUL label that displays the textual location of an incoming
    * message.
    *
    * @param string aSourceURL
    *        The URL of the source file responsible for the error.
    * @param number aSourceLine [optional]
    *        The line number on which the error occurred. If zero or omitted,
    *        there is no line number associated with this message.
@@ -2872,16 +2949,51 @@ JSTerm.prototype = {
     }
     else {
       node = this.writeOutput(resultString, CATEGORY_OUTPUT, SEVERITY_LOG,
                               aAfterNode, aResponse.timestamp);
     }
 
     if (result && typeof result == "object" && result.actor) {
       node._objectActors = [result.actor];
+      if (typeof result.displayString == "object" &&
+          result.displayString.type == "longString") {
+        node._objectActors.push(result.displayString.actor);
+      }
+
+      // Add an ellipsis to expand the short string if the object is not
+      // inspectable.
+      let longString = null;
+      let formatter = null;
+      if (result.type == "longString") {
+        longString = result;
+        if (!helperHasRawOutput) {
+          formatter = WebConsoleUtils.formatResultString.bind(WebConsoleUtils);
+        }
+      }
+      else if (!inspectable && !errorMessage &&
+               typeof result.displayString == "object" &&
+               result.displayString.type == "longString") {
+        longString = result.displayString;
+      }
+
+      if (longString) {
+        let body = node.querySelector(".webconsole-msg-body");
+        let ellipsis = this.hud.document.createElement("description");
+        ellipsis.classList.add("hud-clickable");
+        ellipsis.classList.add("longStringEllipsis");
+        ellipsis.textContent = l10n.getStr("longStringEllipsis");
+
+        this.hud._addMessageLinkCallback(ellipsis,
+          this.hud._longStringClick.bind(this.hud, node, longString, formatter));
+
+        body.appendChild(ellipsis);
+
+        node.clipboardText += " " + ellipsis.textContent;
+      }
     }
   },
 
   /**
    * Execute a string. Execution happens asynchronously in the content process.
    *
    * @param string [aExecuteString]
    *        The string you want to execute. If this is not provided, the current
@@ -2889,17 +3001,18 @@ JSTerm.prototype = {
    * @param function [aCallback]
    *        Optional function to invoke when the result is displayed.
    */
   execute: function JST_execute(aExecuteString, aCallback)
   {
     // attempt to execute the content of the inputNode
     aExecuteString = aExecuteString || this.inputNode.value;
     if (!aExecuteString) {
-      this.writeOutput("no value to execute", CATEGORY_OUTPUT, SEVERITY_LOG);
+      this.writeOutput(l10n.getStr("executeEmptyInput"), CATEGORY_OUTPUT,
+                       SEVERITY_LOG);
       return;
     }
 
     let node = this.writeOutput(aExecuteString, CATEGORY_INPUT, SEVERITY_LOG);
     let onResult = this._executeResultCallback.bind(this, node, aCallback);
 
     this.webConsoleClient.evaluateJS(aExecuteString, onResult);
 
diff --git a/browser/locales/en-US/chrome/browser/devtools/webconsole.properties b/browser/locales/en-US/chrome/browser/devtools/webconsole.properties
--- a/browser/locales/en-US/chrome/browser/devtools/webconsole.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/webconsole.properties
@@ -160,8 +160,17 @@ remoteWebConsoleSelectTabTitle=Tab list 
 
 # LOCALIZATION NOTE (remoteWebConsoleSelectTabMessage): The message displayed on the
 # Web Console prompt asking the user to pick a tab to attach to.
 remoteWebConsoleSelectTabMessage=Select one of the tabs you want to attach to, or select the global console.
 
 # LOCALIZATION NOTE (listTabs.globalConsoleActor): The string displayed for the
 # global console in the tabs selection.
 listTabs.globalConsoleActor=*Global Console*
+
+# LOCALIZATION NOTE (longStringEllipsis): The string displayed after a long
+# string. This string is clickable such that the rest of the string is retrieved
+# from the server.
+longStringEllipsis=[…]
+
+# LOCALIZATION NOTE (executeEmptyInput): This is displayed when the user tries
+# to execute code, but the input is empty.
+executeEmptyInput=No value to execute.
diff --git a/toolkit/devtools/webconsole/WebConsoleUtils.jsm b/toolkit/devtools/webconsole/WebConsoleUtils.jsm
--- a/toolkit/devtools/webconsole/WebConsoleUtils.jsm
+++ b/toolkit/devtools/webconsole/WebConsoleUtils.jsm
@@ -688,33 +688,28 @@ this.WebConsoleUtils = {
     // Primitives like strings and numbers are not sent as objects.
     // But null and undefined are sent as objects with the type property
     // telling which type of value we have. We also have long strings which are
     // sent using the LongStringActor.
 
     let type = typeof(aGrip);
     if (type == "string" ||
         (aGrip && type == "object" && aGrip.type == "longString")) {
-      let str, suffix;
-      if (type == "string") {
-        str = aGrip;
-        suffix = "";
-      }
-      else {
-        str = aGrip.initial;
-        suffix = "\u2026";
-      }
-
+      let str = type == "string" ? aGrip : aGrip.initial;
       if (aFormatString) {
-        return this.formatResultString(str) + suffix;
+        return this.formatResultString(str);
       }
       return str;
     }
 
     if (aGrip && type == "object") {
+      if (aGrip.displayString && typeof aGrip.displayString == "object" &&
+          aGrip.displayString.type == "longString") {
+        return aGrip.displayString.initial;
+      }
       return aGrip.displayString || aGrip.className || aGrip.type || type;
     }
 
     return aGrip + "";
   },
 
   /**
    * Helper function to deduce the name of the provided function.
@@ -841,16 +836,21 @@ this.WebConsoleUtils = {
     if (val.type == "function" && val.functionName) {
       return "function " + val.functionName + "(" +
              val.functionArguments.join(", ") + ")";
     }
     if (val.type == "object" && val.className) {
       return val.className;
     }
 
+    if (val.displayString && typeof val.displayString == "object" &&
+        val.displayString.type == "longString") {
+      return val.displayString.initial;
+    }
+
     return val.displayString || val.type;
   },
 };
 
 //////////////////////////////////////////////////////////////////////////
 // Localization
 //////////////////////////////////////////////////////////////////////////
 
diff --git a/toolkit/devtools/webconsole/dbg-webconsole-actors.js b/toolkit/devtools/webconsole/dbg-webconsole-actors.js
--- a/toolkit/devtools/webconsole/dbg-webconsole-actors.js
+++ b/toolkit/devtools/webconsole/dbg-webconsole-actors.js
@@ -862,16 +862,17 @@ WebConsoleObjectActor.prototype =
 
   /**
    * Returns a grip for this actor for returning in a protocol message.
    */
   grip: function WCOA_grip()
   {
     let grip = WebConsoleUtils.getObjectGrip(this.obj);
     grip.actor = this.actorID;
+    grip.displayString = this.parent.createStringGrip(grip.displayString);
     return grip;
   },
 
   /**
    * Releases this actor from the pool.
    */
   release: function WCOA_release()
   {
diff --git a/toolkit/devtools/webconsole/test/test_object_actor.html b/toolkit/devtools/webconsole/test/test_object_actor.html
--- a/toolkit/devtools/webconsole/test/test_object_actor.html
+++ b/toolkit/devtools/webconsole/test/test_object_actor.html
@@ -44,16 +44,22 @@ function onAttach(aState, aResponse)
   foobarObject.abArray = ["a", "b"];
 
   Object.defineProperty(foobarObject, "getterAndSetter", {
     enumerable: true,
     get: function fooGet() { return "foo"; },
     set: function fooSet() { 1+2 },
   });
 
+  foobarObject.longStringObj = {
+    toSource: function() longString,
+    toString: function() longString,
+    boom: "explode",
+  };
+
   console.log("hello", foobarObject);
 
   expectedProps = [
     {
       name: "abArray",
       value: {
         type: "object",
         className: "Array",
@@ -95,16 +101,31 @@ function onAttach(aState, aResponse)
         type: "function",
         className: "function",
         displayString: /function fooSet/,
         actor: /[a-z]/,
         inspectable: false,
       },
     },
     {
+      name: "longStringObj",
+      value: {
+        type: "object",
+        className: "Object",
+        actor: /[a-z]/,
+        inspectable: true,
+        displayString: {
+          type: "longString",
+          initial: longString.substring(0,
+            DebuggerServer.LONG_STRING_INITIAL_LENGTH),
+          length: longString.length,
+        },
+      },
+    },
+    {
       name: "notInspectable",
       value: {
         type: "object",
         className: "Object",
         actor: /[a-z]/,
         inspectable: false,
       },
     },
