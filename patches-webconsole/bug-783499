# HG changeset patch
# Parent 73bb1c39936345ec43fff094f23c6930084c005a
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1356036809 -7200

Bug 783499 - Web Console should use the debugger API

diff --git a/toolkit/devtools/webconsole/WebConsoleUtils.jsm b/toolkit/devtools/webconsole/WebConsoleUtils.jsm
--- a/toolkit/devtools/webconsole/WebConsoleUtils.jsm
+++ b/toolkit/devtools/webconsole/WebConsoleUtils.jsm
@@ -295,16 +295,17 @@ this.WebConsoleUtils = {
    *
    * @param mixed aObject
    *        The object you want to check if it can be inspected.
    * @return boolean
    *         True if the object is inspectable or false otherwise.
    */
   isObjectInspectable: function WCU_isObjectInspectable(aObject)
   {
+    return true;
     let isEnumerable = false;
 
     // Skip Iterators and Generators.
     if (this.isIteratorOrGenerator(aObject)) {
       return false;
     }
 
     try {
@@ -472,17 +473,17 @@ this.WebConsoleUtils = {
    *         An array of property descriptors.
    */
   inspectObject: function WCU_inspectObject(aObject, aObjectWrapper)
   {
     let properties = [];
     let isDOMDocument = aObject instanceof Ci.nsIDOMDocument;
     let deprecated = ["width", "height", "inputEncoding"];
 
-    for (let name in aObject) {
+    for each (let name in aObject.getOwnPropertyNames()) {
       // See bug 632275: skip deprecated properties.
       if (isDOMDocument && deprecated.indexOf(name) > -1) {
         continue;
       }
 
       properties.push(this.inspectObjectProperty(aObject, name, aObjectWrapper));
     }
 
diff --git a/toolkit/devtools/webconsole/dbg-webconsole-actors.js b/toolkit/devtools/webconsole/dbg-webconsole-actors.js
--- a/toolkit/devtools/webconsole/dbg-webconsole-actors.js
+++ b/toolkit/devtools/webconsole/dbg-webconsole-actors.js
@@ -66,21 +66,30 @@ function WebConsoleActor(aConnection, aP
     this._window = Services.wm.getMostRecentWindow("navigator:browser");
     this._isGlobalActor = true;
   }
 
   this._actorPool = new ActorPool(this.conn);
   this.conn.addActorPool(this._actorPool);
 
   this._prefs = {};
+
+  this.dbg = new Debugger();
 }
 
 WebConsoleActor.prototype =
 {
   /**
+   * Debugger instance.
+   *
+   * @see jsdebugger.jsm
+   */
+  dbg: null,
+
+  /**
    * Tells if this Web Console actor is a global actor or not.
    * @private
    * @type boolean
    */
   _isGlobalActor: false,
 
   /**
    * Actor pool for all of the actors we send to the client.
@@ -447,40 +456,52 @@ WebConsoleActor.prototype =
    * @param object aRequest
    *        The JSON request object received from the Web Console client.
    * @return object
    *         The evaluation response packet.
    */
   onEvaluateJS: function WCA_onEvaluateJS(aRequest)
   {
     let input = aRequest.text;
-    let result, error = null;
-    let timestamp;
+    let timestamp = Date.now();
 
     this.helperResult = null;
     this.evalInput = input;
-    try {
-      timestamp = Date.now();
-      result = this.evalInSandbox(input);
-    }
-    catch (ex) {
-      error = ex;
-    }
+    let evalResult = this.evalWithDebugger(input);
 
     let helperResult = this.helperResult;
     delete this.helperResult;
     delete this.evalInput;
 
+    let result, error, errorMessage;
+    if (evalResult) {
+      if ("return" in evalResult) {
+        result = evalResult.return;
+      }
+      else if ("yield" in evalResult) {
+        result = evalResult.yield;
+      }
+
+      if ("throw" in evalResult) {
+        error = evalResult.throw;
+        let errorToString = this._dbgWindow
+                            .evalInGlobalWithBindings("ex + ''", {ex: error});
+        if (errorToString && typeof errorToString.return == "string") {
+          errorMessage = errorToString.return;
+        }
+      }
+    }
+
     return {
       from: this.actorID,
       input: input,
       result: this.createValueGrip(result),
       timestamp: timestamp,
-      error: error,
-      errorMessage: error ? String(error) : null,
+      error: this.createValueGrip(error),
+      errorMessage: errorMessage,
       helperResult: helperResult,
     };
   },
 
   /**
    * The Autocomplete request handler.
    *
    * @param object aRequest
@@ -541,16 +562,55 @@ WebConsoleActor.prototype =
     });
 
     this.sandbox.console = this.window.console;
 
     JSTermHelpers(this);
   },
 
   /**
+   * Create the Debugger.Object for the current window.
+   * @private
+   */
+  _createGlobal: function WCA__createGlobal()
+  {
+    let windowId = WebConsoleUtils.getInnerWindowId(this.window);
+    if (this._sandboxWindowId == windowId) {
+      return;
+    }
+
+    this._sandboxWindowId = windowId;
+
+    this._dbgWindow = this.dbg.addDebuggee(this.window);
+    this.dbg.removeDebuggee(this.window);
+
+    /*
+    try {
+      let global = this.dbg.addDebuggee(this.window);
+      let f = this.dbg.getNewestFrame();
+      if (f) {
+        return f.evalWithBindings(expr, {});
+      }
+      else {
+        globalWrapper.evalInGlobalWithBindings(expr, bindings);
+      }
+    } finally {
+      dbg.removeDebuggee(global);
+    }
+
+    debugger.removeDebuggee(DOwindow);
+    // Now debugger has no debuggees. But the D.O's are still usable.
+
+    // makeDebuggeeValue returns a D.O referring to random_object.
+    var DOrandom = DOwindow.makeDebuggeeValue(random_object);
+    JSTermHelpers(this);
+    */
+  },
+
+  /**
    * Evaluates a string in the sandbox.
    *
    * @param string aString
    *        String to evaluate in the sandbox.
    * @return mixed
    *         The result of the evaluation.
    */
   evalInSandbox: function WCA_evalInSandbox(aString)
@@ -588,16 +648,44 @@ WebConsoleActor.prototype =
     }
     if ($$) {
       this.sandbox.$$ = $$;
     }
 
     return result;
   },
 
+  /**
+   * Evaluates a string using the debugger API.
+   *
+   * @param string aString
+   *        String to evaluate.
+   * @return object
+   *         The result of the evaluation.
+   */
+  evalWithDebugger: function WCA_evalWithDebugger(aString)
+  {
+    this._createGlobal();
+
+    // The help function needs to be easy to guess, so we make the () optional
+    if (aString.trim() == "help" || aString.trim() == "?") {
+      aString = "help()";
+    }
+
+    let result, frame = this.dbg.getNewestFrame();
+    if (frame) {
+      result = frame.evalWithBindings(aString, {});
+    }
+    else {
+      result = this._dbgWindow.evalInGlobalWithBindings(aString, {});
+    }
+
+    return result;
+  },
+
   //////////////////
   // Event handlers for various listeners.
   //////////////////
 
   /**
    * Handler for page errors received from the PageErrorListener. This method
    * sends the nsIScriptError to the remote Web Console client.
    *
