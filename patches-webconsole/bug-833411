# HG changeset patch
# Parent 2cf43d3bdd1e06623b602602fa0b13b8a659f774
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1358877271 -7200

Bug 833411 - Variables View: support for displaying long string actors; r=vporof

diff --git a/browser/devtools/shared/VariablesView.jsm b/browser/devtools/shared/VariablesView.jsm
--- a/browser/devtools/shared/VariablesView.jsm
+++ b/browser/devtools/shared/VariablesView.jsm
@@ -784,16 +784,28 @@ Scope.prototype = {
 
   /**
    * Sets the twisty visibility state.
    * @param boolean aFlag
    */
   set twisty(aFlag) aFlag ? this.showArrow() : this.hideArrow(),
 
   /**
+   * Gets the expand lock state.
+   * @return boolean
+   */
+  get locked() this._locked,
+
+  /**
+   * Sets the expand lock state.
+   * @param boolean aFlag
+   */
+  set locked(aFlag) this._locked = aFlag,
+
+  /**
    * Adds an event listener for a certain event on this scope's title.
    * @param string aName
    * @param function aCallback
    * @param boolean aCapture
    */
   addEventListener: function S_addEventListener(aName, aCallback, aCapture) {
     this._title.addEventListener(aName, aCallback, aCapture);
   },
@@ -1985,19 +1997,19 @@ VariablesView.isPrimitive = function VV_
 
   // As described in the remote debugger protocol, the value grip
   // must be contained in a 'value' property.
   let grip = aDescriptor.value;
   if (!grip || typeof grip != "object") {
     return true;
   }
 
-  // For convenience, undefined and null are both considered types.
+  // For convenience, undefined, null and long strings are considered primitives.
   let type = grip.type;
-  if (type == "undefined" || type == "null") {
+  if (type == "undefined" || type == "null" || type == "longString") {
     return true;
   }
 
   return false;
 };
 
 /**
  * Returns true if the descriptor represents an undefined value.
@@ -2082,16 +2094,18 @@ VariablesView.getGrip = function VV_getG
  */
 VariablesView.getString = function VV_getString(aGrip, aConciseFlag) {
   if (aGrip && typeof aGrip == "object") {
     switch (aGrip.type) {
       case "undefined":
         return "undefined";
       case "null":
         return "null";
+      case "longString":
+        return "\"" + aGrip.initial + "\"";
       default:
         if (!aConciseFlag) {
           return "[" + aGrip.type + " " + aGrip.class + "]";
         } else {
           return aGrip.class;
         }
     }
   } else {
