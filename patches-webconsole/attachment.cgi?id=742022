# HG changeset patch
# Date 1368014751 -10800
# User Colby Russell <Sevenspade@gmail.com>
# Parent b3a6bee35493d41d82c4159f5be649b83de3e7b5
Bug 861495 - Transplant getOuterWindowWithId from nsIDOMWindowUtils to a window-related service: WebConsoleUtils.jsm; r=msucan

diff --git a/toolkit/devtools/webconsole/WebConsoleUtils.jsm b/toolkit/devtools/webconsole/WebConsoleUtils.jsm
--- a/toolkit/devtools/webconsole/WebConsoleUtils.jsm
+++ b/toolkit/devtools/webconsole/WebConsoleUtils.jsm
@@ -153,41 +153,16 @@ this.WebConsoleUtils = {
    */
   getOuterWindowId: function WCU_getOuterWindowId(aWindow)
   {
     return aWindow.QueryInterface(Ci.nsIInterfaceRequestor).
            getInterface(Ci.nsIDOMWindowUtils).outerWindowID;
   },
 
   /**
-   * Gets the window that has the given outer ID.
-   *
-   * @param integer aOuterId
-   * @param nsIDOMWindow [aHintWindow]
-   *        Optional, the window object used to QueryInterface to
-   *        nsIDOMWindowUtils. If this is not given,
-   *        Services.wm.getMostRecentWindow() is used.
-   * @return nsIDOMWindow|null
-   *         The window object with the given outer ID.
-   */
-  getWindowByOuterId: function WCU_getWindowByOuterId(aOuterId, aHintWindow)
-  {
-    let someWindow = aHintWindow || Services.wm.getMostRecentWindow(null);
-    let content = null;
-
-    if (someWindow) {
-      let windowUtils = someWindow.QueryInterface(Ci.nsIInterfaceRequestor).
-                                   getInterface(Ci.nsIDOMWindowUtils);
-      content = windowUtils.getOuterWindowWithId(aOuterId);
-    }
-
-    return content;
-  },
-
-  /**
    * Abbreviates the given source URL so that it can be displayed flush-right
    * without being too distracting.
    *
    * @param string aSourceURL
    *        The source URL to shorten.
    * @return string
    *         The abbreviated form of the source URL.
    */
@@ -958,18 +933,17 @@ PageErrorListener.prototype =
 
     if (this.window) {
       if (!aScriptError.outerWindowID ||
           !this.isCategoryAllowed(aScriptError.category)) {
         return;
       }
 
       let errorWindow =
-        WebConsoleUtils.getWindowByOuterId(aScriptError.outerWindowID,
-                                           this.window);
+        Services.wm.getOuterWindowWithId(aScriptError.outerWindowID);
       if (!errorWindow || errorWindow.top != this.window) {
         return;
       }
     }
 
     this.listener.onPageError(aScriptError);
   },
 
@@ -1098,18 +1072,17 @@ ConsoleAPIListener.prototype =
   observe: function CAL_observe(aMessage, aTopic)
   {
     if (!this.owner) {
       return;
     }
 
     let apiMessage = aMessage.wrappedJSObject;
     if (this.window) {
-      let msgWindow = WebConsoleUtils.getWindowByOuterId(apiMessage.ID,
-                                                         this.window);
+      let msgWindow = Services.wm.getOuterWindowWithId(apiMessage.ID);
       if (!msgWindow || msgWindow.top != this.window) {
         // Not the same window!
         return;
       }
     }
 
     this.owner.onConsoleAPICall(apiMessage);
   },
