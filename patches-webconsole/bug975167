# HG changeset patch
# Parent 5d896e33c6a6fa7c382d6a1c6b544675d9857ee9
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1393009580 -7200

Bug 975167 - Traceback in autocompletion while debugging; r=past; try: -b do -p linux,linux64,macosx64,win32,win64 -u xpcshell,mochitest-bc,mochitest-o -t none

diff --git a/browser/devtools/webconsole/test/browser_webconsole_autocomplete_in_debugger_stackframe.js b/browser/devtools/webconsole/test/browser_webconsole_autocomplete_in_debugger_stackframe.js
--- a/browser/devtools/webconsole/test/browser_webconsole_autocomplete_in_debugger_stackframe.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_autocomplete_in_debugger_stackframe.js
@@ -177,38 +177,47 @@ function testCompletion(hud) {
   jsterm.complete(jsterm.COMPLETE_HINT_ONLY, testNext);
   yield undefined;
 
   newItems = popup.getItems();
   ok(!newItems.every(function(item) {
        return item.label != "prop1";
      }), "autocomplete results do contain prop1");
 
-  // Test if 'foo1Obj.prop1.' gives 'prop11'
+  // Test if 'foo2Obj.prop1.' gives 'prop11'
   input.value = "foo2Obj.prop1.";
   input.setSelectionRange(14, 14);
   jsterm.complete(jsterm.COMPLETE_HINT_ONLY, testNext);
   yield undefined;
 
   newItems = popup.getItems();
   ok(!newItems.every(function(item) {
        return item.label != "prop11";
      }), "autocomplete results do contain prop11");
 
-  // Test if 'foo1Obj.prop1.prop11.' gives suggestions for a string i.e. 'length'
+  // Test if 'foo2Obj.prop1.prop11.' gives suggestions for a string i.e. 'length'
   input.value = "foo2Obj.prop1.prop11.";
   input.setSelectionRange(21, 21);
   jsterm.complete(jsterm.COMPLETE_HINT_ONLY, testNext);
   yield undefined;
 
   newItems = popup.getItems();
   ok(!newItems.every(function(item) {
        return item.label != "length";
      }), "autocomplete results do contain length");
 
+  // Test if 'foo1Obj[0].' throws no errors.
+  input.value = "foo2Obj[0].";
+  input.setSelectionRange(11, 11);
+  jsterm.complete(jsterm.COMPLETE_HINT_ONLY, testNext);
+  yield undefined;
+
+  newItems = popup.getItems();
+  is(newItems.length, 0, "no items for foo2Obj[0]");
+
   testDriver = null;
   executeSoon(finishTest);
   yield undefined;
 }
 
 function debuggerOpened(aResult)
 {
   let debuggerWin = aResult.panelWin;
diff --git a/toolkit/devtools/webconsole/utils.js b/toolkit/devtools/webconsole/utils.js
--- a/toolkit/devtools/webconsole/utils.js
+++ b/toolkit/devtools/webconsole/utils.js
@@ -1038,17 +1038,22 @@ let DebuggerEnvironmentSupport = {
   getProperties: function(aObj)
   {
     return aObj.names();
   },
 
   getProperty: function(aObj, aName)
   {
     // TODO: we should use getVariableDescriptor() here - bug 725815.
-    let result = aObj.getVariable(aName);
+    let result = undefined;
+    try {
+      result = aObj.getVariable(aName);
+    } catch (ex) {
+      // getVariable() throws for invalid identifiers.
+    }
     return result === undefined ? null : { value: result };
   },
 };
 
 
 exports.JSPropertyProvider = JSPropertyProvider;
 })(WebConsoleUtils);
 
