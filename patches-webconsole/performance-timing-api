# HG changeset patch
# Parent 38c8dbb6ad87588ed67266248171a9aca70971d8
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1396037927 -7200

diff --git a/toolkit/devtools/webconsole/network-monitor.js b/toolkit/devtools/webconsole/network-monitor.js
--- a/toolkit/devtools/webconsole/network-monitor.js
+++ b/toolkit/devtools/webconsole/network-monitor.js
@@ -889,72 +889,89 @@ NetworkMonitor.prototype = {
    *        The HTTP activity object we are working with.
    * @return object
    *         This object holds two properties:
    *         - total - the total time for all of the request and response.
    *         - timings - the HAR timings object.
    */
   _setupHarTimings: function NM__setupHarTimings(aHttpActivity)
   {
+    let win = NetworkHelper.getWindowForRequest(aHttpActivity.channel);
+
+    let channel = aHttpActivity.channel.QueryInterface(Ci.nsITimedChannel);
+    console.log("_setupHarTimings 1");
     let timings = aHttpActivity.timings;
     let harTimings = {};
 
-    // Not clear how we can determine "blocked" time.
-    harTimings.blocked = -1;
+    function prtime2domtime(time) {
+      return Math.round(time / 1000);
+    }
+
+    let unload = 0,
+        redirect = 0,
+        responseStart = 0,
+        responseEnd = 0,
+        navigationStart = 0;
+
+    if (win && win.performance && win.performance.timing) {
+      let domTiming = win.performance.timing;
+      responseStart = domTiming.responseStart;
+      responseEnd = domTiming.responseEnd;
+      unload = domTiming.unloadEventEnd - domTiming.unloadEventStart;
+      redirect = domTiming.redirectEnd - domTiming.redirectStart;
+      navigationStart = domTiming.navigationStart;
+      console.log('performance.timing available');
+    } else {
+      responseStart = prtime2domtime(channel.responseStartTime || 0);
+      let cacheReadStart = prtime2domtime(channel.cacheReadStartTime || 0);
+      if (!responseStart || (cacheReadStart && cacheReadStart < responseStart)) {
+        responseStart = cacheReadStart;
+      }
+      responseEnd = prtime2domtime(channel.responseEndTime || 0);
+      let cacheReadEnd = prtime2domtime(channel.cacheReadEndTime || 0);
+      if (!responseEnd || (cacheReadEnd && cacheReadEnd < responseEnd)) {
+        responseEnd = cacheReadEnd;
+      }
+    }
+
+    let timeToStartConnection = prtime2domtime(channel.connectStartTime || channel.cacheReadStartTime) -
+                                (navigationStart ||
+                                 prtime2domtime(channel.channelCreationTime));
 
     // DNS timing information is available only in when the DNS record is not
     // cached.
-    harTimings.dns = timings.STATUS_RESOLVING && timings.STATUS_RESOLVED ?
-                     timings.STATUS_RESOLVED.last -
-                     timings.STATUS_RESOLVING.first : -1;
+    harTimings.dns = prtime2domtime(channel.domainLookupEndTime - channel.domainLookupStartTime);
 
-    if (timings.STATUS_CONNECTING_TO && timings.STATUS_CONNECTED_TO) {
-      harTimings.connect = timings.STATUS_CONNECTED_TO.last -
-                           timings.STATUS_CONNECTING_TO.first;
-    }
-    else if (timings.STATUS_SENDING_TO) {
-      harTimings.connect = timings.STATUS_SENDING_TO.first -
-                           timings.REQUEST_HEADER.first;
-    }
-    else {
-      harTimings.connect = -1;
-    }
+    harTimings.redirect = redirect;
 
-    if ((timings.STATUS_WAITING_FOR || timings.STATUS_RECEIVING_FROM) &&
-        (timings.STATUS_CONNECTED_TO || timings.STATUS_SENDING_TO)) {
-      harTimings.send = (timings.STATUS_WAITING_FOR ||
-                         timings.STATUS_RECEIVING_FROM).first -
-                        (timings.STATUS_CONNECTED_TO ||
-                         timings.STATUS_SENDING_TO).last;
-    }
-    else {
-      harTimings.send = -1;
-    }
+    harTimings.blocked = timeToStartConnection - unload - redirect - harTimings.dns;
 
-    if (timings.RESPONSE_START) {
-      harTimings.wait = timings.RESPONSE_START.first -
-                        (timings.REQUEST_BODY_SENT ||
-                         timings.STATUS_SENDING_TO).last;
+    harTimings.connect = prtime2domtime(channel.connectEndTime - channel.connectStartTime);
+
+    let waitingFor = timings.STATUS_WAITING_FOR ?
+                     prtime2domtime(timings.STATUS_WAITING_FOR.first) :
+                     responseStart;
+    harTimings.send = waitingFor - prtime2domtime(channel.requestStartTime);
+
+    if (timings.STATUS_WAITING_FOR) {
+      harTimings.wait = (responseStart - prtime2domtime(channel.requestStartTime)) -
+                        harTimings.send;
     }
     else {
       harTimings.wait = -1;
     }
 
-    if (timings.RESPONSE_START && timings.RESPONSE_COMPLETE) {
-      harTimings.receive = timings.RESPONSE_COMPLETE.last -
-                           timings.RESPONSE_START.first;
-    }
-    else {
-      harTimings.receive = -1;
-    }
+    harTimings.receive = responseEnd - responseStart;
+    console.log("_setupHarTimings 2", harTimings);
 
     let totalTime = 0;
     for (let timing in harTimings) {
-      let time = Math.max(Math.round(harTimings[timing] / 1000), -1);
-      harTimings[timing] = time;
+      let time = harTimings[timing];
+      //let time = Math.max(Math.round(harTimings[timing] / 1000), -1);
+      //harTimings[timing] = time;
       if (time > -1) {
         totalTime += time;
       }
     }
 
     return {
       total: totalTime,
       timings: harTimings,
