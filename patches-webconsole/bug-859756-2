# HG changeset patch
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1369421536 -10800
#      Wed May 15 22:28:48 2013 +0300
# Node ID 66edc6f47d4639dd342e096b39e4c1dc918d441d
# Parent e6828590861d1b2acf6809a295ebb5165cf6f03d
Bug 859756 - [browserconsole] Show nsIConsoleMessages in the Browser Console; r=robcee

diff --git a/browser/devtools/shared/DeveloperToolbar.jsm b/browser/devtools/shared/DeveloperToolbar.jsm
--- a/browser/devtools/shared/DeveloperToolbar.jsm
+++ b/browser/devtools/shared/DeveloperToolbar.jsm
@@ -20,17 +20,17 @@ XPCOMUtils.defineLazyModuleGetter(this, 
                                   "resource://gre/modules/devtools/Console.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "gcli",
                                   "resource://gre/modules/devtools/gcli.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "CmdCommands",
                                   "resource:///modules/devtools/BuiltinCommands.jsm");
 
-XPCOMUtils.defineLazyModuleGetter(this, "PageErrorListener",
+XPCOMUtils.defineLazyModuleGetter(this, "ConsoleServiceListener",
                                   "resource://gre/modules/devtools/WebConsoleUtils.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "PluralForm",
                                   "resource://gre/modules/PluralForm.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "devtools",
                                   "resource://gre/modules/devtools/Loader.jsm");
 
@@ -439,18 +439,18 @@ DeveloperToolbar.prototype._initErrorsCo
 {
   let tabId = aTab.linkedPanel;
   if (tabId in this._errorsCount) {
     this._updateErrorsCount();
     return;
   }
 
   let window = aTab.linkedBrowser.contentWindow;
-  let listener = new PageErrorListener(window, {
-    onPageError: this._onPageError.bind(this, tabId),
+  let listener = new ConsoleServiceListener(window, {
+    onConsoleServiceMessage: this._onPageError.bind(this, tabId),
   });
   listener.init();
 
   this._errorListeners[tabId] = listener;
   this._errorsCount[tabId] = 0;
   this._warningsCount[tabId] = 0;
 
   let messages = listener.getCachedMessages();
diff --git a/browser/devtools/webconsole/test/Makefile.in b/browser/devtools/webconsole/test/Makefile.in
--- a/browser/devtools/webconsole/test/Makefile.in
+++ b/browser/devtools/webconsole/test/Makefile.in
@@ -126,16 +126,17 @@ MOCHITEST_BROWSER_FILES = \
 	browser_bug_865871_variables_view_close_on_esc_key.js \
 	browser_bug_865288_repeat_different_objects.js \
 	browser_jsterm_inspect.js \
 	browser_bug_869003_inspect_cross_domain_object.js \
 	browser_bug_862916_console_dir_and_filter_off.js \
 	browser_console_native_getters.js \
 	browser_bug_871156_ctrlw_close_tab.js \
 	browser_console_private_browsing.js \
+	browser_console_nsiconsolemessage.js \
 	head.js \
 	$(NULL)
 
 ifeq ($(OS_ARCH), Darwin)
 MOCHITEST_BROWSER_FILES += \
 	browser_webconsole_bug_804845_ctrl_key_nav.js \
         $(NULL)
 endif
diff --git a/browser/devtools/webconsole/test/browser_console_nsiconsolemessage.js b/browser/devtools/webconsole/test/browser_console_nsiconsolemessage.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/webconsole/test/browser_console_nsiconsolemessage.js
@@ -0,0 +1,93 @@
+/*
+ * Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/
+ */
+
+// Check that nsIConsoleMessages show in the Browser Console and in the Web
+// Console. See bug 859756.
+
+const TEST_URI = "data:text/html;charset=utf8,<title>bug859756</title>\n" +
+                 "<p>hello world\n<p>nsIConsoleMessages ftw!";
+
+let gWebConsole, gJSTerm, gVariablesView;
+
+function test()
+{
+  addTab(TEST_URI);
+  browser.addEventListener("load", function onLoad() {
+    browser.removeEventListener("load", onLoad, true);
+
+    // Test for cached nsIConsoleMessages.
+    sendMessage("test1 for bug859756", "cat2012");
+
+    openConsole(null, consoleOpened);
+  }, true);
+}
+
+function sendMessage(aMessage, aCategory)
+{
+  let windowID = WebConsoleUtils.getInnerWindowId(content);
+  let consoleMsg = Cc["@mozilla.org/consolemessage;1"]
+                   .createInstance(Ci.nsIConsoleMessage);
+  consoleMsg.init(aMessage, aCategory, windowID);
+  Services.console.logMessage(consoleMsg);
+}
+
+function consoleOpened(hud)
+{
+  gWebConsole = hud;
+  gJSTerm = hud.jsterm;
+
+  // Send a message with no window ID.
+  Services.console.logStringMessage("do-not-show-me");
+
+  sendMessage("test2 for bug859756", "cat2013");
+
+  waitForMessages({
+    webconsole: hud,
+    messages: [
+      {
+        text: "test1 for bug859756",
+        category: CATEGORY_JS,
+      },
+      {
+        text: "test2 for bug859756",
+        category: CATEGORY_JS,
+      },
+    ],
+  }).then(onLogMessages);
+}
+
+function onLogMessages()
+{
+  let text = gWebConsole.outputNode.textContent;
+  is(text.indexOf("do-not-show-me"), -1,
+     "message without window ID is not displayed");
+  closeConsole(null, onWebConsoleClose);
+}
+
+function onWebConsoleClose()
+{
+  HUDConsoleUI.toggleBrowserConsole().then(onBrowserConsoleOpen);
+}
+
+function onBrowserConsoleOpen(hud)
+{
+  waitForMessages({
+    webconsole: hud,
+    messages: [
+      {
+        text: "test1 for bug859756",
+        category: CATEGORY_JS,
+      },
+      {
+        text: "test2 for bug859756",
+        category: CATEGORY_JS,
+      },
+      {
+        text: "do-not-show-me",
+        category: CATEGORY_JS,
+      },
+    ],
+  }).then(finishTest);
+}
diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -951,21 +951,24 @@ WebConsoleFrame.prototype = {
   {
     if (!aRemoteMessages.length) {
       return;
     }
 
     aRemoteMessages.forEach(function(aMessage) {
       switch (aMessage._type) {
         case "PageError": {
-          let category = Utils.categoryForScriptError(aMessage);
+          let category = Utils.categoryForConsoleMessage(aMessage);
           this.outputMessage(category, this.reportPageError,
                              [category, aMessage]);
           break;
         }
+        case "LogMessage":
+          this.handleLogMessage(aMessage);
+          break;
         case "ConsoleAPI":
           this.outputMessage(CATEGORY_WEBDEV, this.logConsoleAPIMessage,
                              [aMessage]);
           break;
       }
     }, this);
   },
 
@@ -1189,21 +1192,37 @@ WebConsoleFrame.prototype = {
    * Handle PageError objects received from the server. This method outputs the
    * given error.
    *
    * @param nsIScriptError aPageError
    *        The error received from the server.
    */
   handlePageError: function WCF_handlePageError(aPageError)
   {
-    let category = Utils.categoryForScriptError(aPageError);
+    let category = Utils.categoryForConsoleMessage(aPageError);
     this.outputMessage(category, this.reportPageError, [category, aPageError]);
   },
 
   /**
+   * Handle log messages received from the server. This method outputs the given
+   * message.
+   *
+   * @param object aPacket
+   *        The message packet received from the server.
+   */
+  handleLogMessage: function WCF_handleLogMessage(aPacket)
+  {
+    let category = Utils.categoryForConsoleMessage(aPacket.category);
+    this.outputMessage(category, () => {
+      return this.createMessageNode(category, SEVERITY_LOG, aPacket.message,
+                                    null, null, null, null, aPacket.timeStamp);
+    });
+  },
+
+  /**
    * Log network event.
    *
    * @param object aActorId
    *        The network event actor ID to log.
    * @return nsIDOMElement|null
    *         The message element to display in the Web Console output.
    */
   logNetEvent: function WCF_logNetEvent(aActorId)
@@ -4354,27 +4373,27 @@ var Utils = {
                          aOutputNode.lastChild.clientHeight : 0;
     let scrollBox = aOutputNode.scrollBoxObject.element;
 
     return scrollBox.scrollTop + scrollBox.clientHeight >=
            scrollBox.scrollHeight - lastNodeHeight / 2;
   },
 
   /**
-   * Determine the category of a given nsIScriptError.
+   * Determine the category of a given nsIConsoleMessage.
    *
-   * @param nsIScriptError aScriptError
-   *        The script error you want to determine the category for.
+   * @param nsIConsoleMessage aMessage
+   *        The message you want to determine the category for.
    * @return CATEGORY_JS|CATEGORY_CSS|CATEGORY_SECURITY
-   *         Depending on the script error CATEGORY_JS, CATEGORY_CSS, or
+   *         Depending on the message kind CATEGORY_JS, CATEGORY_CSS, or
    *         CATEGORY_SECURITY can be returned.
    */
-  categoryForScriptError: function Utils_categoryForScriptError(aScriptError)
+  categoryForConsoleMessage: function Utils_categoryForConsoleMessage(aMessage)
   {
-    switch (aScriptError.category) {
+    switch (aMessage.category) {
       case "CSS Parser":
       case "CSS Loader":
         return CATEGORY_CSS;
 
       case "Mixed Content Blocker":
       case "CSP":
         return CATEGORY_SECURITY;
 
@@ -4525,16 +4544,17 @@ CommandController.prototype = {
  *        The target that the console will connect to.
  */
 function WebConsoleConnectionProxy(aWebConsole, aTarget)
 {
   this.owner = aWebConsole;
   this.target = aTarget;
 
   this._onPageError = this._onPageError.bind(this);
+  this._onLogMessage = this._onLogMessage.bind(this);
   this._onConsoleAPICall = this._onConsoleAPICall.bind(this);
   this._onNetworkEvent = this._onNetworkEvent.bind(this);
   this._onNetworkEventUpdate = this._onNetworkEventUpdate.bind(this);
   this._onFileActivity = this._onFileActivity.bind(this);
   this._onTabNavigated = this._onTabNavigated.bind(this);
   this._onAttachConsole = this._onAttachConsole.bind(this);
   this._onCachedMessages = this._onCachedMessages.bind(this);
   this._connectionTimeout = this._connectionTimeout.bind(this);
@@ -4629,16 +4649,17 @@ WebConsoleConnectionProxy.prototype = {
       this._connectTimer.cancel();
       this._connectTimer = null;
     }.bind(this), function _onFailure() {
       this._connectTimer = null;
     }.bind(this));
 
     let client = this.client = this.target.client;
 
+    client.addListener("logMessage", this._onLogMessage);
     client.addListener("pageError", this._onPageError);
     client.addListener("consoleAPICall", this._onConsoleAPICall);
     client.addListener("networkEvent", this._onNetworkEvent);
     client.addListener("networkEventUpdate", this._onNetworkEventUpdate);
     client.addListener("fileActivity", this._onFileActivity);
     client.addListener("lastPrivateContextExited", this._onLastPrivateContextExited);
     this.target.on("will-navigate", this._onTabNavigated);
     this.target.on("navigate", this._onTabNavigated);
@@ -4751,16 +4772,33 @@ WebConsoleConnectionProxy.prototype = {
   _onPageError: function WCCP__onPageError(aType, aPacket)
   {
     if (this.owner && aPacket.from == this._consoleActor) {
       this.owner.handlePageError(aPacket.pageError);
     }
   },
 
   /**
+   * The "logMessage" message type handler. We redirect any message to the UI
+   * for displaying.
+   *
+   * @private
+   * @param string aType
+   *        Message type.
+   * @param object aPacket
+   *        The message received from the server.
+   */
+  _onLogMessage: function WCCP__onLogMessage(aType, aPacket)
+  {
+    if (this.owner && aPacket.from == this._consoleActor) {
+      this.owner.handleLogMessage(aPacket);
+    }
+  },
+
+  /**
    * The "consoleAPICall" message type handler. We redirect any message to
    * the UI for displaying.
    *
    * @private
    * @param string aType
    *        Message type.
    * @param object aPacket
    *        The message received from the server.
@@ -4894,16 +4932,17 @@ WebConsoleConnectionProxy.prototype = {
 
     this._disconnecter = Promise.defer();
 
     if (!this.client) {
       this._disconnecter.resolve(null);
       return this._disconnecter.promise;
     }
 
+    this.client.removeListener("logMessage", this._onLogMessage);
     this.client.removeListener("pageError", this._onPageError);
     this.client.removeListener("consoleAPICall", this._onConsoleAPICall);
     this.client.removeListener("networkEvent", this._onNetworkEvent);
     this.client.removeListener("networkEventUpdate", this._onNetworkEventUpdate);
     this.client.removeListener("fileActivity", this._onFileActivity);
     this.client.removeListener("lastPrivateContextExited", this._onLastPrivateContextExited);
     this.target.off("will-navigate", this._onTabNavigated);
     this.target.off("navigate", this._onTabNavigated);
diff --git a/toolkit/devtools/client/dbg-client.jsm b/toolkit/devtools/client/dbg-client.jsm
--- a/toolkit/devtools/client/dbg-client.jsm
+++ b/toolkit/devtools/client/dbg-client.jsm
@@ -170,16 +170,17 @@ const ThreadStateTypes = {
  * Set of protocol messages that are sent by the server without a prior request
  * by the client.
  */
 const UnsolicitedNotifications = {
   "consoleAPICall": "consoleAPICall",
   "eventNotification": "eventNotification",
   "fileActivity": "fileActivity",
   "lastPrivateContextExited": "lastPrivateContextExited",
+  "logMessage": "logMessage",
   "networkEvent": "networkEvent",
   "networkEventUpdate": "networkEventUpdate",
   "newGlobal": "newGlobal",
   "newScript": "newScript",
   "newSource": "newSource",
   "tabDetached": "tabDetached",
   "tabNavigated": "tabNavigated",
   "pageError": "pageError",
diff --git a/toolkit/devtools/server/actors/webconsole.js b/toolkit/devtools/server/actors/webconsole.js
--- a/toolkit/devtools/server/actors/webconsole.js
+++ b/toolkit/devtools/server/actors/webconsole.js
@@ -13,17 +13,17 @@ let Cu = Components.utils;
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "Services",
                                   "resource://gre/modules/Services.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "WebConsoleUtils",
                                   "resource://gre/modules/devtools/WebConsoleUtils.jsm");
 
-XPCOMUtils.defineLazyModuleGetter(this, "PageErrorListener",
+XPCOMUtils.defineLazyModuleGetter(this, "ConsoleServiceListener",
                                   "resource://gre/modules/devtools/WebConsoleUtils.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "ConsoleAPIListener",
                                   "resource://gre/modules/devtools/WebConsoleUtils.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "ConsoleProgressListener",
                                   "resource://gre/modules/devtools/WebConsoleUtils.jsm");
 
@@ -177,20 +177,20 @@ WebConsoleActor.prototype =
    * The content window we work with.
    * @type nsIDOMWindow
    */
   get window() this._window,
 
   _window: null,
 
   /**
-   * The PageErrorListener instance.
+   * The ConsoleServiceListener instance.
    * @type object
    */
-  pageErrorListener: null,
+  consoleServiceListener: null,
 
   /**
    * The ConsoleAPIListener instance.
    */
   consoleAPIListener: null,
 
   /**
    * The NetworkMonitor instance.
@@ -223,19 +223,19 @@ WebConsoleActor.prototype =
   _findProtoChain: ThreadActor.prototype._findProtoChain,
   _removeFromProtoChain: ThreadActor.prototype._removeFromProtoChain,
 
   /**
    * Destroy the current WebConsoleActor instance.
    */
   disconnect: function WCA_disconnect()
   {
-    if (this.pageErrorListener) {
-      this.pageErrorListener.destroy();
-      this.pageErrorListener = null;
+    if (this.consoleServiceListener) {
+      this.consoleServiceListener.destroy();
+      this.consoleServiceListener = null;
     }
     if (this.consoleAPIListener) {
       this.consoleAPIListener.destroy();
       this.consoleAPIListener = null;
     }
     if (this.networkMonitor) {
       this.networkMonitor.destroy();
       this.networkMonitor = null;
@@ -379,20 +379,20 @@ WebConsoleActor.prototype =
   {
     let startedListeners = [];
     let window = !this._isGlobalActor ? this.window : null;
 
     while (aRequest.listeners.length > 0) {
       let listener = aRequest.listeners.shift();
       switch (listener) {
         case "PageError":
-          if (!this.pageErrorListener) {
-            this.pageErrorListener =
-              new PageErrorListener(window, this);
-            this.pageErrorListener.init();
+          if (!this.consoleServiceListener) {
+            this.consoleServiceListener =
+              new ConsoleServiceListener(window, this);
+            this.consoleServiceListener.init();
           }
           startedListeners.push(listener);
           break;
         case "ConsoleAPI":
           if (!this.consoleAPIListener) {
             this.consoleAPIListener =
               new ConsoleAPIListener(window, this);
             this.consoleAPIListener.init();
@@ -442,19 +442,19 @@ WebConsoleActor.prototype =
     let toDetach = aRequest.listeners ||
                    ["PageError", "ConsoleAPI", "NetworkActivity",
                     "FileActivity"];
 
     while (toDetach.length > 0) {
       let listener = toDetach.shift();
       switch (listener) {
         case "PageError":
-          if (this.pageErrorListener) {
-            this.pageErrorListener.destroy();
-            this.pageErrorListener = null;
+          if (this.consoleServiceListener) {
+            this.consoleServiceListener.destroy();
+            this.consoleServiceListener = null;
           }
           stoppedListeners.push(listener);
           break;
         case "ConsoleAPI":
           if (this.consoleAPIListener) {
             this.consoleAPIListener.destroy();
             this.consoleAPIListener = null;
           }
@@ -500,38 +500,51 @@ WebConsoleActor.prototype =
       };
     }
 
     let messages = [];
 
     while (types.length > 0) {
       let type = types.shift();
       switch (type) {
-        case "ConsoleAPI":
-          if (this.consoleAPIListener) {
-            let cache = this.consoleAPIListener
-                        .getCachedMessages(!this._isGlobalActor);
-            cache.forEach((aMessage) => {
-              let message = this.prepareConsoleMessageForRemote(aMessage);
+        case "ConsoleAPI": {
+          if (!this.consoleAPIListener) {
+            break;
+          }
+          let cache = this.consoleAPIListener
+                      .getCachedMessages(!this._isGlobalActor);
+          cache.forEach((aMessage) => {
+            let message = this.prepareConsoleMessageForRemote(aMessage);
+            message._type = type;
+            messages.push(message);
+          });
+          break;
+        }
+        case "PageError": {
+          if (!this.consoleServiceListener) {
+            break;
+          }
+          let cache = this.consoleServiceListener
+                      .getCachedMessages(!this._isGlobalActor);
+          cache.forEach((aMessage) => {
+            let message = null;
+            if (aMessage instanceof Ci.nsIScriptError) {
+              message = this.preparePageErrorForRemote(aMessage);
               message._type = type;
-              messages.push(message);
-            });
-          }
+            }
+            else {
+              message = {
+                _type: "LogMessage",
+                message: aMessage.message,
+              };
+            }
+            messages.push(message);
+          });
           break;
-        case "PageError":
-          if (this.pageErrorListener) {
-            let cache = this.pageErrorListener
-                        .getCachedMessages(!this._isGlobalActor);
-            cache.forEach((aMessage) => {
-              let message = this.preparePageErrorForRemote(aMessage);
-              message._type = type;
-              messages.push(message);
-            });
-          }
-          break;
+        }
       }
     }
 
     messages.sort(function(a, b) { return a.timeStamp - b.timeStamp; });
 
     return {
       from: this.actorID,
       messages: messages,
@@ -613,16 +626,20 @@ WebConsoleActor.prototype =
    * The "clearMessagesCache" request handler.
    */
   onClearMessagesCache: function WCA_onClearMessagesCache()
   {
     // TODO: Bug 717611 - Web Console clear button does not clear cached errors
     let windowId = !this._isGlobalActor ?
                    WebConsoleUtils.getInnerWindowId(this.window) : null;
     ConsoleAPIStorage.clearEvents(windowId);
+    if (this._isGlobalActor) {
+      Services.console.logStringMessage(null); // for the Error Console
+      Services.console.reset();
+    }
     return {};
   },
 
   /**
    * The "setPreferences" request handler.
    *
    * @param object aRequest
    *        The request message - which preferences need to be updated.
@@ -870,29 +887,41 @@ WebConsoleActor.prototype =
     };
   },
 
   //////////////////
   // Event handlers for various listeners.
   //////////////////
 
   /**
-   * Handler for page errors received from the PageErrorListener. This method
-   * sends the nsIScriptError to the remote Web Console client.
+   * Handler for messages received from the ConsoleServiceListener. This method
+   * sends the nsIConsoleMessage to the remote Web Console client.
    *
-   * @param nsIScriptError aPageError
-   *        The page error we need to send to the client.
+   * @param nsIConsoleMessage aMessage
+   *        The message we need to send to the client.
    */
-  onPageError: function WCA_onPageError(aPageError)
+  onConsoleServiceMessage: function WCA_onConsoleServiceMessage(aMessage)
   {
-    let packet = {
-      from: this.actorID,
-      type: "pageError",
-      pageError: this.preparePageErrorForRemote(aPageError),
-    };
+    let packet;
+    if (aMessage instanceof Ci.nsIScriptError) {
+      packet = {
+        from: this.actorID,
+        type: "pageError",
+        pageError: this.preparePageErrorForRemote(aMessage),
+      };
+    }
+    else {
+      packet = {
+        from: this.actorID,
+        type: "logMessage",
+        message: aMessage.message,
+        timeStamp: aMessage.timeStamp,
+        category: aMessage.category,
+      };
+    }
     this.conn.send(packet);
   },
 
   /**
    * Prepare an nsIScriptError to be sent to the client.
    *
    * @param nsIScriptError aPageError
    *        The page error we need to send to the client.
diff --git a/toolkit/devtools/webconsole/WebConsoleUtils.jsm b/toolkit/devtools/webconsole/WebConsoleUtils.jsm
--- a/toolkit/devtools/webconsole/WebConsoleUtils.jsm
+++ b/toolkit/devtools/webconsole/WebConsoleUtils.jsm
@@ -37,17 +37,17 @@ XPCOMUtils.defineLazyModuleGetter(this, 
                                   "resource:///modules/devtools/gDevTools.jsm");
 XPCOMUtils.defineLazyModuleGetter(this, "devtools",
                                   "resource://gre/modules/devtools/Loader.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "VariablesView",
                                   "resource:///modules/devtools/VariablesView.jsm");
 
 this.EXPORTED_SYMBOLS = ["WebConsoleUtils", "JSPropertyProvider", "JSTermHelpers",
-                         "PageErrorListener", "ConsoleAPIListener",
+                         "ConsoleServiceListener", "ConsoleAPIListener",
                          "NetworkResponseListener", "NetworkMonitor",
                          "ConsoleProgressListener"];
 
 // Match the function name from the result of toString() or toSource().
 //
 // Examples:
 // (function foobar(a, b) { ...
 // function foobar2(a) { ...
@@ -871,101 +871,105 @@ function getMatchedProps(aObj, aOptions 
 return JSPropertyProvider;
 })(WebConsoleUtils);
 
 ///////////////////////////////////////////////////////////////////////////////
 // The page errors listener
 ///////////////////////////////////////////////////////////////////////////////
 
 /**
- * The nsIConsoleService listener. This is used to send all the page errors
- * (JavaScript, CSS and more) to the remote Web Console instance.
+ * The nsIConsoleService listener. This is used to send all of the console
+ * messages (JavaScript, CSS and more) to the remote Web Console instance.
  *
  * @constructor
  * @param nsIDOMWindow [aWindow]
  *        Optional - the window object for which we are created. This is used
  *        for filtering out messages that belong to other windows.
  * @param object aListener
- *        The listener object must have a method: onPageError. This method is
- *        invoked with one argument, the nsIScriptError, whenever a relevant
- *        page error is received.
+ *        The listener object must have one method:
+ *        - onConsoleServiceMessage(). This method is invoked with one argument, the
+ *        nsIConsoleMessage, whenever a relevant message is received.
  */
-this.PageErrorListener = function PageErrorListener(aWindow, aListener)
+this.ConsoleServiceListener = function ConsoleServiceListener(aWindow, aListener)
 {
   this.window = aWindow;
   this.listener = aListener;
 }
 
-PageErrorListener.prototype =
+ConsoleServiceListener.prototype =
 {
   QueryInterface: XPCOMUtils.generateQI([Ci.nsIConsoleListener]),
 
   /**
    * The content window for which we listen to page errors.
    * @type nsIDOMWindow
    */
   window: null,
 
   /**
-   * The listener object which is notified of page errors. It must have
-   * a onPageError method which is invoked with one argument: the nsIScriptError.
+   * The listener object which is notified of messages from the console service.
    * @type object
    */
   listener: null,
 
   /**
    * Initialize the nsIConsoleService listener.
    */
-  init: function PEL_init()
+  init: function CSL_init()
   {
     Services.console.registerListener(this);
   },
 
   /**
    * The nsIConsoleService observer. This method takes all the script error
    * messages belonging to the current window and sends them to the remote Web
    * Console instance.
    *
-   * @param nsIScriptError aScriptError
-   *        The script error object coming from the nsIConsoleService.
+   * @param nsIConsoleMessage aMessage
+   *        The message object coming from the nsIConsoleService.
    */
-  observe: function PEL_observe(aScriptError)
+  observe: function CSL_observe(aMessage)
   {
-    if (!this.listener ||
-        !(aScriptError instanceof Ci.nsIScriptError)) {
+    if (!this.listener) {
       return;
     }
 
     if (this.window) {
-      if (!aScriptError.outerWindowID ||
-          !this.isCategoryAllowed(aScriptError.category)) {
+      if (!(aMessage instanceof Ci.nsIScriptError) ||
+          !aMessage.outerWindowID ||
+          !this.isCategoryAllowed(aMessage.category)) {
         return;
       }
 
-      let errorWindow =
-        Services.wm.getOuterWindowWithId(aScriptError.outerWindowID);
+      let errorWindow = Services.wm.getOuterWindowWithId(aMessage.outerWindowID);
       if (!errorWindow || errorWindow.top != this.window) {
         return;
       }
     }
 
-    this.listener.onPageError(aScriptError);
+    if (aMessage.message) {
+      this.listener.onConsoleServiceMessage(aMessage);
+    }
   },
 
   /**
-   * Check if the given script error category is allowed to be tracked or not.
+   * Check if the given message category is allowed to be tracked or not.
    * We ignore chrome-originating errors as we only care about content.
    *
    * @param string aCategory
-   *        The nsIScriptError category you want to check.
+   *        The message category you want to check.
    * @return boolean
    *         True if the category is allowed to be logged, false otherwise.
    */
-  isCategoryAllowed: function PEL_isCategoryAllowed(aCategory)
+  isCategoryAllowed: function CSL_isCategoryAllowed(aCategory)
   {
+    if (!aCategory) {
+      return false;
+    }
+
     switch (aCategory) {
       case "XPConnect JavaScript":
       case "component javascript":
       case "chrome javascript":
       case "chrome registration":
       case "XBL":
       case "XBL Prototype Handler":
       case "XBL Content Sink":
@@ -978,44 +982,43 @@ PageErrorListener.prototype =
 
   /**
    * Get the cached page errors for the current inner window.
    *
    * @param boolean [aIncludePrivate=false]
    *        Tells if you want to also retrieve messages coming from private
    *        windows. Defaults to false.
    * @return array
-   *         The array of cached messages.
+   *         The array of cached messages. Each element is an nsIScriptError or
+   *         an nsIConsoleMessage
    */
-  getCachedMessages: function PEL_getCachedMessages(aIncludePrivate = false)
+  getCachedMessages: function CSL_getCachedMessages(aIncludePrivate = false)
   {
     let innerWindowId = this.window ?
                         WebConsoleUtils.getInnerWindowId(this.window) : null;
     let errors = Services.console.getMessageArray() || [];
+    if (!innerWindowId) {
+      return errors;
+    }
 
     return errors.filter((aError) => {
-      if (!(aError instanceof Ci.nsIScriptError)) {
-        return false;
-      }
-      if (!aIncludePrivate && aError.isFromPrivateWindow) {
-        return false;
-      }
-      if (innerWindowId &&
-          (aError.innerWindowID != innerWindowId ||
-           !this.isCategoryAllowed(aError.category))) {
+      if (!(aError instanceof Ci.nsIScriptError) ||
+          aError.innerWindowID != innerWindowId ||
+          (!aIncludePrivate && aError.isFromPrivateWindow) ||
+          !this.isCategoryAllowed(aError.category)) {
         return false;
       }
       return true;
     });
   },
 
   /**
    * Remove the nsIConsoleService listener.
    */
-  destroy: function PEL_destroy()
+  destroy: function CSL_destroy()
   {
     Services.console.unregisterListener(this);
     this.listener = this.window = null;
   },
 };
 
 
 ///////////////////////////////////////////////////////////////////////////////
@@ -1107,22 +1110,22 @@ ConsoleAPIListener.prototype =
    *        windows. Defaults to false.
    * @return array
    *         The array of cached messages.
    */
   getCachedMessages: function CAL_getCachedMessages(aIncludePrivate = false)
   {
     let innerWindowId = this.window ?
                         WebConsoleUtils.getInnerWindowId(this.window) : null;
-    return ConsoleAPIStorage.getEvents(innerWindowId).filter((aMessage) => {
-      if (!aIncludePrivate && aMessage.private) {
-        return false;
-      }
-      return true;
-    });
+    let events = ConsoleAPIStorage.getEvents(innerWindowId);
+    if (aIncludePrivate) {
+      return events;
+    }
+
+    return events.filter((m) => !m.private);
   },
 
   /**
    * Destroy the console API listener.
    */
   destroy: function CAL_destroy()
   {
     Services.obs.removeObserver(this, "console-api-log-event");
diff --git a/toolkit/devtools/webconsole/test/Makefile.in b/toolkit/devtools/webconsole/test/Makefile.in
--- a/toolkit/devtools/webconsole/test/Makefile.in
+++ b/toolkit/devtools/webconsole/test/Makefile.in
@@ -19,15 +19,16 @@ MOCHITEST_CHROME_FILES = \
     test_object_actor.html \
     test_network_get.html \
     test_network_post.html \
     test_network_longstring.html \
     test_file_uri.html \
     test_bug819670_getter_throws.html \
     test_object_actor_native_getters.html \
     test_object_actor_native_getters_lenient_this.html \
+    test_nsiconsolemessage.html \
     network_requests_iframe.html \
     data.json \
     data.json^headers^ \
     common.js \
     $(NULL)
 
 include $(topsrcdir)/config/rules.mk
diff --git a/toolkit/devtools/webconsole/test/common.js b/toolkit/devtools/webconsole/test/common.js
--- a/toolkit/devtools/webconsole/test/common.js
+++ b/toolkit/devtools/webconsole/test/common.js
@@ -101,17 +101,20 @@ function checkObject(aObject, aExpected)
     let expected = aExpected[name];
     let value = aObject[name];
     checkValue(name, value, expected);
   }
 }
 
 function checkValue(aName, aValue, aExpected)
 {
-  if (aValue === undefined) {
+  if (aExpected === null) {
+    ok(!aValue, "'" + aName + "' is null");
+  }
+  else if (aValue === undefined) {
     ok(false, "'" + aName + "' is undefined");
   }
   else if (typeof aExpected == "string" || typeof aExpected == "number" ||
            typeof aExpected == "boolean") {
     is(aValue, aExpected, "property '" + aName + "'");
   }
   else if (aExpected instanceof RegExp) {
     ok(aExpected.test(aValue), aName + ": " + aExpected + " matched " + aValue);
diff --git a/toolkit/devtools/webconsole/test/test_cached_messages.html b/toolkit/devtools/webconsole/test/test_cached_messages.html
--- a/toolkit/devtools/webconsole/test/test_cached_messages.html
+++ b/toolkit/devtools/webconsole/test/test_cached_messages.html
@@ -90,30 +90,30 @@ function doConsoleCalls()
     },
   ];
 }
 </script>
 
 <script class="testbody" type="text/javascript;version=1.8">
 SimpleTest.waitForExplicitFinish();
 
-let consoleAPIListener, pageErrorListener;
+let consoleAPIListener, consoleServiceListener;
 let consoleAPICalls = 0;
 let pageErrors = 0;
 
 let handlers = {
   onConsoleAPICall: function onConsoleAPICall()
   {
     consoleAPICalls++;
     if (consoleAPICalls == expectedConsoleCalls.length) {
       checkConsoleAPICache();
     }
   },
 
-  onPageError: function onPageError()
+  onConsoleServiceMessage: function onConsoleServiceMessage()
   {
     pageErrors++;
     if (pageErrors == expectedPageErrors.length) {
       testPageErrors();
     }
   },
 };
 
@@ -148,26 +148,26 @@ function onCachedConsoleAPI(aState, aRes
      "number of cached console messages");
 
   expectedConsoleCalls.forEach(function(aMessage, aIndex) {
     info("checking received cached message #" + aIndex);
     checkConsoleAPICall(msgs[aIndex], expectedConsoleCalls[aIndex]);
   });
 
   closeDebugger(aState, function() {
-    pageErrorListener = new PageErrorListener(null, handlers);
-    pageErrorListener.init();
+    consoleServiceListener = new ConsoleServiceListener(null, handlers);
+    consoleServiceListener.init();
     doPageErrors();
   });
 }
 
 function testPageErrors()
 {
-  pageErrorListener.destroy();
-  pageErrorListener = null;
+  consoleServiceListener.destroy();
+  consoleServiceListener = null;
   attachConsole(["PageError"], onAttach2);
 }
 
 function onAttach2(aState, aResponse)
 {
   aState.client.getCachedMessages(["PageError"],
                                   onCachedPageErrors.bind(null, aState));
 }
diff --git a/toolkit/devtools/webconsole/test/test_nsiconsolemessage.html b/toolkit/devtools/webconsole/test/test_nsiconsolemessage.html
new file mode 100644
--- /dev/null
+++ b/toolkit/devtools/webconsole/test/test_nsiconsolemessage.html
@@ -0,0 +1,133 @@
+<!DOCTYPE HTML>
+<html lang="en">
+<head>
+  <meta charset="utf8">
+  <title>Test for nsIConsoleMessages</title>
+  <script type="text/javascript" src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>
+  <script type="text/javascript;version=1.8" src="common.js"></script>
+  <!-- Any copyright is dedicated to the Public Domain.
+     - http://creativecommons.org/publicdomain/zero/1.0/ -->
+</head>
+<body>
+<p>Make sure that nsIConsoleMessages are logged. See bug 859756.</p>
+
+<script class="testbody" type="text/javascript;version=1.8">
+SimpleTest.waitForExplicitFinish();
+
+let expectedMessages = [];
+let testingTabActor = false;
+
+function sendMessages()
+{
+  expectedMessages = [
+    {
+      message: "hello world! bug859756",
+      category: null,
+      timeStamp: /^\d+$/,
+    },
+    {
+      message: "foobarz",
+      category: null,
+      timeStamp: /^\d+$/,
+    },
+    {
+      message: "boom",
+      category: "cat7",
+      timeStamp: /^\d+$/,
+    },
+    {
+      message: "windowfun",
+      category: "cat9",
+      timeStamp: /^\d+$/,
+    },
+  ];
+
+  Services.console.logStringMessage("hello world! bug859756");
+
+  let consoleMsg = Cc["@mozilla.org/consolemessage;1"]
+                   .createInstance(Ci.nsIConsoleMessage);
+  consoleMsg.init("foobarz");
+  Services.console.logMessage(consoleMsg);
+
+  consoleMsg = Cc["@mozilla.org/consolemessage;1"]
+                   .createInstance(Ci.nsIConsoleMessage);
+  consoleMsg.init("boom", "cat7");
+  Services.console.logMessage(consoleMsg);
+
+  consoleMsg = Cc["@mozilla.org/consolemessage;1"]
+                   .createInstance(Ci.nsIConsoleMessage);
+  consoleMsg.init("windowfun", "cat9", Date.now());
+  Services.console.logMessage(consoleMsg);
+}
+
+function sendMessagesForTab()
+{
+  sendMessages();
+  expectedMessages = [
+    {
+      message: "windowfun3",
+      category: "cat10",
+      timeStamp: /^\d+$/,
+    },
+  ];
+
+  let windowID = WebConsoleUtils.getInnerWindowId(top);
+  let consoleMsg = Cc["@mozilla.org/consolemessage;1"]
+                   .createInstance(Ci.nsIConsoleMessage);
+  consoleMsg.init("windowfun3", "cat10", windowID);
+  Services.console.logMessage(consoleMsg);
+}
+
+function startTest()
+{
+  removeEventListener("load", startTest);
+  attachConsole(["PageError"], onAttach);
+}
+
+function onAttach(aState, aResponse)
+{
+  window.onLogMessage_ = onLogMessage.bind(null, aState);
+  aState.dbgClient.addListener("logMessage", onLogMessage_);
+
+  if (!testingTabActor) {
+    sendMessages();
+  } else {
+    sendMessagesForTab();
+  }
+
+  info("waiting for messages");
+}
+
+let receivedMessages = [];
+
+function onLogMessage(aState, aType, aPacket)
+{
+  is(aPacket.from, aState.actor, "packet actor");
+
+  receivedMessages.push(aPacket);
+  if (receivedMessages.length != expectedMessages.length) {
+    return;
+  }
+
+  aState.dbgClient.removeListener("logMessage", onLogMessage_);
+
+  checkObject(receivedMessages, expectedMessages);
+
+  receivedMessages = expectedMessages = [];
+  window.onLogMessage_ = null;
+
+  closeDebugger(aState, () => {
+    if (!testingTabActor) {
+      testingTabActor = true;
+      info("start tab actor test");
+      attachConsole(["PageError"], onAttach, true);
+    } else {
+      SimpleTest.finish();
+    }
+  });
+}
+
+addEventListener("load", startTest);
+</script>
+</body>
+</html>
