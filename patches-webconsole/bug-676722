# HG changeset patch
# Parent 5a7031ca9c33a86d70efb754571c8e0b161f594b
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1342211492 -10800

Bug 676722 - The output of console.log(object) isn't expandable/inspectable in the Web Console

diff --git a/browser/devtools/webconsole/HUDService-content.js b/browser/devtools/webconsole/HUDService-content.js
--- a/browser/devtools/webconsole/HUDService-content.js
+++ b/browser/devtools/webconsole/HUDService-content.js
@@ -1156,27 +1156,27 @@ let ConsoleAPIObserver = {
       case "time":
       case "timeEnd":
       case "group":
       case "groupCollapsed":
         aRemoteMessage.apiMessage.arguments =
           WebConsoleUtils.cloneObject(aOriginalMessage.arguments, true);
         break;
 
-      case "log":
-      case "info":
-      case "warn":
-      case "error":
-      case "debug":
       case "groupEnd":
         aRemoteMessage.argumentsToString =
           Array.map(aOriginalMessage.arguments || [],
                     this._formatObject.bind(this));
         break;
 
+      case "log":
+      case "info":
+      case "warn":
+      case "error":
+      case "debug":
       case "dir": {
         aRemoteMessage.objectsCacheId = Manager.sequenceId;
         aRemoteMessage.argumentsToString = [];
         let mapFunction = function(aItem) {
           aRemoteMessage.argumentsToString.push(this._formatObject(aItem));
           if (WebConsoleUtils.isObjectInspectable(aItem)) {
             return JSTerm.prepareObjectForRemote(aItem,
                                                  aRemoteMessage.objectsCacheId);
diff --git a/browser/devtools/webconsole/test/Makefile.in b/browser/devtools/webconsole/test/Makefile.in
--- a/browser/devtools/webconsole/test/Makefile.in
+++ b/browser/devtools/webconsole/test/Makefile.in
@@ -106,16 +106,17 @@ MOCHITEST_BROWSER_FILES = \
 	browser_webconsole_bug_658368_time_methods.js \
 	browser_webconsole_bug_622303_persistent_filters.js \
 	browser_webconsole_window_zombie.js \
 	browser_cached_messages.js \
 	browser_bug664688_sandbox_update_after_navigation.js \
 	browser_webconsole_menustatus.js \
 	browser_result_format_as_string.js \
 	browser_webconsole_bug_737873_mixedcontent.js \
+	browser_console_log_inspectable_object.js \
 	head.js \
 	$(NULL)
 
 MOCHITEST_BROWSER_FILES += \
 	test-console.html \
 	test-network.html \
 	test-network-request.html \
 	test-mutation.html \
diff --git a/browser/devtools/webconsole/test/browser_console_log_inspectable_object.js b/browser/devtools/webconsole/test/browser_console_log_inspectable_object.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/webconsole/test/browser_console_log_inspectable_object.js
@@ -0,0 +1,54 @@
+/* vim:set ts=2 sw=2 sts=2 et: */
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/ */
+
+// Test that objects given to console.log() are inspectable.
+
+function test()
+{
+  waitForExplicitFinish();
+
+  addTab("data:text/html,test for bug 676722 - inspectable objects for window.console");
+
+  gBrowser.selectedBrowser.addEventListener("load", function onLoad() {
+    gBrowser.selectedBrowser.removeEventListener("load", onLoad, true);
+    openConsole(null, performTest);
+  }, true);
+}
+
+function performTest(hud)
+{
+  hud.jsterm.clearOutput(true);
+
+  hud.jsterm.execute("myObj = {abba: 'omgBug676722'}");
+  hud.jsterm.execute("console.log('fooBug676722', myObj)");
+  waitForSuccess({
+    name: "eval results are shown",
+    validatorFn: function()
+    {
+      return hud.outputNode.textContent.indexOf("fooBug676722") > -1;
+    },
+    successFn: function()
+    {
+      isnot(hud.outputNode.textContent.indexOf("myObj = {"), -1,
+            "myObj = ... is shown");
+
+      let clickable = hud.outputNode.querySelector(".hud-clickable");
+      ok(clickable, "the console.log() object .hud-clickable was found");
+      isnot(clickable.textContent.indexOf("omgBug676722"), -1,
+            "clickable node content is correct");
+
+      document.addEventListener("popupshown", function _onPopupShown(aEvent) {
+        document.removeEventListener("popupshown", _onPopupShown);
+
+        isnot(aEvent.target.label.indexOf("omgBug676722"), -1,
+           "object inspector opened on click");
+
+        executeSoon(finishTest);
+      });
+
+      EventUtils.synthesizeMouse(clickable, 2, 2, {}, hud.iframeWindow);
+    },
+    failureFn: finishTest,
+  });
+}
diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -930,17 +930,22 @@ WebConsoleFrame.prototype = {
     let argsToString = aMessage.argumentsToString;
 
     switch (level) {
       case "log":
       case "info":
       case "warn":
       case "error":
       case "debug":
-        body = argsToString.join(" ");
+        body = {
+          cacheId: aMessage.objectsCacheId,
+          remoteObjects: args,
+          argsToString: argsToString,
+        };
+        clipboardText = argsToString.join(" ");
         sourceURL = aMessage.apiMessage.filename;
         sourceLine = aMessage.apiMessage.lineNumber;
         break;
 
       case "trace":
         let filename = WebConsoleUtils.abbreviateSourceURL(args[0].filename);
         let functionName = args[0].functionName ||
                            l10n.getStr("stacktrace.anonymousFunction");
@@ -1055,16 +1060,66 @@ WebConsoleFrame.prototype = {
         node.querySelector("tree").view = node.propertyTreeView;
       };
     }
 
     return node;
   },
 
   /**
+   * The click event handler for objects shown inline coming from the
+   * window.console API.
+   *
+   * @private
+   * @param nsIDOMNode aMessage
+   *        The message element for which we live.
+   * @param string aTitle
+   *        The panel title for the object inspector.
+   * @param array aRemoteObject
+   *        The remote object representation.
+   */
+  _consoleLogClick:
+  function WCF__consoleLogClick(aMessage, aTitle, aRemoteObject)
+  {
+    if (aMessage._panelOpen) {
+      return;
+    }
+
+    let options = {
+      title: aTitle,
+      anchor: aMessage,
+
+      // Data to inspect.
+      data: {
+        // This is where the resultObject children are cached.
+        rootCacheId: aMessage._evalCacheId,
+        remoteObject: aRemoteObject,
+        // This is where all objects retrieved by the panel will be cached.
+        panelCacheId: "HUDPanel-" + gSequenceId(),
+        remoteObjectProvider: this.jsterm.remoteObjectProvider.bind(this.jsterm),
+      },
+    };
+
+    let propPanel = this.jsterm.openPropertyPanel(options);
+    propPanel.panel.setAttribute("hudId", this.hudId);
+
+    let onPopupHide = function JST__evalInspectPopupHide() {
+      propPanel.panel.removeEventListener("popuphiding", onPopupHide, false);
+
+      this.jsterm.clearObjectCache(options.data.panelCacheId);
+
+      if (!aMessage.parentNode && aMessage._evalCacheId) {
+        this.jsterm.clearObjectCache(aMessage._evalCacheId);
+      }
+    }.bind(this);
+
+    propPanel.panel.addEventListener("popuphiding", onPopupHide, false);
+  },
+
+  /**
    * Reports an error in the page source, either JavaScript or CSS.
    *
    * @param nsIScriptError aScriptError
    *        The error message to report.
    * @return nsIDOMElement|undefined
    *         The message element to display in the Web Console output.
    */
   reportPageError: function WCF_reportPageError(aCategory, aScriptError)
@@ -1813,29 +1868,41 @@ WebConsoleFrame.prototype = {
     // Store the body text, since it is needed later for the property tree
     // case.
     let body = aBody;
     // If a string was supplied for the body, turn it into a DOM node and an
     // associated clipboard string now.
     aClipboardText = aClipboardText ||
                      (aBody + (aSourceURL ? " @ " + aSourceURL : "") +
                               (aSourceLine ? ":" + aSourceLine : ""));
-    if (!(aBody instanceof Ci.nsIDOMNode)) {
-      aBody = this.document.createTextNode(aLevel == "dir" ?
-                                           aBody.resultString : aBody);
+
+    // Create the containing node and append all its elements to it.
+    let node = this.document.createElementNS(XUL_NS, "richlistitem");
+
+    if (aBody instanceof Ci.nsIDOMNode) {
+      bodyNode.appendChild(aBody);
     }
-
-    if (!aBody.nodeType) {
-      aBody = this.document.createTextNode(aBody.toString());
+    else {
+      let str = undefined;
+      if (aLevel == "dir") {
+        str = aBody.resultString;
+      }
+      else if (["log", "info", "warn", "error", "debug"].indexOf(aLevel) > -1 &&
+               typeof aBody == "object") {
+        this._makeConsoleLogMessageBody(node, bodyNode, aBody);
+      }
+      else {
+        str = aBody;
+      }
+
+      if (str !== undefined) {
+        aBody = this.document.createTextNode(str);
+        bodyNode.appendChild(aBody);
+      }
     }
-    if (typeof aBody == "string") {
-      aBody = this.document.createTextNode(aBody);
-    }
-
-    bodyNode.appendChild(aBody);
 
     let repeatContainer = this.document.createElementNS(XUL_NS, "hbox");
     repeatContainer.setAttribute("align", "start");
     let repeatNode = this.document.createElementNS(XUL_NS, "label");
     repeatNode.setAttribute("value", "1");
     repeatNode.classList.add("webconsole-msg-repeat");
     repeatContainer.appendChild(repeatNode);
 
@@ -1848,18 +1915,16 @@ WebConsoleFrame.prototype = {
 
     // Create the source location (e.g. www.example.com:6) that sits on the
     // right side of the message, if applicable.
     let locationNode;
     if (aSourceURL) {
       locationNode = this.createLocationNode(aSourceURL, aSourceLine);
     }
 
-    // Create the containing node and append all its elements to it.
-    let node = this.document.createElementNS(XUL_NS, "richlistitem");
     node.clipboardText = aClipboardText;
     node.classList.add("hud-msg-node");
 
     node.timestamp = timestamp;
     this.setMessageType(node, aCategory, aSeverity);
 
     node.appendChild(timestampNode);
     node.appendChild(iconContainer);
@@ -1910,16 +1975,52 @@ WebConsoleFrame.prototype = {
     }
 
     node.setAttribute("id", "console-msg-" + gSequenceId());
 
     return node;
   },
 
   /**
+   * Make the message body for console.log() calls.
+   *
+   * @private
+   * @param nsIDOMElement aMessage
+   *        The message element that holds the output for the given call.
+   * @param nsIDOMElement aContainer
+   *        The specific element that will hold each part of the console.log
+   *        output.
+   * @param object aBody
+   *        The object given by this.logConsoleAPIMessage(). This object holds
+   *        the call information that we need to display.
+   */
+  _makeConsoleLogMessageBody:
+  function WCF__makeConsoleLogMessageBody(aMessage, aContainer, aBody)
+  {
+    aMessage._evalCacheId = aBody.cacheId;
+    aBody.remoteObjects.forEach(function(aItem, aIndex) {
+      let text = aBody.argsToString[aIndex];
+      if (!Array.isArray(aItem)) {
+        aContainer.appendChild(this.document.createTextNode(text + " "));
+        return;
+      }
+
+      let elem = this.document.createElement("description");
+      elem.classList.add("hud-clickable");
+      elem.setAttribute("aria-haspopup", "true");
+      elem.appendChild(this.document.createTextNode(text));
+
+      this._addMessageLinkCallback(elem,
+        this._consoleLogClick.bind(this, aMessage, text, aItem));
+
+      aContainer.appendChild(elem);
+    }, this);
+  },
+
+  /**
    * Creates the XUL label that displays the textual location of an incoming
    * message.
    *
    * @param string aSourceURL
    *        The URL of the source file responsible for the error.
    * @param number aSourceLine [optional]
    *        The line number on which the error occurred. If zero or omitted,
    *        there is no line number associated with this message.
@@ -2016,16 +2117,30 @@ WebConsoleFrame.prototype = {
     }
     else {
       linkNode = aNode.querySelector(".webconsole-msg-body");
       linkNode.classList.add("hud-clickable");
     }
 
     linkNode.setAttribute("aria-haspopup", "true");
 
+    this._addMessageLinkCallback(aNode, aCallback);
+  },
+
+  /**
+   * Add the mouse event handlers needed to make a link.
+   *
+   * @private
+   * @param nsIDOMNode aNode
+   *        The node for which you want to add the event handlers.
+   * @param function aCallback
+   *        The function you want to invoke on click.
+   */
+  _addMessageLinkCallback: function WCF__addMessageLinkCallback(aNode, aCallback)
+  {
     aNode.addEventListener("mousedown", function(aEvent) {
       this._startX = aEvent.clientX;
       this._startY = aEvent.clientY;
     }, false);
 
     aNode.addEventListener("click", function(aEvent) {
       if (aEvent.detail != 1 || aEvent.button != 0 ||
           (this._startX != aEvent.clientX &&
diff --git a/dom/base/ConsoleAPI.js b/dom/base/ConsoleAPI.js
--- a/dom/base/ConsoleAPI.js
+++ b/dom/base/ConsoleAPI.js
@@ -304,46 +304,63 @@ ConsoleAPI.prototype = {
 
     Services.obs.notifyObservers(consoleEvent, "console-api-log-event",
                                  this._outerID);
   },
 
   /**
    * Process the console API call arguments in order to perform printf-like
    * string substitution.
-   * TODO: object substitution should display an interactive property list (bug
-   * 685815) and width and precision qualifiers should be taken into account
-   * (bug 685813).
+   *
+   * TODO: object substitution should take into account width and precision
+   * qualifiers (bug 685813).
    *
    * @param mixed aArguments
    *        The arguments given to the console API call.
    **/
   processArguments: function CA_processArguments(aArguments) {
     if (aArguments.length < 2 || typeof aArguments[0] != "string") {
       return aArguments;
     }
+
     let args = Array.prototype.slice.call(aArguments);
     let format = args.shift();
+    let splitter = "%" + format.length + Date.now() + "%";
+    let objects = [];
+
     // Format specification regular expression.
     let processed = format.replace(ARGUMENT_PATTERN, function CA_PA_substitute(match, submatch) {
       switch (submatch) {
         case "o":
+          objects.push(args.shift());
+          return splitter;
         case "s":
           return String(args.shift());
         case "d":
         case "i":
           return parseInt(args.shift());
         case "f":
           return parseFloat(args.shift());
         default:
           return submatch;
       };
     });
-    args.unshift(processed);
-    return args;
+
+    let result = [];
+    let processedArray = processed.split(splitter);
+    processedArray.forEach(function(aValue, aIndex) {
+      if (aValue !== "") {
+        result.push(aValue);
+      }
+      if (objects[aIndex]) {
+        result.push(objects[aIndex]);
+      }
+    });
+
+    return result.concat(args);
   },
 
   /**
    * Build the stacktrace array for the console.trace() call.
    *
    * @param number [aMaxDepth=DEFAULT_MAX_STACKTRACE_DEPTH]
    *        Optional maximum stacktrace depth.
    * @return array
diff --git a/dom/tests/browser/browser_ConsoleAPITests.js b/dom/tests/browser/browser_ConsoleAPITests.js
--- a/dom/tests/browser/browser_ConsoleAPITests.js
+++ b/dom/tests/browser/browser_ConsoleAPITests.js
@@ -202,17 +202,21 @@ function observeConsoleTest() {
   yield;
 
   expect("dir", win.toString());
   win.console.dir(win);
   yield;
 
   expect("error", "arg");
   win.console.error("arg");
+  yield;
 
+  let obj2 = { b: 2 };
+  expect("log", "omg ", obj, " foo ", 4, obj2);
+  win.console.log("omg %o foo %o", obj, 4, obj2);
   yield;
 
   startTraceTest();
   yield;
 
   startLocationTest();
   yield;
 }
