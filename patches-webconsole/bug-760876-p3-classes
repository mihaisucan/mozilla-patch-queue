# HG changeset patch
# Parent 50d6ea7f011987e316fd7c11286c49e4de26b1c1
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1377617343 -7200
Bug 760876 - Part 3: cleanup CSS class names for the console output; r=robcee

diff --git a/browser/devtools/webconsole/console-output.js b/browser/devtools/webconsole/console-output.js
--- a/browser/devtools/webconsole/console-output.js
+++ b/browser/devtools/webconsole/console-output.js
@@ -162,17 +162,17 @@ ConsoleOutput.prototype = {
    * @param DOMElement elem
    *        The element to start the search from.
    * @return DOMElement|null
    *         The DOM element of the message, if any.
    */
   getMessageForElement: function(elem)
   {
     while (elem && elem.parentNode) {
-      if (elem.classList && elem.classList.contains("hud-msg-node")) {
+      if (elem.classList && elem.classList.contains("message")) {
         return elem;
       }
       elem = elem.parentNode;
     }
     return null;
   },
 
   /**
@@ -270,19 +270,21 @@ Messages.BaseMessage.prototype = {
   /**
    * Set of widgets included in this message.
    * @type Set
    */
   widgets: null,
 
   // Properties that allow compatibility with the current Web Console output
   // implementation.
-  _elementClassCompat: "",
   _categoryCompat: null,
   _severityCompat: null,
+  _categoryNameCompat: null,
+  _severityNameCompat: null,
+  _filterKeyCompat: null,
 
   /**
    * Initialize the message.
    *
    * @param object output
    *        The ConsoleOutput owner.
    * @param object [parent=null]
    *        Optional: a different message object that owns this instance.
@@ -313,19 +315,22 @@ Messages.BaseMessage.prototype = {
    * compatible with the current implementation.
    * TODO: remove this once bug 778766.
    */
   _renderCompat: function()
   {
     let doc = this.output.document;
     let container = doc.createElementNS(XHTML_NS, "div");
     container.id = "console-msg-" + gSequenceId();
-    container.className = "hud-msg-node " + this._elementClassCompat;
+    container.className = "message";
     container.category = this._categoryCompat;
     container.severity = this._severityCompat;
+    container.setAttribute("category", this._categoryNameCompat);
+    container.setAttribute("severity", this._severityNameCompat);
+    container.setAttribute("filter", this._filterKeyCompat);
     container.clipboardText = this.textContent;
     container.timestamp = this.timestamp;
     container._messageObject = this;
 
     return container;
   },
 }; // Messages.BaseMessage.prototype
 
@@ -354,20 +359,21 @@ Messages.NavigationMarker.prototype = He
   /**
    * Message timestamp.
    *
    * @type number
    *       Milliseconds elapsed since 1 January 1970 00:00:00 UTC.
    */
   timestamp: 0,
 
-  // Class names in order: category, severity then the class for the filter.
-  _elementClassCompat: "webconsole-msg-network webconsole-msg-info hud-networkinfo",
   _categoryCompat: COMPAT.CATEGORIES.NETWORK,
   _severityCompat: COMPAT.SEVERITIES.LOG,
+  _categoryNameCompat: "network",
+  _severityNameCompat: "info",
+  _filterKeyCompat: "networkinfo",
 
   /**
    * Prepare the DOM element for this message.
    * @return this
    */
   render: function()
   {
     if (this.element) {
diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -475,17 +475,17 @@ WebConsoleFrame.prototype = {
     this._commandController = new CommandController(this);
     this.window.controllers.insertControllerAt(0, this._commandController);
 
     this._contextMenuHandler = new ConsoleContextMenu(this);
 
     let doc = this.document;
 
     this.filterBox = doc.querySelector(".hud-filter-box");
-    this.outputNode = doc.querySelector(".hud-output-node");
+    this.outputNode = doc.getElementById("output-container");
     this.completeNode = doc.querySelector(".jsterm-complete-node");
     this.inputNode = doc.querySelector(".jsterm-input-node");
 
     this._setFilterTextBoxEvents();
     this._initFilterButtons();
     this._changeClearModifier();
 
     let fontSize = Services.prefs.getIntPref("devtools.webconsole.fontSize");
@@ -836,57 +836,57 @@ WebConsoleFrame.prototype = {
    * @returns void
    */
   adjustVisibilityForMessageType:
   function WCF_adjustVisibilityForMessageType(aPrefKey, aState)
   {
     let outputNode = this.outputNode;
     let doc = this.document;
 
-    // Look for message nodes ("hud-msg-node") with the given preference key
-    // ("hud-msg-error", "hud-msg-cssparser", etc.) and add or remove the
-    // "hud-filtered-by-type" class, which turns on or off the display.
-
-    let xpath = ".//*[contains(@class, 'hud-msg-node') and " +
-      "contains(concat(@class, ' '), 'hud-" + aPrefKey + " ')]";
+    // Look for message nodes (".message") with the given preference key
+    // (filter="error", filter="cssparser", etc.) and add or remove the
+    // "filtered-by-type" class, which turns on or off the display.
+
+    let xpath = ".//*[contains(@class, 'message') and " +
+      "@filter='" + aPrefKey + "']";
     let result = doc.evaluate(xpath, outputNode, null,
       Ci.nsIDOMXPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
     for (let i = 0; i < result.snapshotLength; i++) {
       let node = result.snapshotItem(i);
       if (aState) {
-        node.classList.remove("hud-filtered-by-type");
+        node.classList.remove("filtered-by-type");
       }
       else {
-        node.classList.add("hud-filtered-by-type");
+        node.classList.add("filtered-by-type");
       }
     }
   },
 
   /**
    * Turns the display of log nodes on and off appropriately to reflect the
    * adjustment of the search string.
    */
   adjustVisibilityOnSearchStringChange:
   function WCF_adjustVisibilityOnSearchStringChange()
   {
-    let nodes = this.outputNode.getElementsByClassName("hud-msg-node");
+    let nodes = this.outputNode.getElementsByClassName("message");
     let searchString = this.filterBox.value;
 
     for (let i = 0, n = nodes.length; i < n; ++i) {
       let node = nodes[i];
 
       // hide nodes that match the strings
       let text = node.clipboardText;
 
       // if the text matches the words in aSearchString...
       if (this.stringMatchesFilters(text, searchString)) {
-        node.classList.remove("hud-filtered-by-string");
+        node.classList.remove("filtered-by-string");
       }
       else {
-        node.classList.add("hud-filtered-by-string");
+        node.classList.add("filtered-by-string");
       }
     }
   },
 
   /**
    * Applies the user's filters to a newly-created message node via CSS
    * classes.
    *
@@ -898,31 +898,31 @@ WebConsoleFrame.prototype = {
   filterMessageNode: function WCF_filterMessageNode(aNode)
   {
     let isFiltered = false;
 
     // Filter by the message type.
     let prefKey = MESSAGE_PREFERENCE_KEYS[aNode.category][aNode.severity];
     if (prefKey && !this.getFilterState(prefKey)) {
       // The node is filtered by type.
-      aNode.classList.add("hud-filtered-by-type");
+      aNode.classList.add("filtered-by-type");
       isFiltered = true;
     }
 
     // Filter on the search string.
     let search = this.filterBox.value;
     let text = aNode.clipboardText;
 
     // if string matches the filter text
     if (!this.stringMatchesFilters(text, search)) {
-      aNode.classList.add("hud-filtered-by-string");
+      aNode.classList.add("filtered-by-string");
       isFiltered = true;
     }
 
-    if (isFiltered && aNode.classList.contains("webconsole-msg-inspector")) {
+    if (isFiltered && aNode.classList.contains("inlined-variables-view")) {
       aNode.classList.add("hidden-message");
     }
 
     return isFiltered;
   },
 
   /**
    * Merge the attributes of the two nodes that are about to be filtered.
@@ -931,17 +931,17 @@ WebConsoleFrame.prototype = {
    * @param nsIDOMNode aOriginal
    *        The Original Node. The one being merged into.
    * @param nsIDOMNode aFiltered
    *        The node being filtered out because it is repeated.
    */
   mergeFilteredMessageNode:
   function WCF_mergeFilteredMessageNode(aOriginal, aFiltered)
   {
-    let repeatNode = aOriginal.getElementsByClassName("webconsole-msg-repeat")[0];
+    let repeatNode = aOriginal.getElementsByClassName("repeats")[0];
     if (!repeatNode) {
       return; // no repeat node, return early.
     }
 
     let occurrences = parseInt(repeatNode.getAttribute("value")) + 1;
     repeatNode.setAttribute("value", occurrences);
     repeatNode.textContent = occurrences;
     repeatNode.title = l10n.getFormatStr("messageRepeats.tooltip", [occurrences]);
@@ -954,43 +954,41 @@ WebConsoleFrame.prototype = {
    * @param nsIDOMNode aNode
    *        The message node to be filtered or not.
    * @returns nsIDOMNode|null
    *          Returns the duplicate node if the message was filtered, null
    *          otherwise.
    */
   _filterRepeatedMessage: function WCF__filterRepeatedMessage(aNode)
   {
-    let repeatNode = aNode.getElementsByClassName("webconsole-msg-repeat")[0];
+    let repeatNode = aNode.getElementsByClassName("repeats")[0];
     if (!repeatNode) {
       return null;
     }
 
     let uid = repeatNode._uid;
     let dupeNode = null;
 
-    if (aNode.classList.contains("webconsole-msg-cssparser") ||
-        aNode.classList.contains("webconsole-msg-security")) {
+    if (aNode.category == CATEGORY_CSS ||
+        aNode.category == CATEGORY_SECURITY) {
       dupeNode = this._repeatNodes[uid];
       if (!dupeNode) {
         this._repeatNodes[uid] = aNode;
       }
     }
-    else if (!aNode.classList.contains("webconsole-msg-network") &&
-             !aNode.classList.contains("webconsole-msg-inspector") &&
-             (aNode.classList.contains("webconsole-msg-console") ||
-              aNode.classList.contains("webconsole-msg-exception") ||
-              aNode.classList.contains("webconsole-msg-error"))) {
+    else if ((aNode.category == CATEGORY_WEBDEV ||
+              aNode.category == CATEGORY_JS) &&
+             aNode.category != CATEGORY_NETWORK &&
+             !aNode.classList.contains("inlined-variables-view")) {
       let lastMessage = this.outputNode.lastChild;
       if (!lastMessage) {
         return null;
       }
 
-      let lastRepeatNode = lastMessage
-                           .getElementsByClassName("webconsole-msg-repeat")[0];
+      let lastRepeatNode = lastMessage.getElementsByClassName("repeats")[0];
       if (lastRepeatNode && lastRepeatNode._uid == uid) {
         dupeNode = lastMessage;
       }
     }
 
     if (dupeNode) {
       this.mergeFilteredMessageNode(dupeNode, aNode);
       return dupeNode;
@@ -1176,17 +1174,17 @@ WebConsoleFrame.prototype = {
                                       level, aMessage.timeStamp);
     if (aMessage.private) {
       node.setAttribute("private", true);
     }
 
     if (objectActors.size > 0) {
       node._objectActors = objectActors;
 
-      let repeatNode = node.getElementsByClassName("webconsole-msg-repeat")[0];
+      let repeatNode = node.getElementsByClassName("repeats")[0];
       repeatNode._uid += [...objectActors].join("-");
     }
 
     if (level == "trace") {
       node._stacktrace = aMessage.stacktrace;
     }
 
     return node;
@@ -1258,17 +1256,17 @@ WebConsoleFrame.prototype = {
 
     let node = this.createMessageNode(aCategory, severity,
                                       errorMessage,
                                       aScriptError.sourceName,
                                       aScriptError.lineNumber, null, null,
                                       aScriptError.timeStamp);
 
     // Select the body of the message node that is displayed in the console
-    let msgBody = node.querySelector(".webconsole-msg-body");
+    let msgBody = node.getElementsByClassName("body")[0];
     // Add the more info link node to messages that belong to certain categories
     this.addMoreInfoLink(msgBody, aScriptError);
 
     if (aScriptError.private) {
       node.setAttribute("private", true);
     }
 
     if (objectActors.size > 0) {
@@ -1348,47 +1346,47 @@ WebConsoleFrame.prototype = {
     let severity = SEVERITY_LOG;
     let mixedRequest =
       WebConsoleUtils.isMixedHTTPSRequest(request.url, this.contentLocation);
     if (mixedRequest) {
       severity = SEVERITY_WARNING;
     }
 
     let methodNode = this.document.createElementNS(XHTML_NS, "span");
-    methodNode.className = "webconsole-msg-method";
+    methodNode.className = "method";
     methodNode.textContent = request.method + " ";
 
     let messageNode = this.createMessageNode(CATEGORY_NETWORK, severity,
                                              methodNode, null, null,
                                              clipboardText);
     if (networkInfo.private) {
       messageNode.setAttribute("private", true);
     }
     messageNode._connectionId = aActorId;
     messageNode.url = request.url;
 
     let body = methodNode.parentNode;
     body.setAttribute("aria-haspopup", true);
 
     let urlNode = this.document.createElementNS(XHTML_NS, "a");
-    urlNode.classList.add("webconsole-msg-url");
+    urlNode.className = "url";
     urlNode.setAttribute("title", request.url);
     urlNode.href = request.url;
     urlNode.textContent = request.url;
     urlNode.draggable = false;
     body.appendChild(urlNode);
     body.appendChild(this.document.createTextNode(" "));
 
     if (mixedRequest) {
-      urlNode.classList.add("webconsole-mixed-content");
+      messageNode.classList.add("mixed-content");
       this.makeMixedContentNode(body);
     }
 
     let statusNode = this.document.createElementNS(XHTML_NS, "a");
-    statusNode.classList.add("webconsole-msg-status");
+    statusNode.className = "status";
     body.appendChild(statusNode);
 
     let onClick = () => {
       if (!messageNode._panelOpen) {
         this.openNetworkPanel(messageNode, networkInfo);
       }
     };
 
@@ -1411,17 +1409,17 @@ WebConsoleFrame.prototype = {
   makeMixedContentNode: function WCF_makeMixedContentNode(aLinkNode)
   {
     let mixedContentWarning = "[" + l10n.getStr("webConsoleMixedContentWarning") + "]";
 
     // Mixed content warning message links to a Learn More page
     let mixedContentWarningNode = this.document.createElementNS(XHTML_NS, "a");
     mixedContentWarningNode.title = MIXED_CONTENT_LEARN_MORE;
     mixedContentWarningNode.href = MIXED_CONTENT_LEARN_MORE;
-    mixedContentWarningNode.classList.add("webconsole-mixed-content-link");
+    mixedContentWarningNode.className = "learn-more-link";
     mixedContentWarningNode.textContent = mixedContentWarning;
     mixedContentWarningNode.draggable = false;
 
     aLinkNode.appendChild(mixedContentWarningNode);
 
     this._addMessageLinkCallback(mixedContentWarningNode, (aNode, aEvent) => {
       aEvent.stopPropagation();
       this.owner.openLink(MIXED_CONTENT_LEARN_MORE);
@@ -1460,17 +1458,17 @@ WebConsoleFrame.prototype = {
   {
     let moreInfoLabel = "[" + l10n.getStr("webConsoleMoreInfoLabel") + "]";
 
     let warningNode = this.document.createElementNS(XHTML_NS, "a");
     warningNode.textContent = moreInfoLabel;
     warningNode.title = INSECURE_PASSWORDS_LEARN_MORE;
     warningNode.href = INSECURE_PASSWORDS_LEARN_MORE;
     warningNode.draggable = false;
-    warningNode.classList.add("webconsole-learn-more-link");
+    warningNode.className = "learn-more-link";
 
     this._addMessageLinkCallback(warningNode, (aNode, aEvent) => {
       aEvent.stopPropagation();
       this.owner.openLink(INSECURE_PASSWORDS_LEARN_MORE);
     });
 
     aNode.appendChild(warningNode);
   },
@@ -1482,17 +1480,17 @@ WebConsoleFrame.prototype = {
    *        The file URI that was loaded.
    * @return nsIDOMElement|undefined
    *         The message element to display in the Web Console output.
    */
   logFileActivity: function WCF_logFileActivity(aFileURI)
   {
     let urlNode = this.document.createElementNS(XHTML_NS, "a");
     urlNode.setAttribute("title", aFileURI);
-    urlNode.classList.add("webconsole-msg-url");
+    urlNode.className = "url";
     urlNode.textContent = aFileURI;
     urlNode.draggable = false;
     urlNode.href = aFileURI;
 
     let outputNode = this.createMessageNode(CATEGORY_NETWORK, SEVERITY_LOG,
                                             urlNode, null, null, aFileURI);
 
     this._addMessageLinkCallback(urlNode, () => {
@@ -1650,17 +1648,17 @@ WebConsoleFrame.prototype = {
         status = [response.httpVersion, response.status, response.statusText];
       }
       if (hasEventTimings) {
         status.push(l10n.getFormatStr("NetworkPanel.durationMS",
                                       [networkInfo.totalTime]));
       }
       let statusText = "[" + status.join(" ") + "]";
 
-      let statusNode = messageNode.getElementsByClassName("webconsole-msg-status")[0];
+      let statusNode = messageNode.getElementsByClassName("status")[0];
       statusNode.textContent = statusText;
 
       messageNode.clipboardText = [request.method, request.url, statusText]
                                   .join(" ");
 
       if (hasResponseStart && response.status >= MIN_HTTP_ERROR_CODE &&
           response.status <= MAX_HTTP_ERROR_CODE) {
         this.setMessageType(messageNode, CATEGORY_NETWORK, SEVERITY_ERROR);
@@ -1956,18 +1954,18 @@ WebConsoleFrame.prototype = {
       let categories = Object.keys(this._pruneCategoriesQueue);
       categories.forEach(function _pruneOutput(aCategory) {
         removedNodes += this.pruneOutputIfNecessary(aCategory);
       }, this);
       this._pruneCategoriesQueue = {};
     }
 
     let isInputOutput = lastVisibleNode &&
-      (lastVisibleNode.classList.contains("webconsole-msg-input") ||
-       lastVisibleNode.classList.contains("webconsole-msg-output"));
+                        (lastVisibleNode.category == CATEGORY_INPUT ||
+                         lastVisibleNode.category == CATEGORY_OUTPUT);
 
     // Scroll to the new node if it is not filtered, and if the output node is
     // scrolled at the bottom or if the new node is a jsterm input/output
     // message.
     if (lastVisibleNode && (scrolledToBottom || isInputOutput)) {
       Utils.scrollToVisible(lastVisibleNode);
     }
     else if (!scrolledToBottom && removedNodes > 0 &&
@@ -2178,21 +2176,19 @@ WebConsoleFrame.prototype = {
    *
    * @param integer aCategory
    *        The category of message nodes to prune if needed.
    * @return number
    *         The number of removed nodes.
    */
   pruneOutputIfNecessary: function WCF_pruneOutputIfNecessary(aCategory)
   {
-    let outputNode = this.outputNode;
     let logLimit = Utils.logLimitForCategory(aCategory);
-
-    let messageNodes = outputNode.getElementsByClassName("webconsole-msg-" +
-        CATEGORY_CLASS_FRAGMENTS[aCategory]);
+    let messageNodes = this.outputNode.querySelectorAll(".message[category=" +
+                       CATEGORY_CLASS_FRAGMENTS[aCategory] + "]");
     let n = Math.max(0, messageNodes.length - logLimit);
     let toRemove = Array.prototype.slice.call(messageNodes, 0, n);
     toRemove.forEach(this.removeOutputMessage, this);
 
     return n;
   },
 
   /**
@@ -2205,29 +2201,29 @@ WebConsoleFrame.prototype = {
   {
     if (aNode._objectActors) {
       for (let actor of aNode._objectActors) {
         this._releaseObject(actor);
       }
       aNode._objectActors.clear();
     }
 
-    if (aNode.classList.contains("webconsole-msg-cssparser") ||
-        aNode.classList.contains("webconsole-msg-security")) {
-      let repeatNode = aNode.getElementsByClassName("webconsole-msg-repeat")[0];
+    if (aNode.category == CATEGORY_CSS ||
+        aNode.category == CATEGORY_SECURITY) {
+      let repeatNode = aNode.getElementsByClassName("repeats")[0];
       if (repeatNode && repeatNode._uid) {
         delete this._repeatNodes[repeatNode._uid];
       }
     }
     else if (aNode._connectionId &&
-             aNode.classList.contains("webconsole-msg-network")) {
+             aNode.category == CATEGORY_NETWORK) {
       delete this._networkRequests[aNode._connectionId];
       this._releaseObject(aNode._connectionId);
     }
-    else if (aNode.classList.contains("webconsole-msg-inspector")) {
+    else if (aNode.classList.contains("inlined-variables-view")) {
       let view = aNode._variablesView;
       if (view) {
         view.controller.releaseActors();
       }
       aNode._variablesView = null;
     }
 
     if (aNode.parentNode) {
@@ -2270,35 +2266,34 @@ WebConsoleFrame.prototype = {
     if (typeof aBody != "string" && aClipboardText == null && aBody.innerText) {
       aClipboardText = aBody.innerText;
     }
 
     // Make the icon container, which is a vertical box. Its purpose is to
     // ensure that the icon stays anchored at the top of the message even for
     // long multi-line messages.
     let iconContainer = this.document.createElementNS(XHTML_NS, "span");
-    iconContainer.className = "webconsole-msg-icon";
+    iconContainer.className = "icon";
 
     // Create the message body, which contains the actual text of the message.
     let bodyNode = this.document.createElementNS(XHTML_NS, "span");
-    bodyNode.classList.add("webconsole-msg-body");
-    bodyNode.classList.add("devtools-monospace");
+    bodyNode.className = "body devtools-monospace";
 
     // Store the body text, since it is needed later for the variables view.
     let body = aBody;
     // If a string was supplied for the body, turn it into a DOM node and an
     // associated clipboard string now.
     aClipboardText = aClipboardText ||
                      (aBody + (aSourceURL ? " @ " + aSourceURL : "") +
                               (aSourceLine ? ":" + aSourceLine : ""));
 
     // Create the containing node and append all its elements to it.
     let node = this.document.createElementNS(XHTML_NS, "div");
     node.id = "console-msg-" + gSequenceId();
-    node.className = "hud-msg-node";
+    node.className = "message";
     node.clipboardText = aClipboardText;
     node.timestamp = timestamp;
     this.setMessageType(node, aCategory, aSeverity);
 
     if (aBody instanceof Ci.nsIDOMNode) {
       bodyNode.appendChild(aBody);
     }
     else {
@@ -2321,26 +2316,25 @@ WebConsoleFrame.prototype = {
     }
 
     // Add the message repeats node only when needed.
     let repeatNode = null;
     if (aCategory != CATEGORY_INPUT && aCategory != CATEGORY_OUTPUT &&
         aCategory != CATEGORY_NETWORK) {
       repeatNode = this.document.createElementNS(XHTML_NS, "span");
       repeatNode.setAttribute("value", "1");
-      repeatNode.classList.add("webconsole-msg-repeat");
+      repeatNode.className = "repeats";
       repeatNode.textContent = 1;
       repeatNode._uid = [bodyNode.textContent, aCategory, aSeverity, aLevel,
                          aSourceURL, aSourceLine].join(":");
     }
 
     // Create the timestamp.
     let timestampNode = this.document.createElementNS(XHTML_NS, "span");
-    timestampNode.classList.add("webconsole-timestamp");
-    timestampNode.classList.add("devtools-monospace");
+    timestampNode.className = "timestamp devtools-monospace";
     // Apply the current group by indenting appropriately.
     timestampNode.style.marginRight = this.groupDepth * GROUP_INDENT + "px";
 
     let timestamp = aTimeStamp || Date.now();
     let timestampString = l10n.timestampString(timestamp);
     timestampNode.textContent = timestampString + " ";
 
     // Create the source location (e.g. www.example.com:6) that sits on the
@@ -2365,17 +2359,17 @@ WebConsoleFrame.prototype = {
       };
       this.jsterm.openVariablesView(options).then((aView) => {
         node._variablesView = aView;
         if (node.classList.contains("hidden-message")) {
           node.classList.remove("hidden-message");
         }
       });
 
-      node.classList.add("webconsole-msg-inspector");
+      node.classList.add("inlined-variables-view");
     }
 
     node.appendChild(bodyNode);
     if (repeatNode) {
       node.appendChild(repeatNode);
     }
     if (locationNode) {
       node.appendChild(locationNode);
@@ -2540,18 +2534,17 @@ WebConsoleFrame.prototype = {
       displayLocation += ":" + aSourceLine;
       locationNode.sourceLine = aSourceLine;
     }
 
     locationNode.textContent = " " + displayLocation;
     locationNode.href = isScratchpad ? "#" : fullURL;
     locationNode.draggable = false;
     locationNode.setAttribute("title", aSourceURL);
-    locationNode.classList.add("webconsole-location");
-    locationNode.classList.add("devtools-monospace");
+    locationNode.className = "location devtools-monospace";
 
     // Make the location clickable.
     this._addMessageLinkCallback(locationNode, () => {
       if (isScratchpad) {
         let wins = Services.wm.getEnumerator("devtools:scratchpad");
 
         while (wins.hasMoreElements()) {
           let win = wins.getNext();
@@ -2573,51 +2566,34 @@ WebConsoleFrame.prototype = {
         this.owner.viewSource(fullURL, aSourceLine);
       }
     });
 
     return locationNode;
   },
 
   /**
-   * Adjusts the category and severity of the given message, clearing the old
-   * category and severity if present.
+   * Adjusts the category and severity of the given message.
    *
    * @param nsIDOMNode aMessageNode
    *        The message node to alter.
-   * @param number aNewCategory
-   *        The new category for the message; one of the CATEGORY_ constants.
-   * @param number aNewSeverity
-   *        The new severity for the message; one of the SEVERITY_ constants.
+   * @param number aCategory
+   *        The category for the message; one of the CATEGORY_ constants.
+   * @param number aSeverity
+   *        The severity for the message; one of the SEVERITY_ constants.
    * @return void
    */
   setMessageType:
-  function WCF_setMessageType(aMessageNode, aNewCategory, aNewSeverity)
+  function WCF_setMessageType(aMessageNode, aCategory, aSeverity)
   {
-    // Remove the old CSS classes, if applicable.
-    if ("category" in aMessageNode) {
-      let oldCategory = aMessageNode.category;
-      let oldSeverity = aMessageNode.severity;
-      aMessageNode.classList.remove("webconsole-msg-" +
-                                    CATEGORY_CLASS_FRAGMENTS[oldCategory]);
-      aMessageNode.classList.remove("webconsole-msg-" +
-                                    SEVERITY_CLASS_FRAGMENTS[oldSeverity]);
-      let key = "hud-" + MESSAGE_PREFERENCE_KEYS[oldCategory][oldSeverity];
-      aMessageNode.classList.remove(key);
-    }
-
-    // Add in the new CSS classes.
-    aMessageNode.category = aNewCategory;
-    aMessageNode.severity = aNewSeverity;
-    aMessageNode.classList.add("webconsole-msg-" +
-                               CATEGORY_CLASS_FRAGMENTS[aNewCategory]);
-    aMessageNode.classList.add("webconsole-msg-" +
-                               SEVERITY_CLASS_FRAGMENTS[aNewSeverity]);
-    let key = "hud-" + MESSAGE_PREFERENCE_KEYS[aNewCategory][aNewSeverity];
-    aMessageNode.classList.add(key);
+    aMessageNode.category = aCategory;
+    aMessageNode.severity = aSeverity;
+    aMessageNode.setAttribute("category", CATEGORY_CLASS_FRAGMENTS[aCategory]);
+    aMessageNode.setAttribute("severity", SEVERITY_CLASS_FRAGMENTS[aSeverity]);
+    aMessageNode.setAttribute("filter", MESSAGE_PREFERENCE_KEYS[aCategory][aSeverity]);
   },
 
   /**
    * Add the mouse event handlers needed to make a link.
    *
    * @private
    * @param nsIDOMNode aNode
    *        The node for which you want to add the event handlers.
@@ -2671,18 +2647,18 @@ WebConsoleFrame.prototype = {
 
     let children = this.output.getSelectedMessages();
     if (!children.length && aOptions.contextmenu) {
       children = [this._contextMenuHandler.lastClickedMessage];
     }
 
     for (let item of children) {
       // Ensure the selected item hasn't been filtered by type or string.
-      if (!item.classList.contains("hud-filtered-by-type") &&
-          !item.classList.contains("hud-filtered-by-string")) {
+      if (!item.classList.contains("filtered-by-type") &&
+          !item.classList.contains("filtered-by-string")) {
         let timestampString = l10n.timestampString(item.timestamp);
         if (aOptions.linkOnly) {
           strings.push(item.url);
         }
         else {
           strings.push("[" + timestampString + "] " + item.clipboardText);
         }
       }
@@ -3109,17 +3085,17 @@ JSTerm.prototype = {
 
     if (WebConsoleUtils.isActorGrip(result)) {
       node._objectActors.add(result.actor);
 
       if (result.type == "longString") {
         // Add an ellipsis to expand the short string if the object is not
         // inspectable.
 
-        let body = node.getElementsByClassName("webconsole-msg-body")[0];
+        let body = node.getElementsByClassName("body")[0];
         let ellipsis = this.hud.document.createElementNS(XHTML_NS, "a");
         ellipsis.classList.add("longStringEllipsis");
         ellipsis.textContent = l10n.getStr("longStringEllipsis");
         ellipsis.href = "#";
         ellipsis.draggable = false;
 
         let formatter = function(s) '"' + s + '"';
         let onclick = this.hud._longStringClick.bind(this.hud, node, result,
@@ -3718,17 +3694,17 @@ JSTerm.prototype = {
 
   /**
    * Remove all of the private messages from the Web Console output.
    *
    * This method emits the "private-messages-cleared" notification.
    */
   clearPrivateMessages: function JST_clearPrivateMessages()
   {
-    let nodes = this.hud.outputNode.querySelectorAll(".hud-msg-node[private]");
+    let nodes = this.hud.outputNode.querySelectorAll(".message[private]");
     for (let node of nodes) {
       this.hud.removeOutputMessage(node);
     }
     this.emit("private-messages-cleared");
   },
 
   /**
    * Updates the size of the input field (command line) to fit its contents.
diff --git a/browser/devtools/webconsole/webconsole.xul b/browser/devtools/webconsole/webconsole.xul
--- a/browser/devtools/webconsole/webconsole.xul
+++ b/browser/devtools/webconsole/webconsole.xul
@@ -162,17 +162,17 @@ function goUpdateConsoleCommands() {
         <spacer flex="1"/>
 
         <textbox class="compact hud-filter-box devtools-searchinput" type="search"
                  placeholder="&filterOutput.placeholder;" tabindex="2"/>
       </toolbar>
 
       <hbox id="output-wrapper" flex="1" context="output-contextmenu" tooltip="aHTMLTooltip">
         <div xmlns="http://www.w3.org/1999/xhtml" id="output-wrapper2">
-	  <div class="hud-output-node" tabindex="1"/>
+	  <div id="output-container" tabindex="1"/>
 	</div>
       </hbox>
 
       <hbox class="jsterm-input-container" style="direction:ltr">
         <stack class="jsterm-stack-node" flex="1">
           <textbox class="jsterm-complete-node devtools-monospace"
                    multiline="true" rows="1" tabindex="-1"/>
           <textbox class="jsterm-input-node devtools-monospace"
diff --git a/browser/themes/shared/devtools/webconsole.inc.css b/browser/themes/shared/devtools/webconsole.inc.css
--- a/browser/themes/shared/devtools/webconsole.inc.css
+++ b/browser/themes/shared/devtools/webconsole.inc.css
@@ -6,104 +6,82 @@
 
 a {
   -moz-user-focus: normal;
   -moz-user-input: enabled;
   cursor: pointer;
   text-decoration: underline;
 }
 
-a:focus {
-  outline: 1px dashed gray;
+.message {
+  display: flex;
+  -moz-margin-start: 6px;
+  -moz-margin-end: 8px;
+  width: calc(100% - 6px - 8px);
 }
 
-.webconsole-timestamp {
+.message > .timestamp {
   flex: 0 0 auto;
   color: GrayText;
   margin: 4px 0;
   font-size: 0.9em;
 }
 
-.hud-msg-node {
-  display: flex;
-  -moz-margin-start: 6px;
-  -moz-margin-end: 8px;
-  width: calc(100% - 6px - 8px);
-}
-
-.webconsole-msg-icon {
+.message > .icon {
   background: -moz-image-rect(url(chrome://browser/skin/devtools/webconsole.png), 0, 1, 0, 0) no-repeat;
   background-position: center 0.3em;
   flex: 0 0 auto;
   margin: 0 6px;
   padding: 0 4px;
   width: 8px;
 }
 
-.webconsole-msg-body {
+.message > .body {
   flex: 1 1 100%;
   white-space: pre-wrap;
   word-wrap: break-word;
 }
 
-.webconsole-msg-url {
-  flex: 1 1 auto;
-  min-width: 5em;
-  white-space: nowrap;
-  overflow: hidden;
-  text-overflow: ellipsis;
-}
-
-/* Repeated messages */
-.webconsole-msg-repeat {
+/* The red bubble that shows the number of times a message is repeated */
+.message > .repeats {
   -moz-user-select: none;
   flex: 0 0 auto;
   margin: 2px 6px;
   padding: 0 6px;
   height: 1.25em;
   color: white;
   background-color: red;
   border-radius: 40px;
   font: message-box;
   font-size: 0.9em;
   font-weight: 600;
 }
 
-.webconsole-msg-repeat[value="1"] {
+.message > .repeats[value="1"] {
   display: none;
 }
 
-.webconsole-location {
+.message > .location {
   -moz-margin-start: 6px;
   flex: 0 0 auto;
   align-self: flex-start;
   width: 10em;
   text-align: end;
   color: -moz-nativehyperlinktext;
   text-overflow: ellipsis;
   text-decoration: none;
   overflow: hidden;
   white-space: nowrap;
 }
 
-.webconsole-location:hover,
-.webconsole-location:focus {
+.message > .location:hover,
+.message > .location:focus {
   text-decoration: underline;
 }
 
-.webconsole-mixed-content {
-  color: #FF0000;
-}
-
-.webconsole-mixed-content-link,
-.webconsole-learn-more-link {
-  color: #0000EE;
-  margin: 0 6px;
-}
-
 .jsterm-input-container {
   background: white;
 }
 
 #output-wrapper {
   background: #fff;
   color: #000;
   direction: ltr;
@@ -115,24 +93,24 @@ a:focus {
   -moz-box-flex: 1;
   overflow: auto;
   /* Set dimensions to show scroll bars when needed. Actual size is changed by
    * the flexbox. */
   width: 1px;
   height: 1px;
 }
 
-.hud-output-node {
+#output-container {
   display: table;
   table-layout: fixed;
   width: 100%;
 }
 
-.hud-filtered-by-type,
-.hud-filtered-by-string {
+.filtered-by-type,
+.filtered-by-string {
   display: none;
 }
 
 .hidden-message {
   display: block;
   visibility: hidden;
   height: 0;
   overflow: hidden;
@@ -160,107 +138,126 @@ a:focus {
 }
 
 /* Network styles */
 .webconsole-filter-button[category="net"] > .toolbarbutton-menubutton-button:before {
   background-image: linear-gradient(#444444, #000000);
   border-color: #777;
 }
 
-.webconsole-msg-network > .webconsole-msg-icon {
+.message[category=network] > .icon {
   -moz-border-start: solid #000 6px;
 }
 
-.webconsole-msg-network.webconsole-msg-error > .webconsole-msg-icon {
+.message[category=network][severity=error] > .icon {
   background-image: -moz-image-rect(url(chrome://browser/skin/devtools/webconsole.png), 0, 16, 8, 8);
 }
 
-.webconsole-msg-network > .webconsole-msg-body {
+.message[category=network] > .body {
   display: flex;
 }
 
-.webconsole-msg-method {
+.message[category=network] .method {
   flex: 0 0 auto;
 }
 
-.webconsole-msg-status {
+.message[category=network]:not(.navigation-marker) .url {
+  flex: 1 1 auto;
+  /* Make sure the URL is very small initially, let flex change width as needed. */
+  width: 100px;
+  min-width: 5em;
+  white-space: nowrap;
+  overflow: hidden;
+  text-overflow: ellipsis;
+}
+
+.message[category=network] .status {
   flex: 0 0 auto;
   -moz-margin-start: 6px;
 }
 
+.message[category=network].mixed-content .url {
+  color: #FF0000;
+}
+
+.message .learn-more-link {
+  color: #0000EE;
+  margin: 0 6px;
+}
+
 /* CSS styles */
 .webconsole-filter-button[category="css"] > .toolbarbutton-menubutton-button:before {
   background-image: linear-gradient(#2DC3F3, #00B6F0);
   border-color: #1BA2CC;
 }
 
-.webconsole-msg-cssparser > .webconsole-msg-icon {
+.message[category=cssparser] > .icon {
   -moz-border-start: solid #00b6f0 6px;
 }
 
-.webconsole-msg-cssparser.webconsole-msg-error > .webconsole-msg-icon {
+.message[category=cssparser][severity=error] > .icon {
   background-image: -moz-image-rect(url(chrome://browser/skin/devtools/webconsole.png), 8, 16, 16, 8);
 }
 
-.webconsole-msg-cssparser.webconsole-msg-warn > .webconsole-msg-icon {
+.message[category=cssparser][severity=warn] > .icon {
   background-image: -moz-image-rect(url(chrome://browser/skin/devtools/webconsole.png), 8, 24, 16, 16);
 }
 
 /* JS styles */
 .webconsole-filter-button[category="js"] > .toolbarbutton-menubutton-button:before {
   background-image: linear-gradient(#FCB142, #FB9500);
   border-color: #E98A00;
 }
 
-.webconsole-msg-exception > .webconsole-msg-icon {
+.message[category=exception] > .icon {
   -moz-border-start: solid #fb9500 6px;
 }
 
-.webconsole-msg-exception.webconsole-msg-error > .webconsole-msg-icon {
+.message[category=exception][severity=error] > .icon {
   background-image: -moz-image-rect(url(chrome://browser/skin/devtools/webconsole.png), 16, 16, 24, 8);
 }
 
-.webconsole-msg-exception.webconsole-msg-warn > .webconsole-msg-icon {
+.message[category=exception][severity=warn] > .icon {
   background-image: -moz-image-rect(url(chrome://browser/skin/devtools/webconsole.png), 16, 24, 24, 16);
 }
 
 /* Web Developer styles */
 .webconsole-filter-button[category="logging"] > .toolbarbutton-menubutton-button:before {
   background-image: linear-gradient(#B9B9B9, #AAAAAA);
   border-color: #929292;
 }
 
-.webconsole-msg-console > .webconsole-msg-icon {
+.message[category=console] > .icon {
   -moz-border-start: solid #cbcbcb 6px;
 }
 
-.webconsole-msg-console.webconsole-msg-error > .webconsole-msg-icon,
-.webconsole-msg-output.webconsole-msg-error > .webconsole-msg-icon {
+.message[category=console][severity=error] > .icon,
+.message[category=output][severity=error] > .icon {
   background-image: -moz-image-rect(url(chrome://browser/skin/devtools/webconsole.png), 24, 16, 32, 8);
 }
 
-.webconsole-msg-console.webconsole-msg-warn > .webconsole-msg-icon {
+.message[category=console][severity=warn] > .icon {
   background-image: -moz-image-rect(url(chrome://browser/skin/devtools/webconsole.png), 24, 24, 32, 16);
 }
 
-.webconsole-msg-console.webconsole-msg-info > .webconsole-msg-icon {
+.message[category=console][severity=info] > .icon {
   background-image: -moz-image-rect(url(chrome://browser/skin/devtools/webconsole.png), 24, 32, 32, 24);
 }
 
 /* Input and output styles */
-.webconsole-msg-input > .webconsole-msg-icon,
-.webconsole-msg-output > .webconsole-msg-icon {
+.message[category=input] > .icon,
+.message[category=output] > .icon {
   -moz-border-start: solid #808080 6px;
 }
 
-.webconsole-msg-input > .webconsole-msg-icon {
+.message[category=input] > .icon {
   background-image: -moz-image-rect(url(chrome://browser/skin/devtools/webconsole.png), 24, 40, 32, 32);
 }
 
-.webconsole-msg-output > .webconsole-msg-icon {
+.message[category=output] > .icon {
   background-image: -moz-image-rect(url(chrome://browser/skin/devtools/webconsole.png), 24, 48, 32, 40);
 }
 
 /* JSTerm Styles */
 .jsterm-input-node,
 .jsterm-complete-node {
   border: none;
   padding: 0 0 0 16px;
@@ -276,51 +273,51 @@ a:focus {
           .jsterm-complete-node) > .textbox-input-box > .textbox-textarea {
   overflow-x: hidden;
 }
 
 .jsterm-complete-node > .textbox-input-box > .textbox-textarea {
   color: GrayText;
 }
 
-.webconsole-msg-inspector .webconsole-msg-body {
+.inlined-variables-view .body {
   display: flex;
   flex-direction: column;
 }
-.webconsole-msg-inspector iframe {
+.inlined-variables-view iframe {
   display: block;
   flex: 1;
   margin-bottom: 15px;
   -moz-margin-end: 15px;
   border: 1px solid #ccc;
   border-radius: 4px;
   box-shadow: 0 0 12px #dfdfdf;
 }
 
 #webconsole-sidebar > tabs {
   height: 0;
   border: none;
 }
 
 /* Security styles */
 
-.webconsole-msg-security > .webconsole-msg-icon {
+.message[category=security] > .icon {
   -moz-border-start: solid red 6px;
 }
 
 .webconsole-filter-button[category="security"] > .toolbarbutton-menubutton-button:before {
   background-image: linear-gradient(#FF3030, #FF7D7D);
   border-color: #D12C2C;
 }
 
-.webconsole-msg-security.webconsole-msg-error > .webconsole-msg-icon {
+.message[category=security][severity=error] > .icon {
   background-image: -moz-image-rect(url(chrome://browser/skin/devtools/webconsole.png), 32, 16, 40, 8);
 }
 
-.webconsole-msg-security.webconsole-msg-warn > .webconsole-msg-icon {
+.message[category=security][severity=warn] > .icon {
   background-image: -moz-image-rect(url(chrome://browser/skin/devtools/webconsole.png), 32, 24, 40, 16);
 }
 
 .navigation-marker {
   color: #aaa;
   background: linear-gradient(#fff, #bbb, #fff) no-repeat left 50%;
   background-size: 100% 2px;
   margin-top: 6px;
