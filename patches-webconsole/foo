# HG changeset patch
# Parent d7887e38fa59728eae6242297f77c8e6cfb560a2
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1394479105 -7200

diff --git a/toolkit/devtools/server/actors/webapps.js b/toolkit/devtools/server/actors/webapps.js
--- a/toolkit/devtools/server/actors/webapps.js
+++ b/toolkit/devtools/server/actors/webapps.js
@@ -142,16 +142,21 @@ WebappsActor.prototype = {
 
   disconnect: function () {
     // When we stop using this actor, we should ensure removing all files.
     for (let upload of this._uploads) {
       upload.remove();
     }
     this._uploads = null;
 
+    for (var mm of this._appActorsMap.keys()) {
+      mm.sendAsyncMessage("debug:disconnect", null);
+      dump("Sent disconnect!\n");
+    }
+
     this.conn.removeActorPool(this._actorPool);
     this._actorPool = null;
     this.conn = null;
   },
 
   _registerApp: function wa_actorRegisterApp(aDeferred, aApp, aId, aDir) {
     debug("registerApp");
     let reg = DOMApplicationRegistry;
diff --git a/toolkit/devtools/server/child.js b/toolkit/devtools/server/child.js
--- a/toolkit/devtools/server/child.js
+++ b/toolkit/devtools/server/child.js
@@ -17,26 +17,36 @@ let chromeGlobal = this;
     DebuggerServer.init();
   }
 
   // In case of apps being loaded in parent process, DebuggerServer is already
   // initialized, but child specific actors are not registered.
   // Otherwise, for apps in child process, we need to load actors the first
   // time we load child.js
   DebuggerServer.addChildActors();
+  let conn;
 
   let onConnect = DevToolsUtils.makeInfallible(function (msg) {
     removeMessageListener("debug:connect", onConnect);
 
     let mm = msg.target;
 
-    let conn = DebuggerServer.connectToParent(msg.data.prefix, mm);
+    conn = DebuggerServer.connectToParent(msg.data.prefix, mm);
 
     let actor = new DebuggerServer.ContentActor(conn, chromeGlobal);
     let actorPool = new ActorPool(conn);
     actorPool.addActor(actor);
     conn.addActorPool(actorPool);
 
     sendAsyncMessage("debug:actor", {actor: actor.grip()});
   });
 
+  let onDisconnect = DevToolsUtils.makeInfallible(function (msg) {
+    dump("onDisconnect\n");
+    removeMessageListener("debug:disconnect", onDisconnect);
+    conn.onClosed();
+    conn = null;
+    dump("onDisconnect done\n");
+  });
+
   addMessageListener("debug:connect", onConnect);
+  addMessageListener("debug:disconnect", onDisconnect);
 })();
