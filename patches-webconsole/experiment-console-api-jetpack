# HG changeset patch
# Parent eefffef83ab8c1904ebb1e80c4ea531aab4bc4da
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1363111595 25200

diff --git a/toolkit/devtools/webconsole/WebConsoleUtils.jsm b/toolkit/devtools/webconsole/WebConsoleUtils.jsm
--- a/toolkit/devtools/webconsole/WebConsoleUtils.jsm
+++ b/toolkit/devtools/webconsole/WebConsoleUtils.jsm
@@ -1448,16 +1448,17 @@ ConsoleAPIListener.prototype =
   /**
    * Initialize the window.console API observer.
    */
   init: function CAL_init()
   {
     // Note that the observer is process-wide. We will filter the messages as
     // needed, see CAL_observe().
     Services.obs.addObserver(this, "console-api-log-event", false);
+    Services.obs.addObserver(this, "jetpack-api-log-event", false);
   },
 
   /**
    * The console API message observer. When messages are received from the
    * observer service we forward them to the remote Web Console instance.
    *
    * @param object aMessage
    *        The message object receives from the observer service.
@@ -1466,17 +1467,17 @@ ConsoleAPIListener.prototype =
    */
   observe: function CAL_observe(aMessage, aTopic)
   {
     if (!this.owner) {
       return;
     }
 
     let apiMessage = aMessage.wrappedJSObject;
-    if (this.window) {
+    if (this.window && aTopic == "console-api-log-event") {
       let msgWindow = WebConsoleUtils.getWindowByOuterId(apiMessage.ID,
                                                          this.window);
       if (!msgWindow || msgWindow.top != this.window) {
         // Not the same window!
         return;
       }
     }
 
@@ -1498,16 +1499,17 @@ ConsoleAPIListener.prototype =
   },
 
   /**
    * Destroy the console API listener.
    */
   destroy: function CAL_destroy()
   {
     Services.obs.removeObserver(this, "console-api-log-event");
+    Services.obs.removeObserver(this, "jetpack-api-log-event");
     this.window = this.owner = null;
   },
 };
 
 
 
 /**
  * JSTerm helper functions.
