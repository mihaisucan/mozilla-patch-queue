# HG changeset patch
# Parent 2a44c4e95d2c84bc45cfaa24106a6b4f6e5764d4
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1386019287 -7200
Bug 843004 - Part 2: ObjectActor grip changes to allow pretty output

diff --git a/browser/devtools/shared/widgets/VariablesView.jsm b/browser/devtools/shared/widgets/VariablesView.jsm
--- a/browser/devtools/shared/widgets/VariablesView.jsm
+++ b/browser/devtools/shared/widgets/VariablesView.jsm
@@ -3187,20 +3187,197 @@ VariablesView.getString = function(aGrip
       case "NaN":
       case "Infinity":
       case "-Infinity":
       case "-0":
         return aGrip.type;
       case "longString":
         return "\"" + aGrip.initial + "\"";
       default:
-        if (!aConciseFlag) {
+        if (aGrip.type != "object") {
           return "[" + aGrip.type + " " + aGrip.class + "]";
         }
-        return aGrip.class;
+
+        if (aGrip.class == "Function") {
+          let name = aGrip.userDisplayName || aGrip.displayName || aGrip.name || "";
+          let params = aGrip.parameterNames || "";
+          if (!aConciseFlag) {
+            return "function " + name + "(" + params + ")";
+          }
+          return (name || "function") + "(" + params + ")";
+        }
+
+        if (aGrip.displayString && aGrip.class == "RegExp") {
+          // TODO: handle longStrings
+          return aGrip.displayString;
+        }
+
+        let preview = aGrip.preview;
+        if (!preview) {
+          if (aConciseFlag) {
+            return aGrip.class;
+          }
+          return "[" + aGrip.type + " " + aGrip.class + "]";
+        }
+
+        if (preview.kind == "ArrayLike") {
+          if (!aConciseFlag && preview.items) {
+            let result = [];
+            for (let item of preview.items) {
+              result.push(VariablesView.getString(item, true));
+            }
+            if (result.length < preview.length) {
+              result.push((preview.length - result.length) + " more\u2026"); // TODO: localize
+            }
+
+            let prefix = aGrip.class == "Array" ? "" : aGrip.class + " ";
+            return prefix + "[" + result.join(", ") + "]";
+          }
+
+          if (aGrip.class == "Array") {
+            return "Array(" + preview.length + ")";
+          }
+          return aGrip.class + "[" + preview.length + "]";
+        }
+
+        if (preview.kind == "MapLike") {
+          if (aConciseFlag || !preview.entries) {
+            let size = typeof preview.size == "number" ?
+                         "[" + preview.size + "]" : "";
+            return aGrip.class + size;
+          }
+
+          let entries = [];
+          for (let [key, value] of preview.entries) {
+            // TODO: support longstring
+            if (typeof key != "string") {
+              key = VariablesView.getString(key, true);
+            }
+            value = VariablesView.getString(value, true);
+            entries.push(key + ": " + value);
+          }
+          if (typeof preview.size == "number" && preview.size > entries.length) {
+            entries.push((preview.size - entries.length) + " more\u2026");
+          }
+          return aGrip.class + " {" + entries.join(", ") + "}";
+        }
+
+        if (aGrip.class == "Date" && preview.timestamp) {
+          if (aConciseFlag) {
+            return "Date " + new Date(preview.timestamp).toISOString();
+          }
+          return "Date " + new Date(preview.timestamp).toLocaleString();
+        }
+
+        if (preview.kind == "CSSStyleSheet" ||
+            preview.kind == "CSSImportRule" ||
+            preview.kind == "DOMLocation") {
+          let result = aGrip.class;
+          if (!VariablesView.isFalsy({ value: preview.href })) {
+            result += " " + WebConsoleUtils.abbreviateSourceURL(preview.href,
+                                                                { onlyCropQuery: !aConciseFlag });
+          }
+          return result;
+        }
+
+        if (preview.kind == "CSSStyleRule") {
+          return aGrip.class + " " + VariablesView.getString(preview.selectorText);
+        }
+
+        if (preview.kind == "CSSMediaRule") {
+          return aGrip.class + " " + VariablesView.getString(preview.conditionText);
+        }
+
+        if (preview.kind == "DOMWindow" ||
+            (preview.kind == "DOMNode" &&
+             preview.nodeType == Ci.nsIDOMNode.DOCUMENT_NODE)) {
+          let location = WebConsoleUtils.abbreviateSourceURL(preview.location,
+                                                             { onlyCropQuery: !aConciseFlag });
+          return aGrip.class + " " + location;
+        }
+
+        if (preview.kind == "DOMNode" &&
+            preview.nodeType == Ci.nsIDOMNode.ELEMENT_NODE) {
+          let attrs = preview.attributes;
+          if (!aConciseFlag) {
+            let n = 0, result = "<" + preview.nodeName;
+            for (let name in attrs) {
+              result += " " + name + "=" + VariablesView.getString(attrs[name], true);
+              n++;
+            }
+            if (preview.attributesLength > n) {
+              result += " \u2026";
+            }
+            return result + ">";
+          }
+
+          let result = "<" + preview.nodeName;
+          if (attrs.id) {
+            result += "#" + attrs.id;
+          }
+          return result + ">";
+        }
+
+        if (preview.kind == "DOMNode" &&
+            preview.nodeType == Ci.nsIDOMNode.ATTRIBUTE_NODE) {
+          return preview.nodeName + "=" + VariablesView.getString(preview.value, true);
+        }
+
+        if (preview.kind == "DOMNode" &&
+            preview.nodeType == Ci.nsIDOMNode.TEXT_NODE) {
+          return preview.nodeName + " " + VariablesView.getString(preview.textContent, true);
+        }
+
+        if (preview.kind == "DOMNode" &&
+            preview.nodeType == Ci.nsIDOMNode.COMMENT_NODE) {
+          return "<!--" + preview.textContent + "-->";
+        }
+
+        if (preview.kind == "Error") {
+          if (aConciseFlag) {
+            return aGrip.class;
+          }
+
+          // TODO: handle non-string properties, including longStrings.
+          let msg = preview.name + ": " + preview.message;
+          if (!VariablesView.isFalsy({ value: preview.stack })) {
+            msg += "\nStack trace:\n" + preview.stack;
+          }
+          return msg;
+        }
+
+        if (aConciseFlag) {
+          return aGrip.class;
+        }
+
+        // generic object preview
+        let props = [];
+        for (let [key, value] of Iterator(preview.ownProperties || {})) {
+          let valueString = "";
+          if (value.get) {
+            valueString = "Getter";
+          } else if (value.set) {
+            valueString = "Setter";
+          } else {
+            valueString = VariablesView.getString(value.value, true);
+          }
+          props.push(key + ": " + valueString);
+        }
+
+        for (let [key, value] of Iterator(preview.safeGetterValues || {})) {
+          let valueString = VariablesView.getString(value.getterValue, true);
+          props.push(key + ": " + valueString);
+        }
+
+        if (props.length > 0) {
+          let klass = aGrip.class != "Object" ? aGrip.class + " " : "";
+          return klass + "{" + props.join(", ") + "}";
+        }
+
+        return "[" + aGrip.type + " " + aGrip.class + "]";
     }
   }
   switch (typeof aGrip) {
     case "string":
       return "\"" + aGrip + "\"";
     case "boolean":
       return aGrip ? "true" : "false";
     case "number":
diff --git a/toolkit/devtools/server/actors/script.js b/toolkit/devtools/server/actors/script.js
--- a/toolkit/devtools/server/actors/script.js
+++ b/toolkit/devtools/server/actors/script.js
@@ -2679,25 +2679,26 @@ function hasSafeGetter(aDesc) {
  *
  * @param Debugger.Object aObject
  *        The Debugger.Object to get the value from.
  * @param String aKey
  *        The key to look for.
  * @return Any
  */
 function getProperty(aObj, aKey) {
+  let root = aObj;
   try {
     do {
-      const desc = aObj.getOwnPropertyDescriptor(aKey);
+      let desc = aObj.getOwnPropertyDescriptor(aKey);
       if (desc) {
         if ("value" in desc) {
           return desc.value
         }
         // Call the getter if it's safe.
-        return hasSafeGetter(desc) ? desc.get.call(aObj) : undefined;
+        return hasSafeGetter(desc) ? desc.get.call(root).return : undefined;
       }
       aObj = aObj.proto;
     } while (aObj);
   } catch (e) {
     // If anything goes wrong report the error and return undefined.
     DevToolsUtils.reportException("getProperty", e);
   }
   return undefined;
@@ -2747,17 +2748,17 @@ function errorStringify(aObj) {
  * Stringify a Debugger.Object based on its class.
  *
  * @param Debugger.Object aObj
  *        The object to stringify.
  * @return String
  *         The stringification for the object.
  */
 function stringify(aObj) {
-  if (Cu.isDeadWrapper(aObj)) {
+  if (aObj.class == "DeadObject") {
     const error = new Error("Dead object encountered.");
     DevToolsUtils.reportException("stringify", error);
     return "<dead object>";
   }
   const stringifier = stringifiers[aObj.class] || stringifiers.Object;
   return stringifier(aObj);
 }
 
@@ -2837,59 +2838,61 @@ let stringifiers = {
  *        The debuggee object.
  * @param aThreadActor ThreadActor
  *        The parent thread actor for this object.
  */
 function ObjectActor(aObj, aThreadActor)
 {
   this.obj = aObj;
   this.threadActor = aThreadActor;
+
+  if (!("_gripDepth" in this.threadActor)) {
+    this.threadActor._gripDepth = 0;
+  }
 }
 
 ObjectActor.prototype = {
   actorPrefix: "obj",
 
   _forcedMagicProps: false,
 
   /**
    * Returns a grip for this actor for returning in a protocol message.
    */
   grip: function () {
+    this.threadActor._gripDepth++;
+
     let g = {
       "type": "object",
       "class": this.obj.class,
       "actor": this.actorID,
       "extensible": this.obj.isExtensible(),
       "frozen": this.obj.isFrozen(),
       "sealed": this.obj.isSealed()
     };
 
-    // Add additional properties for functions.
-    if (this.obj.class === "Function") {
-      if (this.obj.name) {
-        g.name = this.obj.name;
+    if (this.obj.class != "DeadObject") {
+      //let raw = this.obj.unsafeDereference();
+      //let wrap = new XPCNativeWrapper(raw);
+      //console.log('xray test', raw.lolz, wrap.lolz, Cu.isXrayWrapper(raw), Cu.isXrayWrapper(wrap));
+      // XXX: |raw| is not an xray wrapper. not even |wrap| after calling
+      // XPCNativeWrapper()... why??
+
+      let previewers = DebuggerServer.ObjectActorPreviewers[this.obj.class] ||
+                       DebuggerServer.ObjectActorPreviewers.Object;
+      for (let fn of previewers) {
+        if (fn(this, g)) {
+          break;
+        }
       }
-      if (this.obj.displayName) {
-        g.displayName = this.obj.displayName;
-      }
-
-      // Check if the developer has added a de-facto standard displayName
-      // property for us to use.
-      try {
-        let desc = this.obj.getOwnPropertyDescriptor("displayName");
-        if (desc && desc.value && typeof desc.value == "string") {
-          g.userDisplayName = this.threadActor.createValueGrip(desc.value);
-        }
-      } catch (e) {
-        // Calling getOwnPropertyDescriptor with displayName might throw
-        // with "permission denied" errors for some functions.
-        dumpn(e);
-      }
-    }
-
+    }
+
+    // TODO: do not do previews for __proto__
+
+    this.threadActor._gripDepth--;
     return g;
   },
 
   /**
    * Releases this actor from the pool.
    */
   release: function () {
     if (this.registeredPool.objectActors) {
@@ -3006,25 +3009,27 @@ ObjectActor.prototype = {
 
   /**
    * Find the safe getter values for the current Debugger.Object, |this.obj|.
    *
    * @private
    * @param object aOwnProperties
    *        The object that holds the list of known ownProperties for
    *        |this.obj|.
+   * @param number [aLimit=0]
+   *        Optional limit of getter values to find.
    * @return object
    *         An object that maps property names to safe getter descriptors as
    *         defined by the remote debugging protocol.
    */
-  _findSafeGetterValues: function (aOwnProperties)
+  _findSafeGetterValues: function (aOwnProperties, aLimit = 0)
   {
     let safeGetterValues = Object.create(null);
     let obj = this.obj;
-    let level = 0;
+    let level = 0, i = 0;
 
     while (obj) {
       let getters = this._findSafeGetters(obj);
       for (let name of getters) {
         // Avoid overwriting properties from prototypes closer to this.obj. Also
         // avoid providing safeGetterValues from prototypes if property |name|
         // is already defined as an own property.
         if (name in safeGetterValues ||
@@ -3056,19 +3061,25 @@ ObjectActor.prototype = {
           // return undefined and should be ignored.
           if (getterValue !== undefined) {
             safeGetterValues[name] = {
               getterValue: this.threadActor.createValueGrip(getterValue),
               getterPrototypeLevel: level,
               enumerable: desc.enumerable,
               writable: level == 0 ? desc.writable : true,
             };
+            if (aLimit && ++i == aLimit) {
+              break;
+            }
           }
         }
       }
+      if (aLimit && i == aLimit) {
+        break;
+      }
 
       obj = obj.proto;
       level++;
     }
 
     return safeGetterValues;
   },
 
@@ -3085,17 +3096,25 @@ ObjectActor.prototype = {
    */
   _findSafeGetters: function (aObject)
   {
     if (aObject._safeGetters) {
       return aObject._safeGetters;
     }
 
     let getters = new Set();
-    for (let name of aObject.getOwnPropertyNames()) {
+    let names = [];
+    try {
+      names = aObject.getOwnPropertyNames()
+    } catch (ex) {
+      // Calling getOwnPropertyNames() on wrapped native prototypes is not
+      // allowed: "cannot modify properties of a WrappedNative".
+    }
+
+    for (let name of names) {
       let desc = null;
       try {
         desc = aObject.getOwnPropertyDescriptor(name);
       } catch (e) {
         // Calling getOwnPropertyDescriptor on wrapped native prototypes is not
         // allowed (bug 560072).
       }
       if (!desc || desc.value !== undefined || !("get" in desc)) {
@@ -3273,16 +3292,426 @@ ObjectActor.prototype.requestTypes = {
   "property": ObjectActor.prototype.onProperty,
   "displayString": ObjectActor.prototype.onDisplayString,
   "ownPropertyNames": ObjectActor.prototype.onOwnPropertyNames,
   "decompile": ObjectActor.prototype.onDecompile,
   "release": ObjectActor.prototype.onRelease,
   "scope": ObjectActor.prototype.onScope,
 };
 
+// Number of items to preview in an array.
+const OBJECT_PREVIEW_MAX_ARRAY_ITEMS = 10;
+
+/**
+ * Functions for adding information to ObjectActor grips for the purpose of
+ * having customized output. This object holds arrays mapped by
+ * DebuggerObject.class. In each array you can add functions that take two
+ * arguments: the ObjectActor instance and the grip object being prepared for
+ * the client. Functions must return false if they cannot provide preview
+ * information for the debugger object, or true otherwise.
+ */
+// XXX: should we just flatten this structure into an array?
+DebuggerServer.ObjectActorPreviewers = {
+  Function: [function({obj, threadActor}, aGrip) {
+    if (obj.name) {
+      aGrip.name = obj.name;
+    }
+
+    if (obj.displayName) {
+      aGrip.displayName = obj.displayName;
+    }
+
+    if (obj.parameterNames) {
+      aGrip.parameterNames = obj.parameterNames;
+    }
+
+    // Check if the developer has added a de-facto standard displayName
+    // property for us to use.
+    try {
+      let desc = obj.getOwnPropertyDescriptor("displayName");
+      if (desc && desc.value && typeof desc.value == "string") {
+        aGrip.userDisplayName = threadActor.createValueGrip(desc.value);
+      }
+    } catch (e) {
+      // Calling getOwnPropertyDescriptor with displayName might throw
+      // with "permission denied" errors for some functions.
+      dumpn(e);
+    }
+
+    return true;
+  }], // Function
+
+  RegExp: [function({obj, threadActor}, aGrip) {
+    let src = getProperty(obj, "source");
+    if (typeof src != "string") {
+      return false;
+    }
+
+    let flags = [];
+    let flagsMap = {
+      global: "g",
+      ignoreCase: "i",
+      multiline: "m",
+      sticky: "y",
+    };
+
+    for (let [prop, flag] of Iterator(flagsMap)) {
+      let value = getProperty(obj, prop);
+      console.log(prop, value);
+      if (typeof value == "boolean" && value) {
+        flags.push(flag);
+      }
+    }
+
+    let str = "/" + src + "/" + flags.join("");
+    aGrip.displayString = threadActor.createValueGrip(str);
+    return true;
+  }],
+
+  // TODO: fix exception when trying expand proto
+  Date: [function({obj, threadActor}, aGrip) {
+    let raw = obj.unsafeDereference();
+    aGrip.preview = {
+      timestamp: threadActor.createValueGrip(Date.prototype.getTime.call(raw)),
+    };
+    return true;
+  }],
+
+  Set: [function({obj, threadActor}, aGrip) {
+    let size = getProperty(obj, "size");
+    if (typeof size != "number") {
+      return false;
+    }
+
+    aGrip.preview = {
+      kind: "ArrayLike",
+      length: size,
+    };
+
+    // Avoid recursive object grips.
+    if (threadActor._gripDepth > 1) {
+      return true;
+    }
+
+    let raw = obj.unsafeDereference();
+    let items = aGrip.preview.items = [];
+    for (let item of Set.prototype.values.call(raw)) {
+      if (typeof item == "object") {
+        item = obj.makeDebuggeeValue(item);
+      }
+      items.push(threadActor.createValueGrip(item));
+      if (items.length == OBJECT_PREVIEW_MAX_ARRAY_ITEMS) {
+        break;
+      }
+    }
+
+    return true;
+  }], // Set
+
+  Map: [function({obj, threadActor}, aGrip) {
+    let size = getProperty(obj, "size");
+    if (typeof size != "number") {
+      return false;
+    }
+
+    aGrip.preview = {
+      kind: "MapLike",
+      size: size,
+    };
+
+    if (threadActor._gripDepth > 1) {
+      return true;
+    }
+
+    let raw = obj.unsafeDereference();
+    let entries = aGrip.preview.entries = [];
+    for (let [key, value] of Map.prototype.entries.call(raw)) {
+      if (typeof key == "object") {
+        key = obj.makeDebuggeeValue(key);
+      }
+      if (typeof value == "object") {
+        value = obj.makeDebuggeeValue(value);
+      }
+      entries.push([threadActor.createValueGrip(key),
+                    threadActor.createValueGrip(value)]);
+      if (entries.length == OBJECT_PREVIEW_MAX_ARRAY_ITEMS) {
+        break;
+      }
+    }
+
+    return true;
+  }], // Map
+
+  DOMStringMap: [function({obj, threadActor}, aGrip) {
+    aGrip.preview = {
+      kind: "MapLike",
+      entries: [],
+    };
+
+    let keys = obj.getOwnPropertyNames();
+    aGrip.preview.size = keys.length;
+
+    if (threadActor._gripDepth > 1) {
+      return false;
+    }
+
+    let entries = aGrip.preview.entries;
+    for (let key of keys) {
+      let value = getProperty(obj, key);
+      if (typeof value == "object") {
+        value = this.obj.makeDebuggeeValue(value);
+      }
+      entries.push([key, threadActor.createValueGrip(value)]);
+      if (entries.length == OBJECT_PREVIEW_MAX_ARRAY_ITEMS) {
+        break;
+      }
+    }
+
+    return true;
+  }], // DOMStringMap
+}; // DebuggerServer.ObjectActorPreviewers
+
+// Preview functions that do not rely on the object class.
+// TODO: try to avoid the use of unsafeDereference
+DebuggerServer.ObjectActorPreviewers.Object = [
+  function Error({obj, threadActor}, aGrip) {
+    switch (obj.class) {
+      case "Error":
+      case "EvalError":
+      case "RangeError":
+      case "ReferenceError":
+      case "SyntaxError":
+      case "TypeError":
+      case "URIError":
+        let raw = obj.unsafeDereference();
+        aGrip.preview = {
+          kind: "Error",
+          name: threadActor.createValueGrip(raw.name),
+          message: threadActor.createValueGrip(raw.message),
+          stack: threadActor.createValueGrip(raw.stack),
+        };
+        return true;
+      default:
+        return false;
+    }
+  },
+
+  function CSSMediaRule({obj, threadActor}, aGrip) {
+    let raw = obj.unsafeDereference();
+    if (!(raw instanceof Ci.nsIDOMCSSMediaRule)) {
+      return false;
+    }
+    aGrip.preview = {
+      kind: "CSSMediaRule",
+      conditionText: threadActor.createValueGrip(raw.conditionText),
+    };
+    return true;
+  },
+
+  function CSSStyleRule({obj, threadActor}, aGrip) {
+    let raw = obj.unsafeDereference();
+    if (!(raw instanceof Ci.nsIDOMCSSStyleRule)) {
+      return false;
+    }
+    aGrip.preview = {
+      kind: "CSSStyleRule",
+      selectorText: threadActor.createValueGrip(raw.selectorText),
+    };
+    return true;
+  },
+
+  function CSSImportRule({obj, threadActor}, aGrip) {
+    let raw = obj.unsafeDereference();
+    if (!(raw instanceof Ci.nsIDOMCSSImportRule)) {
+      return false;
+    }
+    aGrip.preview = {
+      kind: "CSSImportRule",
+      href: threadActor.createValueGrip(raw.href),
+    };
+    return true;
+  },
+
+  function CSSStyleSheet({obj, threadActor}, aGrip) {
+    let raw = obj.unsafeDereference();
+    if (!(raw instanceof Ci.nsIDOMCSSStyleSheet)) {
+      return false;
+    }
+    aGrip.preview = {
+      kind: "CSSStyleSheet",
+      href: threadActor.createValueGrip(raw.href),
+    };
+    return true;
+  },
+
+  function DOMLocation({obj, threadActor}, aGrip) {
+    let raw = obj.unsafeDereference();
+    if (!(raw instanceof Ci.nsIDOMLocation)) {
+      return false;
+    }
+    aGrip.preview = {
+      kind: "DOMLocation",
+      href: threadActor.createValueGrip(raw.href),
+    };
+    return true;
+  },
+
+  function DOMWindow({obj, threadActor}, aGrip) {
+    let raw = obj.unsafeDereference();
+    if (!(raw instanceof Ci.nsIDOMWindow)) {
+      return false;
+    }
+    aGrip.preview = {
+      kind: "DOMWindow",
+      location: threadActor.createValueGrip(raw.location.href),
+    };
+    return true;
+  },
+
+  function ArrayLike({obj, threadActor}, aGrip) {
+    let raw = obj.unsafeDereference();
+    if (obj.class != "Array" &&
+        obj.class != "DOMTokenList" &&
+        !(raw instanceof Ci.nsIDOMMozNamedAttrMap ||
+          raw instanceof Ci.nsIDOMCSSRuleList ||
+          raw instanceof Ci.nsIDOMCSSValueList ||
+          raw instanceof Ci.nsIDOMDOMStringList ||
+          raw instanceof Ci.nsIDOMFileList ||
+          raw instanceof Ci.nsIDOMFontFaceList ||
+          raw instanceof Ci.nsIDOMMediaList ||
+          raw instanceof Ci.nsIDOMMediaQueryList ||
+          raw instanceof Ci.nsIDOMNodeList ||
+          raw instanceof Ci.nsIDOMStyleSheetList)) {
+      return false;
+    }
+
+    if (typeof raw.length != "number") {
+      return false;
+    }
+
+    aGrip.preview = {
+      kind: "ArrayLike",
+      length: raw.length,
+    };
+
+    if (threadActor._gripDepth > 1) {
+      return true;
+    }
+
+    let items = aGrip.preview.items = [];
+    for (let i = 0; i < raw.length && i < OBJECT_PREVIEW_MAX_ARRAY_ITEMS; i++) {
+      let value = raw[i];
+      if (typeof value == "object") {
+        value = obj.makeDebuggeeValue(value);
+      }
+      items[i] = threadActor.createValueGrip(value);
+    }
+
+    return true;
+  }, // ArrayLike
+
+  function CSSStyleDeclaration({obj, threadActor}, aGrip) {
+    let raw = obj.unsafeDereference();
+    if (!(raw instanceof Ci.nsIDOMCSSStyleDeclaration)) {
+      return false;
+    }
+
+    aGrip.preview = {
+      kind: "MapLike",
+      entries: [],
+      size: raw.length,
+    };
+    let entries = aGrip.preview.entries;
+
+    for (let i = 0; i < OBJECT_PREVIEW_MAX_ARRAY_ITEMS &&
+                    i < raw.length; i++) {
+      let prop = raw[i];
+      let value = raw.getPropertyValue(prop);
+      entries.push([prop, threadActor.createValueGrip(value)]);
+    }
+
+    return true;
+  }, // CSSStyleDeclaration
+
+  function DOMNode({obj, threadActor}, aGrip) {
+    let raw = obj.unsafeDereference();
+    if (!(raw instanceof Ci.nsIDOMNode)) {
+      return false;
+    }
+
+    let preview = aGrip.preview = {
+      kind: "DOMNode",
+      nodeType: raw.nodeType,
+      nodeName: raw.nodeName,
+    };
+
+    if (raw instanceof Ci.nsIDOMDocument) {
+      preview.location = threadActor.createValueGrip(raw.location.href);
+    }
+
+    // Add preview for DOM element attributes.
+    if (raw instanceof Ci.nsIDOMElement) {
+      // TODO: use getProperty() or getAttribute()
+      let i = 0;
+      preview.attributes = {};
+      preview.attributesLength = raw.attributes.length;
+      for (let attr of raw.attributes) {
+        preview.attributes[attr.nodeName] = threadActor.createValueGrip(attr.value);
+        if (++i == OBJECT_PREVIEW_MAX_ARRAY_ITEMS) {
+          break;
+        }
+      }
+    }
+
+    if (raw instanceof Ci.nsIDOMAttr) {
+      preview.value = threadActor.createValueGrip(raw.value);
+    }
+
+    if (raw instanceof Ci.nsIDOMText ||
+        raw instanceof Ci.nsIDOMComment) {
+      preview.textContent = threadActor.createValueGrip(raw.textContent);
+    }
+
+    return true;
+  }, // DOMNode
+
+  function GenericObject(aObjectActor, aGrip) {
+    let {obj, threadActor} = aObjectActor;
+    if (aGrip.preview || aGrip.displayString || threadActor._gripDepth > 1) {
+      return false;
+    }
+
+    let i = 0, names = [];
+    let preview = aGrip.preview = {
+      ownProperties: Object.create(null),
+    };
+
+    try {
+      names = obj.getOwnPropertyNames();
+    } catch (ex) {
+      // Calling getOwnPropertyNames() on wrapped native prototypes is not
+      // allowed: "cannot modify properties of a WrappedNative".
+    }
+
+    for (let name of names) {
+      preview.ownProperties[name] = aObjectActor._propertyDescriptor(name);
+      if (++i == OBJECT_PREVIEW_MAX_ARRAY_ITEMS) {
+        break;
+      }
+    }
+
+    if (i < OBJECT_PREVIEW_MAX_ARRAY_ITEMS) {
+      preview.safeGetterValues = aObjectActor.
+                                 _findSafeGetterValues(preview.ownProperties,
+                                                       OBJECT_PREVIEW_MAX_ARRAY_ITEMS - i);
+    }
+
+    return true;
+  }, // GenericObject
+]; // DebuggerServer.ObjectActorPreviewers.Object
 
 /**
  * Creates a pause-scoped actor for the specified object.
  * @see ObjectActor
  */
 function PauseScopedObjectActor()
 {
   ObjectActor.apply(this, arguments);
diff --git a/toolkit/devtools/webconsole/utils.js b/toolkit/devtools/webconsole/utils.js
--- a/toolkit/devtools/webconsole/utils.js
+++ b/toolkit/devtools/webconsole/utils.js
@@ -182,20 +182,26 @@ let WebConsoleUtils = {
   },
 
   /**
    * Abbreviates the given source URL so that it can be displayed flush-right
    * without being too distracting.
    *
    * @param string aSourceURL
    *        The source URL to shorten.
+   * @param object [aOptions]
+   *        Options:
+   *        - onlyCropQuery: boolean that tells if the URL abbreviation function
+   *        should only remove the query parameters and the hash fragment from
+   *        the given URL.
    * @return string
    *         The abbreviated form of the source URL.
    */
-  abbreviateSourceURL: function WCU_abbreviateSourceURL(aSourceURL)
+  abbreviateSourceURL:
+  function WCU_abbreviateSourceURL(aSourceURL, aOptions = {})
   {
     if (aSourceURL.substr(0, 5) == "data:") {
       let commaIndex = aSourceURL.indexOf(",");
       if (commaIndex > -1) {
         aSourceURL = "data:" + aSourceURL.substring(commaIndex + 1);
       }
     }
 
@@ -208,23 +214,25 @@ let WebConsoleUtils = {
     // Remove any hash fragments.
     let hashIndex = aSourceURL.indexOf("#");
     if (hashIndex > -1) {
       aSourceURL = aSourceURL.substring(0, hashIndex);
     }
 
     // Remove a trailing "/".
     if (aSourceURL[aSourceURL.length - 1] == "/") {
-      aSourceURL = aSourceURL.substring(0, aSourceURL.length - 1);
+      aSourceURL = aSourceURL.replace(/\/+$/, "");
     }
 
     // Remove all but the last path component.
-    let slashIndex = aSourceURL.lastIndexOf("/");
-    if (slashIndex > -1) {
-      aSourceURL = aSourceURL.substring(slashIndex + 1);
+    if (!aOptions.onlyCropQuery) {
+      let slashIndex = aSourceURL.lastIndexOf("/");
+      if (slashIndex > -1) {
+        aSourceURL = aSourceURL.substring(slashIndex + 1);
+      }
     }
 
     return aSourceURL;
   },
 
   /**
    * Tells if the given function is native or not.
    *
