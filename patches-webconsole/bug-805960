# HG changeset patch
# Parent aab5d51780473287dbb04b17335321f910640cb5
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1351612438 -7200

Bug 805960 - Intermittent toolkit/devtools/webconsole/test/test_file_uri.html | an unexpected uncaught JS exception reported through window.onerror - NS_ERROR_FILE_IS_LOCKED

diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_782653_CSS_links_in_Style_Editor.js b/browser/devtools/webconsole/test/browser_webconsole_bug_782653_CSS_links_in_Style_Editor.js
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_782653_CSS_links_in_Style_Editor.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_bug_782653_CSS_links_in_Style_Editor.js
@@ -39,27 +39,26 @@ function testViewSource(hud) {
   });
 }
 
 function checkStyleEditorForSheetAndLine(aStyleSheetIndex, aLine, aCallback) {
 
   function doCheck(aEditor) {
     function checkLineAndCallback() {
       info("In checkLineAndCallback()");
-      ok(aEditor.sourceEditor != null, "sourceeditor not null");
-      ok(aEditor.sourceEditor.getCaretPosition() != null, "position not null");
-      ok(aEditor.sourceEditor.getCaretPosition().line != null, "line not null");
+      ok(aEditor.sourceEditor, "sourceeditor not null");
       is(aEditor.sourceEditor.getCaretPosition().line, aLine,
          "Correct line is selected");
       if (aCallback) {
         aCallback();
       }
     }
 
     ok(aEditor, "aEditor is defined.");
+    aEditor.focus();
 
     // Source-editor is already loaded, check the current line of caret.
     if (aEditor.sourceEditor) {
       if (aEditor.styleSheetIndex != SEC.selectedStyleSheetIndex) {
         ok(false, "Correct Style Sheet was not selected.");
         if (aCallback) {
           executeSoon(aCallback);
         }
@@ -73,17 +72,17 @@ function checkStyleEditorForSheetAndLine
     }
 
     info("source editor is not loaded, waiting for it.");
     // Wait for source editor to be loaded.
     aEditor.addActionListener({
       onAttach: function onAttach() {
         info("on attach happened");
         aEditor.removeActionListener(this);
-        info("this removed");
+        info("action listener removed");
         executeSoon(function() {
           if (aEditor.styleSheetIndex != SEC.selectedStyleSheetIndex) {
             ok(false, "Correct Style Sheet was not selected.");
             if (aCallback) {
               aCallback();
             }
             return;
           }
@@ -111,17 +110,17 @@ function checkStyleEditorForSheetAndLine
     });
   }
   // Execute soon so that selectedStyleSheetIndex has correct value.
   else {
     info("Editor is defined, opening the desired editor for now and " +
          "checking later if it is correct");
     for (let aEditor of SEC.editors) {
       if (aEditor.styleSheetIndex == aStyleSheetIndex) {
-        doCheck(aEditor);
+        executeSoon(doCheck.bind(null, aEditor));
         break;
       }
     }
   }
 }
 
 let observer = {
   observe: function(aSubject, aTopic, aData) {
@@ -133,24 +132,20 @@ let observer = {
          "the location node");
 
     executeSoon(function() {
       styleEditorWin = window.StyleEditor
                              .StyleEditorManager
                              .getEditorForWindow(content.window);
       ok(styleEditorWin, "Style Editor Window is defined");
       waitForFocus(function() {
-        //styleEditorWin.addEventListener("load", function onStyleEditorWinLoad() {
-          //styleEditorWin.removeEventListener("load", onStyleEditorWinLoad);
-
-          checkStyleEditorForSheetAndLine(0, 7, function() {
-            checkStyleEditorForSheetAndLine(1, 6, function() {
-              window.StyleEditor.toggle();
-              styleEditorWin = null;
-              finishTest();
-            });
-            EventUtils.sendMouseEvent({ type: "click" }, nodes[1]);
+        checkStyleEditorForSheetAndLine(0, 7, function() {
+          checkStyleEditorForSheetAndLine(1, 6, function() {
+            window.StyleEditor.toggle();
+            nodes = styleEditorWin = null;
+            finishTest();
           });
-        //});
+          EventUtils.sendMouseEvent({ type: "click" }, nodes[1]);
+        });
       }, styleEditorWin);
     });
   }
 };
diff --git a/toolkit/devtools/webconsole/test/test_file_uri.html b/toolkit/devtools/webconsole/test/test_file_uri.html
--- a/toolkit/devtools/webconsole/test/test_file_uri.html
+++ b/toolkit/devtools/webconsole/test/test_file_uri.html
@@ -74,17 +74,23 @@ function onFileActivity(aType, aPacket)
 
   testEnd();
 }
 
 function testEnd()
 {
   if (gTmpFile) {
     SimpleTest.executeSoon(function() {
-      gTmpFile.remove(false);
+      try {
+        gTmpFile.remove(false);
+      }
+      catch (ex if (ex.name == "NS_ERROR_FILE_IS_LOCKED")) {
+        // Sometimes remove() throws because the file is not unlocked soon
+        // enough.
+      }
       gTmpFile = null;
     });
   }
 
   if (gState) {
     closeDebugger(gState, function() {
       gState = null;
       SimpleTest.finish();
