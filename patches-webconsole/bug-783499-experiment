# HG changeset patch
# Parent 221afc33b5b97fcadb42740e2cb9393c20a05bc0
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1361294312 -7200

diff --git a/toolkit/devtools/webconsole/dbg-webconsole-actors.js b/toolkit/devtools/webconsole/dbg-webconsole-actors.js
--- a/toolkit/devtools/webconsole/dbg-webconsole-actors.js
+++ b/toolkit/devtools/webconsole/dbg-webconsole-actors.js
@@ -594,18 +594,19 @@ WebConsoleActor.prototype =
   {
     let windowId = WebConsoleUtils.getInnerWindowId(this.window);
     if (this._globalWindowId == windowId) {
       return;
     }
 
     this._globalWindowId = windowId;
 
-    this._dbgWindow = this.dbg.addDebuggee(this.window);
-    this.dbg.removeDebuggee(this.window);
+    let win = WebConsoleUtils.unwrap(this.window);
+    this._dbgWindow = this.dbg.addDebuggee(win);
+    this.dbg.removeDebuggee(win);
 
     // Update the JSTerm helpers.
     this._jstermHelpers = this._getJSTermHelpers(this._dbgWindow);
   },
 
   /**
    * Create an object with the API we expose to the JSTermHelpers constructor.
    * This object inherits properties and methods from the Web Console actor.
@@ -705,34 +706,34 @@ WebConsoleActor.prototype =
                        aOptions.frameActor);
       }
     }
 
     if (frame) {
       // Avoid having bindings from a different Debugger. The Debugger.Frame
       // comes from the jsdebugger's Debugger instance.
       let dbg = frameActor.threadActor.dbg;
-      let dbgWindow = dbg.addDebuggee(this.window);
+      let dbgWindow = dbg.addDebuggee(WebConsoleUtils.unwrap(this.window));
       helpers = this._getJSTermHelpers(dbgWindow);
 
       let env = frame.environment;
       if (env) {
         found$ = !!env.find("$");
         found$$ = !!env.find("$$");
       }
     }
     else {
       found$ = !!this._dbgWindow.getOwnPropertyDescriptor("$");
       found$$ = !!this._dbgWindow.getOwnPropertyDescriptor("$$");
     }
 
     let bindings = helpers.sandbox;
     if (bindSelf) {
       let jsObj = bindSelf.unsafeDereference();
-      bindings._self = helpers.makeDebuggeeValue(jsObj);
+      bindings._self = helpers.makeDebuggeeValue(WebConsoleUtils.unwrap(jsObj));
     }
 
     let $ = null, $$ = null;
     if (found$) {
       $ = bindings.$;
       delete bindings.$;
     }
     if (found$$) {
@@ -899,17 +900,17 @@ WebConsoleActor.prototype =
   prepareConsoleMessageForRemote:
   function WCA_prepareConsoleMessageForRemote(aMessage)
   {
     let result = WebConsoleUtils.cloneObject(aMessage);
     delete result.wrappedJSObject;
 
     result.arguments = Array.map(aMessage.arguments || [],
       function(aObj) {
-        let dbgObj = this.makeDebuggeeValue(aObj);
+        let dbgObj = this.makeDebuggeeValue(WebConsoleUtils.unwrap(aObj));
         return this.createValueGrip(dbgObj);
       }, this);
 
     return result;
   },
 
   /**
    * Find the XUL window that owns the content window.
diff --git a/toolkit/devtools/webconsole/test/test_object_actor.html b/toolkit/devtools/webconsole/test/test_object_actor.html
--- a/toolkit/devtools/webconsole/test/test_object_actor.html
+++ b/toolkit/devtools/webconsole/test/test_object_actor.html
@@ -10,61 +10,37 @@
 </head>
 <body>
 <p>Test for the object actor</p>
 
 <script class="testbody" type="text/javascript;version=1.8">
 SimpleTest.waitForExplicitFinish();
 
 let expectedProps = [];
+let longString = null;
 
 function startTest()
 {
   removeEventListener("load", startTest);
 
-  attachConsole(["ConsoleAPI"], onAttach, true);
+  attachConsole(["ConsoleAPI"], onAttach);
 }
 
 function onAttach(aState, aResponse)
 {
   onConsoleCall = onConsoleCall.bind(null, aState);
   aState.dbgClient.addListener("consoleAPICall", onConsoleCall);
 
-  let longString = (new Array(DebuggerServer.LONG_STRING_LENGTH + 3)).join("\u0629");
-
-  window.foobarObject = Object.create(null);
-  foobarObject.tamarbuta = longString;
-  foobarObject.foo = 1;
-  foobarObject.foobar = "hello";
-  foobarObject.foobaz = document;
-  foobarObject.omg = null;
-  foobarObject.testfoo = false;
-  foobarObject.notInspectable = {};
-  foobarObject.omgfn = function _omgfn() {
-    return "myResult";
-  };
-  foobarObject.abArray = ["a", "b"];
-
-  Object.defineProperty(foobarObject, "getterAndSetter", {
-    enumerable: true,
-    get: function fooGet() { return "foo"; },
-    set: function fooSet() { 1+2 },
-  });
-
-  foobarObject.longStringObj = {
-    toSource: function() longString,
-    toString: function() longString,
-    boom: "explode",
-  };
-
-  console.log("hello", foobarObject);
-
   // TODO: due to the design of the debugger all of the objects are proxies, and
   // the "class" checks below fail. What should we do here?
 
+  longString = (new Array(DebuggerServer.LONG_STRING_LENGTH + 3)).join("\u0629");
+
+  window.wrappedJSObject.eval("(" + createFoobarObject + ")()");
+
   expectedProps = {
     "abArray": {
       value: {
         type: "object",
         class: "Array",
         actor: /[a-z]/,
       },
     },
@@ -129,16 +105,46 @@ function onAttach(aState, aResponse)
       },
     },
     "testfoo": {
       value: false,
     },
   };
 }
 
+function createFoobarObject()
+{
+  window.foobarObject = Object.create(null);
+  foobarObject.tamarbuta = longString;
+  foobarObject.foo = 1;
+  foobarObject.foobar = "hello";
+  foobarObject.foobaz = document;
+  foobarObject.omg = null;
+  foobarObject.testfoo = false;
+  foobarObject.notInspectable = {};
+  foobarObject.omgfn = function _omgfn() {
+    return "myResult";
+  };
+  foobarObject.abArray = ["a", "b"];
+
+  Object.defineProperty(foobarObject, "getterAndSetter", {
+    enumerable: true,
+    get: function fooGet() { return "foo"; },
+    set: function fooSet() { 1+2 },
+  });
+
+  foobarObject.longStringObj = {
+    toSource: function() longString,
+    toString: function() longString,
+    boom: "explode",
+  };
+
+  console.log("hello", foobarObject);
+}
+
 function onConsoleCall(aState, aType, aPacket)
 {
   is(aPacket.from, aState.actor, "console API call actor");
 
   info("checking the console API call packet");
 
   checkConsoleAPICall(aPacket.message, {
     level: "log",
