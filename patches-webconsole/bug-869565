# HG changeset patch
# Parent b3a6bee35493d41d82c4159f5be649b83de3e7b5
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1368039297 -10800

Bug 869565 - Fix strict errors and warnings in the browser console; r=me

diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -966,17 +966,17 @@ WebConsoleFrame.prototype = {
   },
 
   /**
    * Logs a message to the Web Console that originates from the Web Console
    * server.
    *
    * @param object aMessage
    *        The message received from the server.
-   * @return nsIDOMElement|undefined
+   * @return nsIDOMElement|null
    *         The message element to display in the Web Console output.
    */
   logConsoleAPIMessage: function WCF_logConsoleAPIMessage(aMessage)
   {
     let body = null;
     let clipboardText = null;
     let sourceURL = aMessage.filename;
     let sourceLine = aMessage.lineNumber;
@@ -1041,41 +1041,41 @@ WebConsoleFrame.prototype = {
         if (this.groupDepth > 0) {
           this.groupDepth--;
         }
         break;
 
       case "time": {
         let timer = aMessage.timer;
         if (!timer) {
-          return;
+          return null;
         }
         if (timer.error) {
           Cu.reportError(l10n.getStr(timer.error));
-          return;
+          return null;
         }
         body = l10n.getFormatStr("timerStarted", [timer.name]);
         clipboardText = body;
         break;
       }
 
       case "timeEnd": {
         let timer = aMessage.timer;
         if (!timer) {
-          return;
+          return null;
         }
         let duration = Math.round(timer.duration * 100) / 100;
         body = l10n.getFormatStr("timeEnd", [timer.name, duration]);
         clipboardText = body;
         break;
       }
 
       default:
         Cu.reportError("Unknown Console API log level: " + level);
-        return;
+        return null;
     }
 
     // Release object actors for arguments coming from console API methods that
     // we ignore their arguments.
     switch (level) {
       case "group":
       case "groupCollapsed":
       case "groupEnd":
@@ -1084,17 +1084,17 @@ WebConsoleFrame.prototype = {
       case "timeEnd":
         for (let actor of objectActors) {
           this._releaseObject(actor);
         }
         objectActors.clear();
     }
 
     if (level == "groupEnd") {
-      return; // no need to continue
+      return null; // no need to continue
     }
 
     let node = this.createMessageNode(CATEGORY_WEBDEV, LEVELS[level], body,
                                       sourceURL, sourceLine, clipboardText,
                                       level, aMessage.timeStamp);
 
     if (objectActors.size > 0) {
       node._objectActors = objectActors;
@@ -1188,24 +1188,24 @@ WebConsoleFrame.prototype = {
     this.outputMessage(category, this.reportPageError, [category, aPageError]);
   },
 
   /**
    * Log network event.
    *
    * @param object aActorId
    *        The network event actor ID to log.
-   * @return nsIDOMElement|undefined
+   * @return nsIDOMElement|null
    *         The message element to display in the Web Console output.
    */
   logNetEvent: function WCF_logNetEvent(aActorId)
   {
     let networkInfo = this._networkRequests[aActorId];
     if (!networkInfo) {
-      return;
+      return null;
     }
 
     let request = networkInfo.request;
 
     let msgNode = this.document.createElementNS(XUL_NS, "hbox");
 
     let methodNode = this.document.createElementNS(XUL_NS, "label");
     methodNode.setAttribute("value", request.method);
@@ -2231,17 +2231,17 @@ WebConsoleFrame.prototype = {
       }
 
       let text = VariablesView.getString(aItem);
       let inspectable = !VariablesView.isPrimitive({ value: aItem });
 
       if (aItem && typeof aItem != "object" || !inspectable) {
         aContainer.appendChild(this.document.createTextNode(text));
 
-        if (aItem.type == "longString") {
+        if (aItem.type && aItem.type == "longString") {
           let ellipsis = this.document.createElement("description");
           ellipsis.classList.add("hud-clickable");
           ellipsis.classList.add("longStringEllipsis");
           ellipsis.textContent = l10n.getStr("longStringEllipsis");
 
           let formatter = function(s) '"' + s + '"';
 
           this._addMessageLinkCallback(ellipsis,
@@ -4417,26 +4417,27 @@ CommandController.prototype = {
     switch (aCommand) {
       case "cmd_copy":
         // Only enable "copy" if nodes are selected.
         return this.owner.outputNode.selectedCount > 0;
       case "consoleCmd_openURL":
       case "consoleCmd_copyURL": {
         // Only enable URL-related actions if node is Net Activity.
         let selectedItem = this.owner.outputNode.selectedItem;
-        return selectedItem && selectedItem.url;
+        return selectedItem && "url" in selectedItem;
       }
       case "cmd_fontSizeEnlarge":
       case "cmd_fontSizeReduce":
       case "cmd_fontSizeReset":
       case "cmd_selectAll":
         return true;
       case "cmd_close":
         return this.owner.owner._browserConsole;
     }
+    return false;
   },
 
   doCommand: function CommandController_doCommand(aCommand)
   {
     switch (aCommand) {
       case "cmd_copy":
         this.copy();
         break;
