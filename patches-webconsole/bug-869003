# HG changeset patch
# Parent 9ae9cc383d0ff2ad7cb44ed35a366ab8508890b9
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1368112851 -10800

Bug 869003 - Cannot inspect objects from cross-domain iframes; r=robcee

diff --git a/browser/devtools/webconsole/test/Makefile.in b/browser/devtools/webconsole/test/Makefile.in
--- a/browser/devtools/webconsole/test/Makefile.in
+++ b/browser/devtools/webconsole/test/Makefile.in
@@ -121,16 +121,17 @@ MOCHITEST_BROWSER_FILES = \
 	browser_console_variables_view_while_debugging.js \
 	browser_console.js \
 	browser_longstring_hang.js \
 	browser_console_consolejsm_output.js \
 	browser_webconsole_bug_837351_securityerrors.js \
 	browser_bug_865871_variables_view_close_on_esc_key.js \
 	browser_bug_865288_repeat_different_objects.js \
 	browser_jsterm_inspect.js \
+	browser_bug_869003_inspect_cross_domain_object.js \
 	head.js \
 	$(NULL)
 
 ifeq ($(OS_ARCH), Darwin)
 MOCHITEST_BROWSER_FILES += \
 	browser_webconsole_bug_804845_ctrl_key_nav.js \
         $(NULL)
 endif
@@ -224,11 +225,13 @@ MOCHITEST_BROWSER_FILES += \
 	test-bug-766001-console-log.js \
 	test-bug-766001-js-console-links.html \
 	test-bug-766001-js-errors.js \
 	test-bug-821877-csperrors.html \
 	test-bug-821877-csperrors.html^headers^ \
 	test-eval-in-stackframe.html \
 	test-bug-859170-longstring-hang.html \
 	test-bug-837351-security-errors.html \
+	test-bug-869003-top-window.html \
+	test-bug-869003-iframe.html \
 	$(NULL)
 
 include $(topsrcdir)/config/rules.mk
diff --git a/browser/devtools/webconsole/test/browser_bug_869003_inspect_cross_domain_object.js b/browser/devtools/webconsole/test/browser_bug_869003_inspect_cross_domain_object.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/webconsole/test/browser_bug_869003_inspect_cross_domain_object.js
@@ -0,0 +1,89 @@
+/*
+ * Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/
+ */
+
+// Check that users can inspect objects logged from cross-domain iframes -
+// bug 869003.
+
+const TEST_URI = "http://example.com/browser/browser/devtools/webconsole/test/test-bug-869003-top-window.html";
+
+let gWebConsole, gJSTerm, gVariablesView;
+
+function test()
+{
+  addTab("data:text/html;charset=utf8,<p>hello");
+  browser.addEventListener("load", function onLoad() {
+    browser.removeEventListener("load", onLoad, true);
+    openConsole(null, consoleOpened);
+  }, true);
+}
+
+function consoleOpened(hud)
+{
+  gWebConsole = hud;
+  gJSTerm = hud.jsterm;
+  content.location = TEST_URI;
+
+  waitForMessages({
+    webconsole: hud,
+    messages: [{
+      name: "console.log message",
+      text: "foobar",
+      category: CATEGORY_WEBDEV,
+      severity: SEVERITY_LOG,
+      objects: true,
+    }],
+  }).then(onConsoleMessage);
+}
+
+function onConsoleMessage(aResults)
+{
+  let clickable = aResults[0].clickableElements[0];
+  ok(clickable, "clickable object found");
+  isnot(clickable.textContent.indexOf("[object Object]"), -1,
+        "message text check");
+
+  gJSTerm.once("variablesview-fetched", onObjFetch);
+
+  EventUtils.synthesizeMouse(clickable, 2, 2, {}, gWebConsole.iframeWindow)
+}
+
+function onObjFetch(aEvent, aVar)
+{
+  gVariablesView = aVar._variablesView;
+  ok(gVariablesView, "variables view object");
+
+  findVariableViewProperties(aVar, [
+    { name: "hello", value: "world!" },
+    { name: "bug", value: 869003 },
+  ], { webconsole: gWebConsole }).then(onPropFound);
+}
+
+function onPropFound(aResults)
+{
+  let prop = aResults[0].matchedProp;
+  ok(prop, "matched the |hello| property in the variables view");
+
+  // Check that property value updates work.
+  updateVariablesViewProperty({
+    property: prop,
+    field: "value",
+    string: "'omgtest'",
+    webconsole: gWebConsole,
+    callback: onFetchAfterUpdate,
+  });
+}
+
+function onFetchAfterUpdate(aEvent, aVar)
+{
+  info("onFetchAfterUpdate");
+
+  findVariableViewProperties(aVar, [
+    { name: "hello", value: "omgtest" },
+    { name: "bug", value: 869003 },
+  ], { webconsole: gWebConsole }).then(() => {
+    gWebConsole = gJSTerm = gVariablesView = null;
+    finishTest();
+  });
+}
diff --git a/browser/devtools/webconsole/test/test-bug-869003-iframe.html b/browser/devtools/webconsole/test/test-bug-869003-iframe.html
new file mode 100644
--- /dev/null
+++ b/browser/devtools/webconsole/test/test-bug-869003-iframe.html
@@ -0,0 +1,20 @@
+<!DOCTYPE HTML>
+<html lang="en">
+  <head>
+    <meta charset="utf-8">
+    <title>Web Console test for bug 869003</title>
+    <!-- Any copyright is dedicated to the Public Domain.
+       - http://creativecommons.org/publicdomain/zero/1.0/ -->
+    <script type="text/javascript"><!--
+      window.onload = function testConsoleLogging()
+      {
+        var o = { hello: "world!", bug: 869003 };
+        console.log("foobar", o);
+      };
+    // --></script>
+  </head>
+  <body>
+    <p>Make sure users can inspect objects from cross-domain iframes.</p>
+    <p>Iframe window.</p>
+  </body>
+</html>
diff --git a/browser/devtools/webconsole/test/test-bug-869003-top-window.html b/browser/devtools/webconsole/test/test-bug-869003-top-window.html
new file mode 100644
--- /dev/null
+++ b/browser/devtools/webconsole/test/test-bug-869003-top-window.html
@@ -0,0 +1,14 @@
+<!DOCTYPE HTML>
+<html lang="en">
+  <head>
+    <meta charset="utf-8">
+    <title>Web Console test for bug 869003</title>
+    <!-- Any copyright is dedicated to the Public Domain.
+       - http://creativecommons.org/publicdomain/zero/1.0/ -->
+  </head>
+  <body>
+    <p>Make sure users can inspect objects from cross-domain iframes.</p>
+    <p>Top window.</p>
+    <iframe src="http://example.org/browser/browser/devtools/webconsole/test/test-bug-869003-iframe.html"></iframe>
+  </body>
+</html>
diff --git a/toolkit/devtools/webconsole/dbg-webconsole-actors.js b/toolkit/devtools/webconsole/dbg-webconsole-actors.js
--- a/toolkit/devtools/webconsole/dbg-webconsole-actors.js
+++ b/toolkit/devtools/webconsole/dbg-webconsole-actors.js
@@ -68,19 +68,24 @@ function WebConsoleActor(aConnection, aP
   }
 
   this._actorPool = new ActorPool(this.conn);
   this.conn.addActorPool(this._actorPool);
 
   this._prefs = {};
 
   this.dbg = new Debugger();
-  this._createGlobal();
 
   this._protoChains = new Map();
+  this._dbgGlobals = new Map();
+  this._getDebuggerGlobal(this.window);
+
+  this._onObserverNotification = this._onObserverNotification.bind(this);
+  Services.obs.addObserver(this._onObserverNotification,
+                           "inner-window-destroyed", false);
 }
 
 WebConsoleActor.prototype =
 {
   /**
    * Debugger instance.
    *
    * @see jsdebugger.jsm
@@ -105,33 +110,34 @@ WebConsoleActor.prototype =
   /**
    * Web Console-related preferences.
    * @private
    * @type object
    */
   _prefs: null,
 
   /**
-   * Tells the current inner window of the window of |this._dbgWindow|. When the
-   * page is navigated, we recreate the debugger object.
+   * Tells the current inner ID of |this.window|. When the page is navigated, we
+   * need to recreate the jsterm helpers.
    * @private
-   * @type object
+   * @type number
    */
   _globalWindowId: 0,
 
   /**
-   * The Debugger.Object that wraps the content window.
+   * Holds a map between inner window IDs and Debugger.Objects for the window
+   * objects.
    * @private
-   * @type object
+   * @type Map
    */
-  _dbgWindow: null,
+  _dbgGlobals: null,
 
   /**
-   * Object that holds the API we give to the JSTermHelpers constructor. This is
-   * where the JSTerm helper functions are added.
+   * Object that holds the JSTerm API, the helper functions, for the default
+   * window object.
    *
    * @see this._getJSTermHelpers()
    * @private
    * @type object
    */
   _jstermHelpers: null,
 
   /**
@@ -217,21 +223,24 @@ WebConsoleActor.prototype =
       this.networkMonitor.destroy();
       this.networkMonitor = null;
     }
     if (this.consoleProgressListener) {
       this.consoleProgressListener.destroy();
       this.consoleProgressListener = null;
     }
     this.conn.removeActorPool(this._actorPool);
+    Services.obs.removeObserver(this._onObserverNotification,
+                                "inner-window-destroyed");
     this._actorPool = null;
     this._protoChains.clear();
+    this._dbgGlobals.clear();
+    this._jstermHelpers = null;
     this.dbg.enabled = false;
     this.dbg = null;
-    this._dbgWindow = null;
     this._globalWindowId = 0;
     this.conn = this._window = null;
   },
 
   /**
    * Create a grip for the given value.
    *
    * @param mixed aValue
@@ -242,22 +251,44 @@ WebConsoleActor.prototype =
     return this._createValueGrip(aValue, this._actorPool);
   },
 
   /**
    * Make a debuggee value for the given value.
    *
    * @param mixed aValue
    *        The value you want to get a debuggee value for.
+   * @param boolean aUseObjectGlobal
+   *        If |true| the object global is determined and added as a debuggee,
+   *        otherwise |this.window| is used when makeDebuggeeValue() is invoked.
    * @return object
    *         Debuggee value for |aValue|.
    */
-  makeDebuggeeValue: function WCA_makeDebuggeeValue(aValue)
+  makeDebuggeeValue: function WCA_makeDebuggeeValue(aValue, aUseObjectGlobal)
   {
-    return this._dbgWindow.makeDebuggeeValue(aValue);
+    let global = this.window;
+    if (aUseObjectGlobal && typeof aValue == "object") {
+      try {
+        global = Cu.getGlobalForObject(aValue);
+      }
+      catch (ex) {
+        // The above can throw an exception if aValue is not an actual object.
+      }
+    }
+    let dbgGlobal = null;
+    try {
+      dbgGlobal = this._getDebuggerGlobal(global);
+    }
+    catch (ex) {
+      // The above call can throw in addDebuggee() if the given global object
+      // is already in the stackframe of code that is executing now. Console.jsm
+      // and the Browser Console can cause this case.
+      dbgGlobal = this._getDebuggerGlobal(this.window);
+    }
+    return dbgGlobal.makeDebuggeeValue(aValue);
   },
 
   /**
    * Create a grip for the given object.
    *
    * @param object aObject
    *        The object you want.
    * @param object aPool
@@ -499,18 +530,17 @@ WebConsoleActor.prototype =
     let timestamp = Date.now();
 
     let evalOptions = {
       bindObjectActor: aRequest.bindObjectActor,
       frameActor: aRequest.frameActor,
     };
     let evalInfo = this.evalWithDebugger(input, evalOptions);
     let evalResult = evalInfo.result;
-    let helperResult = this._jstermHelpers.helperResult;
-    delete this._jstermHelpers.helperResult;
+    let helperResult = evalInfo.helperResult;
 
     let result, error, errorMessage;
     if (evalResult) {
       if ("return" in evalResult) {
         result = evalResult.return;
       }
       else if ("yield" in evalResult) {
         result = evalResult.yield;
@@ -582,90 +612,101 @@ WebConsoleActor.prototype =
     return { updated: Object.keys(aRequest.preferences) };
   },
 
   //////////////////
   // End of request handlers.
   //////////////////
 
   /**
-   * Create the Debugger.Object for the current window.
+   * Get the Debugger.Object for the given global object (usually a window
+   * object).
+   *
    * @private
+   * @param object aGlobal
+   *        The global object for which you want a Debugger.Object.
+   * @return Debugger.Object
+   *         The Debugger.Object for the given global object.
    */
-  _createGlobal: function WCA__createGlobal()
+  _getDebuggerGlobal: function WCA__getDebuggerGlobal(aGlobal)
   {
-    let windowId = WebConsoleUtils.getInnerWindowId(this.window);
-    if (this._globalWindowId == windowId) {
-      return;
+    let windowId = WebConsoleUtils.getInnerWindowId(aGlobal);
+    if (!this._dbgGlobals.has(windowId)) {
+      let dbgGlobal = this.dbg.addDebuggee(aGlobal);
+      this.dbg.removeDebuggee(aGlobal);
+      this._dbgGlobals.set(windowId, dbgGlobal);
     }
-
-    this._globalWindowId = windowId;
-
-    this._dbgWindow = this.dbg.addDebuggee(this.window);
-    this.dbg.removeDebuggee(this.window);
-
-    // Update the JSTerm helpers.
-    this._jstermHelpers = this._getJSTermHelpers(this._dbgWindow);
+    return this._dbgGlobals.get(windowId);
   },
 
   /**
-   * Create an object with the API we expose to the JSTermHelpers constructor.
+   * Create an object with the API we expose to the Web Console during
+   * JavaScript evaluation.
    * This object inherits properties and methods from the Web Console actor.
    *
    * @private
-   * @param object aDebuggerObject
+   * @param object aDebuggerGlobal
    *        A Debugger.Object that wraps a content global. This is used for the
    *        JSTerm helpers.
    * @return object
+   *         The same object as |this|, but with an added |sandbox| property.
+   *         The sandbox holds methods and properties that can be used as
+   *         bindings during JS evaluation.
    */
-  _getJSTermHelpers: function WCA__getJSTermHelpers(aDebuggerObject)
+  _getJSTermHelpers: function WCA__getJSTermHelpers(aDebuggerGlobal)
   {
     let helpers = Object.create(this);
     helpers.sandbox = Object.create(null);
-    helpers._dbgWindow = aDebuggerObject;
     JSTermHelpers(helpers);
 
     // Make sure the helpers can be used during eval.
     for (let name in helpers.sandbox) {
       let desc = Object.getOwnPropertyDescriptor(helpers.sandbox, name);
       if (desc.get || desc.set) {
         continue;
       }
-      helpers.sandbox[name] = helpers.makeDebuggeeValue(desc.value);
+      helpers.sandbox[name] = aDebuggerGlobal.makeDebuggeeValue(desc.value);
     }
     return helpers;
   },
 
   /**
    * Evaluates a string using the debugger API.
    *
-   * To allow the variables view to update properties from the web console we
+   * To allow the variables view to update properties from the Web Console we
    * provide the "bindObjectActor" mechanism: the Web Console tells the
    * ObjectActor ID for which it desires to evaluate an expression. The
    * Debugger.Object pointed at by the actor ID is bound such that it is
    * available during expression evaluation (evalInGlobalWithBindings()).
    *
    * Example:
    *   _self['foobar'] = 'test'
    * where |_self| refers to the desired object.
    *
    * The |frameActor| property allows the Web Console client to provide the
    * frame actor ID, such that the expression can be evaluated in the
    * user-selected stack frame.
    *
-   * For the above to work we need the debugger and the web console to share
+   * For the above to work we need the debugger and the Web Console to share
    * a connection, otherwise the Web Console actor will not find the frame
    * actor.
    *
    * The Debugger.Frame comes from the jsdebugger's Debugger instance, which
    * is different from the Web Console's Debugger instance. This means that
-   * for evaluation to work, we need to create a new instance for  the jsterm
+   * for evaluation to work, we need to create a new instance for the jsterm
    * helpers - they need to be Debugger.Objects coming from the jsdebugger's
    * Debugger instance.
    *
+   * When |bindObjectActor| is used objects can come from different iframes,
+   * from different domains. To avoid permission-related errors when objects
+   * come from a different window, we also determine the object's own global,
+   * such that evaluation happens in the context of that global. This means that
+   * evaluation will happen in the object's iframe, rather than the top level
+   * window.
+   *
    * @param string aString
    *        String to evaluate.
    * @param object [aOptions]
    *        Options for evaluation:
    *        - bindObjectActor: the ObjectActor ID to use for evaluation.
    *          |evalWithBindings()| will be called with one additional binding:
    *          |_self| which will point to the Debugger.Object of the given
    *          ObjectActor.
@@ -673,116 +714,138 @@ WebConsoleActor.prototype =
    *        debugger frame is used for evaluation, instead of the global window.
    * @return object
    *         An object that holds the following properties:
    *         - dbg: the debugger where the string was evaluated.
    *         - frame: (optional) the frame where the string was evaluated.
    *         - window: the Debugger.Object for the global where the string was
    *         evaluated.
    *         - result: the result of the evaluation.
+   *         - helperResult: any result coming from a JSTerm helper function.
    */
   evalWithDebugger: function WCA_evalWithDebugger(aString, aOptions = {})
   {
-    this._createGlobal();
-
     // The help function needs to be easy to guess, so we make the () optional.
     if (aString.trim() == "help" || aString.trim() == "?") {
       aString = "help()";
     }
 
     let bindSelf = null;
 
     if (aOptions.bindObjectActor) {
       let objActor = this.getActorByID(aOptions.bindObjectActor);
       if (objActor) {
         bindSelf = objActor.obj;
       }
     }
 
-    let helpers = this._jstermHelpers;
-    let found$ = false, found$$ = false;
     let frame = null, frameActor = null;
     if (aOptions.frameActor) {
       frameActor = this.conn.getActor(aOptions.frameActor);
       if (frameActor) {
         frame = frameActor.frame;
       }
       else {
         Cu.reportError("Web Console Actor: the frame actor was not found: " +
                        aOptions.frameActor);
       }
     }
 
     let dbg = this.dbg;
-    let dbgWindow = this._dbgWindow;
+    let dbgWindow = null;
+    let helpers = null;
+    let found$ = false, found$$ = false;
 
+    // Determine which debugger to use, depending on the presence of the
+    // stackframe.
     if (frame) {
       // Avoid having bindings from a different Debugger. The Debugger.Frame
       // comes from the jsdebugger's Debugger instance.
       dbg = frameActor.threadActor.dbg;
       dbgWindow = dbg.addDebuggee(this.window);
       helpers = this._getJSTermHelpers(dbgWindow);
 
       let env = frame.environment;
       if (env) {
         found$ = !!env.find("$");
         found$$ = !!env.find("$$");
       }
     }
     else {
-      found$ = !!this._dbgWindow.getOwnPropertyDescriptor("$");
-      found$$ = !!this._dbgWindow.getOwnPropertyDescriptor("$$");
+      // Use the Web Console debugger object.
+      dbgWindow = this._getDebuggerGlobal(this.window);
+
+      let windowId = WebConsoleUtils.getInnerWindowId(this.window);
+      if (this._globalWindowId != windowId) {
+        this._jstermHelpers = null;
+        this._globalWindowId = windowId;
+      }
+      if (!this._jstermHelpers) {
+        this._jstermHelpers = this._getJSTermHelpers(dbgWindow);
+      }
+
+      helpers = this._jstermHelpers;
+      found$ = !!dbgWindow.getOwnPropertyDescriptor("$");
+      found$$ = !!dbgWindow.getOwnPropertyDescriptor("$$");
     }
 
     let bindings = helpers.sandbox;
     if (bindSelf) {
+      // Determine the global of the given JavaScript object.
       let jsObj = bindSelf.unsafeDereference();
-      bindings._self = helpers.makeDebuggeeValue(jsObj);
+      let global = Cu.getGlobalForObject(jsObj);
+
+      if (global != this.window) {
+        dbgWindow = dbg.addDebuggee(global);
+        if (dbg == this.dbg) {
+          dbg.removeDebuggee(global);
+        }
+      }
+
+      bindings._self = dbgWindow.makeDebuggeeValue(jsObj);
     }
 
     let $ = null, $$ = null;
     if (found$) {
       $ = bindings.$;
       delete bindings.$;
     }
     if (found$$) {
       $$ = bindings.$$;
       delete bindings.$$;
     }
 
-    helpers.helperResult = null;
     helpers.evalInput = aString;
 
     let result;
     if (frame) {
       result = frame.evalWithBindings(aString, bindings);
     }
     else {
-      result = this._dbgWindow.evalInGlobalWithBindings(aString, bindings);
+      result = dbgWindow.evalInGlobalWithBindings(aString, bindings);
     }
 
+    let helperResult = helpers.helperResult;
     delete helpers.evalInput;
-    if (helpers != this._jstermHelpers) {
-      this._jstermHelpers.helperResult = helpers.helperResult;
-      delete helpers.helperResult;
-    }
+    delete helpers.helperResult;
 
     if ($) {
       bindings.$ = $;
     }
     if ($$) {
       bindings.$$ = $$;
     }
 
     if (bindings._self) {
       delete bindings._self;
     }
 
     return {
       result: result,
+      helperResult: helperResult,
       dbg: dbg,
       frame: frame,
       window: dbgWindow,
     };
   },
 
   //////////////////
   // Event handlers for various listeners.
@@ -910,21 +973,20 @@ WebConsoleActor.prototype =
    *         The object that can be sent to the remote client.
    */
   prepareConsoleMessageForRemote:
   function WCA_prepareConsoleMessageForRemote(aMessage)
   {
     let result = WebConsoleUtils.cloneObject(aMessage);
     delete result.wrappedJSObject;
 
-    result.arguments = Array.map(aMessage.arguments || [],
-      function(aObj) {
-        let dbgObj = this.makeDebuggeeValue(aObj);
-        return this.createValueGrip(dbgObj);
-      }, this);
+    result.arguments = Array.map(aMessage.arguments || [], (aObj) => {
+      let dbgObj = this.makeDebuggeeValue(aObj, true);
+      return this.createValueGrip(dbgObj);
+    });
 
     return result;
   },
 
   /**
    * Find the XUL window that owns the content window.
    *
    * @return Window
@@ -940,16 +1002,33 @@ WebConsoleActor.prototype =
     }
     catch (ex) {
       // The above can fail because chromeEventHandler is not available for all
       // kinds of |this.window|.
     }
 
     return window;
   },
+
+  /**
+   * Notification observer for the "inner-window-destroyed" topic. This function
+   * cleans up |this._dbgGlobals| when needed.
+   *
+   * @private
+   * @param object aSubject
+   *        Notification subject - in this case it is the inner window ID that
+   *        was destroyed.
+   */
+  _onObserverNotification: function WCA__onObserverNotification(aSubject)
+  {
+    let windowId = aSubject.QueryInterface(Ci.nsISupportsPRUint64).data;
+    if (this._dbgGlobals.has(windowId)) {
+      this._dbgGlobals.delete(windowId);
+    }
+  },
 };
 
 WebConsoleActor.prototype.requestTypes =
 {
   startListeners: WebConsoleActor.prototype.onStartListeners,
   stopListeners: WebConsoleActor.prototype.onStopListeners,
   getCachedMessages: WebConsoleActor.prototype.onGetCachedMessages,
   evaluateJS: WebConsoleActor.prototype.onEvaluateJS,
