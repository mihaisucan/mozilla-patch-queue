# HG changeset patch
# Parent 58bc53e378a1573077b0b5445fd7d43050439c51
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1372433126 -10800

Bug 887273 - web console: mixed content warnings show even when all logging is disabled; r=robcee; try: -b do -p linux,linux64,macosx64,win32,win64 -u mochitest-bc -t none

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -1122,31 +1122,33 @@ pref("devtools.theme", "light");
 pref("devtools.gcli.hideIntro", false);
 
 // How eager are we to show help: never=1, sometimes=2, always=3
 pref("devtools.gcli.eagerHelper", 2);
 
 // Remember the Web Console filters
 pref("devtools.webconsole.filter.network", true);
 pref("devtools.webconsole.filter.networkinfo", true);
+pref("devtools.webconsole.filter.netwarn", true);
 pref("devtools.webconsole.filter.csserror", true);
 pref("devtools.webconsole.filter.cssparser", true);
 pref("devtools.webconsole.filter.exception", true);
 pref("devtools.webconsole.filter.jswarn", true);
 pref("devtools.webconsole.filter.jslog", true);
 pref("devtools.webconsole.filter.error", true);
 pref("devtools.webconsole.filter.warn", true);
 pref("devtools.webconsole.filter.info", true);
 pref("devtools.webconsole.filter.log", true);
 pref("devtools.webconsole.filter.secerror", true);
 pref("devtools.webconsole.filter.secwarn", true);
 
 // Remember the Browser Console filters
 pref("devtools.browserconsole.filter.network", true);
 pref("devtools.browserconsole.filter.networkinfo", true);
+pref("devtools.browserconsole.filter.netwarn", true);
 pref("devtools.browserconsole.filter.csserror", true);
 pref("devtools.browserconsole.filter.cssparser", true);
 pref("devtools.browserconsole.filter.exception", true);
 pref("devtools.browserconsole.filter.jswarn", true);
 pref("devtools.browserconsole.filter.jslog", true);
 pref("devtools.browserconsole.filter.error", true);
 pref("devtools.browserconsole.filter.warn", true);
 pref("devtools.browserconsole.filter.info", true);
diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_622303_persistent_filters.js b/browser/devtools/webconsole/test/browser_webconsole_bug_622303_persistent_filters.js
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_622303_persistent_filters.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_bug_622303_persistent_filters.js
@@ -1,15 +1,16 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 let prefs = {
   "net": [
     "network",
-    "networkinfo"
+    "netwarn",
+    "networkinfo",
   ],
   "css": [
     "csserror",
     "cssparser"
   ],
   "js": [
     "exception",
     "jswarn",
diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_737873_mixedcontent.js b/browser/devtools/webconsole/test/browser_webconsole_bug_737873_mixedcontent.js
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_737873_mixedcontent.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_bug_737873_mixedcontent.js
@@ -7,90 +7,70 @@
  *  Tanvi Vyas <tanvi@mozilla.com>
  *
  * ***** END LICENSE BLOCK ***** */
 
 // Tests that the Web Console Mixed Content messages are displayed
 
 const TEST_HTTPS_URI = "https://example.com/browser/browser/devtools/webconsole/test/test-bug-737873-mixedcontent.html";
 
-var origBlockDisplay;
-var origBlockActive;
-
 function test() {
   addTab("data:text/html;charset=utf8,Web Console mixed content test");
   browser.addEventListener("load", onLoad, true);
 }
 
 function onLoad(aEvent) {
   browser.removeEventListener("load", onLoad, true);
-  origBlockDisplay = Services.prefs.getBoolPref("security.mixed_content.block_display_content");
-  origBlockActive = Services.prefs.getBoolPref("security.mixed_content.block_active_content")
   Services.prefs.setBoolPref("security.mixed_content.block_display_content", false);
   Services.prefs.setBoolPref("security.mixed_content.block_active_content", false);
   openConsole(null, testMixedContent);
 }
 
 function testMixedContent(hud) {
   content.location = TEST_HTTPS_URI;
-  var aOutputNode = hud.outputNode;
 
-  waitForSuccess(
-    {
-      name: "mixed content warning displayed successfully",
-      timeout: 20000,
-      validatorFn: function() {
-        return ( aOutputNode.querySelector(".webconsole-mixed-content") );
-      },
+  waitForMessages({
+    webconsole: hud,
+    messages: [{
+      text: "example.com",
+      category: CATEGORY_NETWORK,
+      severity: SEVERITY_WARNING,
+    }],
+  }).then((results) => {
+    dump("lolz\n");
+    let msg = [...results[0].matched][0];
+    ok(msg, "page load logged");
 
-      successFn: function() {
+    let mixedContent = msg.querySelector(".webconsole-mixed-content");
+    ok(mixedContent, ".webconsole-mixed-content element");
 
-        //tests on the urlnode
-        let node = aOutputNode.querySelector(".webconsole-mixed-content");
-        ok(testSeverity(node), "Severity type is SEVERITY_WARNING.");
+    let link = msg.querySelector(".webconsole-mixed-content-link");
+    ok(link, "mixed content link element");
+    is(link.value, "[Mixed Content]", "link text is accurate");
 
-        //tests on the warningNode
-        let warningNode = aOutputNode.querySelector(".webconsole-mixed-content-link");
-        is(warningNode.value, "[Mixed Content]", "Message text is accurate." );
-        testClickOpenNewTab(warningNode);
+    let oldOpenLink = hud.openLink;
+    let linkOpened = false;
+    hud.openLink = (url) => {
+      is(url, "https://developer.mozilla.org/en/Security/MixedContent",
+         "url opened");
+      linkOpened = true;
+    };
 
-        endTest();
-      },
+    EventUtils.synthesizeMouse(link, 2, 2, {}, link.ownerDocument.defaultView);
 
-      failureFn: endTest,
-    }
-  );
+    ok(linkOpened, "clicking the Mixed Content link opened a page");
 
+    hud.openLink = oldOpenLink;
+
+    ok(!msg.classList.contains("hud-filtered-by-type"), "message is not filtered");
+
+    hud.setFilterState("netwarn", false);
+
+    ok(msg.classList.contains("hud-filtered-by-type"), "message is filtered");
+
+    hud.setFilterState("netwarn", true);
+
+    Services.prefs.clearUserPref("security.mixed_content.block_display_content");
+    Services.prefs.clearUserPref("security.mixed_content.block_active_content");
+
+    finishTest();
+  });
 }
-
-function testSeverity(node) {
-  let linkNode = node.parentNode;
-  let msgNode = linkNode.parentNode;
-  let bodyNode = msgNode.parentNode;
-  let finalNode = bodyNode.parentNode;
-
-  return finalNode.classList.contains("webconsole-msg-warn");
-}
-
-function testClickOpenNewTab(warningNode) {
-  /* Invoke the click event and check if a new tab would open to the correct page */
-  let linkOpened = false;
-  let oldOpenUILinkIn = window.openUILinkIn;
-
-  window.openUILinkIn = function(aLink) {
-    if (aLink == "https://developer.mozilla.org/en/Security/MixedContent") {
-      linkOpened = true;
-    }
-  }
-
-  EventUtils.synthesizeMouse(warningNode, 2, 2, {},
-                             warningNode.ownerDocument.defaultView);
-
-  ok(linkOpened, "Clicking the Mixed Content Warning node opens the desired page");
-
-  window.openUILinkIn = oldOpenUILinkIn;
-}
-
-function endTest() {
-  Services.prefs.setBoolPref("security.mixed_content.block_display_content", origBlockDisplay);
-  Services.prefs.setBoolPref("security.mixed_content.block_active_content", origBlockActive);
-  finishTest();
-}
diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -114,17 +114,17 @@ const SEVERITY_CLASS_FRAGMENTS = [
 
 // The preference keys to use for each category/severity combination, indexed
 // first by category (rows) and then by severity (columns).
 //
 // Most of these rather idiosyncratic names are historical and predate the
 // division of message type into "category" and "severity".
 const MESSAGE_PREFERENCE_KEYS = [
 //  Error         Warning   Info    Log
-  [ "network",    null,         null,   "networkinfo", ],  // Network
+  [ "network",    "netwarn",    null,   "networkinfo", ],  // Network
   [ "csserror",   "cssparser",  null,   null,          ],  // CSS
   [ "exception",  "jswarn",     null,   "jslog",       ],  // JS
   [ "error",      "warn",       "info", "log",         ],  // Web Developer
   [ null,         null,         null,   null,          ],  // Input
   [ null,         null,         null,   null,          ],  // Output
   [ "secerror",   "secwarn",    null,   null,          ],  // Security
 ];
 
@@ -554,17 +554,17 @@ WebConsoleFrame.prototype = {
   /**
    * Initialize the default filter preferences.
    * @private
    */
   _initDefaultFilterPrefs: function WCF__initDefaultFilterPrefs()
   {
     let prefs = ["network", "networkinfo", "csserror", "cssparser", "exception",
                  "jswarn", "jslog", "error", "info", "warn", "log", "secerror",
-                 "secwarn"];
+                 "secwarn", "netwarn"];
     for (let pref of prefs) {
       this.filterPrefs[pref] = Services.prefs
                                .getBoolPref(this._filterPrefsPrefix + pref);
     }
   },
 
   /**
    * Sets the events for the filter input field.
diff --git a/browser/devtools/webconsole/webconsole.xul b/browser/devtools/webconsole/webconsole.xul
--- a/browser/devtools/webconsole/webconsole.xul
+++ b/browser/devtools/webconsole/webconsole.xul
@@ -82,16 +82,18 @@
                        accesskey="&btnPageNet.accesskeyMacOSX;"
 #else
                        accesskey="&btnPageNet.accesskey;"
 #endif
                        tabindex="3">
           <menupopup>
             <menuitem label="&btnConsoleErrors;" type="checkbox" autocheck="false"
                       prefKey="network"/>
+            <menuitem label="&btnConsoleWarnings;" type="checkbox" autocheck="false"
+                      prefKey="netwarn"/>
             <menuitem label="&btnConsoleLog;" type="checkbox" autocheck="false"
                       prefKey="networkinfo"/>
             <menuseparator id="saveBodiesSeparator" />
             <menuitem id="saveBodies" type="checkbox" label="&saveBodies.label;"
                       accesskey="&saveBodies.accesskey;"/>
           </menupopup>
         </toolbarbutton>
         <toolbarbutton label="&btnPageCSS.label;" type="menu-button"
