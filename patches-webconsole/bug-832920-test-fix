# HG changeset patch
# Parent 5bbc53a875118dc0b253ec0dfada29a5570200c6
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1361902061 -7200
Bug 832920 - fix failure for browser_dbg_bug723069_editor-breakpoints.js; try: -b do -p linux,linux64,macosx64,win32,win64 -u mochitest-bc -t none

diff --git a/browser/devtools/debugger/test/browser_dbg_bug723069_editor-breakpoints.js b/browser/devtools/debugger/test/browser_dbg_bug723069_editor-breakpoints.js
--- a/browser/devtools/debugger/test/browser_dbg_bug723069_editor-breakpoints.js
+++ b/browser/devtools/debugger/test/browser_dbg_bug723069_editor-breakpoints.js
@@ -19,49 +19,66 @@ let gBreakpoints = null;
 function test()
 {
   let tempScope = {};
   Cu.import("resource:///modules/source-editor.jsm", tempScope);
   let SourceEditor = tempScope.SourceEditor;
 
   let scriptShown = false;
   let framesAdded = false;
-  let resumed = false;
   let testStarted = false;
 
-  debug_tab_pane(TAB_URL, function(aTab, aDebuggee, aPane) {
-    gTab = aTab;
-    gDebuggee = aDebuggee;
-    gPane = aPane;
-    gDebugger = gPane.panelWin;
-    resumed = true;
+  gTab = addTab(TAB_URL, function onAddTab() {
+    info("tab added");
+    gDebuggee = gTab.linkedBrowser.contentWindow.wrappedJSObject;
+
+    let target = TargetFactory.forTab(gTab);
+
+    gDevTools.showToolbox(target, "jsdebugger").then(function(toolbox) {
+      info("jsdebugger panel opened");
+      gPane = toolbox.getCurrentPanel();
+      gDebugger = gPane.panelWin;
+      gDebugger.addEventListener("Debugger:AfterScriptsAdded",
+                                 onAfterScriptsAdded);
+    });
+  });
+
+  function onAfterScriptsAdded()
+  {
+    info("scripts added");
+    gDebugger.removeEventListener("Debugger:AfterScriptsAdded",
+                                  onAfterScriptsAdded, true);
 
     gDebugger.addEventListener("Debugger:SourceShown", onScriptShown);
 
-    gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded", function() {
-      framesAdded = true;
-      executeSoon(startTest);
-    });
+    gDebugger.DebuggerController.activeThread.addOneTimeListener("framesadded",
+      function onFramesAdded() {
+        info("frames added");
+        framesAdded = true;
+        executeSoon(startTest);
+      });
 
     executeSoon(function() {
       gDebuggee.firstCall();
     });
-  });
+  }
 
   function onScriptShown(aEvent)
   {
     scriptShown = aEvent.detail.url.indexOf("-02.js") != -1;
+    info("script shown " + aEvent.detail.url);
     executeSoon(startTest);
   }
 
   function startTest()
   {
-    if (scriptShown && framesAdded && resumed && !testStarted) {
+    if (scriptShown && framesAdded && !testStarted) {
       gDebugger.removeEventListener("Debugger:SourceShown", onScriptShown);
       testStarted = true;
+      info("test started");
       Services.tm.currentThread.dispatch({ run: performTest }, 0);
     }
   }
 
   function performTest()
   {
     gScripts = gDebugger.DebuggerView.Sources;
 
