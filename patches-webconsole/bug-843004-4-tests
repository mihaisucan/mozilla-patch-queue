# HG changeset patch
# Parent 73854abb8b3533ec53e39e7e72c138f5b83d4c7c
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1386798141 -7200

Bug 843004 - Part 4: test fixes; r=benvie

diff --git a/browser/devtools/webconsole/test/browser_bug_865871_variables_view_close_on_esc_key.js b/browser/devtools/webconsole/test/browser_bug_865871_variables_view_close_on_esc_key.js
--- a/browser/devtools/webconsole/test/browser_bug_865871_variables_view_close_on_esc_key.js
+++ b/browser/devtools/webconsole/test/browser_bug_865871_variables_view_close_on_esc_key.js
@@ -31,17 +31,18 @@ function consoleOpened(hud)
 }
 
 function onExecuteFooObj(msg)
 {
   ok(msg, "output message found");
 
   let anchor = msg.querySelector("a");
   ok(anchor, "object anchor");
-  isnot(anchor.textContent.indexOf("[object Object]"), -1, "message text check");
+  isnot(anchor.textContent.indexOf('testProp: "testValue"'), -1,
+        "message text check");
 
   gJSTerm.once("variablesview-fetched", onFooObjFetch);
   EventUtils.synthesizeMouse(anchor, 2, 2, {}, gWebConsole.iframeWindow)
 }
 
 function onFooObjFetch(aEvent, aVar)
 {
   gVariablesView = aVar._variablesView;
@@ -71,17 +72,18 @@ function onSidebarClosed()
   gJSTerm.execute("window", onExecuteWindow);
 }
 
 function onExecuteWindow(msg)
 {
   ok(msg, "output message found");
   let anchor = msg.querySelector("a");
   ok(anchor, "object anchor");
-  isnot(anchor.textContent.indexOf("[object Window]"), -1, "message text check");
+  isnot(anchor.textContent.indexOf("Window http://example.com/browser/"), -1,
+        "message text check");
 
   gJSTerm.once("variablesview-fetched", onWindowFetch);
   EventUtils.synthesizeMouse(anchor, 2, 2, {}, gWebConsole.iframeWindow)
 }
 
 function onWindowFetch(aEvent, aVar)
 {
   gVariablesView = aVar._variablesView;
diff --git a/browser/devtools/webconsole/test/browser_bug_869003_inspect_cross_domain_object.js b/browser/devtools/webconsole/test/browser_bug_869003_inspect_cross_domain_object.js
--- a/browser/devtools/webconsole/test/browser_bug_869003_inspect_cross_domain_object.js
+++ b/browser/devtools/webconsole/test/browser_bug_869003_inspect_cross_domain_object.js
@@ -41,17 +41,17 @@ function consoleOpened(hud)
     }],
   }).then(onConsoleMessage);
 }
 
 function onConsoleMessage(aResults)
 {
   let clickable = aResults[0].clickableElements[0];
   ok(clickable, "clickable object found");
-  isnot(clickable.textContent.indexOf("[object Object]"), -1,
+  isnot(clickable.textContent.indexOf('{hello: "world!",'), -1,
         "message text check");
 
   gJSTerm.once("variablesview-fetched", onObjFetch);
 
   EventUtils.synthesizeMouse(clickable, 2, 2, {}, gWebConsole.iframeWindow)
 }
 
 function onObjFetch(aEvent, aVar)
diff --git a/browser/devtools/webconsole/test/browser_console_consolejsm_output.js b/browser/devtools/webconsole/test/browser_console_consolejsm_output.js
--- a/browser/devtools/webconsole/test/browser_console_consolejsm_output.js
+++ b/browser/devtools/webconsole/test/browser_console_consolejsm_output.js
@@ -66,17 +66,17 @@ function test()
         {
           name: "console.warn output",
           text: "bug851231-warn",
           category: CATEGORY_WEBDEV,
           severity: SEVERITY_WARNING,
         },
         {
           name: "console.error output",
-          text: /\bbug851231-error\b.+\[object Object\]/,
+          text: /\bbug851231-error\b.+\{bug851231prop:\s"bug851231value"\}/,
           category: CATEGORY_WEBDEV,
           severity: SEVERITY_ERROR,
           objects: true,
         },
         {
           name: "console.debug output",
           text: "bug851231-debug",
           category: CATEGORY_WEBDEV,
@@ -86,17 +86,17 @@ function test()
           name: "console.trace output",
           consoleTrace: {
             file: "browser_console_consolejsm_output.js",
             fn: "onCachedMessage",
           },
         },
         {
           name: "console.dir output",
-          consoleDir: "[object XULDocument]",
+          consoleDir: "XULDocument {",
         },
         {
           name: "console.time output",
           consoleTime: "foobarTimer",
         },
         {
           name: "console.timeEnd output",
           consoleTimeEnd: "foobarTimer",
diff --git a/browser/devtools/webconsole/test/browser_console_log_inspectable_object.js b/browser/devtools/webconsole/test/browser_console_log_inspectable_object.js
--- a/browser/devtools/webconsole/test/browser_console_log_inspectable_object.js
+++ b/browser/devtools/webconsole/test/browser_console_log_inspectable_object.js
@@ -29,17 +29,17 @@ function performTest(hud)
       text: "fooBug676722",
       category: CATEGORY_WEBDEV,
       severity: SEVERITY_LOG,
       objects: true,
     }],
   }).then(([result]) => {
     let clickable = result.clickableElements[0];
     ok(clickable, "the console.log() object anchor was found");
-    isnot(clickable.textContent.indexOf("Object"), -1,
+    isnot(clickable.textContent.indexOf('{abba: "omgBug676722"}'), -1,
           "clickable node content is correct");
 
     hud.jsterm.once("variablesview-fetched",
       (aEvent, aVar) => {
         ok(aVar, "object inspector opened on click");
 
         findVariableViewProperties(aVar, [{
           name: "abba",
diff --git a/browser/devtools/webconsole/test/browser_console_native_getters.js b/browser/devtools/webconsole/test/browser_console_native_getters.js
--- a/browser/devtools/webconsole/test/browser_console_native_getters.js
+++ b/browser/devtools/webconsole/test/browser_console_native_getters.js
@@ -25,17 +25,17 @@ function consoleOpened(hud)
   gWebConsole = hud;
   gJSTerm = hud.jsterm;
 
   gJSTerm.execute("document");
 
   waitForMessages({
     webconsole: hud,
     messages: [{
-      text: "[object HTMLDocument]",
+      text: "HTMLDocument data:text/html;charset=utf8",
       category: CATEGORY_OUTPUT,
       objects: true,
     }],
   }).then(onEvalResult);
 }
 
 function onEvalResult(aResults)
 {
@@ -85,17 +85,17 @@ function onFetchAfterBackgroundUpdate(aE
 
 function testParagraphs()
 {
   gJSTerm.execute("$$('p')");
 
   waitForMessages({
     webconsole: gWebConsole,
     messages: [{
-      text: "[object NodeList]",
+      text: "NodeList [",
       category: CATEGORY_OUTPUT,
       objects: true,
     }],
   }).then(onEvalNodeList);
 }
 
 function onEvalNodeList(aResults)
 {
diff --git a/browser/devtools/webconsole/test/browser_console_variables_view.js b/browser/devtools/webconsole/test/browser_console_variables_view.js
--- a/browser/devtools/webconsole/test/browser_console_variables_view.js
+++ b/browser/devtools/webconsole/test/browser_console_variables_view.js
@@ -23,17 +23,18 @@ function consoleOpened(hud)
   gWebConsole = hud;
   gJSTerm = hud.jsterm;
   gJSTerm.execute("fooObj", onExecuteFooObj);
 }
 
 function onExecuteFooObj(msg)
 {
   ok(msg, "output message found");
-  isnot(msg.textContent.indexOf("[object Object]"), -1, "message text check");
+  isnot(msg.textContent.indexOf('{testProp: "testValue"}'), -1,
+        "message text check");
 
   let anchor = msg.querySelector("a");
   ok(anchor, "object link found");
 
   gJSTerm.once("variablesview-fetched", onFooObjFetch);
 
   executeSoon(() =>
     EventUtils.synthesizeMouse(anchor, 2, 2, {}, gWebConsole.iframeWindow)
diff --git a/browser/devtools/webconsole/test/browser_console_variables_view_while_debugging.js b/browser/devtools/webconsole/test/browser_console_variables_view_while_debugging.js
--- a/browser/devtools/webconsole/test/browser_console_variables_view_while_debugging.js
+++ b/browser/devtools/webconsole/test/browser_console_variables_view_while_debugging.js
@@ -57,17 +57,18 @@ function onFramesAdded()
     )
   );
 }
 
 
 function onExecuteFooObj(msg)
 {
   ok(msg, "output message found");
-  isnot(msg.textContent.indexOf("[object Object]"), -1, "message text check");
+  isnot(msg.textContent.indexOf('{testProp2: "testValue2"}'), -1,
+        "message text check");
 
   let anchor = msg.querySelector("a");
   ok(anchor, "object link found");
 
   gJSTerm.once("variablesview-fetched", onFooObjFetch);
 
   executeSoon(() => EventUtils.synthesizeMouse(anchor, 2, 2, {},
                                                gWebConsole.iframeWindow));
diff --git a/browser/devtools/webconsole/test/browser_console_variables_view_while_debugging_and_inspecting.js b/browser/devtools/webconsole/test/browser_console_variables_view_while_debugging_and_inspecting.js
--- a/browser/devtools/webconsole/test/browser_console_variables_view_while_debugging_and_inspecting.js
+++ b/browser/devtools/webconsole/test/browser_console_variables_view_while_debugging_and_inspecting.js
@@ -52,17 +52,18 @@ function onFramesAdded()
   info("onFramesAdded");
 
   openConsole(null, () => gJSTerm.execute("fooObj", onExecuteFooObj));
 }
 
 function onExecuteFooObj(msg)
 {
   ok(msg, "output message found");
-  isnot(msg.textContent.indexOf("[object Object]"), -1, "message text check");
+  isnot(msg.textContent.indexOf('{testProp2: "testValue2"}'), -1,
+        "message text check");
 
   let anchor = msg.querySelector("a");
   ok(anchor, "object link found");
 
   gJSTerm.once("variablesview-fetched", onFooObjFetch);
 
   EventUtils.synthesizeMouse(anchor, 2, 2, {}, gWebConsole.iframeWindow);
 }
diff --git a/browser/devtools/webconsole/test/browser_jsterm_inspect.js b/browser/devtools/webconsole/test/browser_jsterm_inspect.js
--- a/browser/devtools/webconsole/test/browser_jsterm_inspect.js
+++ b/browser/devtools/webconsole/test/browser_jsterm_inspect.js
@@ -24,12 +24,12 @@ function test()
   }
 
   function onObjFetch(aEvent, aVar)
   {
     ok(aVar._variablesView, "variables view object");
 
     findVariableViewProperties(aVar, [
       { name: "testProp", value: "testValue" },
-      { name: "document", value: "HTMLDocument" },
+      { name: "document", value: /HTMLDocument data:/ },
     ], { webconsole: hud }).then(finishTest);
   }
 }
diff --git a/browser/devtools/webconsole/test/browser_result_format_as_string.js b/browser/devtools/webconsole/test/browser_result_format_as_string.js
--- a/browser/devtools/webconsole/test/browser_result_format_as_string.js
+++ b/browser/devtools/webconsole/test/browser_result_format_as_string.js
@@ -23,19 +23,19 @@ function performTest(hud)
   hud.jsterm.clearOutput(true);
 
   hud.jsterm.execute("document.querySelector('p')", (msg) => {
     is(hud.outputNode.textContent.indexOf("bug772506_content"), -1,
        "no content element found");
     ok(!hud.outputNode.querySelector("#foobar"), "no #foobar element found");
 
     ok(msg, "eval output node found");
-    is(msg.textContent.indexOf("HTMLDivElement"), -1,
-       "HTMLDivElement string is not displayed");
-    isnot(msg.textContent.indexOf("HTMLParagraphElement"), -1,
-          "HTMLParagraphElement string is displayed");
+    is(msg.textContent.indexOf("<div>"), -1,
+       "<div> string is not displayed");
+    isnot(msg.textContent.indexOf("<p>"), -1,
+          "<p> string is displayed");
 
     EventUtils.synthesizeMouseAtCenter(msg, {type: "mousemove"});
     ok(!gBrowser._bug772506, "no content variable");
 
     finishTest();
   });
 }
diff --git a/toolkit/devtools/server/actors/script.js b/toolkit/devtools/server/actors/script.js
--- a/toolkit/devtools/server/actors/script.js
+++ b/toolkit/devtools/server/actors/script.js
@@ -3650,16 +3650,17 @@ DebuggerServer.ObjectActorPreviewers.Obj
     };
 
     if (aRawObj instanceof Ci.nsIDOMDocument) {
       preview.location = threadActor.createValueGrip(aRawObj.location.href);
     }
 
     // Add preview for DOM element attributes.
     if (aRawObj instanceof Ci.nsIDOMElement) {
+      preview.nodeName = preview.nodeName.toLowerCase();
       let i = 0;
       preview.attributes = {};
       preview.attributesLength = aRawObj.attributes.length;
       for (let attr of aRawObj.attributes) {
         preview.attributes[attr.nodeName] = threadActor.createValueGrip(attr.value);
         if (++i == OBJECT_PREVIEW_MAX_ITEMS) {
           break;
         }
diff --git a/toolkit/devtools/webconsole/utils.js b/toolkit/devtools/webconsole/utils.js
--- a/toolkit/devtools/webconsole/utils.js
+++ b/toolkit/devtools/webconsole/utils.js
@@ -194,17 +194,17 @@ let WebConsoleUtils = {
    *        should only remove the query parameters and the hash fragment from
    *        the given URL.
    * @return string
    *         The abbreviated form of the source URL.
    */
   abbreviateSourceURL:
   function WCU_abbreviateSourceURL(aSourceURL, aOptions = {})
   {
-    if (aSourceURL.substr(0, 5) == "data:") {
+    if (!aOptions.onlyCropQuery && aSourceURL.substr(0, 5) == "data:") {
       let commaIndex = aSourceURL.indexOf(",");
       if (commaIndex > -1) {
         aSourceURL = "data:" + aSourceURL.substring(commaIndex + 1);
       }
     }
 
     // Remove any query parameters.
     let hookIndex = aSourceURL.indexOf("?");
