# HG changeset patch
# Parent fa5e88eafb07c69815c7652c21274dfaacf7c368
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1373043404 -10800

Bug 760876 - Can't drag-select multiple messages in the Web Console; r=robcee

diff --git a/browser/devtools/webconsole/console-output.js b/browser/devtools/webconsole/console-output.js
--- a/browser/devtools/webconsole/console-output.js
+++ b/browser/devtools/webconsole/console-output.js
@@ -211,31 +211,26 @@ Messages.BaseMessage.prototype = {
   /**
    * Prepare the message container for the Web Console, such that it is
    * compatible with the current implementation.
    * TODO: remove this once bug 778766.
    */
   _renderCompat: function()
   {
     let doc = this.output.document;
-    let container = doc.createElementNS(XUL_NS, "richlistitem");
+    let container = doc.createElementNS(XHTML_NS, "div");
     container.setAttribute("class", "hud-msg-node" + this._elementClassCompat);
     container.classList.add("hud-msg-node");
     container.setAttribute("id", "console-msg-" + gSequenceId());
     container.category = this._categoryCompat;
     container.severity = this._severityCompat;
     container.clipboardText = this.textContent;
     container.timestamp = this.timestamp;
     container._messageObject = this;
 
-    let body = doc.createElementNS(XUL_NS, "description");
-    body.flex = 1;
-    body.classList.add("webconsole-msg-body");
-    container.appendChild(body);
-
     return container;
   },
 }; // Messages.BaseMessage.prototype
 
 
 /**
  * The NavigationMarker is used to show a page load event.
  *
@@ -287,17 +282,17 @@ Messages.NavigationMarker.prototype = ex
     }
 
     let doc = this.output.document;
     let urlnode = doc.createElementNS(XHTML_NS, "span");
     urlnode.className = "url";
     urlnode.textContent = url;
 
     // Add the text in the xul:description.webconsole-msg-body element.
-    this.$render().element.firstChild.appendChild(urlnode);
+    this.$render().element.appendChild(urlnode);
     this.element.classList.add("navigation-marker");
     this.element.url = this._url;
 
     return this;
   },
 }); // Messages.NavigationMarker.prototype
 
 
diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -29,18 +29,18 @@ loader.lazyGetter(this, "Messages",
 loader.lazyImporter(this, "GripClient", "resource://gre/modules/devtools/dbg-client.jsm");
 loader.lazyImporter(this, "VariablesView", "resource:///modules/devtools/VariablesView.jsm");
 loader.lazyImporter(this, "VariablesViewController", "resource:///modules/devtools/VariablesViewController.jsm");
 
 const STRINGS_URI = "chrome://browser/locale/devtools/webconsole.properties";
 let l10n = new WebConsoleUtils.l10n(STRINGS_URI);
 
 
-// The XUL namespace.
 const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
+const XHTML_NS = "http://www.w3.org/1999/xhtml";
 
 const MIXED_CONTENT_LEARN_MORE = "https://developer.mozilla.org/en/Security/MixedContent";
 
 const HELP_URL = "https://developer.mozilla.org/docs/Tools/Web_Console/Helpers";
 
 const VARIABLES_VIEW_URL = "chrome://browser/content/devtools/widgets/VariablesView.xul";
 
 const CONSOLE_DIR_VIEW_HEIGHT = 0.6;
@@ -476,17 +476,17 @@ WebConsoleFrame.prototype = {
     this._commandController = new CommandController(this);
     this.window.controllers.insertControllerAt(0, this._commandController);
 
     this._contextMenuHandler = new ConsoleContextMenu(this);
 
     let doc = this.document;
 
     this.filterBox = doc.querySelector(".hud-filter-box");
-    this.outputNode = doc.querySelector(".hud-output-node");
+    this.outputNode = doc.getElementById("output-container");
     this.completeNode = doc.querySelector(".jsterm-complete-node");
     this.inputNode = doc.querySelector(".jsterm-input-node");
 
     this._setFilterTextBoxEvents();
     this._initFilterButtons();
 
     let fontSize = Services.prefs.getIntPref("devtools.webconsole.fontSize");
 
@@ -916,25 +916,24 @@ WebConsoleFrame.prototype = {
    * @param nsIDOMNode aOriginal
    *        The Original Node. The one being merged into.
    * @param nsIDOMNode aFiltered
    *        The node being filtered out because it is repeated.
    */
   mergeFilteredMessageNode:
   function WCF_mergeFilteredMessageNode(aOriginal, aFiltered)
   {
-    // childNodes[3].firstChild is the node containing the number of repetitions
-    // of a node.
-    let repeatNode = aOriginal.childNodes[3].firstChild;
+    let repeatNode = aOriginal.getElementsByClassName("webconsole-msg-repeat")[0];
     if (!repeatNode) {
       return; // no repeat node, return early.
     }
 
     let occurrences = parseInt(repeatNode.getAttribute("value")) + 1;
     repeatNode.setAttribute("value", occurrences);
+    repeatNode.textContent = occurrences;
   },
 
   /**
    * Filter the message node from the output if it is a repeat.
    *
    * @private
    * @param nsIDOMNode aNode
    *        The message node to be filtered or not.
@@ -1149,17 +1148,17 @@ WebConsoleFrame.prototype = {
                                       level, aMessage.timeStamp);
     if (aMessage.private) {
       node.setAttribute("private", true);
     }
 
     if (objectActors.size > 0) {
       node._objectActors = objectActors;
 
-      let repeatNode = node.querySelector(".webconsole-msg-repeat");
+      let repeatNode = node.getElementsByClassName("webconsole-msg-repeat")[0];
       repeatNode._uid += [...objectActors].join("-");
     }
 
     // Make the node bring up the variables view, to allow the user to inspect
     // the stack trace.
     if (level == "trace") {
       node._stacktrace = aMessage.stacktrace;
 
@@ -1315,68 +1314,58 @@ WebConsoleFrame.prototype = {
   {
     let networkInfo = this._networkRequests[aActorId];
     if (!networkInfo) {
       return null;
     }
 
     let request = networkInfo.request;
 
-    let msgNode = this.document.createElementNS(XUL_NS, "hbox");
-
-    let methodNode = this.document.createElementNS(XUL_NS, "label");
-    methodNode.setAttribute("value", request.method);
+    let methodNode = this.document.createElementNS(XHTML_NS, "span");
+    methodNode.textContent = request.method;
     methodNode.classList.add("webconsole-msg-body-piece");
-    msgNode.appendChild(methodNode);
-
-    let linkNode = this.document.createElementNS(XUL_NS, "hbox");
-    linkNode.flex = 1;
-    linkNode.classList.add("webconsole-msg-body-piece");
-    linkNode.classList.add("webconsole-msg-link");
-    msgNode.appendChild(linkNode);
-
-    let urlNode = this.document.createElementNS(XUL_NS, "label");
-    urlNode.flex = 1;
-    urlNode.setAttribute("crop", "center");
-    urlNode.setAttribute("title", request.url);
-    urlNode.setAttribute("tooltiptext", request.url);
-    urlNode.setAttribute("value", request.url);
-    urlNode.classList.add("hud-clickable");
-    urlNode.classList.add("webconsole-msg-body-piece");
-    urlNode.classList.add("webconsole-msg-url");
-    linkNode.appendChild(urlNode);
 
     let severity = SEVERITY_LOG;
     let mixedRequest =
       WebConsoleUtils.isMixedHTTPSRequest(request.url, this.contentLocation);
     if (mixedRequest) {
+      severity = SEVERITY_WARNING;
+    }
+
+    let clipboardText = request.method + " " + request.url;
+    let messageNode = this.createMessageNode(CATEGORY_NETWORK, severity,
+                                             methodNode, null, null,
+                                             clipboardText);
+    if (networkInfo.private) {
+      messageNode.setAttribute("private", true);
+    }
+    messageNode._connectionId = aActorId;
+    messageNode.url = request.url;
+
+    let body = methodNode.parentNode;
+
+    // FIXME: crop=center
+    let urlNode = this.document.createElementNS(XHTML_NS, "span");
+    urlNode.classList.add("hud-clickable");
+    urlNode.classList.add("webconsole-msg-body-piece");
+    urlNode.classList.add("webconsole-msg-url");
+    urlNode.title = request.url;
+    urlNode.textContent = request.url;
+    body.appendChild(urlNode);
+
+    if (mixedRequest) {
       urlNode.classList.add("webconsole-mixed-content");
-      this.makeMixedContentNode(linkNode);
-      // If we define a SEVERITY_SECURITY in the future, switch this to
-      // SEVERITY_SECURITY.
-      severity = SEVERITY_WARNING;
-    }
-
-    let statusNode = this.document.createElementNS(XUL_NS, "label");
-    statusNode.setAttribute("value", "");
+      this.makeMixedContentNode(body);
+    }
+
+    let statusNode = this.document.createElementNS(XUL_NS, "span");
     statusNode.classList.add("hud-clickable");
     statusNode.classList.add("webconsole-msg-body-piece");
     statusNode.classList.add("webconsole-msg-status");
-    linkNode.appendChild(statusNode);
-
-    let clipboardText = request.method + " " + request.url;
-
-    let messageNode = this.createMessageNode(CATEGORY_NETWORK, severity,
-                                             msgNode, null, null, clipboardText);
-    if (networkInfo.private) {
-      messageNode.setAttribute("private", true);
-    }
-
-    messageNode._connectionId = aActorId;
-    messageNode.url = request.url;
+    body.appendChild(statusNode);
 
     this.makeOutputMessageLink(messageNode, function WCF_net_message_link() {
       if (!messageNode._panelOpen) {
         this.openNetworkPanel(messageNode, networkInfo);
       }
     }.bind(this));
 
     networkInfo.node = messageNode;
@@ -1392,21 +1381,20 @@ WebConsoleFrame.prototype = {
    * @param aLinkNode
    *        Parent to the requested urlNode.
    */
   makeMixedContentNode: function WCF_makeMixedContentNode(aLinkNode)
   {
     let mixedContentWarning = "[" + l10n.getStr("webConsoleMixedContentWarning") + "]";
 
     // Mixed content warning message links to a Learn More page
-    let mixedContentWarningNode = this.document.createElement("label");
-    mixedContentWarningNode.setAttribute("value", mixedContentWarning);
-    mixedContentWarningNode.setAttribute("title", mixedContentWarning);
+    let mixedContentWarningNode = this.document.createElementNS(XHTML_NS, "span");
     mixedContentWarningNode.classList.add("hud-clickable");
     mixedContentWarningNode.classList.add("webconsole-mixed-content-link");
+    mixedContentWarningNode.textContent = mixedContentWarning;
 
     aLinkNode.appendChild(mixedContentWarningNode);
 
     mixedContentWarningNode.addEventListener("click", function(aEvent) {
       this.owner.openLink(MIXED_CONTENT_LEARN_MORE);
       aEvent.preventDefault();
       aEvent.stopPropagation();
     }.bind(this));
@@ -1417,24 +1405,21 @@ WebConsoleFrame.prototype = {
    *
    * @param string aFileURI
    *        The file URI that was loaded.
    * @return nsIDOMElement|undefined
    *         The message element to display in the Web Console output.
    */
   logFileActivity: function WCF_logFileActivity(aFileURI)
   {
-    let urlNode = this.document.createElementNS(XUL_NS, "label");
-    urlNode.flex = 1;
-    urlNode.setAttribute("crop", "center");
-    urlNode.setAttribute("title", aFileURI);
-    urlNode.setAttribute("tooltiptext", aFileURI);
-    urlNode.setAttribute("value", aFileURI);
+    let urlNode = this.document.createElementNS(XHTML_NS, "span");
     urlNode.classList.add("hud-clickable");
     urlNode.classList.add("webconsole-msg-url");
+    urlNode.textContent = aFileURI;
+    urlNode.title = aFileURI;
 
     let outputNode = this.createMessageNode(CATEGORY_NETWORK, SEVERITY_LOG,
                                             urlNode, null, null, aFileURI);
 
     this.makeOutputMessageLink(outputNode, function WCF__onFileClick() {
       this.owner.viewSource(aFileURI);
     }.bind(this));
 
@@ -1589,19 +1574,18 @@ WebConsoleFrame.prototype = {
         status = [response.httpVersion, response.status, response.statusText];
       }
       if (hasEventTimings) {
         status.push(l10n.getFormatStr("NetworkPanel.durationMS",
                                       [networkInfo.totalTime]));
       }
       let statusText = "[" + status.join(" ") + "]";
 
-      let linkNode = messageNode.querySelector(".webconsole-msg-link");
-      let statusNode = linkNode.querySelector(".webconsole-msg-status");
-      statusNode.setAttribute("value", statusText);
+      let statusNode = messageNode.getElementsByClassName("webconsole-msg-status")[0];
+      statusNode.textContent = statusText;
 
       messageNode.clipboardText = [request.method, request.url, statusText]
                                   .join(" ");
 
       if (hasResponseStart && response.status >= MIN_HTTP_ERROR_CODE &&
           response.status <= MAX_HTTP_ERROR_CODE) {
         this.setMessageType(messageNode, CATEGORY_NETWORK, SEVERITY_ERROR);
       }
@@ -1859,17 +1843,17 @@ WebConsoleFrame.prototype = {
     if (!batch.length) {
       this._outputTimerInitialized = false;
       return;
     }
 
     let outputNode = this.outputNode;
     let lastVisibleNode = null;
     let scrolledToBottom = Utils.isOutputScrolledToBottom(outputNode);
-    let scrollBox = outputNode.scrollBoxObject.element;
+    let scrollBox = outputNode;
 
     let hudIdSupportsString = WebConsoleUtils.supportsString(this.hudId);
 
     // Output the current batch of messages.
     let newMessages = new Set();
     let updatedMessages = new Set();
     for (let item of batch) {
       let result = this._outputMessageFromQueue(hudIdSupportsString, item);
@@ -2203,47 +2187,36 @@ WebConsoleFrame.prototype = {
   {
     if (typeof aBody != "string" && aClipboardText == null && aBody.innerText) {
       aClipboardText = aBody.innerText;
     }
 
     // Make the icon container, which is a vertical box. Its purpose is to
     // ensure that the icon stays anchored at the top of the message even for
     // long multi-line messages.
-    let iconContainer = this.document.createElementNS(XUL_NS, "vbox");
-    iconContainer.classList.add("webconsole-msg-icon-container");
+    let iconContainer = this.document.createElementNS(XHTML_NS, "span");
+    iconContainer.classList.add("webconsole-msg-icon");
     // Apply the curent group by indenting appropriately.
-    iconContainer.style.marginLeft = this.groupDepth * GROUP_INDENT + "px";
-
-    // Make the icon node. It's sprited and the actual region of the image is
-    // determined by CSS rules.
-    let iconNode = this.document.createElementNS(XUL_NS, "image");
-    iconNode.classList.add("webconsole-msg-icon");
-    iconContainer.appendChild(iconNode);
-
-    // Make the spacer that positions the icon.
-    let spacer = this.document.createElementNS(XUL_NS, "spacer");
-    spacer.flex = 1;
-    iconContainer.appendChild(spacer);
+    //FIXME
+    //iconContainer.style.marginLeft = this.groupDepth * GROUP_INDENT + "px";
 
     // Create the message body, which contains the actual text of the message.
-    let bodyNode = this.document.createElementNS(XUL_NS, "description");
-    bodyNode.flex = 1;
+    let bodyNode = this.document.createElementNS(XHTML_NS, "span");
     bodyNode.classList.add("webconsole-msg-body");
 
     // Store the body text, since it is needed later for the variables view.
     let body = aBody;
     // If a string was supplied for the body, turn it into a DOM node and an
     // associated clipboard string now.
     aClipboardText = aClipboardText ||
                      (aBody + (aSourceURL ? " @ " + aSourceURL : "") +
                               (aSourceLine ? ":" + aSourceLine : ""));
 
     // Create the containing node and append all its elements to it.
-    let node = this.document.createElementNS(XUL_NS, "richlistitem");
+    let node = this.document.createElementNS(XHTML_NS, "div");
 
     if (aBody instanceof Ci.nsIDOMNode) {
       bodyNode.appendChild(aBody);
     }
     else {
       let str = undefined;
       if (aLevel == "dir") {
         str = VariablesView.getString(aBody.arguments[0]);
@@ -2257,31 +2230,34 @@ WebConsoleFrame.prototype = {
       }
 
       if (str !== undefined) {
         aBody = this.document.createTextNode(str);
         bodyNode.appendChild(aBody);
       }
     }
 
-    let repeatContainer = this.document.createElementNS(XUL_NS, "hbox");
-    repeatContainer.setAttribute("align", "start");
-    let repeatNode = this.document.createElementNS(XUL_NS, "label");
-    repeatNode.setAttribute("value", "1");
-    repeatNode.classList.add("webconsole-msg-repeat");
-    repeatNode._uid = [bodyNode.textContent, aCategory, aSeverity, aLevel,
-                       aSourceURL, aSourceLine].join(":");
-    repeatContainer.appendChild(repeatNode);
+    // Add the message repeats node only when needed.
+    let repeatNode = null;
+    if (aCategory != CATEGORY_INPUT && aCategory != CATEGORY_OUTPUT &&
+        aCategory != CATEGORY_NETWORK) {
+      repeatNode = this.document.createElementNS(XHTML_NS, "span");
+      repeatNode.textContent = 1;
+      repeatNode.setAttribute("value", "1");
+      repeatNode.classList.add("webconsole-msg-repeat");
+      repeatNode._uid = [bodyNode.textContent, aCategory, aSeverity, aLevel,
+                         aSourceURL, aSourceLine].join(":");
+    }
 
     // Create the timestamp.
-    let timestampNode = this.document.createElementNS(XUL_NS, "label");
+    let timestampNode = this.document.createElementNS(XHTML_NS, "span");
     timestampNode.classList.add("webconsole-timestamp");
     let timestamp = aTimeStamp || Date.now();
     let timestampString = l10n.timestampString(timestamp);
-    timestampNode.setAttribute("value", timestampString);
+    timestampNode.textContent = timestampString;
 
     // Create the source location (e.g. www.example.com:6) that sits on the
     // right side of the message, if applicable.
     let locationNode;
     if (aSourceURL && IGNORED_SOURCE_URLS.indexOf(aSourceURL) == -1) {
       locationNode = this.createLocationNode(aSourceURL, aSourceLine);
     }
 
@@ -2291,44 +2267,39 @@ WebConsoleFrame.prototype = {
     node.timestamp = timestamp;
     this.setMessageType(node, aCategory, aSeverity);
 
     node.appendChild(timestampNode);
     node.appendChild(iconContainer);
 
     // Display the variables view after the message node.
     if (aLevel == "dir") {
-      let viewContainer = this.document.createElement("hbox");
-      viewContainer.flex = 1;
-      viewContainer.height = this.outputNode.clientHeight *
-                             CONSOLE_DIR_VIEW_HEIGHT;
+      bodyNode.style.height = (this.window.innerHeight *
+                               CONSOLE_DIR_VIEW_HEIGHT) + "px";
+      console.log("height", this.window.innerHeight);
 
       let options = {
         objectActor: body.arguments[0],
-        targetElement: viewContainer,
+        targetElement: bodyNode,
         hideFilterInput: true,
       };
       this.jsterm.openVariablesView(options).then((aView) => {
         node._variablesView = aView;
         if (node.classList.contains("hidden-message")) {
           node.classList.remove("hidden-message");
         }
       });
 
-      let bodyContainer = this.document.createElement("vbox");
-      bodyContainer.flex = 1;
-      bodyContainer.appendChild(bodyNode);
-      bodyContainer.appendChild(viewContainer);
-      node.appendChild(bodyContainer);
       node.classList.add("webconsole-msg-inspector");
     }
-    else {
-      node.appendChild(bodyNode);
-    }
-    node.appendChild(repeatContainer);
+
+    node.appendChild(bodyNode);
+    if (repeatNode) {
+      node.appendChild(repeatNode);
+    }
     if (locationNode) {
       node.appendChild(locationNode);
     }
 
     node.setAttribute("id", "console-msg-" + gSequenceId());
 
     return node;
   },
@@ -2368,36 +2339,36 @@ WebConsoleFrame.prototype = {
 
       let text = VariablesView.getString(aItem);
       let inspectable = !VariablesView.isPrimitive({ value: aItem });
 
       if (aItem && typeof aItem != "object" || !inspectable) {
         aContainer.appendChild(this.document.createTextNode(text));
 
         if (aItem.type && aItem.type == "longString") {
-          let ellipsis = this.document.createElement("description");
+          let ellipsis = this.document.createElementNS(XHTML_NS, "a");
           ellipsis.classList.add("hud-clickable");
           ellipsis.classList.add("longStringEllipsis");
           ellipsis.textContent = l10n.getStr("longStringEllipsis");
 
           let formatter = function(s) '"' + s + '"';
 
           this._addMessageLinkCallback(ellipsis,
             this._longStringClick.bind(this, aMessage, aItem, formatter));
 
           aContainer.appendChild(ellipsis);
         }
         return;
       }
 
       // For inspectable objects.
-      let elem = this.document.createElement("description");
+      let elem = this.document.createElementNS(XHTML_NS, "a");
       elem.classList.add("hud-clickable");
       elem.setAttribute("aria-haspopup", "true");
-      elem.appendChild(this.document.createTextNode(text));
+      elem.textContent = text;
 
       this._addMessageLinkCallback(elem,
         this._consoleLogClick.bind(this, elem, aItem));
 
       aContainer.appendChild(elem);
     }, this);
   },
 
@@ -2464,17 +2435,17 @@ WebConsoleFrame.prototype = {
    * @param number aSourceLine [optional]
    *        The line number on which the error occurred. If zero or omitted,
    *        there is no line number associated with this message.
    * @return nsIDOMNode
    *         The new XUL label node, ready to be added to the message node.
    */
   createLocationNode: function WCF_createLocationNode(aSourceURL, aSourceLine)
   {
-    let locationNode = this.document.createElementNS(XUL_NS, "label");
+    let locationNode = this.document.createElementNS(XHTML_NS, "a");
 
     // Create the text, which consists of an abbreviated version of the URL
     // plus an optional line number. Scratchpad URLs should not be abbreviated.
     let displayLocation;
     let fullURL;
 
     if (/^Scratchpad\/\d+$/.test(aSourceURL)) {
       displayLocation = aSourceURL;
@@ -2485,27 +2456,26 @@ WebConsoleFrame.prototype = {
       displayLocation = WebConsoleUtils.abbreviateSourceURL(fullURL);
     }
 
     if (aSourceLine) {
       displayLocation += ":" + aSourceLine;
       locationNode.sourceLine = aSourceLine;
     }
 
-    locationNode.setAttribute("value", displayLocation);
+    locationNode.textContent = displayLocation;
 
     // Style appropriately.
-    locationNode.setAttribute("crop", "center");
-    locationNode.setAttribute("title", aSourceURL);
-    locationNode.setAttribute("tooltiptext", aSourceURL);
+    locationNode.title = aSourceURL;
     locationNode.classList.add("webconsole-location");
     locationNode.classList.add("text-link");
 
     // Make the location clickable.
     locationNode.addEventListener("click", () => {
+      // FIXME: fix link clicks
       if (/^Scratchpad\/\d+$/.test(aSourceURL)) {
         let wins = Services.wm.getEnumerator("devtools:scratchpad");
 
         while (wins.hasMoreElements()) {
           let win = wins.getNext();
 
           if (win.Scratchpad.uniqueName === aSourceURL) {
             win.focus();
@@ -3055,17 +3025,17 @@ JSTerm.prototype = {
     if (WebConsoleUtils.isActorGrip(result)) {
       node._objectActors.add(result.actor);
 
       if (result.type == "longString") {
         // Add an ellipsis to expand the short string if the object is not
         // inspectable.
 
         let body = node.querySelector(".webconsole-msg-body");
-        let ellipsis = this.hud.document.createElement("description");
+        let ellipsis = this.hud.document.createElementNS(XHTML_NS, "a");
         ellipsis.classList.add("hud-clickable");
         ellipsis.classList.add("longStringEllipsis");
         ellipsis.textContent = l10n.getStr("longStringEllipsis");
 
         let formatter = function(s) '"' + s + '"';
         let onclick = this.hud._longStringClick.bind(this.hud, node, result,
                                                     formatter);
         this.hud._addMessageLinkCallback(ellipsis, onclick);
@@ -3231,17 +3201,17 @@ JSTerm.prototype = {
       return view;
     };
 
     let promise;
     if (aOptions.targetElement) {
       let deferred = Promise.defer();
       promise = deferred.promise;
       let document = aOptions.targetElement.ownerDocument;
-      let iframe = document.createElement("iframe");
+      let iframe = document.createElementNS(XHTML_NS, "iframe");
 
       iframe.addEventListener("load", function onIframeLoad(aEvent) {
         iframe.removeEventListener("load", onIframeLoad, true);
         deferred.resolve(iframe.contentWindow);
       }, true);
 
       iframe.flex = 1;
       iframe.setAttribute("src", VARIABLES_VIEW_URL);
@@ -3656,17 +3626,17 @@ JSTerm.prototype = {
 
   /**
    * Remove all of the private messages from the Web Console output.
    *
    * This method emits the "private-messages-cleared" notification.
    */
   clearPrivateMessages: function JST_clearPrivateMessages()
   {
-    let nodes = this.hud.outputNode.querySelectorAll("richlistitem[private]");
+    let nodes = this.hud.outputNode.querySelectorAll(".hud-msg-node[private]");
     for (let node of nodes) {
       this.hud.removeOutputMessage(node);
     }
     this.emit("private-messages-cleared");
   },
 
   /**
    * Updates the size of the input field (command line) to fit its contents.
@@ -4356,48 +4326,36 @@ var Utils = {
    * element.
    *
    * @param nsIDOMNode aNode
    *        The node to make visible.
    * @returns void
    */
   scrollToVisible: function Utils_scrollToVisible(aNode)
   {
-    if (!this.scroll) {
-      return;
-    }
-
-    // Find the enclosing richlistbox node.
-    let richListBoxNode = aNode.parentNode;
-    while (richListBoxNode.tagName != "richlistbox") {
-      richListBoxNode = richListBoxNode.parentNode;
-    }
-
-    // Use the scroll box object interface to ensure the element is visible.
-    let boxObject = richListBoxNode.scrollBoxObject;
-    let nsIScrollBoxObject = boxObject.QueryInterface(Ci.nsIScrollBoxObject);
-    nsIScrollBoxObject.ensureElementIsVisible(aNode);
+    if (this.scroll) {
+      aNode.scrollIntoView(false);
+    }
   },
 
   /**
    * Check if the given output node is scrolled to the bottom.
    *
    * @param nsIDOMNode aOutputNode
    * @return boolean
    *         True if the output node is scrolled to the bottom, or false
    *         otherwise.
    */
   isOutputScrolledToBottom: function Utils_isOutputScrolledToBottom(aOutputNode)
   {
+    // FIXME: this fails
     let lastNodeHeight = aOutputNode.lastChild ?
                          aOutputNode.lastChild.clientHeight : 0;
-    let scrollBox = aOutputNode.scrollBoxObject.element;
-
-    return scrollBox.scrollTop + scrollBox.clientHeight >=
-           scrollBox.scrollHeight - lastNodeHeight / 2;
+    return aOutputNode.scrollTop + aOutputNode.clientHeight >=
+           aOutputNode.scrollHeight - lastNodeHeight / 2;
   },
 
   /**
    * Determine the category of a given nsIScriptError.
    *
    * @param nsIScriptError aScriptError
    *        The script error you want to determine the category for.
    * @return CATEGORY_JS|CATEGORY_CSS|CATEGORY_SECURITY
diff --git a/browser/devtools/webconsole/webconsole.xul b/browser/devtools/webconsole/webconsole.xul
--- a/browser/devtools/webconsole/webconsole.xul
+++ b/browser/devtools/webconsole/webconsole.xul
@@ -158,19 +158,20 @@ function goUpdateConsoleCommands() {
                        tabindex="8"/>
 
         <spacer flex="1"/>
 
         <textbox class="compact hud-filter-box devtools-searchinput" type="search"
                  placeholder="&filterOutput.placeholder;" tabindex="2"/>
       </toolbar>
 
-      <richlistbox class="hud-output-node" orient="vertical" flex="1"
-                   seltype="multiple" context="output-contextmenu"
-                   style="direction:ltr;" tabindex="1"/>
+      <hbox id="output-wrapper" flex="1" context="output-contextmenu">
+        <div xmlns="http://www.w3.org/1999/xhtml"
+             id="output-container" tabindex="1"/>
+      </hbox>
 
       <hbox class="jsterm-input-container" style="direction:ltr">
         <stack class="jsterm-stack-node" flex="1">
           <textbox class="jsterm-complete-node" multiline="true" rows="1"
                    tabindex="-1"/>
           <textbox class="jsterm-input-node" multiline="true" rows="1" tabindex="0"/>
         </stack>
       </hbox>
diff --git a/browser/themes/shared/devtools/webconsole.inc.css b/browser/themes/shared/devtools/webconsole.inc.css
--- a/browser/themes/shared/devtools/webconsole.inc.css
+++ b/browser/themes/shared/devtools/webconsole.inc.css
@@ -1,38 +1,55 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 /* General output styles */
 
+a {
+  -moz-user-focus: normal;
+  -moz-user-input: enabled;
+  cursor: pointer;
+}
+
+a:focus {
+  outline: 1px dashed gray;
+}
+
 .webconsole-timestamp {
+  flex: 0 0 auto;
   color: GrayText;
   margin-top: 0;
   margin-bottom: 0;
   font-family: monospace;
 }
 
 .hud-msg-node {
-  list-style-image: url(chrome://browser/skin/devtools/webconsole.png);
-  -moz-image-region: rect(0, 1px, 0, 0);
+  display: flex;
+}
+
+.hud-msg-node > .webconsole-msg-icon {
+  background: -moz-image-rect(url(chrome://browser/skin/devtools/webconsole.png), 0, 1, 0, 0) no-repeat;
+  background-position: center 8px;
 }
 
 .webconsole-msg-icon {
-  margin: 3px 4px;
+  flex: 0 0 auto;
+  -moz-margin-start: 4px;
+  padding: 0 4px;
   width: 8px;
-  height: 8px;
 }
 
 .hud-clickable {
   cursor: pointer;
   text-decoration: underline;
 }
 
 .webconsole-msg-body {
+  flex: 1 1 100%;
   margin-top: 0;
   margin-bottom: 3px;
   -moz-margin-start: 3px;
   -moz-margin-end: 6px;
   white-space: pre-wrap;
   font-family: monospace;
 }
 
@@ -41,67 +58,75 @@
 }
 
 .webconsole-msg-url {
   margin: 0 6px;
 }
 
 /* Repeated messages */
 .webconsole-msg-repeat {
-  margin: 2px 0;
-  padding-left: 4px;
-  padding-right: 4px;
+  flex: 0 0 auto;
+  margin: 2px 6px;
+  padding: 0 6px;
+  height: 1.25em;
   color: white;
   background-color: red;
   border-radius: 40px;
   font: message-box;
   font-size: 0.9em;
   font-weight: 600;
 }
 
 .webconsole-msg-repeat[value="1"] {
   display: none;
 }
 
+/* FIXME: see .text-link */
 .webconsole-location {
-  margin-top: 0;
-  margin-bottom: 0;
-  -moz-margin-start: 0;
+  flex: 0 0 auto;
   -moz-margin-end: 6px;
   width: 10em;
   text-align: end;
+  color: -moz-nativehyperlinktext;
+}
+
+.webconsole-location:hover,
+.webconsole-location:focus {
+  text-decoration: underline;
 }
 
 .webconsole-mixed-content {
   color: #FF0000;
 }
 
 .webconsole-mixed-content-link {
   color: #0000EE;
   margin: 0;
 }
 
-.hud-msg-node[selected="true"] > .webconsole-timestamp,
-.hud-msg-node[selected="true"] > .webconsole-location {
-  color: inherit;
-}
-
 .jsterm-input-container {
   background: white;
 }
 
 .jsterm-input-node,
 .jsterm-complete-node {
   font-family: monospace;
 }
 
-.hud-output-node {
-  -moz-appearance: none;
+#output-wrapper {
+  background: #fff;
+  color: #000;
+  direction: ltr;
   border-bottom: 1px solid ThreeDShadow;
-  margin: 0;
+  overflow: auto;
+}
+
+#output-container {
+  -moz-user-select: text;
+  -moz-box-flex: 1;
 }
 
 .hud-filtered-by-type,
 .hud-filtered-by-string {
   display: none;
 }
 
 .hidden-message {
@@ -133,95 +158,95 @@
 }
 
 /* Network styles */
 .webconsole-filter-button[category="net"] > .toolbarbutton-menubutton-button:before {
   background-image: linear-gradient(#444444, #000000);
   border-color: #777;
 }
 
-.webconsole-msg-network > .webconsole-msg-icon-container {
+.webconsole-msg-network > .webconsole-msg-icon {
   -moz-border-start: solid #000 6px;
 }
 
-.webconsole-msg-network.webconsole-msg-error {
-  -moz-image-region: rect(0, 16px, 8px, 8px);
+.webconsole-msg-network.webconsole-msg-error > .webconsole-msg-icon {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/webconsole.png), 0, 16, 8, 8);
 }
 
 /* CSS styles */
 .webconsole-filter-button[category="css"] > .toolbarbutton-menubutton-button:before {
   background-image: linear-gradient(#2DC3F3, #00B6F0);
   border-color: #1BA2CC;
 }
 
-.webconsole-msg-cssparser > .webconsole-msg-icon-container {
+.webconsole-msg-cssparser > .webconsole-msg-icon {
   -moz-border-start: solid #00b6f0 6px;
 }
 
-.webconsole-msg-cssparser.webconsole-msg-error {
-  -moz-image-region: rect(8px, 16px, 16px, 8px);
+.webconsole-msg-cssparser.webconsole-msg-error > .webconsole-msg-icon {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/webconsole.png), 8, 16, 16, 8);
 }
 
-.webconsole-msg-cssparser.webconsole-msg-warn {
-  -moz-image-region: rect(8px, 24px, 16px, 16px);
+.webconsole-msg-cssparser.webconsole-msg-warn > .webconsole-msg-icon {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/webconsole.png), 8, 24, 16, 16);
 }
 
 /* JS styles */
 .webconsole-filter-button[category="js"] > .toolbarbutton-menubutton-button:before {
   background-image: linear-gradient(#FCB142, #FB9500);
   border-color: #E98A00;
 }
 
-.webconsole-msg-exception > .webconsole-msg-icon-container {
+.webconsole-msg-exception > .webconsole-msg-icon {
   -moz-border-start: solid #fb9500 6px;
 }
 
-.webconsole-msg-exception.webconsole-msg-error {
-  -moz-image-region: rect(16px, 16px, 24px, 8px);
+.webconsole-msg-exception.webconsole-msg-error > .webconsole-msg-icon {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/webconsole.png), 16, 16, 24, 8);
 }
 
-.webconsole-msg-exception.webconsole-msg-warn {
-  -moz-image-region: rect(16px, 24px, 24px, 16px);
+.webconsole-msg-exception.webconsole-msg-warn > .webconsole-msg-icon {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/webconsole.png), 16, 24, 24, 16);
 }
 
 /* Web Developer styles */
 .webconsole-filter-button[category="logging"] > .toolbarbutton-menubutton-button:before {
   background-image: linear-gradient(#B9B9B9, #AAAAAA);
   border-color: #929292;
 }
 
-.webconsole-msg-console > .webconsole-msg-icon-container {
+.webconsole-msg-console > .webconsole-msg-icon {
   -moz-border-start: solid #cbcbcb 6px;
 }
 
-.webconsole-msg-console.webconsole-msg-error,
-.webconsole-msg-output.webconsole-msg-error {
-  -moz-image-region: rect(24px, 16px, 32px, 8px);
+.webconsole-msg-console.webconsole-msg-error > .webconsole-msg-icon,
+.webconsole-msg-output.webconsole-msg-error > .webconsole-msg-icon {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/webconsole.png), 24, 16, 32, 8);
 }
 
-.webconsole-msg-console.webconsole-msg-warn {
-  -moz-image-region: rect(24px, 24px, 32px, 16px);
+.webconsole-msg-console.webconsole-msg-warn > .webconsole-msg-icon {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/webconsole.png), 24, 24, 32, 16);
 }
 
-.webconsole-msg-console.webconsole-msg-info {
-  -moz-image-region: rect(24px, 32px, 32px, 24px);
+.webconsole-msg-console.webconsole-msg-info > .webconsole-msg-icon {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/webconsole.png), 24, 32, 32, 24);
 }
 
 /* Input and output styles */
-.webconsole-msg-input > .webconsole-msg-icon-container,
-.webconsole-msg-output > .webconsole-msg-icon-container {
-  border-left: solid #808080 6px;
+.webconsole-msg-input > .webconsole-msg-icon,
+.webconsole-msg-output > .webconsole-msg-icon {
+  -moz-border-start: solid #808080 6px;
 }
 
-.webconsole-msg-input {
-  -moz-image-region: rect(24px, 40px, 32px, 32px);
+.webconsole-msg-input > .webconsole-msg-icon {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/webconsole.png), 24, 40, 32, 32);
 }
 
-.webconsole-msg-output {
-  -moz-image-region: rect(24px, 48px, 32px, 40px);
+.webconsole-msg-output > .webconsole-msg-icon {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/webconsole.png), 24, 48, 32, 40);
 }
 
 /* JSTerm Styles */
 .jsterm-input-node,
 .jsterm-complete-node {
   border: none;
   padding: 0 0 0 16px;
   -moz-appearance: none;
@@ -235,46 +260,52 @@
           .jsterm-complete-node) > .textbox-input-box > .textbox-textarea {
   overflow-x: hidden;
 }
 
 .jsterm-complete-node > .textbox-input-box > .textbox-textarea {
   color: GrayText;
 }
 
+.webconsole-msg-inspector .webconsole-msg-body {
+  display: flex;
+  flex-direction: column;
+}
 .webconsole-msg-inspector iframe {
-  height: 7em;
+  display: block;
+  flex: 1;
   margin-bottom: 15px;
   -moz-margin-end: 15px;
+  border: 1px solid #ccc;
   border-radius: 4px;
   box-shadow: 0 0 12px #dfdfdf;
 }
 
 #webconsole-sidebar > tabs {
   height: 0;
   border: none;
 }
 
 /* Security styles */
 
-.webconsole-msg-security > .webconsole-msg-icon-container {
+.webconsole-msg-security > .webconsole-msg-icon {
   -moz-border-start: solid red 6px;
 }
 
 .webconsole-filter-button[category="security"] > .toolbarbutton-menubutton-button:before {
   background-image: linear-gradient(#FF3030, #FF7D7D);
   border-color: #D12C2C;
 }
 
-.webconsole-msg-security.webconsole-msg-error {
-  -moz-image-region: rect(32px, 16px, 40px, 8px);
+.webconsole-msg-security.webconsole-msg-error > .webconsole-msg-icon {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/webconsole.png), 32, 16, 40, 8);
 }
 
-.webconsole-msg-security.webconsole-msg-warn {
-  -moz-image-region: rect(32px, 24px, 40px, 16px);
+.webconsole-msg-security.webconsole-msg-warn > .webconsole-msg-icon {
+  background-image: -moz-image-rect(url(chrome://browser/skin/devtools/webconsole.png), 32, 24, 40, 16);
 }
 
 .navigation-marker {
   color: #aaa;
   background: linear-gradient(#fff, #bbb, #fff) no-repeat left 50%;
   background-size: 100% 2px;
   -moz-margin-start: 3px;
   -moz-margin-end: 6px;
