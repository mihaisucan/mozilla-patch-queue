# HG changeset patch
# Parent 70e94a4be8121717419bc1f095fc900d39b7c4e4
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1365626467 -10800

Bug 859170 - Trying to select [...] for a very long message printed to the web console will hang Firefox; r=past; try: -b do -p linux,linux64,macosx64,win32,win64 -u mochitest-bc -t none

diff --git a/browser/devtools/webconsole/test/Makefile.in b/browser/devtools/webconsole/test/Makefile.in
--- a/browser/devtools/webconsole/test/Makefile.in
+++ b/browser/devtools/webconsole/test/Makefile.in
@@ -115,16 +115,17 @@ MOCHITEST_BROWSER_FILES = \
 	browser_output_longstring_expand.js \
 	browser_netpanel_longstring_expand.js \
 	browser_repeated_messages_accuracy.js \
 	browser_webconsole_bug_821877_csp_errors.js \
 	browser_eval_in_debugger_stackframe.js \
 	browser_console_variables_view.js \
 	browser_console_variables_view_while_debugging.js \
 	browser_console.js \
+	browser_longstring_hang.js \
 	head.js \
 	$(NULL)
 
 ifeq ($(OS_ARCH), Darwin)
 MOCHITEST_BROWSER_FILES += \
         browser_webconsole_bug_804845_ctrl_key_nav.js \
         $(NULL)
 endif
diff --git a/browser/devtools/webconsole/test/browser_longstring_hang.js b/browser/devtools/webconsole/test/browser_longstring_hang.js
new file mode 100644
--- /dev/null
+++ b/browser/devtools/webconsole/test/browser_longstring_hang.js
@@ -0,0 +1,109 @@
+/* vim:set ts=2 sw=2 sts=2 et: */
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/ */
+
+// Test that very long strings do not hang the browser.
+
+function test()
+{
+  waitForExplicitFinish();
+
+  let DebuggerServer = Cu.import("resource://gre/modules/devtools/dbg-server.jsm",
+                                 {}).DebuggerServer;
+
+  let longString = "foobar" +
+                   (new Array(DebuggerServer.LONG_STRING_LENGTH + 4)).join("a") +
+                   "foobaz";
+
+  let veryLongString = "abbababazomglolztest";
+  for (let i = 0; i < 14; i++) {
+    veryLongString += veryLongString + veryLongString;
+  }
+
+  longString += veryLongString + "boom!";
+
+  addTab("data:text/html;charset=utf8,test for bug 859170 - check that very long strings do not hang the browser.");
+
+  let hud = null;
+
+  gBrowser.selectedBrowser.addEventListener("load", function onLoad() {
+    gBrowser.selectedBrowser.removeEventListener("load", onLoad, true);
+    openConsole(null, performTest);
+  }, true);
+
+  function performTest(aHud)
+  {
+    hud = aHud;
+
+    content.wrappedJSObject.longString = longString;
+
+    hud.jsterm.clearOutput(true);
+    hud.jsterm.execute("console.log(window.longString)");
+
+    info("wait for console.log() result");
+
+    waitForMessages({
+      webconsole: hud,
+      messages: [
+        {
+          text: "console.log(window.longString)",
+          category: CATEGORY_INPUT,
+          longString: false,
+        },
+        {
+          name: "find 'foobar', no 'foobaz', in long string output",
+          text: "foobar",
+          noText: "foobaz",
+          category: CATEGORY_WEBDEV,
+          longString: true,
+        },
+      ],
+    }).then(onInitialString);
+  }
+
+  function onInitialString(aResults)
+  {
+    let msg = [...aResults[1].matched][0];
+    ok(msg, "console.log result message element");
+
+    let clickable = msg.querySelector(".longStringEllipsis");
+    ok(clickable, "long string ellipsis is shown");
+
+    scrollToVisible(clickable);
+
+    executeSoon(() => {
+      EventUtils.synthesizeMouse(clickable, 2, 2, {}, hud.iframeWindow);
+
+      info("wait for long string expansion");
+
+      waitForMessages({
+        webconsole: hud,
+        messages: [
+          {
+            name: "find 'foobaz' after expand, but no 'boom!' at the end",
+            text: "foobaz",
+            noText: "boom!",
+            category: CATEGORY_WEBDEV,
+            longString: false,
+          },
+          {
+            text: "too long to be displayed",
+            longString: false,
+          },
+        ],
+      }).then(finishTest);
+    });
+  }
+
+  function scrollToVisible(aNode)
+  {
+    let richListBoxNode = aNode.parentNode;
+    while (richListBoxNode.tagName != "richlistbox") {
+      richListBoxNode = richListBoxNode.parentNode;
+    }
+
+    let boxObject = richListBoxNode.scrollBoxObject;
+    let nsIScrollBoxObject = boxObject.QueryInterface(Ci.nsIScrollBoxObject);
+    nsIScrollBoxObject.ensureElementIsVisible(aNode);
+  }
+}
diff --git a/browser/devtools/webconsole/test/head.js b/browser/devtools/webconsole/test/head.js
--- a/browser/devtools/webconsole/test/head.js
+++ b/browser/devtools/webconsole/test/head.js
@@ -871,30 +871,38 @@ function waitForMessages(aOptions)
 {
   gPendingOutputTest++;
   let webconsole = aOptions.webconsole;
   let rules = WebConsoleUtils.cloneObject(aOptions.messages, true);
   let rulesMatched = 0;
   let listenerAdded = false;
   let deferred = Promise.defer();
 
+  function checkText(aRule, aText)
+  {
+    let result;
+    if (typeof aRule == "string") {
+      result = aText.indexOf(aRule) > -1;
+    }
+    else if (aRule instanceof RegExp) {
+      result = aRule.test(aText);
+    }
+    return result;
+  }
+
   function checkMessage(aRule, aElement)
   {
-    if (aRule.text) {
-      let elemText = getMessageElementText(aElement);
-      let matched = false;
-      if (typeof aRule.text == "string") {
-        matched = elemText.indexOf(aRule.text) > -1;
-      }
-      else if (aRule.text instanceof RegExp) {
-        matched = aRule.text.test(elemText);
-      }
-      if (!matched) {
-        return false;
-      }
+    let elemText = getMessageElementText(aElement);
+
+    if (aRule.text && !checkText(aRule.text, elemText)) {
+      return false;
+    }
+
+    if (aRule.noText && checkText(aRule.noText, elemText)) {
+      return false;
     }
 
     if (aRule.category) {
       if (aElement.category != aRule.category) {
         return false;
       }
     }
 
@@ -906,16 +914,21 @@ function waitForMessages(aOptions)
 
     if (aRule.repeats) {
       let repeats = aElement.querySelector(".webconsole-msg-repeat");
       if (!repeats || repeats.getAttribute("value") != aRule.repeats) {
         return false;
       }
     }
 
+    let longString = !!aElement.querySelector(".longStringEllipsis");
+    if ("longString" in aRule && aRule.longString != longString) {
+      return false;
+    }
+
     let count = aRule.count || 1;
     if (!aRule.matched) {
       aRule.matched = new Set();
     }
     aRule.matched.add(aElement);
 
     return aRule.matched.size == count;
   }
@@ -941,16 +954,17 @@ function waitForMessages(aOptions)
     }
   }
 
   function maybeDone()
   {
     if (rulesMatched == rules.length) {
       if (listenerAdded) {
         webconsole.ui.off("messages-added", onMessagesAdded);
+        webconsole.ui.off("messages-updated", onMessagesAdded);
       }
       gPendingOutputTest--;
       deferred.resolve(rules);
       return true;
     }
     return false;
   }
 
@@ -976,13 +990,14 @@ function waitForMessages(aOptions)
   }
 
   executeSoon(() => {
     onMessagesAdded("messages-added", webconsole.outputNode.childNodes);
     if (rulesMatched != rules.length) {
       listenerAdded = true;
       registerCleanupFunction(testCleanup);
       webconsole.ui.on("messages-added", onMessagesAdded);
+      webconsole.ui.on("messages-updated", onMessagesAdded);
     }
   });
 
   return deferred.promise;
 }
diff --git a/browser/devtools/webconsole/webconsole.js b/browser/devtools/webconsole/webconsole.js
--- a/browser/devtools/webconsole/webconsole.js
+++ b/browser/devtools/webconsole/webconsole.js
@@ -166,16 +166,19 @@ const OUTPUT_INTERVAL = 50; // milliseco
 const THROTTLE_UPDATES = 1000; // milliseconds
 
 // The preference prefix for all of the Web Console filters.
 const FILTER_PREFS_PREFIX = "devtools.webconsole.filter.";
 
 // The minimum font size.
 const MIN_FONT_SIZE = 10;
 
+// The maximum length of strings to be displayed by the Web Console.
+const MAX_LONG_STRING_LENGTH = 500000;
+
 const PREF_CONNECTION_TIMEOUT = "devtools.debugger.remote-timeout";
 
 /**
  * A WebConsoleFrame instance is an interactive console initialized *per target*
  * that displays console log data as well as provides an interactive terminal to
  * manipulate the target's document content.
  *
  * The WebConsoleFrame is responsible for the actual Web Console UI
@@ -1314,27 +1317,37 @@ WebConsoleFrame.prototype = {
    *        The file URI that was requested.
    */
   handleFileActivity: function WCF_handleFileActivity(aFileURI)
   {
     this.outputMessage(CATEGORY_NETWORK, this.logFileActivity, [aFileURI]);
   },
 
   /**
-   * Inform user that the Web Console API has been replaced by a script
+   * Inform user that the window.console API has been replaced by a script
    * in a content page.
    */
   logWarningAboutReplacedAPI: function WCF_logWarningAboutReplacedAPI()
   {
     let node = this.createMessageNode(CATEGORY_JS, SEVERITY_WARNING,
                                       l10n.getStr("ConsoleAPIDisabled"));
     this.outputMessage(CATEGORY_JS, node);
   },
 
   /**
+   * Inform user that the string he tries to view is too long.
+   */
+  logWarningAboutStringTooLong: function WCF_logWarningAboutStringTooLong()
+  {
+    let node = this.createMessageNode(CATEGORY_JS, SEVERITY_WARNING,
+                                      l10n.getStr("longStringTooLong"));
+    this.outputMessage(CATEGORY_JS, node);
+  },
+
+  /**
    * Handle the network events coming from the remote Web Console.
    *
    * @param object aActor
    *        The NetworkEventActor grip.
    */
   handleNetworkEvent: function WCF_handleNetworkEvent(aActor)
   {
     let networkInfo = {
@@ -1690,21 +1703,27 @@ WebConsoleFrame.prototype = {
     let outputNode = this.outputNode;
     let lastVisibleNode = null;
     let scrolledToBottom = Utils.isOutputScrolledToBottom(outputNode);
     let scrollBox = outputNode.scrollBoxObject.element;
 
     let hudIdSupportsString = WebConsoleUtils.supportsString(this.hudId);
 
     // Output the current batch of messages.
-    let newOrUpdatedNodes = new Set();
+    let newMessages = new Set();
+    let updatedMessages = new Set();
     for (let item of batch) {
       let result = this._outputMessageFromQueue(hudIdSupportsString, item);
       if (result) {
-        newOrUpdatedNodes.add(result.isRepeated || result.node);
+        if (result.isRepeated) {
+          updatedMessages.add(result.isRepeated);
+        }
+        else {
+          newMessages.add(result.node);
+        }
         if (result.visible && result.node == this.outputNode.lastChild) {
           lastVisibleNode = result.node;
         }
       }
     }
 
     let oldScrollHeight = 0;
 
@@ -1738,17 +1757,22 @@ WebConsoleFrame.prototype = {
     }
     else if (!scrolledToBottom && removedNodes > 0 &&
              oldScrollHeight != scrollBox.scrollHeight) {
       // If there were pruned messages and if scroll is not at the bottom, then
       // we need to adjust the scroll location.
       scrollBox.scrollTop -= oldScrollHeight - scrollBox.scrollHeight;
     }
 
-    this.emit("messages-added", newOrUpdatedNodes);
+    if (newMessages.size) {
+      this.emit("messages-added", newMessages);
+    }
+    if (updatedMessages.size) {
+      this.emit("messages-updated", updatedMessages);
+    }
 
     // If the queue is not empty, schedule another flush.
     if (this._outputQueue.length > 0) {
       this._initOutputTimer();
     }
     else {
       this._outputTimerInitialized = false;
       this._flushCallback && this._flushCallback();
@@ -2250,33 +2274,40 @@ WebConsoleFrame.prototype = {
   {
     aEvent.preventDefault();
 
     if (!aFormatter) {
       aFormatter = function(s) s;
     }
 
     let longString = this.webConsoleClient.longString(aActor);
-    longString.substring(longString.initial.length, longString.length,
+    let toIndex = Math.min(longString.length, MAX_LONG_STRING_LENGTH);
+    longString.substring(longString.initial.length, toIndex,
       function WCF__onSubstring(aResponse) {
         if (aResponse.error) {
           Cu.reportError("WCF__longStringClick substring failure: " +
                          aResponse.error);
           return;
         }
 
         let node = aEllipsis.previousSibling;
         node.textContent = aFormatter(longString.initial + aResponse.substring);
         aEllipsis.parentNode.removeChild(aEllipsis);
 
         if (aMessage.category == CATEGORY_WEBDEV ||
             aMessage.category == CATEGORY_OUTPUT) {
           aMessage.clipboardText = aMessage.textContent;
         }
-      });
+
+        this.emit("messages-updated", new Set([aMessage]));
+
+        if (toIndex != longString.length) {
+          this.logWarningAboutStringTooLong();
+        }
+      }.bind(this));
   },
 
   /**
    * Creates the XUL label that displays the textual location of an incoming
    * message.
    *
    * @param string aSourceURL
    *        The URL of the source file responsible for the error.
@@ -3472,27 +3503,32 @@ JSTerm.prototype = {
     aVar._fetched = true;
 
     let grip = aVar.value;
     if (!grip) {
       throw new Error("No long string actor grip was given for the variable.");
     }
 
     let client = this.webConsoleClient.longString(grip);
-    client.substring(grip.initial.length, grip.length, (aResponse) => {
+    let toIndex = Math.min(grip.length, MAX_LONG_STRING_LENGTH);
+    client.substring(grip.initial.length, toIndex, (aResponse) => {
       if (aResponse.error) {
         Cu.reportError("JST__fetchVarLongString substring failure: " +
                        aResponse.error + ": " + aResponse.message);
         return;
       }
 
       aVar.onexpand = null;
       aVar.setGrip(grip.initial + aResponse.substring);
       aVar.hideArrow();
       aVar._retrieved = true;
+
+      if (toIndex != grip.length) {
+        this.hud.logWarningAboutStringTooLong();
+      }
     });
   },
 
   /**
    * Writes a JS object to the JSTerm outputNode.
    *
    * @param string aOutputMessage
    *        The message to display.
diff --git a/browser/locales/en-US/chrome/browser/devtools/webconsole.properties b/browser/locales/en-US/chrome/browser/devtools/webconsole.properties
--- a/browser/locales/en-US/chrome/browser/devtools/webconsole.properties
+++ b/browser/locales/en-US/chrome/browser/devtools/webconsole.properties
@@ -175,16 +175,20 @@ ToolboxWebconsole.label=Web Console
 # displayed inside the developer tools window.
 ToolboxWebconsole.tooltip=Web Console
 
 # LOCALIZATION NOTE (longStringEllipsis): The string displayed after a long
 # string. This string is clickable such that the rest of the string is retrieved
 # from the server.
 longStringEllipsis=[…]
 
+# LOCALIZATION NOTE (longStringTooLong): The string displayed after the user
+# tries to expand a long string.
+longStringTooLong=The string you are trying to view is too long to be displayed by the Web Console.
+
 # LOCALIZATION NOTE (executeEmptyInput): This is displayed when the user tries
 # to execute code, but the input is empty.
 executeEmptyInput=No value to execute.
 
 # LOCALIZATION NOTE (NetworkPanel.fetchRemainingResponseContentLink): This is
 # displayed in the network panel when the response body is only partially
 # available.
 NetworkPanel.fetchRemainingResponseContentLink=Fetch the remaining %1$S bytes
