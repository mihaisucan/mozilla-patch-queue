# HG changeset patch
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1339431826 -10800
# Node ID 610147f26e4e943fc5a34a77a0d70336882ff93f
# Parent af2a59c2334728db194971a51392b5eb27a70b9d
Bug 761157 - Sometimes network requests do not display all information

diff --git a/browser/devtools/webconsole/HUDService.jsm b/browser/devtools/webconsole/HUDService.jsm
--- a/browser/devtools/webconsole/HUDService.jsm
+++ b/browser/devtools/webconsole/HUDService.jsm
@@ -1029,21 +1029,31 @@ function HeadsUpDisplay(aTab)
 
   // create the JSTerm input element
   this.jsterm = new JSTerm(this);
   this.jsterm.inputNode.focus();
 
   // A cache for tracking repeated CSS Nodes.
   this.cssNodes = {};
 
+  this._networkRequests = {};
+
   this._setupMessageManager();
 }
 
 HeadsUpDisplay.prototype = {
   /**
+   * Holds the network requests currently displayed by the Web Console. Each key
+   * represents the connection ID and the value is network request information.
+   * @private
+   * @type object
+   */
+  _networkRequests: null,
+
+  /**
    * Last time when we displayed any message in the output. Timestamp in
    * milliseconds since the Unix epoch.
    *
    * @private
    * @type number
    */
   _lastOutputFlush: 0,
 
@@ -1830,17 +1840,20 @@ HeadsUpDisplay.prototype = {
    * cleanup for the tree widget and removes it from the DOM.
    *
    * @param nsIDOMNode aMessageNode
    *        The message node that contains the property inspector from a
    *        console.dir call.
    */
   pruneConsoleDirNode: function HUD_pruneConsoleDirNode(aMessageNode)
   {
-    aMessageNode.parentNode.removeChild(aMessageNode);
+    if (aMessageNode.parentNode) {
+      aMessageNode.parentNode.removeChild(aMessageNode);
+    }
+
     let tree = aMessageNode.querySelector("tree");
     tree.parentNode.removeChild(tree);
     aMessageNode.propertyTreeView = null;
     if (tree.view) {
       tree.view.data = null;
     }
     tree.view = null;
   },
@@ -2129,23 +2142,28 @@ HeadsUpDisplay.prototype = {
                                                      CATEGORY_NETWORK,
                                                      SEVERITY_LOG,
                                                      msgNode,
                                                      this.hudId,
                                                      null,
                                                      null,
                                                      clipboardText);
 
-    messageNode.setAttribute("connectionId", entry.connection);
-
-    messageNode._httpActivity = aHttpActivity;
+    messageNode._connectionId = entry.connection;
+
+    let networkInfo = {
+      node: messageNode,
+      httpActivity: aHttpActivity,
+    };
+
+    this._networkRequests[entry.connection] = networkInfo;
 
     this.makeOutputMessageLink(messageNode, function HUD_net_message_link() {
       if (!messageNode._panelOpen) {
-        HUDService.openNetworkPanel(messageNode, messageNode._httpActivity);
+        HUDService.openNetworkPanel(messageNode, networkInfo.httpActivity);
       }
     }.bind(this));
 
     ConsoleUtils.outputMessageNode(messageNode, this.hudId);
   },
 
   /**
    * Log file activity.
@@ -2376,22 +2394,23 @@ HeadsUpDisplay.prototype = {
       this.logNetActivity(aMessage);
       return;
     }
 
     let entry = aMessage.log.entries[0];
     let request = entry.request;
     let response = entry.response;
 
-    let messageNode = this.outputNode.
-      querySelector("richlistitem[connectionId=" + entry.connection + "]");
-    if (!messageNode) {
+    if (!(entry.connection in this._networkRequests)) {
       return;
     }
-    messageNode._httpActivity = aMessage;
+
+    let loggedRequest = this._networkRequests[entry.connection];
+    let messageNode = loggedRequest.node;
+    loggedRequest.httpActivity = aMessage;
 
     if (stage == "TRANSACTION_CLOSE" || stage == "RESPONSE_HEADER") {
       let status = [response.httpVersion, response.status, response.statusText];
       if (stage == "TRANSACTION_CLOSE") {
         status.push(l10n.getFormatStr("NetworkPanel.durationMS", [entry.time]));
       }
       let statusText = "[" + status.join(" ") + "]";
 
@@ -2671,26 +2690,38 @@ HeadsUpDisplay.prototype = {
     // Loop through the categories we found and prune if needed.
     for (let category in nodes) {
       let limit = this.logLimitForCategory(category);
       let indexes = nodes[category];
       if (indexes.length > limit) {
         let n = Math.max(0, indexes.length - limit);
         pruned += n;
         for (let i = n - 1; i >= 0; i--) {
-          let node = this._outputQueue[indexes[i]][0];
+          this._pruneItemFromQueue(this._outputQueue[indexes[i]]);
           this._outputQueue.splice(indexes[i], 1);
         }
       }
     }
 
     return pruned;
   },
 
   /**
+   * Prune an item from the output queue.
+   *
+   * @private
+   * @param array aItem
+   *        The item you want to remove from the output queue.
+   */
+  _pruneItemFromQueue: function HUD__pruneItemFromQueue(aItem)
+  {
+    this.removeOutputMessage(aItem[0]);
+  },
+
+  /**
    * Retrieve the limit of messages for a specific category.
    *
    * @param number aCategory
    *        The category of messages you want to retrieve the limit for. See the
    *        CATEGORY_* constants.
    * @return number
    *         The number of messages allowed for the specific category.
    */
@@ -2723,32 +2754,35 @@ HeadsUpDisplay.prototype = {
     if (aNode.classList.contains("webconsole-msg-cssparser")) {
       let desc = aNode.childNodes[2].textContent;
       let location = "";
       if (aNode.childNodes[4]) {
         location = aNode.childNodes[4].getAttribute("title");
       }
       delete this.cssNodes[desc + location];
     }
+    else if (aNode.classList.contains("webconsole-msg-network")) {
+      delete this._networkRequests[aNode._connectionId];
+    }
     else if (aNode.classList.contains("webconsole-msg-inspector")) {
       this.pruneConsoleDirNode(aNode);
       return;
     }
 
-    aNode.parentNode.removeChild(aNode);
+    if (aNode.parentNode) {
+      aNode.parentNode.removeChild(aNode);
+    }
   },
 
   /**
    * Destroy the HUD object. Call this method to avoid memory leaks when the Web
    * Console is closed.
    */
   destroy: function HUD_destroy()
   {
-    this._outputQueue = [];
-
     this.sendMessageToContent("WebConsole:Destroy", {});
 
     this._messageListeners.forEach(function(aName) {
       this.messageManager.removeMessageListener(aName, this);
     }, this);
 
     if (this.jsterm) {
       this.jsterm.destroy();
@@ -3135,26 +3169,28 @@ JSTerm.prototype = {
    *
    * @param boolean aClearStorage
    *        True if you want to clear the console messages storage associated to
    *        this Web Console.
    */
   clearOutput: function JST_clearOutput(aClearStorage)
   {
     let hud = this.hud;
-    hud.cssNodes = {};
-
     let outputNode = hud.outputNode;
     let node;
     while ((node = outputNode.firstChild)) {
       hud.removeOutputMessage(node);
     }
 
     hud.HUDBox.lastTimestamp = 0;
     hud.groupDepth = 0;
+    hud._outputQueue.forEach(hud._pruneItemFromQueue, hud);
+    hud._outputQueue = [];
+    hud._networkRequests = {};
+    hud.cssNodes = {};
 
     if (aClearStorage) {
       hud.sendMessageToContent("ConsoleAPI:ClearCache", {});
     }
   },
 
   /**
    * Updates the size of the input field (command line) to fit its contents.
