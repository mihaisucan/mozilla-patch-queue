# HG changeset patch
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1338823798 -10800
# Node ID 610147f26e4e943fc5a34a77a0d70336882ff93f
# Parent  0e4f8e1a141b672926f9f90898f85d72b5229c7e
Bug 761157 - Sometimes network requests do not display all information

diff --git a/browser/devtools/webconsole/HUDService.jsm b/browser/devtools/webconsole/HUDService.jsm
--- a/browser/devtools/webconsole/HUDService.jsm
+++ b/browser/devtools/webconsole/HUDService.jsm
@@ -1029,21 +1029,31 @@ function HeadsUpDisplay(aTab)
 
   // create the JSTerm input element
   this.jsterm = new JSTerm(this);
   this.jsterm.inputNode.focus();
 
   // A cache for tracking repeated CSS Nodes.
   this.cssNodes = {};
 
+  this._networkRequests = {};
+
   this._setupMessageManager();
 }
 
 HeadsUpDisplay.prototype = {
   /**
+   * Holds the network requests currently displayed by the Web Console. Each key
+   * represents the connection ID and the value is network request information.
+   * @private
+   * @type object
+   */
+  _networkRequests: null,
+
+  /**
    * Last time when we displayed any message in the output. Timestamp in
    * milliseconds since the Unix epoch.
    *
    * @private
    * @type number
    */
   _lastOutputFlush: 0,
 
@@ -2129,23 +2139,28 @@ HeadsUpDisplay.prototype = {
                                                      CATEGORY_NETWORK,
                                                      SEVERITY_LOG,
                                                      msgNode,
                                                      this.hudId,
                                                      null,
                                                      null,
                                                      clipboardText);
 
-    messageNode.setAttribute("connectionId", entry.connection);
-
-    messageNode._httpActivity = aHttpActivity;
+    messageNode._connectionId = entry.connection;
+
+    let networkInfo = {
+      node: messageNode,
+      httpActivity: aHttpActivity,
+    };
+
+    this._networkRequests[entry.connection] = networkInfo;
 
     this.makeOutputMessageLink(messageNode, function HUD_net_message_link() {
       if (!messageNode._panelOpen) {
-        HUDService.openNetworkPanel(messageNode, messageNode._httpActivity);
+        HUDService.openNetworkPanel(messageNode, networkInfo.httpActivity);
       }
     }.bind(this));
 
     ConsoleUtils.outputMessageNode(messageNode, this.hudId);
   },
 
   /**
    * Log file activity.
@@ -2376,22 +2391,23 @@ HeadsUpDisplay.prototype = {
       this.logNetActivity(aMessage);
       return;
     }
 
     let entry = aMessage.log.entries[0];
     let request = entry.request;
     let response = entry.response;
 
-    let messageNode = this.outputNode.
-      querySelector("richlistitem[connectionId=" + entry.connection + "]");
-    if (!messageNode) {
+    if (!(entry.connection in this._networkRequests)) {
       return;
     }
-    messageNode._httpActivity = aMessage;
+
+    let loggedRequest = this._networkRequests[entry.connection];
+    let messageNode = loggedRequest.node;
+    loggedRequest.httpActivity = aMessage;
 
     if (stage == "TRANSACTION_CLOSE" || stage == "RESPONSE_HEADER") {
       let status = [response.httpVersion, response.status, response.statusText];
       if (stage == "TRANSACTION_CLOSE") {
         status.push(l10n.getFormatStr("NetworkPanel.durationMS", [entry.time]));
       }
       let statusText = "[" + status.join(" ") + "]";
 
@@ -2723,31 +2739,35 @@ HeadsUpDisplay.prototype = {
     if (aNode.classList.contains("webconsole-msg-cssparser")) {
       let desc = aNode.childNodes[2].textContent;
       let location = "";
       if (aNode.childNodes[4]) {
         location = aNode.childNodes[4].getAttribute("title");
       }
       delete this.cssNodes[desc + location];
     }
+    else if (aNode.classList.contains("webconsole-msg-network")) {
+      delete this._networkRequests[aNode._connectionId];
+    }
     else if (aNode.classList.contains("webconsole-msg-inspector")) {
       this.pruneConsoleDirNode(aNode);
       return;
     }
 
     aNode.parentNode.removeChild(aNode);
   },
 
   /**
    * Destroy the HUD object. Call this method to avoid memory leaks when the Web
    * Console is closed.
    */
   destroy: function HUD_destroy()
   {
     this._outputQueue = [];
+    this._networkRequests = {};
 
     this.sendMessageToContent("WebConsole:Destroy", {});
 
     this._messageListeners.forEach(function(aName) {
       this.messageManager.removeMessageListener(aName, this);
     }, this);
 
     if (this.jsterm) {
