# HG changeset patch
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1372248203 -10800
#      Tue Jun 25 22:17:20 2013 +0300
# Node ID 96c45e1f4761f29780a856eac10be443d2abc80c
# Parent a4d856768629ac9217c582c205ccb849c3c5574d
Bug 886199 - Fix for intermittent browser_webconsole_bug_644419_log_limits.js | Timed out while waiting for: 10 console.log messages displayed and one pruned, and several more; r=me

diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_618311_close_panels.js b/browser/devtools/webconsole/test/browser_webconsole_bug_618311_close_panels.js
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_618311_close_panels.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_bug_618311_close_panels.js
@@ -8,25 +8,24 @@ const TEST_URI = "http://example.com/bro
 function test() {
   addTab(TEST_URI);
   browser.addEventListener("load", function onLoad() {
     browser.removeEventListener("load", onLoad, true);
 
     openConsole(null, function(hud) {
       content.location.reload();
 
-      waitForSuccess({
-        name: "network message displayed",
-        validatorFn: function()
-        {
-          return hud.outputNode.querySelector(".webconsole-msg-network");
-        },
-        successFn: performTest,
-        failureFn: finishTest,
-      });
+      waitForMessages({
+        webconsole: hud,
+        messages: [{
+          text: "test-console.html",
+          category: CATEGORY_NETWORK,
+          severity: SEVERITY_LOG,
+        }],
+      }).then(performTest);
     });
   }, true);
 }
 
 function performTest() {
   let hudId = HUDService.getHudIdByWindow(content);
   let HUD = HUDService.hudReferences[hudId];
 
diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_644419_log_limits.js b/browser/devtools/webconsole/test/browser_webconsole_bug_644419_log_limits.js
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_644419_log_limits.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_bug_644419_log_limits.js
@@ -5,17 +5,17 @@
  */
 
 // Tests that the Web Console limits the number of lines displayed according to
 // the limit set for each category.
 
 const TEST_URI = "http://example.com/browser/browser/devtools/" +
                  "webconsole/test/test-bug-644419-log-limits.html";
 
-var gOldPref;
+let hud, outputNode;
 
 function test() {
   addTab("data:text/html;charset=utf-8,Web Console test for bug 644419: Console should " +
          "have user-settable log limits for each message category");
   browser.addEventListener("load", onLoad, true);
 }
 
 function onLoad(aEvent) {
@@ -29,130 +29,118 @@ function onLoad(aEvent) {
     browser.addEventListener("load", testWebDevLimits, true);
     expectUncaughtException();
     content.location = TEST_URI;
   });
 }
 
 function testWebDevLimits(aEvent) {
   browser.removeEventListener(aEvent.type, testWebDevLimits, true);
-  gOldPref = Services.prefs.getIntPref("devtools.hud.loglimit.console");
   Services.prefs.setIntPref("devtools.hud.loglimit.console", 10);
 
   // Find the sentinel entry.
-  waitForSuccess({
-    name: "bar is not defined",
-    validatorFn: function()
-    {
-      return outputNode.textContent.indexOf("bar is not defined") > -1;
-    },
-    successFn: testWebDevLimits2,
-    failureFn: testWebDevLimits2,
-  });
+  waitForMessages({
+    webconsole: hud,
+    messages: [{
+      text: "bar is not defined",
+      category: CATEGORY_JS,
+      severity: SEVERITY_ERROR,
+    }],
+  }).then(testWebDevLimits2);
 }
 
 function testWebDevLimits2() {
   // Fill the log with Web Developer errors.
   for (let i = 0; i < 11; i++) {
     content.console.log("test message " + i);
   }
 
-  waitForSuccess({
-    name: "10 console.log messages displayed and one pruned",
-    validatorFn: function()
-    {
-      let message0 = outputNode.textContent.indexOf("test message 0");
-      let message10 = outputNode.textContent.indexOf("test message 10");
-      return message0 == -1 && message10 > -1;
-    },
-    successFn: function()
-    {
-      findLogEntry("test message 1");
-      // Check if the sentinel entry is still there.
-      findLogEntry("bar is not defined");
+  waitForMessages({
+    webconsole: hud,
+    messages: [{
+      text: "test message 10",
+      category: CATEGORY_WEBDEV,
+      severity: SEVERITY_LOG,
+    }],
+  }).then(() => {
+    testLogEntry(outputNode, "test message 0", "first message is pruned", false, true);
+    findLogEntry("test message 1");
+    // Check if the sentinel entry is still there.
+    findLogEntry("bar is not defined");
 
-      Services.prefs.setIntPref("devtools.hud.loglimit.console", gOldPref);
-      testJsLimits();
-    },
-    failureFn: testJsLimits,
+    Services.prefs.clearUserPref("devtools.hud.loglimit.console");
+    testJsLimits();
   });
 }
 
 function testJsLimits() {
-  gOldPref = Services.prefs.getIntPref("devtools.hud.loglimit.exception");
   Services.prefs.setIntPref("devtools.hud.loglimit.exception", 10);
 
   hud.jsterm.clearOutput();
   content.console.log("testing JS limits");
 
   // Find the sentinel entry.
-  waitForSuccess({
-    name: "console.log 'testing JS limits'",
-    validatorFn: function()
-    {
-      return outputNode.textContent.indexOf("testing JS limits") > -1;
-    },
-    successFn: testJsLimits2,
-    failureFn: testNetLimits,
-  });
+  waitForMessages({
+    webconsole: hud,
+    messages: [{
+      text: "testing JS limits",
+      category: CATEGORY_WEBDEV,
+      severity: SEVERITY_LOG,
+    }],
+  }).then(testJsLimits2);
 }
 
 function testJsLimits2() {
   // Fill the log with JS errors.
   let head = content.document.getElementsByTagName("head")[0];
   for (let i = 0; i < 11; i++) {
     var script = content.document.createElement("script");
     script.text = "fubar" + i + ".bogus(6);";
     expectUncaughtException();
     head.insertBefore(script, head.firstChild);
   }
 
-  waitForSuccess({
-    name: "10 JS errors shown",
-    validatorFn: function()
-    {
-      return outputNode.textContent.indexOf("fubar10 is not defined") > -1;
-    },
-    successFn: function()
-    {
-      testLogEntry(outputNode, "fubar0 is not defined", "first message is pruned", false, true);
-      findLogEntry("fubar1 is not defined");
-      // Check if the sentinel entry is still there.
-      findLogEntry("testing JS limits");
+  waitForMessages({
+    webconsole: hud,
+    messages: [{
+      text: "fubar10 is not defined",
+      category: CATEGORY_JS,
+      severity: SEVERITY_ERROR,
+    }],
+  }).then(() => {
+    testLogEntry(outputNode, "fubar0 is not defined", "first message is pruned", false, true);
+    findLogEntry("fubar1 is not defined");
+    // Check if the sentinel entry is still there.
+    findLogEntry("testing JS limits");
 
-      Services.prefs.setIntPref("devtools.hud.loglimit.exception", gOldPref);
-      testNetLimits();
-    },
-    failureFn: testNetLimits,
+    Services.prefs.clearUserPref("devtools.hud.loglimit.exception");
+    testNetLimits();
   });
 }
 
 var gCounter, gImage;
 
 function testNetLimits() {
-  gOldPref = Services.prefs.getIntPref("devtools.hud.loglimit.network");
   Services.prefs.setIntPref("devtools.hud.loglimit.network", 10);
 
   hud.jsterm.clearOutput();
   content.console.log("testing Net limits");
 
   // Find the sentinel entry.
-  waitForSuccess({
-    name: "console.log 'testing Net limits'",
-    validatorFn: function()
-    {
-      return outputNode.textContent.indexOf("testing Net limits") > -1;
-    },
-    successFn: function()
-    {
-      // Fill the log with network messages.
-      gCounter = 0;
-      loadImage();
-    },
-    failureFn: testCssLimits,
+  waitForMessages({
+    webconsole: hud,
+    messages: [{
+      text: "testing Net limits",
+      category: CATEGORY_WEBDEV,
+      severity: SEVERITY_LOG,
+    }],
+  }).then(() => {
+    // Fill the log with network messages.
+    gCounter = 0;
+    loadImage();
   });
 }
 
 function loadImage() {
   if (gCounter < 11) {
     let body = content.document.getElementsByTagName("body")[0];
     gImage && gImage.removeEventListener("load", loadImage, true);
     gImage = content.document.createElement("img");
@@ -160,77 +148,70 @@ function loadImage() {
     body.insertBefore(gImage, body.firstChild);
     gImage.addEventListener("load", loadImage, true);
     gCounter++;
     return;
   }
 
   is(gCounter, 11, "loaded 11 files");
 
-  waitForSuccess({
-    name: "loaded 11 files, one message pruned",
-    validatorFn: function()
-    {
-      let message0 = outputNode.querySelector('*[value*="test-image.png?_fubar=0"]');
-      let message10 = outputNode.querySelector('*[value*="test-image.png?_fubar=10"]');
-      return !message0 && message10;
-    },
-    successFn: function()
-    {
-      findLogEntry("test-image.png?_fubar=1");
-      // Check if the sentinel entry is still there.
-      findLogEntry("testing Net limits");
+  waitForMessages({
+    webconsole: hud,
+    messages: [{
+      text: "test-image.png?_fubar=10",
+      category: CATEGORY_NETWORK,
+      severity: SEVERITY_LOG,
+    }],
+  }).then(() => {
+    testLogEntry(outputNode, "test-image.png?_fubar=0", "first message is pruned", false, true);
+    findLogEntry("test-image.png?_fubar=1");
+    // Check if the sentinel entry is still there.
+    findLogEntry("testing Net limits");
 
-      Services.prefs.setIntPref("devtools.hud.loglimit.network", gOldPref);
-      testCssLimits();
-    },
-    failureFn: testCssLimits,
+    Services.prefs.clearUserPref("devtools.hud.loglimit.network");
+    testCssLimits();
   });
 }
 
 function testCssLimits() {
-  gOldPref = Services.prefs.getIntPref("devtools.hud.loglimit.cssparser");
   Services.prefs.setIntPref("devtools.hud.loglimit.cssparser", 10);
 
   hud.jsterm.clearOutput();
   content.console.log("testing CSS limits");
 
   // Find the sentinel entry.
-  waitForSuccess({
-    name: "console.log 'testing CSS limits'",
-    validatorFn: function()
-    {
-      return outputNode.textContent.indexOf("testing CSS limits") > -1;
-    },
-    successFn: testCssLimits2,
-    failureFn: finishTest,
-  });
+  waitForMessages({
+    webconsole: hud,
+    messages: [{
+      text: "testing CSS limits",
+      category: CATEGORY_WEBDEV,
+      severity: SEVERITY_LOG,
+    }],
+  }).then(testCssLimits2);
 }
 
 function testCssLimits2() {
   // Fill the log with CSS errors.
   let body = content.document.getElementsByTagName("body")[0];
   for (let i = 0; i < 11; i++) {
     var div = content.document.createElement("div");
     div.setAttribute("style", "-moz-foobar" + i + ": 42;");
     body.insertBefore(div, body.firstChild);
   }
 
-  waitForSuccess({
-    name: "10 CSS errors shown",
-    validatorFn: function()
-    {
-      return outputNode.textContent.indexOf("-moz-foobar10") > -1;
-    },
-    successFn: function()
-    {
-      testLogEntry(outputNode, "Unknown property '-moz-foobar0'",
-                   "first message is pruned", false, true);
-      findLogEntry("Unknown property '-moz-foobar1'");
-      // Check if the sentinel entry is still there.
-      findLogEntry("testing CSS limits");
+  waitForMessages({
+    webconsole: hud,
+    messages: [{
+      text: "-moz-foobar10",
+      category: CATEGORY_CSS,
+      severity: SEVERITY_WARNING,
+    }],
+  }).then(() => {
+    testLogEntry(outputNode, "Unknown property '-moz-foobar0'",
+                 "first message is pruned", false, true);
+    findLogEntry("Unknown property '-moz-foobar1'");
+    // Check if the sentinel entry is still there.
+    findLogEntry("testing CSS limits");
 
-      Services.prefs.setIntPref("devtools.hud.loglimit.cssparser", gOldPref);
-      finishTest();
-    },
-    failureFn: finishTest,
+    Services.prefs.clearUserPref("devtools.hud.loglimit.cssparser");
+    finishTest();
   });
 }
diff --git a/browser/devtools/webconsole/test/browser_webconsole_copying_multiple_messages_inserts_newlines_in_between.js b/browser/devtools/webconsole/test/browser_webconsole_copying_multiple_messages_inserts_newlines_in_between.js
--- a/browser/devtools/webconsole/test/browser_webconsole_copying_multiple_messages_inserts_newlines_in_between.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_copying_multiple_messages_inserts_newlines_in_between.js
@@ -7,16 +7,18 @@
  *  Patrick Walton <pcwalton@mozilla.com>
  *
  * ***** END LICENSE BLOCK ***** */
 
 // Tests that copying multiple messages inserts newlines in between.
 
 const TEST_URI = "data:text/html;charset=utf-8,Web Console test for bug 586142";
 
+let hud;
+
 function test()
 {
   addTab(TEST_URI);
   browser.addEventListener("DOMContentLoaded", onLoad, false);
 }
 
 function onLoad() {
   browser.removeEventListener("DOMContentLoaded", onLoad, false);
@@ -26,30 +28,32 @@ function onLoad() {
 function testNewlines(aHud) {
   hud = aHud;
   hud.jsterm.clearOutput();
 
   for (let i = 0; i < 20; i++) {
     content.console.log("Hello world #" + i);
   }
 
-  waitForSuccess({
-    name: "20 console.log messages displayed",
-    validatorFn: function()
-    {
-      return hud.outputNode.itemCount == 20;
-    },
-    successFn: testClipboard,
-    failureFn: finishTest,
-  });
+  waitForMessages({
+    webconsole: hud,
+    messages: [{
+      text: "Hello world #19",
+      category: CATEGORY_WEBDEV,
+      severity: SEVERITY_LOG,
+    }],
+  }).then(testClipboard);
 }
 
 function testClipboard() {
   let outputNode = hud.outputNode;
 
+  info("messages in output: " + outputNode.itemCount);
+  ok(outputNode.itemCount >= 20, "expected number of messages");
+
   outputNode.selectAll();
   outputNode.focus();
 
   let clipboardTexts = [];
   for (let i = 0; i < outputNode.itemCount; i++) {
     let item = outputNode.getItemAtIndex(i);
     clipboardTexts.push("[" +
                         WCU_l10n.timestampString(item.timestamp) +
diff --git a/browser/devtools/webconsole/test/browser_webconsole_live_filtering_of_message_types.js b/browser/devtools/webconsole/test/browser_webconsole_live_filtering_of_message_types.js
--- a/browser/devtools/webconsole/test/browser_webconsole_live_filtering_of_message_types.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_live_filtering_of_message_types.js
@@ -2,46 +2,49 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 // Tests that the message type filter checkboxes work.
 
 const TEST_URI = "http://example.com/browser/browser/devtools/webconsole/test/test-console.html";
 
+let hud;
+
 function test() {
   addTab(TEST_URI);
   browser.addEventListener("load", function onLoad() {
     browser.removeEventListener("load", onLoad, true);
     openConsole(null, consoleOpened);
   }, true);
 }
 
 function consoleOpened(aHud) {
   hud = aHud;
   hud.jsterm.clearOutput();
 
   let console = content.console;
 
   for (let i = 0; i < 50; i++) {
-    console.log("http://www.example.com/" + i);
+    console.log("foobarz #" + i);
   }
 
-  waitForSuccess({
-    name: "50 console.log messages displayed",
-    validatorFn: function()
-    {
-      return hud.outputNode.itemCount == 50;
-    },
-    successFn: testLiveFilteringOfMessageTypes,
-    failureFn: finishTest,
-  });
+  waitForMessages({
+    webconsole: hud,
+    messages: [{
+      text: "foobarz #49",
+      category: CATEGORY_WEBDEV,
+      severity: SEVERITY_LOG,
+    }],
+  }).then(testLiveFilteringOfMessageTypes);
 }
 
 function testLiveFilteringOfMessageTypes() {
+  is(hud.outputNode.itemCount, 50, "number of messages");
+
   hud.setFilterState("log", false);
   is(countMessageNodes(), 0, "the log nodes are hidden when the " +
     "corresponding filter is switched off");
 
   hud.setFilterState("log", true);
   is(countMessageNodes(), 50, "the log nodes reappear when the " +
     "corresponding filter is switched on");
 
diff --git a/browser/devtools/webconsole/test/browser_webconsole_live_filtering_on_search_strings.js b/browser/devtools/webconsole/test/browser_webconsole_live_filtering_on_search_strings.js
--- a/browser/devtools/webconsole/test/browser_webconsole_live_filtering_on_search_strings.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_live_filtering_on_search_strings.js
@@ -21,28 +21,29 @@ function consoleOpened(aHud) {
   hud = aHud;
   hud.jsterm.clearOutput();
   let console = content.console;
 
   for (let i = 0; i < 50; i++) {
     console.log("http://www.example.com/ " + i);
   }
 
-  waitForSuccess({
-    name: "50 console.log messages displayed",
-    validatorFn: function()
-    {
-      return hud.outputNode.itemCount == 50;
-    },
-    successFn: testLiveFilteringOnSearchStrings,
-    failureFn: finishTest,
-  });
+  waitForMessages({
+    webconsole: hud,
+    messages: [{
+      text: "http://www.example.com/ 49",
+      category: CATEGORY_WEBDEV,
+      severity: SEVERITY_LOG,
+    }],
+  }).then(testLiveFilteringOnSearchStrings);
 }
 
 function testLiveFilteringOnSearchStrings() {
+  is(hud.outputNode.itemCount, 50, "number of messages");
+
   setStringFilter("http");
   isnot(countMessageNodes(), 0, "the log nodes are not hidden when the " +
     "search string is set to \"http\"");
 
   setStringFilter("hxxp");
   is(countMessageNodes(), 0, "the log nodes are hidden when the search " +
     "string is set to \"hxxp\"");
 
