# HG changeset patch
# Parent 73b76faa9653aa9c68420a4e6cba0ad7132151c0
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1385501841 -7200
Bug 943496 - Autocomplete should execute native getters; r=past; try: -b do -p linux,linux64,macosx64,win32,win64 -u xpcshell,mochitest-bc,mochitest-o -t none

diff --git a/browser/devtools/webconsole/test/browser_webconsole_bug_651501_document_body_autocomplete.js b/browser/devtools/webconsole/test/browser_webconsole_bug_651501_document_body_autocomplete.js
--- a/browser/devtools/webconsole/test/browser_webconsole_bug_651501_document_body_autocomplete.js
+++ b/browser/devtools/webconsole/test/browser_webconsole_bug_651501_document_body_autocomplete.js
@@ -24,21 +24,24 @@ function consoleOpened(aHud) {
 
   ok(!popup.isOpen, "popup is not open");
 
   popup._panel.addEventListener("popupshown", function onShown() {
     popup._panel.removeEventListener("popupshown", onShown, false);
 
     ok(popup.isOpen, "popup is open");
 
-    // expected properties:
-    // __defineGetter__  __defineSetter__ __lookupGetter__ __lookupSetter__
-    // constructor hasOwnProperty isPrototypeOf propertyIsEnumerable
-    // toLocaleString toSource toString unwatch valueOf watch.
-    ok(popup.itemCount >= 14, "popup.itemCount is correct");
+    is(popup.itemCount, jsterm._autocompleteCache.length,
+       "popup.itemCount is correct");
+    isnot(jsterm._autocompleteCache.indexOf("addEventListener"), -1,
+          "addEventListener is in the list of suggestions");
+    isnot(jsterm._autocompleteCache.indexOf("bgColor"), -1,
+          "bgColor is in the list of suggestions");
+    isnot(jsterm._autocompleteCache.indexOf("ATTRIBUTE_NODE"), -1,
+          "ATTRIBUTE_NODE is in the list of suggestions");
 
     popup._panel.addEventListener("popuphidden", autocompletePopupHidden, false);
 
     EventUtils.synthesizeKey("VK_ESCAPE", {});
   }, false);
 
   jsterm.setInputValue("document.body");
   EventUtils.synthesizeKey(".", {});
diff --git a/toolkit/devtools/webconsole/utils.js b/toolkit/devtools/webconsole/utils.js
--- a/toolkit/devtools/webconsole/utils.js
+++ b/toolkit/devtools/webconsole/utils.js
@@ -789,299 +789,297 @@ function JSPropertyProvider(aDbgObject, 
 
   let completionPart = inputValue.substring(beginning.startPos);
 
   // Don't complete on just an empty string.
   if (completionPart.trim() == "") {
     return null;
   }
 
-  let matches = null;
-  let matchProp = "";
-
   let lastDot = completionPart.lastIndexOf(".");
   if (lastDot > 0 &&
       (completionPart[0] == "'" || completionPart[0] == '"') &&
       completionPart[lastDot - 1] == completionPart[0]) {
     // We are completing a string literal.
-    let obj = String.prototype;
-    matchProp = completionPart.slice(lastDot + 1);
-    let matches = Object.keys(getMatchedProps(obj, {matchProp:matchProp}));
+    let matchProp = completionPart.slice(lastDot + 1);
+    return getMatchedProps(String.prototype, matchProp);
+  }
 
-    return {
-      matchProp: matchProp,
-      matches: matches,
-    };
+  // We are completing a variable / a property lookup.
+  let properties = completionPart.split(".");
+  let matchProp = properties.pop().trimLeft();
+  let obj = aDbgObject;
+
+  // The first property must be found in the environment if the debugger is
+  // paused.
+  if (anEnvironment) {
+    if (properties.length == 0) {
+      return getMatchedPropsInEnvironment(anEnvironment, matchProp);
+    }
+    obj = getVariableInEnvironment(anEnvironment, properties.shift());
   }
-  else {
-    // We are completing a variable / a property lookup.
-    let properties = completionPart.split(".");
-    if (properties.length > 1) {
-      matchProp = properties.pop().trimLeft();
-      let obj;
 
-      //The first property must be found in the environment or the Debugger.Object 
-      //depending of whether the debugger is paused or not
-      let prop = properties[0];
-      if (anEnvironment) {
-        obj = getVariableInEnvironment(anEnvironment, prop);
-      }
-      else {
-        obj = getPropertyInDebuggerObject(aDbgObject, prop);
-      }
-      if (obj == null) {
-        return null;
-      }
+  if (!isObjectUsable(obj)) {
+    return null;
+  }
 
-      //We get the rest of the properties recursively starting from the Debugger.Object
-      // that wraps the first property
-      for (let i = 1; i < properties.length; i++) {
-        let prop = properties[i].trim();
-        if (!prop) {
-          return null;
-        }
+  // We get the rest of the properties recursively starting from the Debugger.Object
+  // that wraps the first property
+  for (let prop of properties) {
+    prop = prop.trim();
+    if (!prop) {
+      return null;
+    }
 
-        obj = getPropertyInDebuggerObject(obj, prop);
+    obj = getPropertyInDebuggerObject(obj, prop);
 
-        // If obj is undefined or null (which is what "== null" does),
-        // then there is no chance to run completion on it. Exit here.
-        if (obj == null) {
-          return null;
-        }
-      }
-
-      // If the final property is a primitive
-      if (typeof obj != 'object' || obj === null) {
-        matchProp = completionPart.slice(lastDot + 1);
-        let matches = Object.keys(getMatchedProps(obj, {matchProp:matchProp}));
-
-        return {
-          matchProp: matchProp,
-          matches: matches,
-        };
-      }
-      return getMatchedPropsInDbgObject(obj, matchProp);
-    }
-    else {
-      matchProp = properties[0].trimLeft();
-      if (anEnvironment) {
-        return getMatchedPropsInEnvironment(anEnvironment, matchProp);
-      }
-      else {
-        if (typeof aDbgObject != 'object' || aDbgObject === null) {
-          matchProp = completionPart.slice(lastDot + 1);
-          let matches = Object.keys(getMatchedProps(aDbgObject, {matchProp:matchProp}));
-
-          return {
-            matchProp: matchProp,
-            matches: matches,
-          };
-        }
-        return getMatchedPropsInDbgObject(aDbgObject, matchProp);
-      }
+    if (!isObjectUsable(obj)) {
+      return null;
     }
   }
+
+  // If the final property is a primitive
+  if (typeof obj != "object") {
+    return getMatchedProps(obj, matchProp);
+  }
+
+  return getMatchedPropsInDbgObject(obj, matchProp);
 }
 
 /**
- * Returns the value of aProp in anEnvironment as a debuggee value, by recursively checking the environment chain
+ * Check if the given Debugger.Object can be used for autocomplete.
  *
- * @param object anEnvironment
- *        A Debugger.Environment to look the aProp into.
- * @param string aProp
- *        The property that is looked up.
- * @returns null or object
- *        A Debugger.Object if aProp exists in the environment chain, null otherwise.
+ * @param Debugger.Object aObject
+ *        The Debugger.Object to check.
+ * @return boolean
+ *         True if further inspection into the object is possible, or false
+ *         otherwise.
  */
-function getVariableInEnvironment(anEnvironment, aProp)
+function isObjectUsable(aObject)
 {
-  for (let env = anEnvironment; env; env = env.parent) {
-    try {
-      let obj = env.getVariable(aProp);
-      if (obj) {
-        return obj;
-      }
-    }
-    catch (ex) {
-      return null;
+  if (aObject == null) {
+    return false;
+  }
+
+  if (typeof aObject == "object") {
+    let raw = aObject.unsafeDereference();
+    if (Cu.isDeadWrapper(raw)) {
+      return false;
     }
   }
-  return null;
+
+  return true;
 }
 
 /**
- * Returns the value of aProp in aDbgObject as a debuggee value, by recursively checking the prototype chain
- *
- * @param object aDbgObject
- *        A Debugger.Object to look the aProp into.
- * @param string aProp
- *        The property that is looked up.
- * @returns null or object
- *        A Debugger.Object if aProp exists in the prototype chain, null otherwise.
+ * @see getExactMatch_impl()
  */
-function getPropertyInDebuggerObject(aDbgObject, aProp)
+function getVariableInEnvironment(anEnvironment, aName)
 {
-  let dbgObject = aDbgObject;
-  while (dbgObject) {
-    try {
-      let desc = dbgObject.getOwnPropertyDescriptor(aProp)
-      if (desc) {
-        let obj = desc.value;
-        if (obj)
-          return obj;
-        obj = desc.get;
-        if (obj)
-          return obj;
-      }
-      dbgObject = dbgObject.proto;
-    }
-    catch (ex) {
-      return null;
-    }
-  }
-  return null;
+  return getExactMatch_impl(anEnvironment, aName, DebuggerEnvironmentSupport);
 }
 
 /**
- * Get all properties on the given Debugger.Environment (and its parent chain) that match a given prefix.
+ * @see getExactMatch_impl()
+ */
+function getPropertyInDebuggerObject(aDbgObject, aName)
+{
+  return getExactMatch_impl(aDbgObject, aName, DebuggerObjectSupport);
+}
+
+/**
+ * @see getMatchedProps_impl()
+ */
+function getMatchedPropsInEnvironment(anEnvironment, aMatch)
+{
+  return getMatchedProps_impl(anEnvironment, aMatch, DebuggerEnvironmentSupport);
+}
+
+/**
+ * @see getMatchedProps_impl()
+ */
+function getMatchedPropsInDbgObject(aDbgObject, aMatch)
+{
+  return getMatchedProps_impl(aDbgObject, aMatch, DebuggerObjectSupport);
+}
+
+/**
+ * @see getMatchedProps_impl()
+ */
+function getMatchedProps(aObj, aMatch)
+{
+  if (typeof aObj != "object") {
+    aObj = aObj.constructor.prototype;
+  }
+  return getMatchedProps_impl(aObj, aMatch, JSObjectSupport);
+}
+
+/**
+ * Get all properties in the given object (and its parent prototype chain) that
+ * match a given prefix.
  *
- * @param Debugger.Environment anEnvironment
- *        Debugger.Environment whose properties we want to filter.
- *
- * @param string matchProp Filter for properties that match this one.
- *
+ * @param mixed aObj
+ *        Object whose properties we want to filter.
+ * @param string aMatch
+ *        Filter for properties that match this string.
  * @return object
  *         Object that contains the matchProp and the list of names.
  */
-function getMatchedPropsInEnvironment(anEnvironment, matchProp)
+function getMatchedProps_impl(aObj, aMatch, {chainIterator, getProperties})
 {
-  let names = Object.create(null);
-  let c = MAX_COMPLETIONS;
-  for (let env = anEnvironment; env; env = env.parent) {
-    let ownNames = env.names();
-    for (let i = 0; i < ownNames.length; i++) {
-      if (ownNames[i].indexOf(matchProp) != 0 ||
-        ownNames[i] in names) {
+  let matches = new Set();
+
+  // We need to go up the prototype chain.
+  let iter = chainIterator(aObj);
+  for (let obj of iter) {
+    let props = getProperties(obj);
+    for (let prop of props) {
+      if (prop.indexOf(aMatch) != 0) {
         continue;
       }
-      c--;
-      if (c < 0) {
-        return {
-          matchProp: matchProp,
-          matches: Object.keys(names)
-        };
+
+      // If it is an array index, we can't take it.
+      // This uses a trick: converting a string to a number yields NaN if
+      // the operation failed, and NaN is not equal to itself.
+      if (+prop != +prop) {
+        matches.add(prop);
       }
-      names[ownNames[i]] = true;
+
+      if (matches.size > MAX_COMPLETIONS) {
+        break;
+      }
+    }
+
+    if (matches.size > MAX_COMPLETIONS) {
+      break;
     }
   }
+
   return {
-    matchProp: matchProp,
-    matches: Object.keys(names)
+    matchProp: aMatch,
+    matches: [...matches],
   };
 }
 
 /**
- * Get all properties on the given Debugger.Object (and the prototype chain of the wrapped value) that match a given prefix.
+ * Returns a property value based on its name from the given object, by
+ * recursively checking the object's prototype.
  *
- * @param Debugger.Object aDbgObject
- *        Debugger.Object whose properties we want to filter.
- *
- * @param string matchProp Filter for properties that match this one.
- *
- * @return object
- *         Object that contains the matchProp and the list of names.
+ * @param object aObj
+ *        An object to look the property into.
+ * @param string aName
+ *        The property that is looked up.
+ * @returns object|undefined
+ *        A Debugger.Object if the property exists in the object's prototype
+ *        chain, undefined otherwise.
  */
-function getMatchedPropsInDbgObject(aDbgObject, matchProp)
+function getExactMatch_impl(aObj, aName, {chainIterator, getProperty})
 {
-  let names = Object.create(null);
-  let c = MAX_COMPLETIONS;
-  for (let dbg = aDbgObject; dbg; dbg = dbg.proto) {
-    let raw = dbg.unsafeDereference();
-    if (Cu.isDeadWrapper(raw)) {
+  // We need to go up the prototype chain.
+  let iter = chainIterator(aObj);
+  for (let obj of iter) {
+    let prop = getProperty(obj, aName, aObj);
+    if (prop) {
+      return prop.value;
+    }
+  }
+  return undefined;
+}
+
+
+let JSObjectSupport = {
+  chainIterator: function(aObj)
+  {
+    while (aObj) {
+      yield aObj;
+      aObj = Object.getPrototypeOf(aObj);
+    }
+  },
+
+  getProperties: function(aObj)
+  {
+    return Object.getOwnPropertyNames(aObj);
+  },
+
+  getProperty: function()
+  {
+    // getProperty is unsafe with raw JS objects.
+    throw "Unimplemented!";
+  },
+};
+
+let DebuggerObjectSupport = {
+  chainIterator: function(aObj)
+  {
+    while (aObj) {
+      yield aObj;
+      aObj = aObj.proto;
+    }
+  },
+
+  getProperties: function(aObj)
+  {
+    return aObj.getOwnPropertyNames();
+  },
+
+  getProperty: function(aObj, aName, aRootObj)
+  {
+    let desc = aObj.getOwnPropertyDescriptor(aName);
+    if (!desc) {
       return null;
     }
-    let ownNames = dbg.getOwnPropertyNames();
-    for (let i = 0; i < ownNames.length; i++) {
-      if (ownNames[i].indexOf(matchProp) != 0 ||
-        ownNames[i] in names) {
-        continue;
-      }
-      c--;
-      if (c < 0) {
-        return {
-          matchProp: matchProp,
-          matches: Object.keys(names)
-        };
-      }
-      names[ownNames[i]] = true;
+
+    if ("value" in desc) {
+      return { value: desc.value };
     }
-  }
-  return {
-    matchProp: matchProp,
-    matches: Object.keys(names)
-  };
-}
 
-/**
- * Get all accessible properties on this JS value.
- * Filter those properties by name.
- * Take only a certain number of those.
- *
- * @param mixed aObj
- *        JS value whose properties we want to collect.
- *
- * @param object aOptions
- *        Options that the algorithm takes.
- *        - matchProp (string): Filter for properties that match this one.
- *          Defaults to the empty string (which always matches).
- *
- * @return object
- *         Object whose keys are all accessible properties on the object.
- */
-function getMatchedProps(aObj, aOptions = {matchProp: ""})
-{
-  // Argument defaults.
-  aOptions.matchProp = aOptions.matchProp || "";
+    if (!desc.get) {
+      return null;
+    }
 
-  if (aObj == null) { return {}; }
-  try {
-    Object.getPrototypeOf(aObj);
-  } catch(e) {
-    aObj = aObj.constructor.prototype;
-  }
-  let c = MAX_COMPLETIONS;
-  let names = Object.create(null);   // Using an Object to avoid duplicates.
+    let safe = desc.get.callable && desc.get.class == "Function" &&
+               desc.get.script === undefined;
+    if (!safe) {
+      return null;
+    }
 
-  // We need to go up the prototype chain.
-  let ownNames = null;
-  while (aObj !== null) {
-    ownNames = Object.getOwnPropertyNames(aObj);
-    for (let i = 0; i < ownNames.length; i++) {
-      // Filtering happens here.
-      // If we already have it in, no need to append it.
-      if (ownNames[i].indexOf(aOptions.matchProp) != 0 ||
-          ownNames[i] in names) {
-        continue;
-      }
-      c--;
-      if (c < 0) {
-        return names;
-      }
-      // If it is an array index, we can't take it.
-      // This uses a trick: converting a string to a number yields NaN if
-      // the operation failed, and NaN is not equal to itself.
-      if (+ownNames[i] != +ownNames[i]) {
-        names[ownNames[i]] = true;
-      }
+    let result = desc.get.call(aRootObj);
+    if (!result || "throw" in result) {
+      return null;
     }
-    aObj = Object.getPrototypeOf(aObj);
-  }
 
-  return names;
-}
+    if ("yield" in result) {
+      return { value: result.yield };
+    }
+
+    return { value: result.return };
+  },
+};
+
+let DebuggerEnvironmentSupport = {
+  chainIterator: function(aObj)
+  {
+    while (aObj) {
+      yield aObj;
+      aObj = aObj.parent;
+    }
+  },
+
+  getProperties: function(aObj)
+  {
+    return aObj.names();
+  },
+
+  getProperty: function(aObj, aName)
+  {
+    // TODO: we should use getVariableDescriptor() here - bug 725815.
+    let result = aObj.getVariable(aName);
+    return result === undefined ? null : { value: result };
+  },
+};
 
 
 exports.JSPropertyProvider = JSPropertyProvider;
 })(WebConsoleUtils);
 
 ///////////////////////////////////////////////////////////////////////////////
 // The page errors listener
 ///////////////////////////////////////////////////////////////////////////////
