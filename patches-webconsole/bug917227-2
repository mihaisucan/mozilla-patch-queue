# HG changeset patch
# Parent 4c9819274fae1bc55bbc0dbf3d26ff5761ec3aa1
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1389649985 -7200

diff --git a/toolkit/devtools/server/actors/webapps.js b/toolkit/devtools/server/actors/webapps.js
--- a/toolkit/devtools/server/actors/webapps.js
+++ b/toolkit/devtools/server/actors/webapps.js
@@ -117,16 +117,17 @@ function WebappsActor(aConnection) {
   Cu.import("resource://gre/modules/AppsUtils.jsm");
   Cu.import("resource://gre/modules/FileUtils.jsm");
   Cu.import('resource://gre/modules/Services.jsm');
   promise = Cu.import("resource://gre/modules/commonjs/sdk/core/promise.js").Promise;
 
   // Keep reference of already created app actors.
   // key: app frame message manager, value: ContentTabActor's grip() value
   this._appActorsMap = new Map();
+  this._netMonitorMap = new Map();
 
   this.conn = aConnection;
   this._uploads = [];
   this._actorPool = new ActorPool(this.conn);
   this.conn.addActorPool(this._actorPool);
 }
 
 WebappsActor.prototype = {
@@ -809,16 +810,42 @@ WebappsActor.prototype = {
   _connectToApp: function (aFrame) {
     let deferred = Promise.defer();
 
     let mm = aFrame.QueryInterface(Ci.nsIFrameLoaderOwner).frameLoader.messageManager;
     mm.loadFrameScript("resource://gre/modules/devtools/server/child.js", false);
 
     let childTransport, prefix;
 
+    let onNetMonitorMessage = makeInfallible((msg) => {
+      dump("***** Got debug:netmonitor\n");
+      let { action, appId } = msg.json;
+
+      // Pipe network monitor data from parent to child via the message manager.
+      switch (action) {
+        case "start": {
+          let netMonitor = new NetworkMonitor(null, appId, this);
+          netMonitor.init();
+
+          debug("establishing network monitoring for app " + appId);
+          this._netMonitorMap.set(mm, netMonitor);
+          break;
+        }
+        case "stop": {
+          let netMonitor = this._netMonitorMap.get(mm);
+          if (netMonitor) {
+            netMonitor.destroy();
+          }
+          this._netMonitorMap.delete(mm);
+          break;
+        }
+      }
+    });
+    mm.addMessageListener("debug:netmonitor", onNetMonitorMessage);
+
     let onActorCreated = makeInfallible(function (msg) {
       mm.removeMessageListener("debug:actor", onActorCreated);
 
       dump("***** Got debug:actor\n");
       let { actor, appId } = msg.json;
       prefix = msg.json.prefix;
 
       // Pipe Debugger message from/to parent/child via the message manager
@@ -837,16 +864,18 @@ WebappsActor.prototype = {
 
       deferred.resolve(actor);
     }).bind(this);
     mm.addMessageListener("debug:actor", onActorCreated);
 
     let onMessageManagerDisconnect = makeInfallible(function (subject, topic, data) {
       if (subject == mm) {
         Services.obs.removeObserver(onMessageManagerDisconnect, topic);
+        mm.removeMessageListener("debug:netmonitor", onNetMonitorMessage);
+
         if (childTransport) {
           // If we have a child transport, the actor has already
           // been created. We need to stop using this message manager.
           childTransport.close();
           this.conn.cancelForwarding(prefix);
         } else {
           // Otherwise, the app has been closed before the actor
           // had a chance to be created, so we are not able to create
@@ -857,16 +886,22 @@ WebappsActor.prototype = {
         if (actor) {
           // The ContentAppActor within the child process doesn't necessary
           // have to time to uninitialize itself when the app is closed/killed.
           // So ensure telling the client that the related actor is detached.
           this.conn.send({ from: actor.actor,
                            type: "tabDetached" });
           this._appActorsMap.delete(mm);
         }
+
+        let netMonitor = this._netMonitorMap.get(mm);
+        if (netMonitor) {
+          netMonitor.destroy();
+        }
+        this._netMonitorMap.delete(mm);
       }
     }).bind(this);
     Services.obs.addObserver(onMessageManagerDisconnect,
                              "message-manager-disconnect", false);
 
     let prefixStart = this.conn.prefix + "child";
     mm.sendAsyncMessage("debug:connect", { prefix: prefixStart });
 
diff --git a/toolkit/devtools/server/actors/webconsole.js b/toolkit/devtools/server/actors/webconsole.js
--- a/toolkit/devtools/server/actors/webconsole.js
+++ b/toolkit/devtools/server/actors/webconsole.js
@@ -465,17 +465,24 @@ WebConsoleActor.prototype =
     let window = !this.parentActor.isRootActor ? this.window : null;
     let appId = null;
 
     if ("ContentAppActor" in DebuggerServer &&
         this.parentActor instanceof DebuggerServer.ContentAppActor) {
       // Filter network requests by appId on Firefox OS devices.
       appId = this.parentActor.appId;
       window = null;
+      ne
     }
+
+    let netmon = NetworkMonitor.bind(window, null, this);
+    if (appId) {
+      netmon = DebuggerServer.NetworkMonitorChild(appId, this);
+    }
+
     log("WCA_onStartListeners window " + window, "appId", appId);
 
     while (aRequest.listeners.length > 0) {
       let listener = aRequest.listeners.shift();
       switch (listener) {
         case "PageError":
           if (!this.consoleServiceListener) {
             this.consoleServiceListener =
@@ -489,18 +496,17 @@ WebConsoleActor.prototype =
             this.consoleAPIListener =
               new ConsoleAPIListener(window, this);
             this.consoleAPIListener.init();
           }
           startedListeners.push(listener);
           break;
         case "NetworkActivity":
           if (!this.networkMonitor) {
-            this.networkMonitor =
-              new NetworkMonitor(window, appId, this);
+            this.networkMonitor = new netmon();
             this.networkMonitor.init();
           }
           startedListeners.push(listener);
           break;
         case "FileActivity":
           if (!this.consoleProgressListener) {
             this.consoleProgressListener =
               new ConsoleProgressListener(this.window, this);
diff --git a/toolkit/devtools/server/child.js b/toolkit/devtools/server/child.js
--- a/toolkit/devtools/server/child.js
+++ b/toolkit/devtools/server/child.js
@@ -26,8 +26,22 @@ let onConnect = DevToolsUtils.makeInfall
   conn.addActorPool(actorPool);
 
   sendAsyncMessage("debug:actor", {actor: actor.grip(),
                                    appId: docShell.appId,
                                    prefix: prefix});
 });
 
 addMessageListener("debug:connect", onConnect);
+
+DebuggerServer.NetworkMonitorChild = function(appId, owner) {
+  this.appId = appId;
+  this.owner = owner;
+};
+
+DebuggerServer.NetworkMonitorChild.prototype = {
+  init: function() {
+    sendAsyncMessage("debug:netmonitor", {appId: this.appId, action: "start"});
+  },
+  destroy: function() {
+    sendAsyncMessage("debug:netmonitor", {appId: this.appId, action: "stop"});
+  },
+};
