# HG changeset patch
# Parent 795632f0e4fe938e1dfd741ec70dba9ff02b5151
# User Mihai Sucan <mihai.sucan@gmail.com>
# Date 1357680357 -7200

Bug 826798 - Network inspector does not correctly render cookie; r=past

diff --git a/toolkit/devtools/webconsole/NetworkHelper.jsm b/toolkit/devtools/webconsole/NetworkHelper.jsm
--- a/toolkit/devtools/webconsole/NetworkHelper.jsm
+++ b/toolkit/devtools/webconsole/NetworkHelper.jsm
@@ -285,17 +285,19 @@ this.NetworkHelper =
    *         following properties: name and value.
    */
   parseCookieHeader: function NH_parseCookieHeader(aHeader)
   {
     let cookies = aHeader.split(";");
     let result = [];
 
     cookies.forEach(function(aCookie) {
-      let [name, value] = aCookie.split("=");
+      let equal = aCookie.indexOf("=");
+      let name = aCookie.substr(0, equal);
+      let value = aCookie.substr(equal + 1);
       result.push({name: unescape(name.trim()),
                    value: unescape(value.trim())});
     });
 
     return result;
   },
 
   /**
@@ -309,18 +311,19 @@ this.NetworkHelper =
    *         (boolean), path, domain and expires (ISO date string).
    */
   parseSetCookieHeader: function NH_parseSetCookieHeader(aHeader)
   {
     let rawCookies = aHeader.split(/\r\n|\n|\r/);
     let cookies = [];
 
     rawCookies.forEach(function(aCookie) {
-      let name = unescape(aCookie.substr(0, aCookie.indexOf("=")).trim());
-      let parts = aCookie.substr(aCookie.indexOf("=") + 1).split(";");
+      let equal = aCookie.indexOf("=");
+      let name = unescape(aCookie.substr(0, equal).trim());
+      let parts = aCookie.substr(equal + 1).split(";");
       let value = unescape(parts.shift().trim());
 
       let cookie = {name: name, value: value};
 
       parts.forEach(function(aPart) {
         let part = aPart.trim();
         if (part.toLowerCase() == "secure") {
           cookie.secure = true;
diff --git a/toolkit/devtools/webconsole/test/network_requests_iframe.html b/toolkit/devtools/webconsole/test/network_requests_iframe.html
--- a/toolkit/devtools/webconsole/test/network_requests_iframe.html
+++ b/toolkit/devtools/webconsole/test/network_requests_iframe.html
@@ -25,16 +25,17 @@
 
       function testXhrPost(aCallback) {
         var body = "Hello world! " + (new Array(50)).join("foobaz barr");
         makeXhr('post', 'data.json', body, aCallback);
       }
 
       document.cookie = "foobar=fooval";
       document.cookie = "omgfoo=bug768096";
+      document.cookie = "badcookie=bug826798=st3fan";
     // --></script>
   </head>
   <body>
     <h1>Web Console HTTP Logging Testpage</h1>
     <h2>This page is used to test the HTTP logging.</h2>
 
     <form action="?" method="post">
       <input name="name" type="text" value="foo bar"><br>
diff --git a/toolkit/devtools/webconsole/test/test_network_get.html b/toolkit/devtools/webconsole/test/test_network_get.html
--- a/toolkit/devtools/webconsole/test/test_network_get.html
+++ b/toolkit/devtools/webconsole/test/test_network_get.html
@@ -69,17 +69,17 @@ function onNetworkEventUpdate(aState, aT
   switch (aPacket.updateType) {
     case "requestHeaders":
     case "responseHeaders":
       ok(aPacket.headers > 0, "headers > 0");
       ok(aPacket.headersSize > 0, "headersSize > 0");
       break;
     case "requestCookies":
       expectedPacket = {
-        cookies: 2,
+        cookies: 3,
       };
       break;
     case "requestPostData":
       ok(false, "got unexpected requestPostData");
       break;
     case "responseStart":
       expectedPacket = {
         response: {
@@ -146,21 +146,22 @@ function onRequestHeaders(aState, aRespo
   aState.client.getRequestCookies(aState.netActor,
                                   onRequestCookies);
 }
 
 function onRequestCookies(aState, aResponse)
 {
   info("checking request cookies");
 
-  is(aResponse.cookies.length, 2, "request cookies length");
+  is(aResponse.cookies.length, 3, "request cookies length");
 
   checkHeadersOrCookies(aResponse.cookies, {
     foobar: "fooval",
     omgfoo: "bug768096",
+    badcookie: "bug826798=st3fan",
   });
 
   onRequestPostData = onRequestPostData.bind(null, aState);
   aState.client.getRequestPostData(aState.netActor,
                                    onRequestPostData);
 }
 
 function onRequestPostData(aState, aResponse)
diff --git a/toolkit/devtools/webconsole/test/test_network_longstring.html b/toolkit/devtools/webconsole/test/test_network_longstring.html
--- a/toolkit/devtools/webconsole/test/test_network_longstring.html
+++ b/toolkit/devtools/webconsole/test/test_network_longstring.html
@@ -91,17 +91,17 @@ function onNetworkEventUpdate(aState, aT
   switch (aPacket.updateType) {
     case "requestHeaders":
     case "responseHeaders":
       ok(aPacket.headers > 0, "headers > 0");
       ok(aPacket.headersSize > 0, "headersSize > 0");
       break;
     case "requestCookies":
       expectedPacket = {
-        cookies: 2,
+        cookies: 3,
       };
       break;
     case "requestPostData":
       ok(aPacket.dataSize > 0, "dataSize > 0");
       ok(!aPacket.discardRequestBody, "discardRequestBody");
       break;
     case "responseStart":
       expectedPacket = {
@@ -169,21 +169,22 @@ function onRequestHeaders(aState, aRespo
   aState.client.getRequestCookies(aState.netActor,
                                   onRequestCookies);
 }
 
 function onRequestCookies(aState, aResponse)
 {
   info("checking request cookies");
 
-  is(aResponse.cookies.length, 2, "request cookies length");
+  is(aResponse.cookies.length, 3, "request cookies length");
 
   checkHeadersOrCookies(aResponse.cookies, {
     foobar: "fooval",
     omgfoo: "bug768096",
+    badcookie: "bug826798=st3fan",
   });
 
   onRequestPostData = onRequestPostData.bind(null, aState);
   aState.client.getRequestPostData(aState.netActor,
                                    onRequestPostData);
 }
 
 function onRequestPostData(aState, aResponse)
diff --git a/toolkit/devtools/webconsole/test/test_network_post.html b/toolkit/devtools/webconsole/test/test_network_post.html
--- a/toolkit/devtools/webconsole/test/test_network_post.html
+++ b/toolkit/devtools/webconsole/test/test_network_post.html
@@ -84,17 +84,17 @@ function onNetworkEventUpdate(aState, aT
   switch (aPacket.updateType) {
     case "requestHeaders":
     case "responseHeaders":
       ok(aPacket.headers > 0, "headers > 0");
       ok(aPacket.headersSize > 0, "headersSize > 0");
       break;
     case "requestCookies":
       expectedPacket = {
-        cookies: 2,
+        cookies: 3,
       };
       break;
     case "requestPostData":
       ok(aPacket.dataSize > 0, "dataSize > 0");
       ok(!aPacket.discardRequestBody, "discardRequestBody");
       break;
     case "responseStart":
       expectedPacket = {
@@ -162,21 +162,22 @@ function onRequestHeaders(aState, aRespo
   aState.client.getRequestCookies(aState.netActor,
                                   onRequestCookies);
 }
 
 function onRequestCookies(aState, aResponse)
 {
   info("checking request cookies");
 
-  is(aResponse.cookies.length, 2, "request cookies length");
+  is(aResponse.cookies.length, 3, "request cookies length");
 
   checkHeadersOrCookies(aResponse.cookies, {
     foobar: "fooval",
     omgfoo: "bug768096",
+    badcookie: "bug826798=st3fan",
   });
 
   onRequestPostData = onRequestPostData.bind(null, aState);
   aState.client.getRequestPostData(aState.netActor,
                                    onRequestPostData);
 }
 
 function onRequestPostData(aState, aResponse)
